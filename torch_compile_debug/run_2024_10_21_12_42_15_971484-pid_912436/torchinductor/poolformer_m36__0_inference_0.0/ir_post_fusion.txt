op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg2_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg2_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 147*c0 + c1 + 3*c2, {c0: 96, c1: 3, c2: 49}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 14112}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[96, 3, 7, 7], stride=[147, 1, 21, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (14112, 1)
op1.sizes = ([96, 3, 49], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[96, 3, 7, 7], stride=[147, 49, 7, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[96, 3, 7, 7], stride=[147, 1, 21, 3])
class op1_loop_body:
    var_ranges = {z0: 96, z1: 3, z2: 49}
    index0 = 147*z0 + 49*z1 + z2
    index1 = 147*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op2.node.kernel = extern_kernels.convolution


op3_op4_op5: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op3_op4_op5.writes = 
    [   MemoryDep('buf3', c0, {c0: 18944}, None),
        MemoryDep('buf4', c0, {c0: 18944}, None),
        MemoryDep('buf5', c0, {c0: 18944}, None)]
op3_op4_op5.unmet_dependencies = [   MemoryDep('buf2', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op3_op4_op5.met_dependencies = [   MemoryDep('arg1_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op3_op4_op5.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]
op3_op4_op5.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 18944}, None)]
op3.unmet_dependencies = [   MemoryDep('buf2', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op3.met_dependencies = [   MemoryDep('arg1_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (18944, 128)
op3.sizes = ([8, 37, 64], [128])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index3 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf3', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op3_op4_op5.snodes[1] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 18944}, None)]
op4.unmet_dependencies = [   MemoryDep('buf2', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op4.met_dependencies = [   MemoryDep('arg1_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (18944, 128)
op4.sizes = ([8, 37, 64], [128])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index3 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf4', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op3_op4_op5.snodes[2] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 18944}, None)]
op5.unmet_dependencies = [   MemoryDep('buf2', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op5.met_dependencies = [   MemoryDep('arg1_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (18944, 128)
op5.sizes = ([8, 37, 64], [128])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op5_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index3 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf5', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op6_op7_op8: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op6_op7_op8.writes = 
    [   MemoryDep('buf6', c0, {c0: 296}, None),
        MemoryDep('buf7', c0, {c0: 296}, None),
        MemoryDep('buf8', c0, {c0: 296}, None)]
op6_op7_op8.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 18944}, None),
        MemoryDep('buf4', c0, {c0: 18944}, None),
        MemoryDep('buf5', c0, {c0: 18944}, None)]
op6_op7_op8.met_dependencies = []
op6_op7_op8.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op6_op7_op8.snodes[0] =
op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 296}, None)]
op6.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 18944}, None),
        MemoryDep('buf4', c0, {c0: 18944}, None),
        MemoryDep('buf5', c0, {c0: 18944}, None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (296, 64)
op6.sizes = ([296], [64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op6_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf4', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf6', get_index_3, getitem)
        return store_reduction
op6_op7_op8.snodes[1] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 296}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 18944}, None),
        MemoryDep('buf4', c0, {c0: 18944}, None),
        MemoryDep('buf5', c0, {c0: 18944}, None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (296, 64)
op7.sizes = ([296], [64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op7_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf4', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf7', get_index_3, getitem_1)
        return store_reduction
op6_op7_op8.snodes[2] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 296}, None)]
op8.unmet_dependencies = 
    [   MemoryDep('buf3', c0, {c0: 18944}, None),
        MemoryDep('buf4', c0, {c0: 18944}, None),
        MemoryDep('buf5', c0, {c0: 18944}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cuda:0
op8.group.iteration = (296, 64)
op8.sizes = ([296], [64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op8_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf4', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf5', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf8', get_index_3, getitem_2)
        return store_reduction


op9_op10: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op9_op10.writes = [MemoryDep('buf10', c0, {c0: 8}, None), MemoryDep('buf9', c0, {c0: 8}, None)]
op9_op10.unmet_dependencies = 
    [   MemoryDep('buf6', c0, {c0: 296}, None),
        MemoryDep('buf7', c0, {c0: 296}, None),
        MemoryDep('buf8', c0, {c0: 296}, None)]
op9_op10.met_dependencies = []
op9_op10.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf9.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op9_op10.snodes[0] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 8}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf6', c0, {c0: 296}, None),
        MemoryDep('buf7', c0, {c0: 296}, None),
        MemoryDep('buf8', c0, {c0: 296}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf9.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (8, 37)
op9.sizes = ([8], [37])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op9_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf7', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf8', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf9', get_index_3, getitem)
        return store_reduction
op9_op10.snodes[1] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 8}, None)]
op10.unmet_dependencies = 
    [   MemoryDep('buf6', c0, {c0: 296}, None),
        MemoryDep('buf7', c0, {c0: 296}, None),
        MemoryDep('buf8', c0, {c0: 296}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf10.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (8, 37)
op10.sizes = ([8], [37])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op10_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf7', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf8', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf10', get_index_3, getitem_1)
        return store_reduction


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 2408448}, None)]
op12.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 8}, None),
        MemoryDep('buf2', c0, {c0: 2408448}, None),
        MemoryDep('buf9', c0, {c0: 8}, None)]
op12.met_dependencies = 
    [   MemoryDep('arg1_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg3_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg4_1', c1, {c0: 25088, c1: 96}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (2408448, 1)
op12.sizes = ([8, 3136, 96], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op12_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 96}
    index0 = 301056*z0 + 96*z1 + z2
    index1 = z2
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf9', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf10', get_index_3)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg3_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg4_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf12', get_index_6, add_2, None)
        return store


op13_op14: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op13_op14.writes = 
    [   MemoryDep('buf13', c0, {c0: 2408448}, None),
        MemoryDep('buf14', 301056*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 96}, None)]
op13_op14.unmet_dependencies = 
    [   MemoryDep('buf12', c0 + 5280, {c0: 2408448}, None),
        MemoryDep('buf12', c0 + 5376, {c0: 2408448}, None),
        MemoryDep('buf12', c0 + 5472, {c0: 2408448}, None),
        MemoryDep('buf12', c0 + 96, {c0: 2408448}, None),
        MemoryDep('buf12', c0 - 5280, {c0: 2408448}, None),
        MemoryDep('buf12', c0 - 5376, {c0: 2408448}, None),
        MemoryDep('buf12', c0 - 5472, {c0: 2408448}, None),
        MemoryDep('buf12', c0 - 96, {c0: 2408448}, None),
        MemoryDep('buf12', c0, {c0: 2408448}, None),
        MemoryDep('buf2', c0, {c0: 2408448}, None)]
op13_op14.met_dependencies = 
    [   MemoryDep('arg1_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg5_1', c1, {c0: 25088, c1: 96}, None)]
op13_op14.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op13_op14.snodes[0] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 2408448}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf12', c0 + 5280, {c0: 2408448}, None),
        MemoryDep('buf12', c0 + 5376, {c0: 2408448}, None),
        MemoryDep('buf12', c0 + 5472, {c0: 2408448}, None),
        MemoryDep('buf12', c0 + 96, {c0: 2408448}, None),
        MemoryDep('buf12', c0 - 5280, {c0: 2408448}, None),
        MemoryDep('buf12', c0 - 5376, {c0: 2408448}, None),
        MemoryDep('buf12', c0 - 5472, {c0: 2408448}, None),
        MemoryDep('buf12', c0 - 96, {c0: 2408448}, None),
        MemoryDep('buf12', c0, {c0: 2408448}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (2408448, 1)
op13.sizes = ([8, 56, 56, 96], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 56, z3: 96}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 301056*z0 + 5376*z1 + 96*z2 + z3 - 5472
    index3 = z2
    index4 = 301056*z0 + 5376*z1 + 96*z2 + z3 - 5376
    index5 = z2 + 1
    index6 = 301056*z0 + 5376*z1 + 96*z2 + z3 - 5280
    index7 = z1
    index8 = 301056*z0 + 5376*z1 + 96*z2 + z3 - 96
    index9 = 301056*z0 + 5376*z1 + 96*z2 + z3
    index10 = 301056*z0 + 5376*z1 + 96*z2 + z3 + 96
    index11 = z1 + 1
    index12 = 301056*z0 + 5376*z1 + 96*z2 + z3 + 5280
    index13 = 301056*z0 + 5376*z1 + 96*z2 + z3 + 5376
    index14 = 301056*z0 + 5376*z1 + 96*z2 + z3 + 5472
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(56, z2 + 2) - Max(0, z2 - 1)*Min(56, z1 + 2) + Min(56, z1 + 2)*Min(56, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(56, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(56, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(56, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(56, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(56, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(56, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(56, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(56, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(56, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(56, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(56, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(56, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(56, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(56, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(56, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(56, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf13', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf12', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf12', get_index)
        return load
op13_op14.snodes[1] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', 301056*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 96}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf12', c0, {c0: 2408448}, None),
        MemoryDep('buf13', c0, {c0: 2408448}, None),
        MemoryDep('buf2', c0, {c0: 2408448}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg1_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg5_1', c1, {c0: 25088, c1: 96}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf14.users = [
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op14.group.device = cuda:0
op14.group.iteration = (2408448, 1)
op14.sizes = ([8, 3136, 96], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op14_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 96}
    index0 = 301056*z0 + 96*z1 + z2
    index1 = z2
    index2 = 301056*z0 + z1 + 3136*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf13', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf12', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        mul = ops.mul(sub, load_4)
        add_1 = ops.add(add, mul)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf14', get_index_5, add_1, None)
        return store


op15_op16_op17: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op15_op16_op17.writes = 
    [   MemoryDep('buf15', c0, {c0: 296}, None),
        MemoryDep('buf16', c0, {c0: 296}, None),
        MemoryDep('buf17', c0, {c0: 296}, None)]
op15_op16_op17.unmet_dependencies = [   MemoryDep('buf14', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op15_op16_op17.met_dependencies = []
op15_op16_op17.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op15_op16_op17.snodes[0] =
op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 296}, None)]
op15.unmet_dependencies = [   MemoryDep('buf14', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op15.group.device = cuda:0
op15.group.iteration = (296, 8137)
op15.sizes = ([8, 37], [8137])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op15_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf15', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op15_op16_op17.snodes[1] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 296}, None)]
op16.unmet_dependencies = [   MemoryDep('buf14', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (296, 8137)
op16.sizes = ([8, 37], [8137])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op16_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf16', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op15_op16_op17.snodes[2] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 296}, None)]
op17.unmet_dependencies = [   MemoryDep('buf14', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (296, 8137)
op17.sizes = ([8, 37], [8137])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op17_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf14', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op18_op19: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op18_op19.writes = [MemoryDep('buf18', c0, {c0: 8}, None), MemoryDep('buf19', c0, {c0: 8}, None)]
op18_op19.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 296}, None),
        MemoryDep('buf16', c0, {c0: 296}, None),
        MemoryDep('buf17', c0, {c0: 296}, None)]
op18_op19.met_dependencies = []
op18_op19.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18_op19.snodes[0] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 8}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 296}, None),
        MemoryDep('buf16', c0, {c0: 296}, None),
        MemoryDep('buf17', c0, {c0: 296}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (8, 37)
op18.sizes = ([8], [37])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op18_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf16', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_3, getitem)
        return store_reduction
op18_op19.snodes[1] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 8}, None)]
op19.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 296}, None),
        MemoryDep('buf16', c0, {c0: 296}, None),
        MemoryDep('buf17', c0, {c0: 296}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (8, 37)
op19.sizes = ([8], [37])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op19_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf16', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_3, getitem_1)
        return store_reduction


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf14', c0, {c0: 2408448}, None),
        MemoryDep('buf18', c0, {c0: 8}, None),
        MemoryDep('buf19', c0, {c0: 8}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg7_1', c1, {c0: 8, c1: 96}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (2408448, 1)
op21.sizes = ([8, 96, 3136], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op21_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 301056*z0 + z1 + 96*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_2)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg6_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg7_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf21', get_index_5, add_1, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelAlloc)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelAlloc
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.convolution


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 9633792}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 9633792}, None)]
op23.met_dependencies = [MemoryDep('arg9_1', c1, {c0: 25088, c1: 384}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (9633792, 1)
op23.sizes = ([25088, 384], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
class op23_loop_body:
    var_ranges = {z0: 25088, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg9_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf23', get_index_4, mul_2, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg10_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.convolution


op25_op26_op27: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op25_op26_op27.writes = 
    [   MemoryDep('buf25', c0, {c0: 18944}, None),
        MemoryDep('buf26', c0, {c0: 18944}, None),
        MemoryDep('buf27', c0, {c0: 18944}, None)]
op25_op26_op27.unmet_dependencies = 
    [   MemoryDep('buf14', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf24', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op25_op26_op27.met_dependencies = 
    [   MemoryDep('arg11_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg12_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op25_op26_op27.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op25_op26_op27.snodes[0] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 18944}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf14', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf24', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg11_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg12_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (18944, 128)
op25.sizes = ([8, 37, 64], [128])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op25_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg11_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg12_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op25_op26_op27.snodes[1] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 18944}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf14', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf24', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op26.met_dependencies = 
    [   MemoryDep('arg11_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg12_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (18944, 128)
op26.sizes = ([8, 37, 64], [128])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op26_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg11_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg12_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op25_op26_op27.snodes[2] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 18944}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf14', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf24', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg11_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg12_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (18944, 128)
op27.sizes = ([8, 37, 64], [128])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op27_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf27', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg11_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg12_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op28_op29_op30: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op28_op29_op30.writes = 
    [   MemoryDep('buf28', c0, {c0: 296}, None),
        MemoryDep('buf29', c0, {c0: 296}, None),
        MemoryDep('buf30', c0, {c0: 296}, None)]
op28_op29_op30.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 18944}, None),
        MemoryDep('buf26', c0, {c0: 18944}, None),
        MemoryDep('buf27', c0, {c0: 18944}, None)]
op28_op29_op30.met_dependencies = []
op28_op29_op30.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf29.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
]
op28_op29_op30.snodes[0] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 296}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 18944}, None),
        MemoryDep('buf26', c0, {c0: 18944}, None),
        MemoryDep('buf27', c0, {c0: 18944}, None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (296, 64)
op28.sizes = ([296], [64])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op28_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf26', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf28', get_index_3, getitem)
        return store_reduction
op28_op29_op30.snodes[1] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 296}, None)]
op29.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 18944}, None),
        MemoryDep('buf26', c0, {c0: 18944}, None),
        MemoryDep('buf27', c0, {c0: 18944}, None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf29.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (296, 64)
op29.sizes = ([296], [64])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op29_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf26', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf29', get_index_3, getitem_1)
        return store_reduction
op28_op29_op30.snodes[2] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 296}, None)]
op30.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 18944}, None),
        MemoryDep('buf26', c0, {c0: 18944}, None),
        MemoryDep('buf27', c0, {c0: 18944}, None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf30.users = [
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
]
op30.group.device = cuda:0
op30.group.iteration = (296, 64)
op30.sizes = ([296], [64])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op30_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf26', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf30', get_index_3, getitem_2)
        return store_reduction


op31_op32: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op31_op32.writes = [MemoryDep('buf31', c0, {c0: 8}, None), MemoryDep('buf32', c0, {c0: 8}, None)]
op31_op32.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 296}, None),
        MemoryDep('buf29', c0, {c0: 296}, None),
        MemoryDep('buf30', c0, {c0: 296}, None)]
op31_op32.met_dependencies = []
op31_op32.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf31.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf32.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op31_op32.snodes[0] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 8}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 296}, None),
        MemoryDep('buf29', c0, {c0: 296}, None),
        MemoryDep('buf30', c0, {c0: 296}, None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf31.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (8, 37)
op31.sizes = ([8], [37])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op31_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf29', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf30', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf31', get_index_3, getitem)
        return store_reduction
op31_op32.snodes[1] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 8}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 296}, None),
        MemoryDep('buf29', c0, {c0: 296}, None),
        MemoryDep('buf30', c0, {c0: 296}, None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf32.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (8, 37)
op32.sizes = ([8], [37])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op32_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf29', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf30', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf32', get_index_3, getitem_1)
        return store_reduction


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 2408448}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf14', c0, {c0: 2408448}, None),
        MemoryDep('buf24', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf31', c0, {c0: 8}, None),
        MemoryDep('buf32', c0, {c0: 8}, None)]
op34.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg12_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg13_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg14_1', c1, {c0: 8, c1: 96}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (2408448, 1)
op34.sizes = ([8, 96, 3136], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op34_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg11_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg12_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf31', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf32', get_index_5)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg13_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg14_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf34', get_index_8, add_3, None)
        return store


op35_op36: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op35_op36.writes = 
    [   MemoryDep('buf35', c0, {c0: 2408448}, None),
        MemoryDep('buf36', c0, {c0: 2408448}, None)]
op35_op36.unmet_dependencies = 
    [   MemoryDep('buf14', c0, {c0: 2408448}, None),
        MemoryDep('buf24', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf34', c0 + 1, {c0: 2408448}, None),
        MemoryDep('buf34', c0 + 55, {c0: 2408448}, None),
        MemoryDep('buf34', c0 + 56, {c0: 2408448}, None),
        MemoryDep('buf34', c0 + 57, {c0: 2408448}, None),
        MemoryDep('buf34', c0 - 1, {c0: 2408448}, None),
        MemoryDep('buf34', c0 - 55, {c0: 2408448}, None),
        MemoryDep('buf34', c0 - 56, {c0: 2408448}, None),
        MemoryDep('buf34', c0 - 57, {c0: 2408448}, None),
        MemoryDep('buf34', c0, {c0: 2408448}, None)]
op35_op36.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg12_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg15_1', c1, {c0: 8, c1: 96}, None)]
op35_op36.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op35_op36.snodes[0] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 2408448}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf34', c0 + 1, {c0: 2408448}, None),
        MemoryDep('buf34', c0 + 55, {c0: 2408448}, None),
        MemoryDep('buf34', c0 + 56, {c0: 2408448}, None),
        MemoryDep('buf34', c0 + 57, {c0: 2408448}, None),
        MemoryDep('buf34', c0 - 1, {c0: 2408448}, None),
        MemoryDep('buf34', c0 - 55, {c0: 2408448}, None),
        MemoryDep('buf34', c0 - 56, {c0: 2408448}, None),
        MemoryDep('buf34', c0 - 57, {c0: 2408448}, None),
        MemoryDep('buf34', c0, {c0: 2408448}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (2408448, 1)
op35.sizes = ([768, 56, 56], [])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op35_loop_body:
    var_ranges = {z0: 768, z1: 56, z2: 56}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 3136*z0 + 56*z1 + z2 - 57
    index3 = z2
    index4 = 3136*z0 + 56*z1 + z2 - 56
    index5 = z2 + 1
    index6 = 3136*z0 + 56*z1 + z2 - 55
    index7 = z1
    index8 = 3136*z0 + 56*z1 + z2 - 1
    index9 = 3136*z0 + 56*z1 + z2
    index10 = 3136*z0 + 56*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 3136*z0 + 56*z1 + z2 + 55
    index13 = 3136*z0 + 56*z1 + z2 + 56
    index14 = 3136*z0 + 56*z1 + z2 + 57
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(56, z2 + 2) - Max(0, z2 - 1)*Min(56, z1 + 2) + Min(56, z1 + 2)*Min(56, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(56, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(56, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(56, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(56, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(56, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(56, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(56, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(56, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(56, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(56, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(56, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(56, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(56, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(56, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(56, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(56, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf35', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf34', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf34', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf34', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf34', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf34', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf34', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf34', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf34', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf34', get_index)
        return load
op35_op36.snodes[1] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 2408448}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf14', c0, {c0: 2408448}, None),
        MemoryDep('buf24', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf34', c0, {c0: 2408448}, None),
        MemoryDep('buf35', c0, {c0: 2408448}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg12_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg15_1', c1, {c0: 8, c1: 96}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf36.users = [
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (2408448, 1)
op36.sizes = ([8, 96, 3136], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op36_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg11_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg12_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf35', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf34', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg15_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf36', get_index_7, add_2, None)
        return store


op37_op38_op39: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op37_op38_op39.writes = 
    [   MemoryDep('buf37', c0, {c0: 296}, None),
        MemoryDep('buf38', c0, {c0: 296}, None),
        MemoryDep('buf39', c0, {c0: 296}, None)]
op37_op38_op39.unmet_dependencies = [   MemoryDep('buf36', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op37_op38_op39.met_dependencies = []
op37_op38_op39.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf37.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf38.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
]
op37_op38_op39.snodes[0] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 296}, None)]
op37.unmet_dependencies = [   MemoryDep('buf36', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf37.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (296, 8137)
op37.sizes = ([8, 37], [8137])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op37_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf37', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf36', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op37_op38_op39.snodes[1] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 296}, None)]
op38.unmet_dependencies = [   MemoryDep('buf36', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf38.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
]
op38.group.device = cuda:0
op38.group.iteration = (296, 8137)
op38.sizes = ([8, 37], [8137])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op38_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf38', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf36', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op37_op38_op39.snodes[2] =
op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 296}, None)]
op39.unmet_dependencies = [   MemoryDep('buf36', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (296, 8137)
op39.sizes = ([8, 37], [8137])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf39', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf36', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op40_op41: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op40_op41.writes = [MemoryDep('buf40', c0, {c0: 8}, None), MemoryDep('buf41', c0, {c0: 8}, None)]
op40_op41.unmet_dependencies = 
    [   MemoryDep('buf37', c0, {c0: 296}, None),
        MemoryDep('buf38', c0, {c0: 296}, None),
        MemoryDep('buf39', c0, {c0: 296}, None)]
op40_op41.met_dependencies = []
op40_op41.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op40_op41.snodes[0] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 8}, None)]
op40.unmet_dependencies = 
    [   MemoryDep('buf37', c0, {c0: 296}, None),
        MemoryDep('buf38', c0, {c0: 296}, None),
        MemoryDep('buf39', c0, {c0: 296}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (8, 37)
op40.sizes = ([8], [37])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op40_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf38', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf39', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf40', get_index_3, getitem)
        return store_reduction
op40_op41.snodes[1] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 8}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf37', c0, {c0: 296}, None),
        MemoryDep('buf38', c0, {c0: 296}, None),
        MemoryDep('buf39', c0, {c0: 296}, None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (8, 37)
op41.sizes = ([8], [37])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op41_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf38', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf39', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf41', get_index_3, getitem_1)
        return store_reduction


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 2408448}, None),
        MemoryDep('buf40', c0, {c0: 8}, None),
        MemoryDep('buf41', c0, {c0: 8}, None)]
op43.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg17_1', c1, {c0: 8, c1: 96}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (2408448, 1)
op43.sizes = ([8, 96, 3136], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op43_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 301056*z0 + z1 + 96*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf40', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf41', get_index_2)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg16_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg17_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf43', get_index_5, add_1, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelAlloc)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelAlloc
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.convolution


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 9633792}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 9633792}, None)]
op45.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 25088, c1: 384}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (9633792, 1)
op45.sizes = ([25088, 384], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
class op45_loop_body:
    var_ranges = {z0: 25088, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf44', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf45', get_index_4, mul_2, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
    ]
]
op46.node.kernel = extern_kernels.convolution


op47_op48_op49: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op47_op48_op49.writes = 
    [   MemoryDep('buf47', c0, {c0: 18944}, None),
        MemoryDep('buf48', c0, {c0: 18944}, None),
        MemoryDep('buf49', c0, {c0: 18944}, None)]
op47_op48_op49.unmet_dependencies = 
    [   MemoryDep('buf36', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf46', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op47_op48_op49.met_dependencies = 
    [   MemoryDep('arg21_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg22_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op47_op48_op49.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op47_op48_op49.snodes[0] =
op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 18944}, None)]
op47.unmet_dependencies = 
    [   MemoryDep('buf36', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf46', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg21_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg22_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (18944, 128)
op47.sizes = ([8, 37, 64], [128])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op47_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf47', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg21_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg22_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op47_op48_op49.snodes[1] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 18944}, None)]
op48.unmet_dependencies = 
    [   MemoryDep('buf36', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf46', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op48.met_dependencies = 
    [   MemoryDep('arg21_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg22_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (18944, 128)
op48.sizes = ([8, 37, 64], [128])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op48_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf48', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg21_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg22_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op47_op48_op49.snodes[2] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 18944}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf36', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf46', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op49.met_dependencies = 
    [   MemoryDep('arg21_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg22_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op49.group.device = cuda:0
op49.group.iteration = (18944, 128)
op49.sizes = ([8, 37, 64], [128])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf49', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg21_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg22_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op50_op51_op52: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op50_op51_op52.writes = 
    [   MemoryDep('buf50', c0, {c0: 296}, None),
        MemoryDep('buf51', c0, {c0: 296}, None),
        MemoryDep('buf52', c0, {c0: 296}, None)]
op50_op51_op52.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 18944}, None),
        MemoryDep('buf48', c0, {c0: 18944}, None),
        MemoryDep('buf49', c0, {c0: 18944}, None)]
op50_op51_op52.met_dependencies = []
op50_op51_op52.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
    ]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
    ]
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
    ]
]
op50_op51_op52.snodes[0] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 296}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 18944}, None),
        MemoryDep('buf48', c0, {c0: 18944}, None),
        MemoryDep('buf49', c0, {c0: 18944}, None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (296, 64)
op50.sizes = ([296], [64])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op50_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf49', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf50', get_index_3, getitem)
        return store_reduction
op50_op51_op52.snodes[1] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 296}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 18944}, None),
        MemoryDep('buf48', c0, {c0: 18944}, None),
        MemoryDep('buf49', c0, {c0: 18944}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (296, 64)
op51.sizes = ([296], [64])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op51_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf49', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf51', get_index_3, getitem_1)
        return store_reduction
op50_op51_op52.snodes[2] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 296}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 18944}, None),
        MemoryDep('buf48', c0, {c0: 18944}, None),
        MemoryDep('buf49', c0, {c0: 18944}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (296, 64)
op52.sizes = ([296], [64])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op52_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf49', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf52', get_index_3, getitem_2)
        return store_reduction


op53_op54: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op53_op54.writes = [MemoryDep('buf53', c0, {c0: 8}, None), MemoryDep('buf54', c0, {c0: 8}, None)]
op53_op54.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 296}, None),
        MemoryDep('buf51', c0, {c0: 296}, None),
        MemoryDep('buf52', c0, {c0: 296}, None)]
op53_op54.met_dependencies = []
op53_op54.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf53.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op53_op54.snodes[0] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 8}, None)]
op53.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 296}, None),
        MemoryDep('buf51', c0, {c0: 296}, None),
        MemoryDep('buf52', c0, {c0: 296}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf53.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (8, 37)
op53.sizes = ([8], [37])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op53_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf51', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf52', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf53', get_index_3, getitem)
        return store_reduction
op53_op54.snodes[1] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 8}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 296}, None),
        MemoryDep('buf51', c0, {c0: 296}, None),
        MemoryDep('buf52', c0, {c0: 296}, None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (8, 37)
op54.sizes = ([8], [37])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op54_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf51', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf52', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf54', get_index_3, getitem_1)
        return store_reduction


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 2408448}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 2408448}, None),
        MemoryDep('buf46', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf53', c0, {c0: 8}, None),
        MemoryDep('buf54', c0, {c0: 8}, None)]
op56.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg22_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg23_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg24_1', c1, {c0: 8, c1: 96}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (2408448, 1)
op56.sizes = ([8, 96, 3136], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op56_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg21_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg22_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf53', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf54', get_index_5)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg23_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg24_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf56', get_index_8, add_3, None)
        return store


op57_op58: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op57_op58.writes = 
    [   MemoryDep('buf57', c0, {c0: 2408448}, None),
        MemoryDep('buf58', c0, {c0: 2408448}, None)]
op57_op58.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 2408448}, None),
        MemoryDep('buf46', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf56', c0 + 1, {c0: 2408448}, None),
        MemoryDep('buf56', c0 + 55, {c0: 2408448}, None),
        MemoryDep('buf56', c0 + 56, {c0: 2408448}, None),
        MemoryDep('buf56', c0 + 57, {c0: 2408448}, None),
        MemoryDep('buf56', c0 - 1, {c0: 2408448}, None),
        MemoryDep('buf56', c0 - 55, {c0: 2408448}, None),
        MemoryDep('buf56', c0 - 56, {c0: 2408448}, None),
        MemoryDep('buf56', c0 - 57, {c0: 2408448}, None),
        MemoryDep('buf56', c0, {c0: 2408448}, None)]
op57_op58.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg22_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg25_1', c1, {c0: 8, c1: 96}, None)]
op57_op58.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False),
    ]
]
op57_op58.snodes[0] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 2408448}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf56', c0 + 1, {c0: 2408448}, None),
        MemoryDep('buf56', c0 + 55, {c0: 2408448}, None),
        MemoryDep('buf56', c0 + 56, {c0: 2408448}, None),
        MemoryDep('buf56', c0 + 57, {c0: 2408448}, None),
        MemoryDep('buf56', c0 - 1, {c0: 2408448}, None),
        MemoryDep('buf56', c0 - 55, {c0: 2408448}, None),
        MemoryDep('buf56', c0 - 56, {c0: 2408448}, None),
        MemoryDep('buf56', c0 - 57, {c0: 2408448}, None),
        MemoryDep('buf56', c0, {c0: 2408448}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (2408448, 1)
op57.sizes = ([768, 56, 56], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op57_loop_body:
    var_ranges = {z0: 768, z1: 56, z2: 56}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 3136*z0 + 56*z1 + z2 - 57
    index3 = z2
    index4 = 3136*z0 + 56*z1 + z2 - 56
    index5 = z2 + 1
    index6 = 3136*z0 + 56*z1 + z2 - 55
    index7 = z1
    index8 = 3136*z0 + 56*z1 + z2 - 1
    index9 = 3136*z0 + 56*z1 + z2
    index10 = 3136*z0 + 56*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 3136*z0 + 56*z1 + z2 + 55
    index13 = 3136*z0 + 56*z1 + z2 + 56
    index14 = 3136*z0 + 56*z1 + z2 + 57
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(56, z2 + 2) - Max(0, z2 - 1)*Min(56, z1 + 2) + Min(56, z1 + 2)*Min(56, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(56, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(56, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(56, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(56, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(56, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(56, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(56, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(56, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(56, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(56, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(56, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(56, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(56, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(56, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(56, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(56, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf57', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf56', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf56', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf56', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf56', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf56', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf56', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf56', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf56', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf56', get_index)
        return load
op57_op58.snodes[1] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 2408448}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 2408448}, None),
        MemoryDep('buf46', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf56', c0, {c0: 2408448}, None),
        MemoryDep('buf57', c0, {c0: 2408448}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg22_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg25_1', c1, {c0: 8, c1: 96}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (2408448, 1)
op58.sizes = ([8, 96, 3136], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op58_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf46', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg21_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg22_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf57', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf56', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg25_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf58', get_index_7, add_2, None)
        return store


op59_op60_op61: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op59_op60_op61.writes = 
    [   MemoryDep('buf59', c0, {c0: 296}, None),
        MemoryDep('buf60', c0, {c0: 296}, None),
        MemoryDep('buf61', c0, {c0: 296}, None)]
op59_op60_op61.unmet_dependencies = [   MemoryDep('buf58', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op59_op60_op61.met_dependencies = []
op59_op60_op61.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op59_op60_op61.snodes[0] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 296}, None)]
op59.unmet_dependencies = [   MemoryDep('buf58', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (296, 8137)
op59.sizes = ([8, 37], [8137])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf59', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op59_op60_op61.snodes[1] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 296}, None)]
op60.unmet_dependencies = [   MemoryDep('buf58', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf60.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op60.group.device = cuda:0
op60.group.iteration = (296, 8137)
op60.sizes = ([8, 37], [8137])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op60_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf60', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op59_op60_op61.snodes[2] =
op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 296}, None)]
op61.unmet_dependencies = [   MemoryDep('buf58', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op61.group.device = cuda:0
op61.group.iteration = (296, 8137)
op61.sizes = ([8, 37], [8137])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op61_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf61', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf58', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op62_op63: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op62_op63.writes = [MemoryDep('buf62', c0, {c0: 8}, None), MemoryDep('buf63', c0, {c0: 8}, None)]
op62_op63.unmet_dependencies = 
    [   MemoryDep('buf59', c0, {c0: 296}, None),
        MemoryDep('buf60', c0, {c0: 296}, None),
        MemoryDep('buf61', c0, {c0: 296}, None)]
op62_op63.met_dependencies = []
op62_op63.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op62_op63.snodes[0] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 8}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf59', c0, {c0: 296}, None),
        MemoryDep('buf60', c0, {c0: 296}, None),
        MemoryDep('buf61', c0, {c0: 296}, None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (8, 37)
op62.sizes = ([8], [37])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op62_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf62', get_index_3, getitem)
        return store_reduction
op62_op63.snodes[1] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 8}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf59', c0, {c0: 296}, None),
        MemoryDep('buf60', c0, {c0: 296}, None),
        MemoryDep('buf61', c0, {c0: 296}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (8, 37)
op63.sizes = ([8], [37])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op63_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf63', get_index_3, getitem_1)
        return store_reduction


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 2408448}, None),
        MemoryDep('buf62', c0, {c0: 8}, None),
        MemoryDep('buf63', c0, {c0: 8}, None)]
op65.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg27_1', c1, {c0: 8, c1: 96}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (2408448, 1)
op65.sizes = ([8, 96, 3136], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op65_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 301056*z0 + z1 + 96*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf62', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf63', get_index_2)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg26_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg27_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf65', get_index_5, add_1, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelAlloc)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelAlloc
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.convolution


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 9633792}, None)]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 9633792}, None)]
op67.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 25088, c1: 384}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (9633792, 1)
op67.sizes = ([25088, 384], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
class op67_loop_body:
    var_ranges = {z0: 25088, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf66', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf67', get_index_4, mul_2, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelAlloc)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelAlloc
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf68.users = [
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
    ]
]
op68.node.kernel = extern_kernels.convolution


op69_op70_op71: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op69_op70_op71.writes = 
    [   MemoryDep('buf69', c0, {c0: 18944}, None),
        MemoryDep('buf70', c0, {c0: 18944}, None),
        MemoryDep('buf71', c0, {c0: 18944}, None)]
op69_op70_op71.unmet_dependencies = 
    [   MemoryDep('buf58', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf68', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op69_op70_op71.met_dependencies = 
    [   MemoryDep('arg31_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg32_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op69_op70_op71.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf71.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
]
op69_op70_op71.snodes[0] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 18944}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf58', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf68', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op69.met_dependencies = 
    [   MemoryDep('arg31_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg32_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
]
op69.group.device = cuda:0
op69.group.iteration = (18944, 128)
op69.sizes = ([8, 37, 64], [128])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op69_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf69', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg32_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op69_op70_op71.snodes[1] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 18944}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf58', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf68', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op70.met_dependencies = 
    [   MemoryDep('arg31_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg32_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (18944, 128)
op70.sizes = ([8, 37, 64], [128])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op70_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf70', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg32_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op69_op70_op71.snodes[2] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 18944}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf58', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf68', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg31_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg32_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf71.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
]
op71.group.device = cuda:0
op71.group.iteration = (18944, 128)
op71.sizes = ([8, 37, 64], [128])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op71_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf71', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg32_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op72_op73_op74: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op72_op73_op74.writes = 
    [   MemoryDep('buf72', c0, {c0: 296}, None),
        MemoryDep('buf73', c0, {c0: 296}, None),
        MemoryDep('buf74', c0, {c0: 296}, None)]
op72_op73_op74.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 18944}, None),
        MemoryDep('buf70', c0, {c0: 18944}, None),
        MemoryDep('buf71', c0, {c0: 18944}, None)]
op72_op73_op74.met_dependencies = []
op72_op73_op74.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
]
op72_op73_op74.snodes[0] =
op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 296}, None)]
op72.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 18944}, None),
        MemoryDep('buf70', c0, {c0: 18944}, None),
        MemoryDep('buf71', c0, {c0: 18944}, None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
]
op72.group.device = cuda:0
op72.group.iteration = (296, 64)
op72.sizes = ([296], [64])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op72_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf71', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf72', get_index_3, getitem)
        return store_reduction
op72_op73_op74.snodes[1] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 296}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 18944}, None),
        MemoryDep('buf70', c0, {c0: 18944}, None),
        MemoryDep('buf71', c0, {c0: 18944}, None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (296, 64)
op73.sizes = ([296], [64])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op73_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf71', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf73', get_index_3, getitem_1)
        return store_reduction
op72_op73_op74.snodes[2] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 296}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 18944}, None),
        MemoryDep('buf70', c0, {c0: 18944}, None),
        MemoryDep('buf71', c0, {c0: 18944}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (296, 64)
op74.sizes = ([296], [64])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op74_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf70', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf71', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf74', get_index_3, getitem_2)
        return store_reduction


op75_op76: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op75_op76.writes = [MemoryDep('buf75', c0, {c0: 8}, None), MemoryDep('buf76', c0, {c0: 8}, None)]
op75_op76.unmet_dependencies = 
    [   MemoryDep('buf72', c0, {c0: 296}, None),
        MemoryDep('buf73', c0, {c0: 296}, None),
        MemoryDep('buf74', c0, {c0: 296}, None)]
op75_op76.met_dependencies = []
op75_op76.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf75.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op75_op76.snodes[0] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 8}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf72', c0, {c0: 296}, None),
        MemoryDep('buf73', c0, {c0: 296}, None),
        MemoryDep('buf74', c0, {c0: 296}, None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf75.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (8, 37)
op75.sizes = ([8], [37])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op75_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf74', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem)
        return store_reduction
op75_op76.snodes[1] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 8}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf72', c0, {c0: 296}, None),
        MemoryDep('buf73', c0, {c0: 296}, None),
        MemoryDep('buf74', c0, {c0: 296}, None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (8, 37)
op76.sizes = ([8], [37])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op76_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf73', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf74', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf76', get_index_3, getitem_1)
        return store_reduction


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 2408448}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 2408448}, None),
        MemoryDep('buf68', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf75', c0, {c0: 8}, None),
        MemoryDep('buf76', c0, {c0: 8}, None)]
op78.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg32_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg33_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg34_1', c1, {c0: 8, c1: 96}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (2408448, 1)
op78.sizes = ([8, 96, 3136], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op78_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg32_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf75', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf76', get_index_5)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg33_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg34_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf78', get_index_8, add_3, None)
        return store


op79_op80: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op79_op80.writes = 
    [   MemoryDep('buf79', c0, {c0: 2408448}, None),
        MemoryDep('buf80', c0, {c0: 2408448}, None)]
op79_op80.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 2408448}, None),
        MemoryDep('buf68', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf78', c0 + 1, {c0: 2408448}, None),
        MemoryDep('buf78', c0 + 55, {c0: 2408448}, None),
        MemoryDep('buf78', c0 + 56, {c0: 2408448}, None),
        MemoryDep('buf78', c0 + 57, {c0: 2408448}, None),
        MemoryDep('buf78', c0 - 1, {c0: 2408448}, None),
        MemoryDep('buf78', c0 - 55, {c0: 2408448}, None),
        MemoryDep('buf78', c0 - 56, {c0: 2408448}, None),
        MemoryDep('buf78', c0 - 57, {c0: 2408448}, None),
        MemoryDep('buf78', c0, {c0: 2408448}, None)]
op79_op80.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg32_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg35_1', c1, {c0: 8, c1: 96}, None)]
op79_op80.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False)]
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op79_op80.snodes[0] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 2408448}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf78', c0 + 1, {c0: 2408448}, None),
        MemoryDep('buf78', c0 + 55, {c0: 2408448}, None),
        MemoryDep('buf78', c0 + 56, {c0: 2408448}, None),
        MemoryDep('buf78', c0 + 57, {c0: 2408448}, None),
        MemoryDep('buf78', c0 - 1, {c0: 2408448}, None),
        MemoryDep('buf78', c0 - 55, {c0: 2408448}, None),
        MemoryDep('buf78', c0 - 56, {c0: 2408448}, None),
        MemoryDep('buf78', c0 - 57, {c0: 2408448}, None),
        MemoryDep('buf78', c0, {c0: 2408448}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op80'), can_inplace=True, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (2408448, 1)
op79.sizes = ([768, 56, 56], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op79_loop_body:
    var_ranges = {z0: 768, z1: 56, z2: 56}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 3136*z0 + 56*z1 + z2 - 57
    index3 = z2
    index4 = 3136*z0 + 56*z1 + z2 - 56
    index5 = z2 + 1
    index6 = 3136*z0 + 56*z1 + z2 - 55
    index7 = z1
    index8 = 3136*z0 + 56*z1 + z2 - 1
    index9 = 3136*z0 + 56*z1 + z2
    index10 = 3136*z0 + 56*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 3136*z0 + 56*z1 + z2 + 55
    index13 = 3136*z0 + 56*z1 + z2 + 56
    index14 = 3136*z0 + 56*z1 + z2 + 57
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(56, z2 + 2) - Max(0, z2 - 1)*Min(56, z1 + 2) + Min(56, z1 + 2)*Min(56, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(56, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(56, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(56, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(56, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(56, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(56, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(56, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(56, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(56, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(56, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(56, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(56, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(56, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(56, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(56, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(56, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf79', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf78', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf78', get_index)
        return load
op79_op80.snodes[1] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 2408448}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 2408448}, None),
        MemoryDep('buf68', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf78', c0, {c0: 2408448}, None),
        MemoryDep('buf79', c0, {c0: 2408448}, None)]
op80.met_dependencies = 
    [   MemoryDep('arg31_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg32_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg35_1', c1, {c0: 8, c1: 96}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op80.group.device = cuda:0
op80.group.iteration = (2408448, 1)
op80.sizes = ([8, 96, 3136], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op80_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf68', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg31_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg32_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf79', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf78', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg35_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf80', get_index_7, add_2, None)
        return store


op81_op82_op83: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op81_op82_op83.writes = 
    [   MemoryDep('buf81', c0, {c0: 296}, None),
        MemoryDep('buf82', c0, {c0: 296}, None),
        MemoryDep('buf83', c0, {c0: 296}, None)]
op81_op82_op83.unmet_dependencies = [   MemoryDep('buf80', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op81_op82_op83.met_dependencies = []
op81_op82_op83.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op81_op82_op83.snodes[0] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 296}, None)]
op81.unmet_dependencies = [   MemoryDep('buf80', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (296, 8137)
op81.sizes = ([8, 37], [8137])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op81_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf81', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf80', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op81_op82_op83.snodes[1] =
op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 296}, None)]
op82.unmet_dependencies = [   MemoryDep('buf80', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op82.group.device = cuda:0
op82.group.iteration = (296, 8137)
op82.sizes = ([8, 37], [8137])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op82_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf82', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf80', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op81_op82_op83.snodes[2] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 296}, None)]
op83.unmet_dependencies = [   MemoryDep('buf80', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (296, 8137)
op83.sizes = ([8, 37], [8137])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op83_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf83', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf80', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op84_op85: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op84_op85.writes = [MemoryDep('buf84', c0, {c0: 8}, None), MemoryDep('buf85', c0, {c0: 8}, None)]
op84_op85.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 296}, None),
        MemoryDep('buf82', c0, {c0: 296}, None),
        MemoryDep('buf83', c0, {c0: 296}, None)]
op84_op85.met_dependencies = []
op84_op85.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf84.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op84_op85.snodes[0] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 8}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 296}, None),
        MemoryDep('buf82', c0, {c0: 296}, None),
        MemoryDep('buf83', c0, {c0: 296}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf84.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (8, 37)
op84.sizes = ([8], [37])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op84_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf82', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf83', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf84', get_index_3, getitem)
        return store_reduction
op84_op85.snodes[1] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 8}, None)]
op85.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 296}, None),
        MemoryDep('buf82', c0, {c0: 296}, None),
        MemoryDep('buf83', c0, {c0: 296}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf85.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (8, 37)
op85.sizes = ([8], [37])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op85_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf82', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf83', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf85', get_index_3, getitem_1)
        return store_reduction


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf80', c0, {c0: 2408448}, None),
        MemoryDep('buf84', c0, {c0: 8}, None),
        MemoryDep('buf85', c0, {c0: 8}, None)]
op87.met_dependencies = 
    [   MemoryDep('arg36_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg37_1', c1, {c0: 8, c1: 96}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (2408448, 1)
op87.sizes = ([8, 96, 3136], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op87_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 301056*z0 + z1 + 96*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf84', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf85', get_index_2)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg36_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg37_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf87', get_index_5, add_1, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelAlloc)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelAlloc
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.node.kernel = extern_kernels.convolution


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 9633792}, None)]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 9633792}, None)]
op89.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 25088, c1: 384}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (9633792, 1)
op89.sizes = ([25088, 384], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
class op89_loop_body:
    var_ranges = {z0: 25088, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf88', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf89', get_index_4, mul_2, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelAlloc)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelAlloc
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
    ]
]
op90.node.kernel = extern_kernels.convolution


op91_op92_op93: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op91_op92_op93.writes = 
    [   MemoryDep('buf91', c0, {c0: 18944}, None),
        MemoryDep('buf92', c0, {c0: 18944}, None),
        MemoryDep('buf93', c0, {c0: 18944}, None)]
op91_op92_op93.unmet_dependencies = 
    [   MemoryDep('buf80', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf90', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op91_op92_op93.met_dependencies = 
    [   MemoryDep('arg41_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg42_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op91_op92_op93.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
]
op91_op92_op93.snodes[0] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 18944}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf80', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf90', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op91.met_dependencies = 
    [   MemoryDep('arg41_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg42_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
]
op91.group.device = cuda:0
op91.group.iteration = (18944, 128)
op91.sizes = ([8, 37, 64], [128])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op91_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf91', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf90', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg41_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg42_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op91_op92_op93.snodes[1] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 18944}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf80', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf90', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg41_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg42_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (18944, 128)
op92.sizes = ([8, 37, 64], [128])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op92_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf92', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf90', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg41_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg42_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op91_op92_op93.snodes[2] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 18944}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf80', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf90', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg41_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg42_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (18944, 128)
op93.sizes = ([8, 37, 64], [128])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op93_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf93', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf90', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg41_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg42_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op94_op95_op96: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op94_op95_op96.writes = 
    [   MemoryDep('buf94', c0, {c0: 296}, None),
        MemoryDep('buf95', c0, {c0: 296}, None),
        MemoryDep('buf96', c0, {c0: 296}, None)]
op94_op95_op96.unmet_dependencies = 
    [   MemoryDep('buf91', c0, {c0: 18944}, None),
        MemoryDep('buf92', c0, {c0: 18944}, None),
        MemoryDep('buf93', c0, {c0: 18944}, None)]
op94_op95_op96.met_dependencies = []
op94_op95_op96.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op94_op95_op96.snodes[0] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 296}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf91', c0, {c0: 18944}, None),
        MemoryDep('buf92', c0, {c0: 18944}, None),
        MemoryDep('buf93', c0, {c0: 18944}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (296, 64)
op94.sizes = ([296], [64])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op94_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_3, getitem)
        return store_reduction
op94_op95_op96.snodes[1] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 296}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf91', c0, {c0: 18944}, None),
        MemoryDep('buf92', c0, {c0: 18944}, None),
        MemoryDep('buf93', c0, {c0: 18944}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf95.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (296, 64)
op95.sizes = ([296], [64])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op95_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_3, getitem_1)
        return store_reduction
op94_op95_op96.snodes[2] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 296}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf91', c0, {c0: 18944}, None),
        MemoryDep('buf92', c0, {c0: 18944}, None),
        MemoryDep('buf93', c0, {c0: 18944}, None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (296, 64)
op96.sizes = ([296], [64])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op96_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf92', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf96', get_index_3, getitem_2)
        return store_reduction


op97_op98: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op97_op98.writes = [MemoryDep('buf97', c0, {c0: 8}, None), MemoryDep('buf98', c0, {c0: 8}, None)]
op97_op98.unmet_dependencies = 
    [   MemoryDep('buf94', c0, {c0: 296}, None),
        MemoryDep('buf95', c0, {c0: 296}, None),
        MemoryDep('buf96', c0, {c0: 296}, None)]
op97_op98.met_dependencies = []
op97_op98.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf97.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf98.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op97_op98.snodes[0] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 8}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf94', c0, {c0: 296}, None),
        MemoryDep('buf95', c0, {c0: 296}, None),
        MemoryDep('buf96', c0, {c0: 296}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf97.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (8, 37)
op97.sizes = ([8], [37])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op97_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf95', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf96', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf97', get_index_3, getitem)
        return store_reduction
op97_op98.snodes[1] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 8}, None)]
op98.unmet_dependencies = 
    [   MemoryDep('buf94', c0, {c0: 296}, None),
        MemoryDep('buf95', c0, {c0: 296}, None),
        MemoryDep('buf96', c0, {c0: 296}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf98.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (8, 37)
op98.sizes = ([8], [37])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op98_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf95', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf96', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf98', get_index_3, getitem_1)
        return store_reduction


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 2408448}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf80', c0, {c0: 2408448}, None),
        MemoryDep('buf90', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf97', c0, {c0: 8}, None),
        MemoryDep('buf98', c0, {c0: 8}, None)]
op100.met_dependencies = 
    [   MemoryDep('arg41_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg42_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg43_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg44_1', c1, {c0: 8, c1: 96}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf100.users = [
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op100.group.device = cuda:0
op100.group.iteration = (2408448, 1)
op100.sizes = ([8, 96, 3136], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op100_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf90', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg41_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg42_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf97', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf98', get_index_5)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg43_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg44_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf100', get_index_8, add_3, None)
        return store


op101_op102: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op101_op102.writes = 
    [   MemoryDep('buf101', c0, {c0: 2408448}, None),
        MemoryDep('buf102', c0, {c0: 2408448}, None)]
op101_op102.unmet_dependencies = 
    [   MemoryDep('buf100', c0 + 1, {c0: 2408448}, None),
        MemoryDep('buf100', c0 + 55, {c0: 2408448}, None),
        MemoryDep('buf100', c0 + 56, {c0: 2408448}, None),
        MemoryDep('buf100', c0 + 57, {c0: 2408448}, None),
        MemoryDep('buf100', c0 - 1, {c0: 2408448}, None),
        MemoryDep('buf100', c0 - 55, {c0: 2408448}, None),
        MemoryDep('buf100', c0 - 56, {c0: 2408448}, None),
        MemoryDep('buf100', c0 - 57, {c0: 2408448}, None),
        MemoryDep('buf100', c0, {c0: 2408448}, None),
        MemoryDep('buf80', c0, {c0: 2408448}, None),
        MemoryDep('buf90', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None)]
op101_op102.met_dependencies = 
    [   MemoryDep('arg41_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg42_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg45_1', c1, {c0: 8, c1: 96}, None)]
op101_op102.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf102.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op101_op102.snodes[0] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 2408448}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf100', c0 + 1, {c0: 2408448}, None),
        MemoryDep('buf100', c0 + 55, {c0: 2408448}, None),
        MemoryDep('buf100', c0 + 56, {c0: 2408448}, None),
        MemoryDep('buf100', c0 + 57, {c0: 2408448}, None),
        MemoryDep('buf100', c0 - 1, {c0: 2408448}, None),
        MemoryDep('buf100', c0 - 55, {c0: 2408448}, None),
        MemoryDep('buf100', c0 - 56, {c0: 2408448}, None),
        MemoryDep('buf100', c0 - 57, {c0: 2408448}, None),
        MemoryDep('buf100', c0, {c0: 2408448}, None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (2408448, 1)
op101.sizes = ([768, 56, 56], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op101_loop_body:
    var_ranges = {z0: 768, z1: 56, z2: 56}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 3136*z0 + 56*z1 + z2 - 57
    index3 = z2
    index4 = 3136*z0 + 56*z1 + z2 - 56
    index5 = z2 + 1
    index6 = 3136*z0 + 56*z1 + z2 - 55
    index7 = z1
    index8 = 3136*z0 + 56*z1 + z2 - 1
    index9 = 3136*z0 + 56*z1 + z2
    index10 = 3136*z0 + 56*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 3136*z0 + 56*z1 + z2 + 55
    index13 = 3136*z0 + 56*z1 + z2 + 56
    index14 = 3136*z0 + 56*z1 + z2 + 57
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(56, z2 + 2) - Max(0, z2 - 1)*Min(56, z1 + 2) + Min(56, z1 + 2)*Min(56, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(56, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(56, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(56, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(56, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(56, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(56, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(56, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(56, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(56, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(56, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(56, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(56, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(56, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(56, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(56, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(56, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf101', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf100', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf100', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf100', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf100', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf100', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf100', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf100', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf100', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf100', get_index)
        return load
op101_op102.snodes[1] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 2408448}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 2408448}, None),
        MemoryDep('buf101', c0, {c0: 2408448}, None),
        MemoryDep('buf80', c0, {c0: 2408448}, None),
        MemoryDep('buf90', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg41_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg42_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg45_1', c1, {c0: 8, c1: 96}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf102.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op102.group.device = cuda:0
op102.group.iteration = (2408448, 1)
op102.sizes = ([8, 96, 3136], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op102_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf90', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg41_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg42_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf101', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf100', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg45_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf102', get_index_7, add_2, None)
        return store


op103_op104_op105: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op103_op104_op105.writes = 
    [   MemoryDep('buf103', c0, {c0: 296}, None),
        MemoryDep('buf104', c0, {c0: 296}, None),
        MemoryDep('buf105', c0, {c0: 296}, None)]
op103_op104_op105.unmet_dependencies = [   MemoryDep('buf102', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op103_op104_op105.met_dependencies = []
op103_op104_op105.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
]
op103_op104_op105.snodes[0] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 296}, None)]
op103.unmet_dependencies = [   MemoryDep('buf102', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (296, 8137)
op103.sizes = ([8, 37], [8137])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op103_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf103', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf102', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op103_op104_op105.snodes[1] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 296}, None)]
op104.unmet_dependencies = [   MemoryDep('buf102', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (296, 8137)
op104.sizes = ([8, 37], [8137])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op104_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf104', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf102', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op103_op104_op105.snodes[2] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 296}, None)]
op105.unmet_dependencies = [   MemoryDep('buf102', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (296, 8137)
op105.sizes = ([8, 37], [8137])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op105_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf105', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf102', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op106_op107: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op106_op107.writes = [MemoryDep('buf106', c0, {c0: 8}, None), MemoryDep('buf107', c0, {c0: 8}, None)]
op106_op107.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 296}, None),
        MemoryDep('buf104', c0, {c0: 296}, None),
        MemoryDep('buf105', c0, {c0: 296}, None)]
op106_op107.met_dependencies = []
op106_op107.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf106.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf107.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op106_op107.snodes[0] =
op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 8}, None)]
op106.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 296}, None),
        MemoryDep('buf104', c0, {c0: 296}, None),
        MemoryDep('buf105', c0, {c0: 296}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf106.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (8, 37)
op106.sizes = ([8], [37])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op106_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf105', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_3, getitem)
        return store_reduction
op106_op107.snodes[1] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 8}, None)]
op107.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 296}, None),
        MemoryDep('buf104', c0, {c0: 296}, None),
        MemoryDep('buf105', c0, {c0: 296}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf107.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (8, 37)
op107.sizes = ([8], [37])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op107_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf105', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf107', get_index_3, getitem_1)
        return store_reduction


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 2408448}, None),
        MemoryDep('buf106', c0, {c0: 8}, None),
        MemoryDep('buf107', c0, {c0: 8}, None)]
op109.met_dependencies = 
    [   MemoryDep('arg46_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg47_1', c1, {c0: 8, c1: 96}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (2408448, 1)
op109.sizes = ([8, 96, 3136], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op109_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 301056*z0 + z1 + 96*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf106', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf107', get_index_2)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg46_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg47_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf109', get_index_5, add_1, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.node.kernel = extern_kernels.convolution


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 9633792}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 9633792}, None)]
op111.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 25088, c1: 384}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (9633792, 1)
op111.sizes = ([25088, 384], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
class op111_loop_body:
    var_ranges = {z0: 25088, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf110', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf111', get_index_4, mul_2, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
    ]
]
op112.node.kernel = extern_kernels.convolution


op113_op114_op115: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op113_op114_op115.writes = 
    [   MemoryDep('buf113', c0, {c0: 18944}, None),
        MemoryDep('buf114', c0, {c0: 18944}, None),
        MemoryDep('buf115', c0, {c0: 18944}, None)]
op113_op114_op115.unmet_dependencies = 
    [   MemoryDep('buf102', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf112', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op113_op114_op115.met_dependencies = 
    [   MemoryDep('arg51_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg52_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op113_op114_op115.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op113_op114_op115.snodes[0] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 18944}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf102', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf112', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op113.met_dependencies = 
    [   MemoryDep('arg51_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg52_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op113.group.device = cuda:0
op113.group.iteration = (18944, 128)
op113.sizes = ([8, 37, 64], [128])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op113_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf113', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf112', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg52_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op113_op114_op115.snodes[1] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 18944}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf102', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf112', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op114.met_dependencies = 
    [   MemoryDep('arg51_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg52_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op114.group.device = cuda:0
op114.group.iteration = (18944, 128)
op114.sizes = ([8, 37, 64], [128])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op114_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf114', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf112', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg52_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op113_op114_op115.snodes[2] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 18944}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf102', 301056*c0 + ModularIndexing(8137*c1 + c2, 1, 301056), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('buf112', 301056*c0 + 96*ModularIndexing(8137*c1 + c2, 1, 3136) + ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg51_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None),
        MemoryDep('arg52_1', ModularIndexing(8137*c1 + c2, 3136, 96), {c0: 8, c1: 37, c2: 8192}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op115.group.device = cuda:0
op115.group.iteration = (18944, 128)
op115.sizes = ([8, 37, 64], [128])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
class op115_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 64, z3: 128}
    index0 = 128*z2 + z3
    index1 = 8137*z1 + 128*z2 + z3
    index2 = 301056*z0 + ModularIndexing(8137*z1 + 128*z2 + z3, 1, 301056)
    index3 = 301056*z0 + 96*ModularIndexing(8137*z1 + 128*z2 + z3, 1, 3136) + ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index4 = ModularIndexing(8137*z1 + 128*z2 + z3, 3136, 96)
    index5 = 2368*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(8137, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(8137, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(8137, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf115', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf112', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg52_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op116_op117_op118: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op116_op117_op118.writes = 
    [   MemoryDep('buf116', c0, {c0: 296}, None),
        MemoryDep('buf117', c0, {c0: 296}, None),
        MemoryDep('buf118', c0, {c0: 296}, None)]
op116_op117_op118.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 18944}, None),
        MemoryDep('buf114', c0, {c0: 18944}, None),
        MemoryDep('buf115', c0, {c0: 18944}, None)]
op116_op117_op118.met_dependencies = []
op116_op117_op118.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op116_op117_op118.snodes[0] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 296}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 18944}, None),
        MemoryDep('buf114', c0, {c0: 18944}, None),
        MemoryDep('buf115', c0, {c0: 18944}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (296, 64)
op116.sizes = ([296], [64])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op116_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf114', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf115', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf116', get_index_3, getitem)
        return store_reduction
op116_op117_op118.snodes[1] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 296}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 18944}, None),
        MemoryDep('buf114', c0, {c0: 18944}, None),
        MemoryDep('buf115', c0, {c0: 18944}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (296, 64)
op117.sizes = ([296], [64])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op117_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf114', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf115', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf117', get_index_3, getitem_1)
        return store_reduction
op116_op117_op118.snodes[2] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 296}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 18944}, None),
        MemoryDep('buf114', c0, {c0: 18944}, None),
        MemoryDep('buf115', c0, {c0: 18944}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (296, 64)
op118.sizes = ([296], [64])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37, 64], stride=[2368, 18944, 18944, 18944, 64, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op118_loop_body:
    var_ranges = {z0: 296, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf114', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf115', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_3, getitem_2)
        return store_reduction


op119_op120: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op119_op120.writes = [MemoryDep('buf119', c0, {c0: 8}, None), MemoryDep('buf120', c0, {c0: 8}, None)]
op119_op120.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 296}, None),
        MemoryDep('buf117', c0, {c0: 296}, None),
        MemoryDep('buf118', c0, {c0: 296}, None)]
op119_op120.met_dependencies = []
op119_op120.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119_op120.snodes[0] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 8}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 296}, None),
        MemoryDep('buf117', c0, {c0: 296}, None),
        MemoryDep('buf118', c0, {c0: 296}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (8, 37)
op119.sizes = ([8], [37])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op119_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_3, getitem)
        return store_reduction
op119_op120.snodes[1] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 8}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 296}, None),
        MemoryDep('buf117', c0, {c0: 296}, None),
        MemoryDep('buf118', c0, {c0: 296}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (8, 37)
op120.sizes = ([8], [37])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf117', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem_1)
        return store_reduction


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 2408448}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 2408448}, None),
        MemoryDep('buf112', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf119', c0, {c0: 8}, None),
        MemoryDep('buf120', c0, {c0: 8}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg52_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg53_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg54_1', c1, {c0: 8, c1: 96}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (2408448, 1)
op122.sizes = ([8, 96, 3136], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op122_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf112', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg52_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf119', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf120', get_index_5)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg53_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg54_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf122', get_index_8, add_3, None)
        return store


op123_op124: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op123_op124.writes = 
    [   MemoryDep('buf123', c0, {c0: 2408448}, None),
        MemoryDep('buf124', c0, {c0: 2408448}, None)]
op123_op124.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 2408448}, None),
        MemoryDep('buf112', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf122', c0 + 1, {c0: 2408448}, None),
        MemoryDep('buf122', c0 + 55, {c0: 2408448}, None),
        MemoryDep('buf122', c0 + 56, {c0: 2408448}, None),
        MemoryDep('buf122', c0 + 57, {c0: 2408448}, None),
        MemoryDep('buf122', c0 - 1, {c0: 2408448}, None),
        MemoryDep('buf122', c0 - 55, {c0: 2408448}, None),
        MemoryDep('buf122', c0 - 56, {c0: 2408448}, None),
        MemoryDep('buf122', c0 - 57, {c0: 2408448}, None),
        MemoryDep('buf122', c0, {c0: 2408448}, None)]
op123_op124.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg52_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg55_1', c1, {c0: 8, c1: 96}, None)]
op123_op124.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
    ]
]
op123_op124.snodes[0] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 2408448}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf122', c0 + 1, {c0: 2408448}, None),
        MemoryDep('buf122', c0 + 55, {c0: 2408448}, None),
        MemoryDep('buf122', c0 + 56, {c0: 2408448}, None),
        MemoryDep('buf122', c0 + 57, {c0: 2408448}, None),
        MemoryDep('buf122', c0 - 1, {c0: 2408448}, None),
        MemoryDep('buf122', c0 - 55, {c0: 2408448}, None),
        MemoryDep('buf122', c0 - 56, {c0: 2408448}, None),
        MemoryDep('buf122', c0 - 57, {c0: 2408448}, None),
        MemoryDep('buf122', c0, {c0: 2408448}, None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (2408448, 1)
op123.sizes = ([768, 56, 56], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op123_loop_body:
    var_ranges = {z0: 768, z1: 56, z2: 56}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 3136*z0 + 56*z1 + z2 - 57
    index3 = z2
    index4 = 3136*z0 + 56*z1 + z2 - 56
    index5 = z2 + 1
    index6 = 3136*z0 + 56*z1 + z2 - 55
    index7 = z1
    index8 = 3136*z0 + 56*z1 + z2 - 1
    index9 = 3136*z0 + 56*z1 + z2
    index10 = 3136*z0 + 56*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 3136*z0 + 56*z1 + z2 + 55
    index13 = 3136*z0 + 56*z1 + z2 + 56
    index14 = 3136*z0 + 56*z1 + z2 + 57
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(56, z2 + 2) - Max(0, z2 - 1)*Min(56, z1 + 2) + Min(56, z1 + 2)*Min(56, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(56, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(56, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(56, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(56, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(56, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(56, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(56, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(56, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(56, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(56, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(56, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(56, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(56, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(56, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(56, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(56, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf123', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf122', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf122', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf122', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf122', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf122', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf122', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf122', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf122', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf122', get_index)
        return load
op123_op124.snodes[1] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 2408448}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 2408448}, None),
        MemoryDep('buf112', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None),
        MemoryDep('buf122', c0, {c0: 2408448}, None),
        MemoryDep('buf123', c0, {c0: 2408448}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg52_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg55_1', c1, {c0: 8, c1: 96}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (2408448, 1)
op124.sizes = ([8, 96, 3136], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
class op124_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = 301056*z0 + z1 + 96*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf112', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg52_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf123', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf122', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg55_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf124', get_index_7, add_2, None)
        return store


op125_op126_op127: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op125_op126_op127.writes = 
    [   MemoryDep('buf125', c0, {c0: 296}, None),
        MemoryDep('buf126', c0, {c0: 296}, None),
        MemoryDep('buf127', c0, {c0: 296}, None)]
op125_op126_op127.unmet_dependencies = [   MemoryDep('buf124', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op125_op126_op127.met_dependencies = []
op125_op126_op127.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf125.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op125_op126_op127.snodes[0] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 296}, None)]
op125.unmet_dependencies = [   MemoryDep('buf124', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf125.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op125.group.device = cuda:0
op125.group.iteration = (296, 8137)
op125.sizes = ([8, 37], [8137])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op125_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf125', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf124', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op125_op126_op127.snodes[1] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 296}, None)]
op126.unmet_dependencies = [   MemoryDep('buf124', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (296, 8137)
op126.sizes = ([8, 37], [8137])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op126_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf126', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf124', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op125_op126_op127.snodes[2] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 296}, None)]
op127.unmet_dependencies = [   MemoryDep('buf124', 301056*c0 + ModularIndexing(c1, 1, 301056), {c0: 8, c1: 301069}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (296, 8137)
op127.sizes = ([8, 37], [8137])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
class op127_loop_body:
    var_ranges = {z0: 8, z1: 37, z2: 8137}
    index0 = 8137*z1 + z2
    index1 = 301056*z0 + ModularIndexing(8137*z1 + z2, 1, 301056)
    index2 = 37*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(301056, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(301056, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(301056, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf127', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf124', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op128_op129: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op128_op129.writes = [MemoryDep('buf128', c0, {c0: 8}, None), MemoryDep('buf129', c0, {c0: 8}, None)]
op128_op129.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 296}, None),
        MemoryDep('buf126', c0, {c0: 296}, None),
        MemoryDep('buf127', c0, {c0: 296}, None)]
op128_op129.met_dependencies = []
op128_op129.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op128_op129.snodes[0] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 8}, None)]
op128.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 296}, None),
        MemoryDep('buf126', c0, {c0: 296}, None),
        MemoryDep('buf127', c0, {c0: 296}, None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (8, 37)
op128.sizes = ([8], [37])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op128_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf126', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf127', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf128', get_index_3, getitem)
        return store_reduction
op128_op129.snodes[1] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 8}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 296}, None),
        MemoryDep('buf126', c0, {c0: 296}, None),
        MemoryDep('buf127', c0, {c0: 296}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (8, 37)
op129.sizes = ([8], [37])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 37], stride=[37, 296, 296, 296, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op129_loop_body:
    var_ranges = {z0: 8, z1: 37}
    index0 = 37*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf126', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf127', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf129', get_index_3, getitem_1)
        return store_reduction


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', 301056*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 3136}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 2408448}, None),
        MemoryDep('buf128', c0, {c0: 8}, None),
        MemoryDep('buf129', c0, {c0: 8}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 8, c1: 96}, None),
        MemoryDep('arg57_1', c1, {c0: 8, c1: 96}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (2408448, 1)
op131.sizes = ([8, 96, 3136], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op131_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 3136}
    index0 = 301056*z0 + 3136*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 301056*z0 + z1 + 96*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf128', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf129', get_index_2)
        constant = ops.constant(301056.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg56_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg57_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf131', get_index_5, add_1, None)
        return store


op132: ExternKernelSchedulerNode(ExternKernelAlloc)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op132.outputs = [
    buf132: ExternKernelAlloc
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf132.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False)]
]
op132.node.kernel = extern_kernels.convolution


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 9633792}, None)]
op133.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 9633792}, None)]
op133.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 25088, c1: 384}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (9633792, 1)
op133.sizes = ([25088, 384], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 56, 56], stride=[1204224, 1, 21504, 384])
class op133_loop_body:
    var_ranges = {z0: 25088, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf132', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg59_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf133', get_index_4, mul_2, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelAlloc)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelAlloc
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.convolution


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 2408448}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf124', 301056*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 96}, None),
        MemoryDep('buf134', c0, {c0: 2408448}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg62_1', c1, {c0: 25088, c1: 96}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (2408448, 1)
op135.sizes = ([8, 3136, 96], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 3136, 56, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op135_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 96}
    index0 = 301056*z0 + z1 + 3136*z2
    index1 = 301056*z0 + 96*z1 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg61_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg62_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf135', get_index_4, add_1, None)
        return store


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', 864*c0 + c1 + 96*c2, {c0: 192, c1: 96, c2: 9}, None)]
op136.unmet_dependencies = []
op136.met_dependencies = [MemoryDep('arg63_1', c0, {c0: 165888}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[192, 96, 3, 3], stride=[864, 1, 288, 96])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (165888, 1)
op136.sizes = ([192, 96, 9], [])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[192, 96, 3, 3], stride=[864, 9, 3, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[192, 96, 3, 3], stride=[864, 1, 288, 96])
class op136_loop_body:
    var_ranges = {z0: 192, z1: 96, z2: 9}
    index0 = 864*z0 + 9*z1 + z2
    index1 = 864*z0 + z1 + 96*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg63_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf136', get_index_1, load, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelAlloc)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf135', mode=None), StarDep(name='buf136', mode=None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ExternKernelAlloc
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
]
op137.node.kernel = extern_kernels.convolution


op138_op139_op140: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op138_op139_op140.writes = 
    [   MemoryDep('buf138', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf139', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf140', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op138_op139_op140.unmet_dependencies = [   MemoryDep('buf137', 150528*c0 + 192*ModularIndexing(128*c1 + 7923*c2 + c3, 1, 784) + ModularIndexing(128*c1 + 7923*c2 + c3, 784, 192), {c0: 8, c1: 62, c2: 19, c3: 128}, None)]
op138_op139_op140.met_dependencies = [   MemoryDep('arg64_1', ModularIndexing(128*c1 + 7923*c2 + c3, 784, 192), {c0: 8, c1: 62, c2: 19, c3: 128}, None)]
op138_op139_op140.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
    ]
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
    ]
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
    buf140.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
    ]
]
op138_op139_op140.snodes[0] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op138.unmet_dependencies = [   MemoryDep('buf137', 150528*c0 + 192*ModularIndexing(128*c1 + 7923*c2 + c3, 1, 784) + ModularIndexing(128*c1 + 7923*c2 + c3, 784, 192), {c0: 8, c1: 62, c2: 19, c3: 128}, None)]
op138.met_dependencies = [   MemoryDep('arg64_1', ModularIndexing(128*c1 + 7923*c2 + c3, 784, 192), {c0: 8, c1: 62, c2: 19, c3: 128}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
    ]
]
op138.group.device = cuda:0
op138.group.iteration = (9424, 128)
op138.sizes = ([8, 62, 19], [128])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 62, z2: 19, z3: 128}
    index0 = 128*z1 + z3
    index1 = 128*z1 + 7923*z2 + z3
    index2 = 150528*z0 + 192*ModularIndexing(128*z1 + 7923*z2 + z3, 1, 784) + ModularIndexing(128*z1 + 7923*z2 + z3, 784, 192)
    index3 = ModularIndexing(128*z1 + 7923*z2 + z3, 784, 192)
    index4 = 1184*z0 + 19*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf138', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op138_op139_op140.snodes[1] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op139.unmet_dependencies = [   MemoryDep('buf137', 150528*c0 + 192*ModularIndexing(128*c1 + 7923*c2 + c3, 1, 784) + ModularIndexing(128*c1 + 7923*c2 + c3, 784, 192), {c0: 8, c1: 62, c2: 19, c3: 128}, None)]
op139.met_dependencies = [   MemoryDep('arg64_1', ModularIndexing(128*c1 + 7923*c2 + c3, 784, 192), {c0: 8, c1: 62, c2: 19, c3: 128}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (9424, 128)
op139.sizes = ([8, 62, 19], [128])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
class op139_loop_body:
    var_ranges = {z0: 8, z1: 62, z2: 19, z3: 128}
    index0 = 128*z1 + z3
    index1 = 128*z1 + 7923*z2 + z3
    index2 = 150528*z0 + 192*ModularIndexing(128*z1 + 7923*z2 + z3, 1, 784) + ModularIndexing(128*z1 + 7923*z2 + z3, 784, 192)
    index3 = ModularIndexing(128*z1 + 7923*z2 + z3, 784, 192)
    index4 = 1184*z0 + 19*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf139', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op138_op139_op140.snodes[2] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op140.unmet_dependencies = [   MemoryDep('buf137', 150528*c0 + 192*ModularIndexing(128*c1 + 7923*c2 + c3, 1, 784) + ModularIndexing(128*c1 + 7923*c2 + c3, 784, 192), {c0: 8, c1: 62, c2: 19, c3: 128}, None)]
op140.met_dependencies = [   MemoryDep('arg64_1', ModularIndexing(128*c1 + 7923*c2 + c3, 784, 192), {c0: 8, c1: 62, c2: 19, c3: 128}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
    buf140.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
    ]
]
op140.group.device = cuda:0
op140.group.iteration = (9424, 128)
op140.sizes = ([8, 62, 19], [128])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
class op140_loop_body:
    var_ranges = {z0: 8, z1: 62, z2: 19, z3: 128}
    index0 = 128*z1 + z3
    index1 = 128*z1 + 7923*z2 + z3
    index2 = 150528*z0 + 192*ModularIndexing(128*z1 + 7923*z2 + z3, 1, 784) + ModularIndexing(128*z1 + 7923*z2 + z3, 784, 192)
    index3 = ModularIndexing(128*z1 + 7923*z2 + z3, 784, 192)
    index4 = 1184*z0 + 19*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf140', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op141_op142_op143: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op141_op142_op143.writes = 
    [   MemoryDep('buf141', c0, {c0: 152}, None),
        MemoryDep('buf142', c0, {c0: 152}, None),
        MemoryDep('buf143', c0, {c0: 152}, None)]
op141_op142_op143.unmet_dependencies = 
    [   MemoryDep('buf138', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None),
        MemoryDep('buf139', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None),
        MemoryDep('buf140', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None)]
op141_op142_op143.met_dependencies = []
op141_op142_op143.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf143.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op141_op142_op143.snodes[0] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 152}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf138', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None),
        MemoryDep('buf139', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None),
        MemoryDep('buf140', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op141.group.device = cuda:0
op141.group.iteration = (152, 62)
op141.sizes = ([8, 19], [62])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op141_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + z1 + 19*z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf141', get_index_3, getitem)
        return store_reduction
op141_op142_op143.snodes[1] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 152}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf138', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None),
        MemoryDep('buf139', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None),
        MemoryDep('buf140', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (152, 62)
op142.sizes = ([8, 19], [62])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op142_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + z1 + 19*z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf142', get_index_3, getitem_1)
        return store_reduction
op141_op142_op143.snodes[2] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 152}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf138', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None),
        MemoryDep('buf139', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None),
        MemoryDep('buf140', 1184*c0 + c1 + 19*c2, {c0: 8, c1: 19, c2: 62}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf143.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op143.group.device = cuda:0
op143.group.iteration = (152, 62)
op143.sizes = ([8, 19], [62])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 1, 19])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op143_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + z1 + 19*z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf140', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf143', get_index_3, getitem_2)
        return store_reduction


op144_op145: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op144_op145.writes = [MemoryDep('buf144', c0, {c0: 8}, None), MemoryDep('buf145', c0, {c0: 8}, None)]
op144_op145.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 152}, None),
        MemoryDep('buf142', c0, {c0: 152}, None),
        MemoryDep('buf143', c0, {c0: 152}, None)]
op144_op145.met_dependencies = []
op144_op145.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf144.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf145.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op144_op145.snodes[0] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 8}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 152}, None),
        MemoryDep('buf142', c0, {c0: 152}, None),
        MemoryDep('buf143', c0, {c0: 152}, None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf144.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (8, 19)
op144.sizes = ([8], [19])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op144_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf143', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf144', get_index_3, getitem)
        return store_reduction
op144_op145.snodes[1] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 8}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 152}, None),
        MemoryDep('buf142', c0, {c0: 152}, None),
        MemoryDep('buf143', c0, {c0: 152}, None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf145.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (8, 19)
op145.sizes = ([8], [19])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op145_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf143', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf145', get_index_3, getitem_1)
        return store_reduction


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 1204224}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 1204224}, None),
        MemoryDep('buf144', c0, {c0: 8}, None),
        MemoryDep('buf145', c0, {c0: 8}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg65_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg66_1', c1, {c0: 6272, c1: 192}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (1204224, 1)
op147.sizes = ([8, 784, 192], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
class op147_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 192}
    index0 = 150528*z0 + 192*z1 + z2
    index1 = z2
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf144', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf145', get_index_3)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg66_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf147', get_index_6, add_2, None)
        return store


op148_op149: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op148_op149.writes = 
    [   MemoryDep('buf148', c0, {c0: 1204224}, None),
        MemoryDep('buf149', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None)]
op148_op149.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 1204224}, None),
        MemoryDep('buf147', c0 + 192, {c0: 1204224}, None),
        MemoryDep('buf147', c0 + 5184, {c0: 1204224}, None),
        MemoryDep('buf147', c0 + 5376, {c0: 1204224}, None),
        MemoryDep('buf147', c0 + 5568, {c0: 1204224}, None),
        MemoryDep('buf147', c0 - 192, {c0: 1204224}, None),
        MemoryDep('buf147', c0 - 5184, {c0: 1204224}, None),
        MemoryDep('buf147', c0 - 5376, {c0: 1204224}, None),
        MemoryDep('buf147', c0 - 5568, {c0: 1204224}, None),
        MemoryDep('buf147', c0, {c0: 1204224}, None)]
op148_op149.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg67_1', c1, {c0: 6272, c1: 192}, None)]
op148_op149.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op148_op149.snodes[0] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 1204224}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf147', c0 + 192, {c0: 1204224}, None),
        MemoryDep('buf147', c0 + 5184, {c0: 1204224}, None),
        MemoryDep('buf147', c0 + 5376, {c0: 1204224}, None),
        MemoryDep('buf147', c0 + 5568, {c0: 1204224}, None),
        MemoryDep('buf147', c0 - 192, {c0: 1204224}, None),
        MemoryDep('buf147', c0 - 5184, {c0: 1204224}, None),
        MemoryDep('buf147', c0 - 5376, {c0: 1204224}, None),
        MemoryDep('buf147', c0 - 5568, {c0: 1204224}, None),
        MemoryDep('buf147', c0, {c0: 1204224}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (1204224, 1)
op148.sizes = ([8, 28, 28, 192], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
class op148_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 28, z3: 192}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 150528*z0 + 5376*z1 + 192*z2 + z3 - 5568
    index3 = z2
    index4 = 150528*z0 + 5376*z1 + 192*z2 + z3 - 5376
    index5 = z2 + 1
    index6 = 150528*z0 + 5376*z1 + 192*z2 + z3 - 5184
    index7 = z1
    index8 = 150528*z0 + 5376*z1 + 192*z2 + z3 - 192
    index9 = 150528*z0 + 5376*z1 + 192*z2 + z3
    index10 = 150528*z0 + 5376*z1 + 192*z2 + z3 + 192
    index11 = z1 + 1
    index12 = 150528*z0 + 5376*z1 + 192*z2 + z3 + 5184
    index13 = 150528*z0 + 5376*z1 + 192*z2 + z3 + 5376
    index14 = 150528*z0 + 5376*z1 + 192*z2 + z3 + 5568
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(28, z2 + 2) - Max(0, z2 - 1)*Min(28, z1 + 2) + Min(28, z1 + 2)*Min(28, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(28, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(28, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(28, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(28, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(28, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(28, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(28, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(28, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(28, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(28, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(28, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(28, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(28, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(28, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(28, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(28, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf148', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf147', get_index)
        return load
op148_op149.snodes[1] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 1204224}, None),
        MemoryDep('buf147', c0, {c0: 1204224}, None),
        MemoryDep('buf148', c0, {c0: 1204224}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg67_1', c1, {c0: 6272, c1: 192}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (1204224, 1)
op149.sizes = ([8, 784, 192], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op149_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 192}
    index0 = 150528*z0 + 192*z1 + z2
    index1 = z2
    index2 = 150528*z0 + z1 + 784*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf148', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf147', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg67_1', get_index_4)
        mul = ops.mul(sub, load_4)
        add_1 = ops.add(add, mul)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf149', get_index_5, add_1, None)
        return store


op150_op151_op152: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op150_op151_op152.writes = 
    [   MemoryDep('buf150', c0, {c0: 152}, None),
        MemoryDep('buf151', c0, {c0: 152}, None),
        MemoryDep('buf152', c0, {c0: 152}, None)]
op150_op151_op152.unmet_dependencies = [   MemoryDep('buf149', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op150_op151_op152.met_dependencies = []
op150_op151_op152.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf151.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
]
op150_op151_op152.snodes[0] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 152}, None)]
op150.unmet_dependencies = [   MemoryDep('buf149', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
]
op150.group.device = cuda:0
op150.group.iteration = (152, 7923)
op150.sizes = ([8, 19], [7923])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op150_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf149', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op150_op151_op152.snodes[1] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 152}, None)]
op151.unmet_dependencies = [   MemoryDep('buf149', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf151.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
]
op151.group.device = cuda:0
op151.group.iteration = (152, 7923)
op151.sizes = ([8, 19], [7923])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op151_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf151', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf149', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op150_op151_op152.snodes[2] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 152}, None)]
op152.unmet_dependencies = [   MemoryDep('buf149', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
    ]
]
op152.group.device = cuda:0
op152.group.iteration = (152, 7923)
op152.sizes = ([8, 19], [7923])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op152_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf152', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf149', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op153_op154: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op153_op154.writes = [MemoryDep('buf153', c0, {c0: 8}, None), MemoryDep('buf154', c0, {c0: 8}, None)]
op153_op154.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 152}, None),
        MemoryDep('buf151', c0, {c0: 152}, None),
        MemoryDep('buf152', c0, {c0: 152}, None)]
op153_op154.met_dependencies = []
op153_op154.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf153.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf154.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op153_op154.snodes[0] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 8}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 152}, None),
        MemoryDep('buf151', c0, {c0: 152}, None),
        MemoryDep('buf152', c0, {c0: 152}, None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf153.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (8, 19)
op153.sizes = ([8], [19])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op153_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf151', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf153', get_index_3, getitem)
        return store_reduction
op153_op154.snodes[1] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 8}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 152}, None),
        MemoryDep('buf151', c0, {c0: 152}, None),
        MemoryDep('buf152', c0, {c0: 152}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf154.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (8, 19)
op154.sizes = ([8], [19])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf151', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf152', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf154', get_index_3, getitem_1)
        return store_reduction


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 1204224}, None),
        MemoryDep('buf153', c0, {c0: 8}, None),
        MemoryDep('buf154', c0, {c0: 8}, None)]
op156.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg69_1', c1, {c0: 8, c1: 192}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (1204224, 1)
op156.sizes = ([8, 192, 784], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
class op156_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 150528*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf153', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf154', get_index_2)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg68_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg69_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf156', get_index_5, add_1, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelAlloc)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelAlloc
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False)]
]
op157.node.kernel = extern_kernels.convolution


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 4816896}, None)]
op158.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 4816896}, None)]
op158.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 6272, c1: 768}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (4816896, 1)
op158.sizes = ([6272, 768], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
class op158_loop_body:
    var_ranges = {z0: 6272, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf157', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg71_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf158', get_index_4, mul_2, None)
        return store


op159: ExternKernelSchedulerNode(ExternKernelAlloc)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op159.outputs = [
    buf159: ExternKernelAlloc
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
    ]
]
op159.node.kernel = extern_kernels.convolution


op160_op161_op162: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op160_op161_op162.writes = 
    [   MemoryDep('buf160', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf161', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf162', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op160_op161_op162.unmet_dependencies = 
    [   MemoryDep('buf149', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf159', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op160_op161_op162.met_dependencies = 
    [   MemoryDep('arg73_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg74_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op160_op161_op162.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
    ]
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
    ]
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
    ]
]
op160_op161_op162.snodes[0] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf149', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf159', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op160.met_dependencies = 
    [   MemoryDep('arg73_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg74_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (9424, 128)
op160.sizes = ([8, 19, 62], [128])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op160_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf160', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg74_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op160_op161_op162.snodes[1] =
op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf149', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf159', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op161.met_dependencies = 
    [   MemoryDep('arg73_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg74_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (9424, 128)
op161.sizes = ([8, 19, 62], [128])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op161_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf161', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg74_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op160_op161_op162.snodes[2] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf149', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf159', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op162.met_dependencies = 
    [   MemoryDep('arg73_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg74_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (9424, 128)
op162.sizes = ([8, 19, 62], [128])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op162_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf162', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg74_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op163_op164_op165: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op163_op164_op165.writes = 
    [   MemoryDep('buf163', c0, {c0: 152}, None),
        MemoryDep('buf164', c0, {c0: 152}, None),
        MemoryDep('buf165', c0, {c0: 152}, None)]
op163_op164_op165.unmet_dependencies = 
    [   MemoryDep('buf160', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf161', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf162', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op163_op164_op165.met_dependencies = []
op163_op164_op165.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf163.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf164.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
]
op163_op164_op165.snodes[0] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 152}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf160', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf161', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf162', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf163.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
]
op163.group.device = cuda:0
op163.group.iteration = (152, 62)
op163.sizes = ([8, 19], [62])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op163_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf162', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf163', get_index_3, getitem)
        return store_reduction
op163_op164_op165.snodes[1] =
op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 152}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf160', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf161', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf162', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf164.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
]
op164.group.device = cuda:0
op164.group.iteration = (152, 62)
op164.sizes = ([8, 19], [62])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op164_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf162', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf164', get_index_3, getitem_1)
        return store_reduction
op163_op164_op165.snodes[2] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 152}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf160', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf161', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf162', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
    ]
]
op165.group.device = cuda:0
op165.group.iteration = (152, 62)
op165.sizes = ([8, 19], [62])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op165_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf162', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf165', get_index_3, getitem_2)
        return store_reduction


op166_op167: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op166_op167.writes = [MemoryDep('buf166', c0, {c0: 8}, None), MemoryDep('buf167', c0, {c0: 8}, None)]
op166_op167.unmet_dependencies = 
    [   MemoryDep('buf163', c0, {c0: 152}, None),
        MemoryDep('buf164', c0, {c0: 152}, None),
        MemoryDep('buf165', c0, {c0: 152}, None)]
op166_op167.met_dependencies = []
op166_op167.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf166.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf167.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op166_op167.snodes[0] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 8}, None)]
op166.unmet_dependencies = 
    [   MemoryDep('buf163', c0, {c0: 152}, None),
        MemoryDep('buf164', c0, {c0: 152}, None),
        MemoryDep('buf165', c0, {c0: 152}, None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf166.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (8, 19)
op166.sizes = ([8], [19])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op166_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf166', get_index_3, getitem)
        return store_reduction
op166_op167.snodes[1] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 8}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf163', c0, {c0: 152}, None),
        MemoryDep('buf164', c0, {c0: 152}, None),
        MemoryDep('buf165', c0, {c0: 152}, None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf167.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (8, 19)
op167.sizes = ([8], [19])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op167_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf167', get_index_3, getitem_1)
        return store_reduction


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 1204224}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 1204224}, None),
        MemoryDep('buf159', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf166', c0, {c0: 8}, None),
        MemoryDep('buf167', c0, {c0: 8}, None)]
op169.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg74_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg75_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg76_1', c1, {c0: 8, c1: 192}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op169.group.device = cuda:0
op169.group.iteration = (1204224, 1)
op169.sizes = ([8, 192, 784], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op169_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = 150528*z0 + z1 + 192*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg74_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf166', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf167', get_index_5)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg75_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg76_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf169', get_index_8, add_3, None)
        return store


op170_op171: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op170_op171.writes = 
    [   MemoryDep('buf170', c0, {c0: 1204224}, None),
        MemoryDep('buf171', c0, {c0: 1204224}, None)]
op170_op171.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 1204224}, None),
        MemoryDep('buf159', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf169', c0 + 1, {c0: 1204224}, None),
        MemoryDep('buf169', c0 + 27, {c0: 1204224}, None),
        MemoryDep('buf169', c0 + 28, {c0: 1204224}, None),
        MemoryDep('buf169', c0 + 29, {c0: 1204224}, None),
        MemoryDep('buf169', c0 - 1, {c0: 1204224}, None),
        MemoryDep('buf169', c0 - 27, {c0: 1204224}, None),
        MemoryDep('buf169', c0 - 28, {c0: 1204224}, None),
        MemoryDep('buf169', c0 - 29, {c0: 1204224}, None),
        MemoryDep('buf169', c0, {c0: 1204224}, None)]
op170_op171.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg74_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg77_1', c1, {c0: 8, c1: 192}, None)]
op170_op171.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False),
    ]
]
op170_op171.snodes[0] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 1204224}, None)]
op170.unmet_dependencies = 
    [   MemoryDep('buf169', c0 + 1, {c0: 1204224}, None),
        MemoryDep('buf169', c0 + 27, {c0: 1204224}, None),
        MemoryDep('buf169', c0 + 28, {c0: 1204224}, None),
        MemoryDep('buf169', c0 + 29, {c0: 1204224}, None),
        MemoryDep('buf169', c0 - 1, {c0: 1204224}, None),
        MemoryDep('buf169', c0 - 27, {c0: 1204224}, None),
        MemoryDep('buf169', c0 - 28, {c0: 1204224}, None),
        MemoryDep('buf169', c0 - 29, {c0: 1204224}, None),
        MemoryDep('buf169', c0, {c0: 1204224}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (1204224, 1)
op170.sizes = ([1536, 28, 28], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op170_loop_body:
    var_ranges = {z0: 1536, z1: 28, z2: 28}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 784*z0 + 28*z1 + z2 - 29
    index3 = z2
    index4 = 784*z0 + 28*z1 + z2 - 28
    index5 = z2 + 1
    index6 = 784*z0 + 28*z1 + z2 - 27
    index7 = z1
    index8 = 784*z0 + 28*z1 + z2 - 1
    index9 = 784*z0 + 28*z1 + z2
    index10 = 784*z0 + 28*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 784*z0 + 28*z1 + z2 + 27
    index13 = 784*z0 + 28*z1 + z2 + 28
    index14 = 784*z0 + 28*z1 + z2 + 29
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(28, z2 + 2) - Max(0, z2 - 1)*Min(28, z1 + 2) + Min(28, z1 + 2)*Min(28, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(28, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(28, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(28, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(28, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(28, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(28, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(28, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(28, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(28, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(28, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(28, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(28, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(28, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(28, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(28, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(28, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf170', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf169', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf169', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf169', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf169', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf169', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf169', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf169', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf169', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf169', get_index)
        return load
op170_op171.snodes[1] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 1204224}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 1204224}, None),
        MemoryDep('buf159', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf169', c0, {c0: 1204224}, None),
        MemoryDep('buf170', c0, {c0: 1204224}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg74_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg77_1', c1, {c0: 8, c1: 192}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (1204224, 1)
op171.sizes = ([8, 192, 784], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op171_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = 150528*z0 + z1 + 192*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf159', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg73_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg74_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf170', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf169', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg77_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf171', get_index_7, add_2, None)
        return store


op172_op173_op174: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op172_op173_op174.writes = 
    [   MemoryDep('buf172', c0, {c0: 152}, None),
        MemoryDep('buf173', c0, {c0: 152}, None),
        MemoryDep('buf174', c0, {c0: 152}, None)]
op172_op173_op174.unmet_dependencies = [   MemoryDep('buf171', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op172_op173_op174.met_dependencies = []
op172_op173_op174.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op172_op173_op174.snodes[0] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 152}, None)]
op172.unmet_dependencies = [   MemoryDep('buf171', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (152, 7923)
op172.sizes = ([8, 19], [7923])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op172_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf172', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf171', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op172_op173_op174.snodes[1] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 152}, None)]
op173.unmet_dependencies = [   MemoryDep('buf171', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (152, 7923)
op173.sizes = ([8, 19], [7923])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op173_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf173', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf171', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op172_op173_op174.snodes[2] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 152}, None)]
op174.unmet_dependencies = [   MemoryDep('buf171', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (152, 7923)
op174.sizes = ([8, 19], [7923])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op174_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf174', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf171', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op175_op176: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op175_op176.writes = [MemoryDep('buf175', c0, {c0: 8}, None), MemoryDep('buf176', c0, {c0: 8}, None)]
op175_op176.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 152}, None),
        MemoryDep('buf173', c0, {c0: 152}, None),
        MemoryDep('buf174', c0, {c0: 152}, None)]
op175_op176.met_dependencies = []
op175_op176.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf176.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op175_op176.snodes[0] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 8}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 152}, None),
        MemoryDep('buf173', c0, {c0: 152}, None),
        MemoryDep('buf174', c0, {c0: 152}, None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (8, 19)
op175.sizes = ([8], [19])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op175_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf173', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf174', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf175', get_index_3, getitem)
        return store_reduction
op175_op176.snodes[1] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 8}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 152}, None),
        MemoryDep('buf173', c0, {c0: 152}, None),
        MemoryDep('buf174', c0, {c0: 152}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf176.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (8, 19)
op176.sizes = ([8], [19])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op176_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf173', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf174', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf176', get_index_3, getitem_1)
        return store_reduction


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 1204224}, None),
        MemoryDep('buf175', c0, {c0: 8}, None),
        MemoryDep('buf176', c0, {c0: 8}, None)]
op178.met_dependencies = 
    [   MemoryDep('arg78_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg79_1', c1, {c0: 8, c1: 192}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (1204224, 1)
op178.sizes = ([8, 192, 784], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
class op178_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 150528*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf175', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf176', get_index_2)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg78_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg79_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf178', get_index_5, add_1, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelAlloc)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelAlloc
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False)]
]
op179.node.kernel = extern_kernels.convolution


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 4816896}, None)]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 4816896}, None)]
op180.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 6272, c1: 768}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (4816896, 1)
op180.sizes = ([6272, 768], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
class op180_loop_body:
    var_ranges = {z0: 6272, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf179', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg81_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf180', get_index_4, mul_2, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelAlloc)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelAlloc
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
]
op181.node.kernel = extern_kernels.convolution


op182_op183_op184: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op182_op183_op184.writes = 
    [   MemoryDep('buf182', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf183', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf184', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op182_op183_op184.unmet_dependencies = 
    [   MemoryDep('buf171', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf181', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op182_op183_op184.met_dependencies = 
    [   MemoryDep('arg83_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg84_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op182_op183_op184.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf182.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op182_op183_op184.snodes[0] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf171', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf181', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op182.met_dependencies = 
    [   MemoryDep('arg83_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg84_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf182.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op182.group.device = cuda:0
op182.group.iteration = (9424, 128)
op182.sizes = ([8, 19, 62], [128])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op182_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf182', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf181', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg84_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op182_op183_op184.snodes[1] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf171', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf181', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op183.met_dependencies = 
    [   MemoryDep('arg83_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg84_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (9424, 128)
op183.sizes = ([8, 19, 62], [128])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op183_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf183', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf181', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg84_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op182_op183_op184.snodes[2] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf171', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf181', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op184.met_dependencies = 
    [   MemoryDep('arg83_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg84_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (9424, 128)
op184.sizes = ([8, 19, 62], [128])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op184_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf184', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf181', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg84_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op185_op186_op187: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op185_op186_op187.writes = 
    [   MemoryDep('buf185', c0, {c0: 152}, None),
        MemoryDep('buf186', c0, {c0: 152}, None),
        MemoryDep('buf187', c0, {c0: 152}, None)]
op185_op186_op187.unmet_dependencies = 
    [   MemoryDep('buf182', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf183', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf184', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op185_op186_op187.met_dependencies = []
op185_op186_op187.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf185.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
    ]
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
    ]
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
    ]
]
op185_op186_op187.snodes[0] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 152}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf182', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf183', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf184', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf185.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
    ]
]
op185.group.device = cuda:0
op185.group.iteration = (152, 62)
op185.sizes = ([8, 19], [62])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op185_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf184', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf185', get_index_3, getitem)
        return store_reduction
op185_op186_op187.snodes[1] =
op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 152}, None)]
op186.unmet_dependencies = 
    [   MemoryDep('buf182', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf183', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf184', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op186.met_dependencies = []
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
    ]
]
op186.group.device = cuda:0
op186.group.iteration = (152, 62)
op186.sizes = ([8, 19], [62])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op186_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf184', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf186', get_index_3, getitem_1)
        return store_reduction
op185_op186_op187.snodes[2] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 152}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf182', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf183', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf184', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (152, 62)
op187.sizes = ([8, 19], [62])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op187_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf184', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf187', get_index_3, getitem_2)
        return store_reduction


op188_op189: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op188_op189.writes = [MemoryDep('buf188', c0, {c0: 8}, None), MemoryDep('buf189', c0, {c0: 8}, None)]
op188_op189.unmet_dependencies = 
    [   MemoryDep('buf185', c0, {c0: 152}, None),
        MemoryDep('buf186', c0, {c0: 152}, None),
        MemoryDep('buf187', c0, {c0: 152}, None)]
op188_op189.met_dependencies = []
op188_op189.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf189.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op188_op189.snodes[0] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 8}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf185', c0, {c0: 152}, None),
        MemoryDep('buf186', c0, {c0: 152}, None),
        MemoryDep('buf187', c0, {c0: 152}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (8, 19)
op188.sizes = ([8], [19])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op188_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf188', get_index_3, getitem)
        return store_reduction
op188_op189.snodes[1] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 8}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf185', c0, {c0: 152}, None),
        MemoryDep('buf186', c0, {c0: 152}, None),
        MemoryDep('buf187', c0, {c0: 152}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf189.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (8, 19)
op189.sizes = ([8], [19])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op189_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf187', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf189', get_index_3, getitem_1)
        return store_reduction


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 1204224}, None)]
op191.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 1204224}, None),
        MemoryDep('buf181', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf188', c0, {c0: 8}, None),
        MemoryDep('buf189', c0, {c0: 8}, None)]
op191.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg84_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg85_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg86_1', c1, {c0: 8, c1: 192}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False),
    ]
]
op191.group.device = cuda:0
op191.group.iteration = (1204224, 1)
op191.sizes = ([8, 192, 784], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op191_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = 150528*z0 + z1 + 192*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf181', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg84_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf188', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf189', get_index_5)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg85_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg86_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf191', get_index_8, add_3, None)
        return store


op192_op193: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op192_op193.writes = 
    [   MemoryDep('buf192', c0, {c0: 1204224}, None),
        MemoryDep('buf193', c0, {c0: 1204224}, None)]
op192_op193.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 1204224}, None),
        MemoryDep('buf181', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf191', c0 + 1, {c0: 1204224}, None),
        MemoryDep('buf191', c0 + 27, {c0: 1204224}, None),
        MemoryDep('buf191', c0 + 28, {c0: 1204224}, None),
        MemoryDep('buf191', c0 + 29, {c0: 1204224}, None),
        MemoryDep('buf191', c0 - 1, {c0: 1204224}, None),
        MemoryDep('buf191', c0 - 27, {c0: 1204224}, None),
        MemoryDep('buf191', c0 - 28, {c0: 1204224}, None),
        MemoryDep('buf191', c0 - 29, {c0: 1204224}, None),
        MemoryDep('buf191', c0, {c0: 1204224}, None)]
op192_op193.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg84_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg87_1', c1, {c0: 8, c1: 192}, None)]
op192_op193.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op192_op193.snodes[0] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 1204224}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf191', c0 + 1, {c0: 1204224}, None),
        MemoryDep('buf191', c0 + 27, {c0: 1204224}, None),
        MemoryDep('buf191', c0 + 28, {c0: 1204224}, None),
        MemoryDep('buf191', c0 + 29, {c0: 1204224}, None),
        MemoryDep('buf191', c0 - 1, {c0: 1204224}, None),
        MemoryDep('buf191', c0 - 27, {c0: 1204224}, None),
        MemoryDep('buf191', c0 - 28, {c0: 1204224}, None),
        MemoryDep('buf191', c0 - 29, {c0: 1204224}, None),
        MemoryDep('buf191', c0, {c0: 1204224}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (1204224, 1)
op192.sizes = ([1536, 28, 28], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op192_loop_body:
    var_ranges = {z0: 1536, z1: 28, z2: 28}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 784*z0 + 28*z1 + z2 - 29
    index3 = z2
    index4 = 784*z0 + 28*z1 + z2 - 28
    index5 = z2 + 1
    index6 = 784*z0 + 28*z1 + z2 - 27
    index7 = z1
    index8 = 784*z0 + 28*z1 + z2 - 1
    index9 = 784*z0 + 28*z1 + z2
    index10 = 784*z0 + 28*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 784*z0 + 28*z1 + z2 + 27
    index13 = 784*z0 + 28*z1 + z2 + 28
    index14 = 784*z0 + 28*z1 + z2 + 29
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(28, z2 + 2) - Max(0, z2 - 1)*Min(28, z1 + 2) + Min(28, z1 + 2)*Min(28, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(28, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(28, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(28, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(28, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(28, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(28, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(28, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(28, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(28, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(28, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(28, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(28, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(28, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(28, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(28, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(28, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf192', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf191', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf191', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf191', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf191', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf191', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf191', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf191', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf191', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf191', get_index)
        return load
op192_op193.snodes[1] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 1204224}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 1204224}, None),
        MemoryDep('buf181', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf191', c0, {c0: 1204224}, None),
        MemoryDep('buf192', c0, {c0: 1204224}, None)]
op193.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg84_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg87_1', c1, {c0: 8, c1: 192}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf193.users = [
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op193.group.device = cuda:0
op193.group.iteration = (1204224, 1)
op193.sizes = ([8, 192, 784], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op193_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = 150528*z0 + z1 + 192*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf181', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg84_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf192', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf191', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg87_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf193', get_index_7, add_2, None)
        return store


op194_op195_op196: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op194_op195_op196.writes = 
    [   MemoryDep('buf194', c0, {c0: 152}, None),
        MemoryDep('buf195', c0, {c0: 152}, None),
        MemoryDep('buf196', c0, {c0: 152}, None)]
op194_op195_op196.unmet_dependencies = [   MemoryDep('buf193', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op194_op195_op196.met_dependencies = []
op194_op195_op196.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
    ]
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
    ]
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf196.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
    ]
]
op194_op195_op196.snodes[0] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 152}, None)]
op194.unmet_dependencies = [   MemoryDep('buf193', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (152, 7923)
op194.sizes = ([8, 19], [7923])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op194_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf193', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op194_op195_op196.snodes[1] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 152}, None)]
op195.unmet_dependencies = [   MemoryDep('buf193', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
    ]
]
op195.group.device = cuda:0
op195.group.iteration = (152, 7923)
op195.sizes = ([8, 19], [7923])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op195_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf193', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op194_op195_op196.snodes[2] =
op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 152}, None)]
op196.unmet_dependencies = [   MemoryDep('buf193', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf196.users = [
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
    ]
]
op196.group.device = cuda:0
op196.group.iteration = (152, 7923)
op196.sizes = ([8, 19], [7923])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op196_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf196', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf193', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op197_op198: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op197_op198.writes = [MemoryDep('buf197', c0, {c0: 8}, None), MemoryDep('buf198', c0, {c0: 8}, None)]
op197_op198.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 152}, None),
        MemoryDep('buf195', c0, {c0: 152}, None),
        MemoryDep('buf196', c0, {c0: 152}, None)]
op197_op198.met_dependencies = []
op197_op198.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf197.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf198.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op197_op198.snodes[0] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 8}, None)]
op197.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 152}, None),
        MemoryDep('buf195', c0, {c0: 152}, None),
        MemoryDep('buf196', c0, {c0: 152}, None)]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf197.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (8, 19)
op197.sizes = ([8], [19])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op197_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf195', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf196', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf197', get_index_3, getitem)
        return store_reduction
op197_op198.snodes[1] =
op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 8}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 152}, None),
        MemoryDep('buf195', c0, {c0: 152}, None),
        MemoryDep('buf196', c0, {c0: 152}, None)]
op198.met_dependencies = []
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf198.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (8, 19)
op198.sizes = ([8], [19])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op198_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf195', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf196', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf198', get_index_3, getitem_1)
        return store_reduction


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 1204224}, None),
        MemoryDep('buf197', c0, {c0: 8}, None),
        MemoryDep('buf198', c0, {c0: 8}, None)]
op200.met_dependencies = 
    [   MemoryDep('arg88_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg89_1', c1, {c0: 8, c1: 192}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (1204224, 1)
op200.sizes = ([8, 192, 784], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
class op200_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 150528*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf197', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf198', get_index_2)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg88_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg89_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf200', get_index_5, add_1, None)
        return store


op201: ExternKernelSchedulerNode(ExternKernelAlloc)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelAlloc
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op201.node.kernel = extern_kernels.convolution


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 4816896}, None)]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 4816896}, None)]
op202.met_dependencies = [MemoryDep('arg91_1', c1, {c0: 6272, c1: 768}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (4816896, 1)
op202.sizes = ([6272, 768], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
class op202_loop_body:
    var_ranges = {z0: 6272, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf201', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg91_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf202', get_index_4, mul_2, None)
        return store


op203: ExternKernelSchedulerNode(ExternKernelAlloc)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op203.outputs = [
    buf203: ExternKernelAlloc
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
    ]
]
op203.node.kernel = extern_kernels.convolution


op204_op205_op206: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op204_op205_op206.writes = 
    [   MemoryDep('buf204', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf205', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf206', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op204_op205_op206.unmet_dependencies = 
    [   MemoryDep('buf193', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf203', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op204_op205_op206.met_dependencies = 
    [   MemoryDep('arg93_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg94_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op204_op205_op206.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
    ]
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
    ]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
    ]
]
op204_op205_op206.snodes[0] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf193', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf203', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op204.met_dependencies = 
    [   MemoryDep('arg93_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg94_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
    ]
]
op204.group.device = cuda:0
op204.group.iteration = (9424, 128)
op204.sizes = ([8, 19, 62], [128])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op204_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf204', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf203', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg93_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg94_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op204_op205_op206.snodes[1] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op205.unmet_dependencies = 
    [   MemoryDep('buf193', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf203', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op205.met_dependencies = 
    [   MemoryDep('arg93_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg94_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (9424, 128)
op205.sizes = ([8, 19, 62], [128])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op205_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf205', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf203', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg93_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg94_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op204_op205_op206.snodes[2] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf193', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf203', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg93_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg94_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (9424, 128)
op206.sizes = ([8, 19, 62], [128])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op206_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf206', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf203', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg93_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg94_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op207_op208_op209: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op207_op208_op209.writes = 
    [   MemoryDep('buf207', c0, {c0: 152}, None),
        MemoryDep('buf208', c0, {c0: 152}, None),
        MemoryDep('buf209', c0, {c0: 152}, None)]
op207_op208_op209.unmet_dependencies = 
    [   MemoryDep('buf204', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf205', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf206', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op207_op208_op209.met_dependencies = []
op207_op208_op209.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op207_op208_op209.snodes[0] =
op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 152}, None)]
op207.unmet_dependencies = 
    [   MemoryDep('buf204', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf205', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf206', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op207.group.device = cuda:0
op207.group.iteration = (152, 62)
op207.sizes = ([8, 19], [62])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op207_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf205', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf206', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf207', get_index_3, getitem)
        return store_reduction
op207_op208_op209.snodes[1] =
op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 152}, None)]
op208.unmet_dependencies = 
    [   MemoryDep('buf204', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf205', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf206', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (152, 62)
op208.sizes = ([8, 19], [62])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op208_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf205', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf206', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf208', get_index_3, getitem_1)
        return store_reduction
op207_op208_op209.snodes[2] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 152}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf204', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf205', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf206', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op209.group.device = cuda:0
op209.group.iteration = (152, 62)
op209.sizes = ([8, 19], [62])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op209_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf205', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf206', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf209', get_index_3, getitem_2)
        return store_reduction


op210_op211: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op210_op211.writes = [MemoryDep('buf210', c0, {c0: 8}, None), MemoryDep('buf211', c0, {c0: 8}, None)]
op210_op211.unmet_dependencies = 
    [   MemoryDep('buf207', c0, {c0: 152}, None),
        MemoryDep('buf208', c0, {c0: 152}, None),
        MemoryDep('buf209', c0, {c0: 152}, None)]
op210_op211.met_dependencies = []
op210_op211.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf210.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf211.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op210_op211.snodes[0] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 8}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf207', c0, {c0: 152}, None),
        MemoryDep('buf208', c0, {c0: 152}, None),
        MemoryDep('buf209', c0, {c0: 152}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf210.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (8, 19)
op210.sizes = ([8], [19])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf208', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf209', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf210', get_index_3, getitem)
        return store_reduction
op210_op211.snodes[1] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 8}, None)]
op211.unmet_dependencies = 
    [   MemoryDep('buf207', c0, {c0: 152}, None),
        MemoryDep('buf208', c0, {c0: 152}, None),
        MemoryDep('buf209', c0, {c0: 152}, None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf211.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (8, 19)
op211.sizes = ([8], [19])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op211_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf208', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf209', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf211', get_index_3, getitem_1)
        return store_reduction


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 1204224}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 1204224}, None),
        MemoryDep('buf203', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf210', c0, {c0: 8}, None),
        MemoryDep('buf211', c0, {c0: 8}, None)]
op213.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg94_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg95_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg96_1', c1, {c0: 8, c1: 192}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (1204224, 1)
op213.sizes = ([8, 192, 784], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op213_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = 150528*z0 + z1 + 192*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg93_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg94_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf210', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf211', get_index_5)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg95_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg96_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf213', get_index_8, add_3, None)
        return store


op214_op215: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op214_op215.writes = 
    [   MemoryDep('buf214', c0, {c0: 1204224}, None),
        MemoryDep('buf215', c0, {c0: 1204224}, None)]
op214_op215.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 1204224}, None),
        MemoryDep('buf203', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf213', c0 + 1, {c0: 1204224}, None),
        MemoryDep('buf213', c0 + 27, {c0: 1204224}, None),
        MemoryDep('buf213', c0 + 28, {c0: 1204224}, None),
        MemoryDep('buf213', c0 + 29, {c0: 1204224}, None),
        MemoryDep('buf213', c0 - 1, {c0: 1204224}, None),
        MemoryDep('buf213', c0 - 27, {c0: 1204224}, None),
        MemoryDep('buf213', c0 - 28, {c0: 1204224}, None),
        MemoryDep('buf213', c0 - 29, {c0: 1204224}, None),
        MemoryDep('buf213', c0, {c0: 1204224}, None)]
op214_op215.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg94_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg97_1', c1, {c0: 8, c1: 192}, None)]
op214_op215.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False)]
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
]
op214_op215.snodes[0] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 1204224}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf213', c0 + 1, {c0: 1204224}, None),
        MemoryDep('buf213', c0 + 27, {c0: 1204224}, None),
        MemoryDep('buf213', c0 + 28, {c0: 1204224}, None),
        MemoryDep('buf213', c0 + 29, {c0: 1204224}, None),
        MemoryDep('buf213', c0 - 1, {c0: 1204224}, None),
        MemoryDep('buf213', c0 - 27, {c0: 1204224}, None),
        MemoryDep('buf213', c0 - 28, {c0: 1204224}, None),
        MemoryDep('buf213', c0 - 29, {c0: 1204224}, None),
        MemoryDep('buf213', c0, {c0: 1204224}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (1204224, 1)
op214.sizes = ([1536, 28, 28], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op214_loop_body:
    var_ranges = {z0: 1536, z1: 28, z2: 28}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 784*z0 + 28*z1 + z2 - 29
    index3 = z2
    index4 = 784*z0 + 28*z1 + z2 - 28
    index5 = z2 + 1
    index6 = 784*z0 + 28*z1 + z2 - 27
    index7 = z1
    index8 = 784*z0 + 28*z1 + z2 - 1
    index9 = 784*z0 + 28*z1 + z2
    index10 = 784*z0 + 28*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 784*z0 + 28*z1 + z2 + 27
    index13 = 784*z0 + 28*z1 + z2 + 28
    index14 = 784*z0 + 28*z1 + z2 + 29
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(28, z2 + 2) - Max(0, z2 - 1)*Min(28, z1 + 2) + Min(28, z1 + 2)*Min(28, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(28, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(28, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(28, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(28, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(28, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(28, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(28, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(28, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(28, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(28, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(28, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(28, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(28, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(28, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(28, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(28, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf214', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf213', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf213', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf213', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf213', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf213', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf213', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf213', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf213', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf213', get_index)
        return load
op214_op215.snodes[1] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 1204224}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf193', c0, {c0: 1204224}, None),
        MemoryDep('buf203', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf213', c0, {c0: 1204224}, None),
        MemoryDep('buf214', c0, {c0: 1204224}, None)]
op215.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg94_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg97_1', c1, {c0: 8, c1: 192}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf215.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
]
op215.group.device = cuda:0
op215.group.iteration = (1204224, 1)
op215.sizes = ([8, 192, 784], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op215_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = 150528*z0 + z1 + 192*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg93_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg94_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf214', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf213', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg97_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf215', get_index_7, add_2, None)
        return store


op216_op217_op218: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op216_op217_op218.writes = 
    [   MemoryDep('buf216', c0, {c0: 152}, None),
        MemoryDep('buf217', c0, {c0: 152}, None),
        MemoryDep('buf218', c0, {c0: 152}, None)]
op216_op217_op218.unmet_dependencies = [   MemoryDep('buf215', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op216_op217_op218.met_dependencies = []
op216_op217_op218.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf216.users = [
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
    ]
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
    ]
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf218.users = [
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
    ]
]
op216_op217_op218.snodes[0] =
op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 152}, None)]
op216.unmet_dependencies = [   MemoryDep('buf215', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf216.users = [
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
    ]
]
op216.group.device = cuda:0
op216.group.iteration = (152, 7923)
op216.sizes = ([8, 19], [7923])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op216_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf216', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf215', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op216_op217_op218.snodes[1] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 152}, None)]
op217.unmet_dependencies = [   MemoryDep('buf215', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (152, 7923)
op217.sizes = ([8, 19], [7923])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op217_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf217', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf215', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op216_op217_op218.snodes[2] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 152}, None)]
op218.unmet_dependencies = [   MemoryDep('buf215', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf218.users = [
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
    ]
]
op218.group.device = cuda:0
op218.group.iteration = (152, 7923)
op218.sizes = ([8, 19], [7923])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op218_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf218', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf215', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op219_op220: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op219_op220.writes = [MemoryDep('buf219', c0, {c0: 8}, None), MemoryDep('buf220', c0, {c0: 8}, None)]
op219_op220.unmet_dependencies = 
    [   MemoryDep('buf216', c0, {c0: 152}, None),
        MemoryDep('buf217', c0, {c0: 152}, None),
        MemoryDep('buf218', c0, {c0: 152}, None)]
op219_op220.met_dependencies = []
op219_op220.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf219.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf220.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op219_op220.snodes[0] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 8}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf216', c0, {c0: 152}, None),
        MemoryDep('buf217', c0, {c0: 152}, None),
        MemoryDep('buf218', c0, {c0: 152}, None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf219.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (8, 19)
op219.sizes = ([8], [19])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op219_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf217', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf218', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf219', get_index_3, getitem)
        return store_reduction
op219_op220.snodes[1] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 8}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf216', c0, {c0: 152}, None),
        MemoryDep('buf217', c0, {c0: 152}, None),
        MemoryDep('buf218', c0, {c0: 152}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf220.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (8, 19)
op220.sizes = ([8], [19])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op220_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf217', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf218', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf220', get_index_3, getitem_1)
        return store_reduction


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf215', c0, {c0: 1204224}, None),
        MemoryDep('buf219', c0, {c0: 8}, None),
        MemoryDep('buf220', c0, {c0: 8}, None)]
op222.met_dependencies = 
    [   MemoryDep('arg98_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg99_1', c1, {c0: 8, c1: 192}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (1204224, 1)
op222.sizes = ([8, 192, 784], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
class op222_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 150528*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf219', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf220', get_index_2)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg98_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg99_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf222', get_index_5, add_1, None)
        return store


op223: ExternKernelSchedulerNode(ExternKernelAlloc)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op223.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelAlloc
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf223.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False)]
]
op223.node.kernel = extern_kernels.convolution


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 4816896}, None)]
op224.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 4816896}, None)]
op224.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 6272, c1: 768}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (4816896, 1)
op224.sizes = ([6272, 768], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
class op224_loop_body:
    var_ranges = {z0: 6272, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf223', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg101_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf224', get_index_4, mul_2, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelAlloc)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelAlloc
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
    ]
]
op225.node.kernel = extern_kernels.convolution


op226_op227_op228: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op226_op227_op228.writes = 
    [   MemoryDep('buf226', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf227', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf228', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op226_op227_op228.unmet_dependencies = 
    [   MemoryDep('buf215', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf225', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op226_op227_op228.met_dependencies = 
    [   MemoryDep('arg103_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg104_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op226_op227_op228.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op226_op227_op228.snodes[0] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf215', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf225', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op226.met_dependencies = 
    [   MemoryDep('arg103_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg104_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op226.group.device = cuda:0
op226.group.iteration = (9424, 128)
op226.sizes = ([8, 19, 62], [128])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op226_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf225', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg103_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg104_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op226_op227_op228.snodes[1] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op227.unmet_dependencies = 
    [   MemoryDep('buf215', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf225', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op227.met_dependencies = 
    [   MemoryDep('arg103_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg104_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (9424, 128)
op227.sizes = ([8, 19, 62], [128])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op227_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf227', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf225', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg103_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg104_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op226_op227_op228.snodes[2] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf215', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf225', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg103_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg104_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (9424, 128)
op228.sizes = ([8, 19, 62], [128])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op228_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf228', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf225', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg103_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg104_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op229_op230_op231: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op229_op230_op231.writes = 
    [   MemoryDep('buf229', c0, {c0: 152}, None),
        MemoryDep('buf230', c0, {c0: 152}, None),
        MemoryDep('buf231', c0, {c0: 152}, None)]
op229_op230_op231.unmet_dependencies = 
    [   MemoryDep('buf226', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf227', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf228', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op229_op230_op231.met_dependencies = []
op229_op230_op231.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf229.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op229_op230_op231.snodes[0] =
op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 152}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf226', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf227', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf228', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf229.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (152, 62)
op229.sizes = ([8, 19], [62])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op229_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf227', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf228', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf229', get_index_3, getitem)
        return store_reduction
op229_op230_op231.snodes[1] =
op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 152}, None)]
op230.unmet_dependencies = 
    [   MemoryDep('buf226', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf227', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf228', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op230.group.device = cuda:0
op230.group.iteration = (152, 62)
op230.sizes = ([8, 19], [62])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op230_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf227', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf228', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf230', get_index_3, getitem_1)
        return store_reduction
op229_op230_op231.snodes[2] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 152}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf226', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf227', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf228', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (152, 62)
op231.sizes = ([8, 19], [62])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op231_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf227', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf228', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf231', get_index_3, getitem_2)
        return store_reduction


op232_op233: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op232_op233.writes = [MemoryDep('buf232', c0, {c0: 8}, None), MemoryDep('buf233', c0, {c0: 8}, None)]
op232_op233.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 152}, None),
        MemoryDep('buf230', c0, {c0: 152}, None),
        MemoryDep('buf231', c0, {c0: 152}, None)]
op232_op233.met_dependencies = []
op232_op233.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf232.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op232_op233.snodes[0] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 8}, None)]
op232.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 152}, None),
        MemoryDep('buf230', c0, {c0: 152}, None),
        MemoryDep('buf231', c0, {c0: 152}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf232.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (8, 19)
op232.sizes = ([8], [19])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op232_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf230', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf231', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf232', get_index_3, getitem)
        return store_reduction
op232_op233.snodes[1] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 8}, None)]
op233.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 152}, None),
        MemoryDep('buf230', c0, {c0: 152}, None),
        MemoryDep('buf231', c0, {c0: 152}, None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (8, 19)
op233.sizes = ([8], [19])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op233_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf230', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf231', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_3, getitem_1)
        return store_reduction


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 1204224}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf215', c0, {c0: 1204224}, None),
        MemoryDep('buf225', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf232', c0, {c0: 8}, None),
        MemoryDep('buf233', c0, {c0: 8}, None)]
op235.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg104_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg105_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg106_1', c1, {c0: 8, c1: 192}, None)]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
    ]
]
op235.group.device = cuda:0
op235.group.iteration = (1204224, 1)
op235.sizes = ([8, 192, 784], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op235_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = 150528*z0 + z1 + 192*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf225', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg103_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg104_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf232', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf233', get_index_5)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg105_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg106_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf235', get_index_8, add_3, None)
        return store


op236_op237: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op236_op237.writes = 
    [   MemoryDep('buf236', c0, {c0: 1204224}, None),
        MemoryDep('buf237', c0, {c0: 1204224}, None)]
op236_op237.unmet_dependencies = 
    [   MemoryDep('buf215', c0, {c0: 1204224}, None),
        MemoryDep('buf225', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf235', c0 + 1, {c0: 1204224}, None),
        MemoryDep('buf235', c0 + 27, {c0: 1204224}, None),
        MemoryDep('buf235', c0 + 28, {c0: 1204224}, None),
        MemoryDep('buf235', c0 + 29, {c0: 1204224}, None),
        MemoryDep('buf235', c0 - 1, {c0: 1204224}, None),
        MemoryDep('buf235', c0 - 27, {c0: 1204224}, None),
        MemoryDep('buf235', c0 - 28, {c0: 1204224}, None),
        MemoryDep('buf235', c0 - 29, {c0: 1204224}, None),
        MemoryDep('buf235', c0, {c0: 1204224}, None)]
op236_op237.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg104_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg107_1', c1, {c0: 8, c1: 192}, None)]
op236_op237.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf237.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
    ]
]
op236_op237.snodes[0] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 1204224}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf235', c0 + 1, {c0: 1204224}, None),
        MemoryDep('buf235', c0 + 27, {c0: 1204224}, None),
        MemoryDep('buf235', c0 + 28, {c0: 1204224}, None),
        MemoryDep('buf235', c0 + 29, {c0: 1204224}, None),
        MemoryDep('buf235', c0 - 1, {c0: 1204224}, None),
        MemoryDep('buf235', c0 - 27, {c0: 1204224}, None),
        MemoryDep('buf235', c0 - 28, {c0: 1204224}, None),
        MemoryDep('buf235', c0 - 29, {c0: 1204224}, None),
        MemoryDep('buf235', c0, {c0: 1204224}, None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (1204224, 1)
op236.sizes = ([1536, 28, 28], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op236_loop_body:
    var_ranges = {z0: 1536, z1: 28, z2: 28}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 784*z0 + 28*z1 + z2 - 29
    index3 = z2
    index4 = 784*z0 + 28*z1 + z2 - 28
    index5 = z2 + 1
    index6 = 784*z0 + 28*z1 + z2 - 27
    index7 = z1
    index8 = 784*z0 + 28*z1 + z2 - 1
    index9 = 784*z0 + 28*z1 + z2
    index10 = 784*z0 + 28*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 784*z0 + 28*z1 + z2 + 27
    index13 = 784*z0 + 28*z1 + z2 + 28
    index14 = 784*z0 + 28*z1 + z2 + 29
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(28, z2 + 2) - Max(0, z2 - 1)*Min(28, z1 + 2) + Min(28, z1 + 2)*Min(28, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(28, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(28, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(28, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(28, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(28, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(28, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(28, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(28, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(28, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(28, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(28, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(28, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(28, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(28, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(28, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(28, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf236', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf235', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf235', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf235', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf235', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf235', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf235', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf235', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf235', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf235', get_index)
        return load
op236_op237.snodes[1] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 1204224}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf215', c0, {c0: 1204224}, None),
        MemoryDep('buf225', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf235', c0, {c0: 1204224}, None),
        MemoryDep('buf236', c0, {c0: 1204224}, None)]
op237.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg104_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg107_1', c1, {c0: 8, c1: 192}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf237.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
    ]
]
op237.group.device = cuda:0
op237.group.iteration = (1204224, 1)
op237.sizes = ([8, 192, 784], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op237_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = 150528*z0 + z1 + 192*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf225', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg103_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg104_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf236', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf235', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg107_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf237', get_index_7, add_2, None)
        return store


op238_op239_op240: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op238_op239_op240.writes = 
    [   MemoryDep('buf238', c0, {c0: 152}, None),
        MemoryDep('buf239', c0, {c0: 152}, None),
        MemoryDep('buf240', c0, {c0: 152}, None)]
op238_op239_op240.unmet_dependencies = [   MemoryDep('buf237', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op238_op239_op240.met_dependencies = []
op238_op239_op240.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf239.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf240.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
]
op238_op239_op240.snodes[0] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 152}, None)]
op238.unmet_dependencies = [   MemoryDep('buf237', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf238.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
]
op238.group.device = cuda:0
op238.group.iteration = (152, 7923)
op238.sizes = ([8, 19], [7923])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op238_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf238', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf237', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op238_op239_op240.snodes[1] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 152}, None)]
op239.unmet_dependencies = [   MemoryDep('buf237', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf239.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (152, 7923)
op239.sizes = ([8, 19], [7923])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op239_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf239', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf237', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op238_op239_op240.snodes[2] =
op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 152}, None)]
op240.unmet_dependencies = [   MemoryDep('buf237', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf240.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
]
op240.group.device = cuda:0
op240.group.iteration = (152, 7923)
op240.sizes = ([8, 19], [7923])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op240_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf240', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf237', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op241_op242: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op241_op242.writes = [MemoryDep('buf241', c0, {c0: 8}, None), MemoryDep('buf242', c0, {c0: 8}, None)]
op241_op242.unmet_dependencies = 
    [   MemoryDep('buf238', c0, {c0: 152}, None),
        MemoryDep('buf239', c0, {c0: 152}, None),
        MemoryDep('buf240', c0, {c0: 152}, None)]
op241_op242.met_dependencies = []
op241_op242.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf241.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf242.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op241_op242.snodes[0] =
op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 8}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf238', c0, {c0: 152}, None),
        MemoryDep('buf239', c0, {c0: 152}, None),
        MemoryDep('buf240', c0, {c0: 152}, None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf241.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (8, 19)
op241.sizes = ([8], [19])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op241_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf239', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf240', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf241', get_index_3, getitem)
        return store_reduction
op241_op242.snodes[1] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 8}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf238', c0, {c0: 152}, None),
        MemoryDep('buf239', c0, {c0: 152}, None),
        MemoryDep('buf240', c0, {c0: 152}, None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf242.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (8, 19)
op242.sizes = ([8], [19])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op242_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf239', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf240', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf242', get_index_3, getitem_1)
        return store_reduction


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 1204224}, None),
        MemoryDep('buf241', c0, {c0: 8}, None),
        MemoryDep('buf242', c0, {c0: 8}, None)]
op244.met_dependencies = 
    [   MemoryDep('arg108_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg109_1', c1, {c0: 8, c1: 192}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (1204224, 1)
op244.sizes = ([8, 192, 784], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
class op244_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 150528*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf241', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf242', get_index_2)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg108_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg109_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf244', get_index_5, add_1, None)
        return store


op245: ExternKernelSchedulerNode(ExternKernelAlloc)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op245.outputs = [
    buf245: ExternKernelAlloc
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf245.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False)]
]
op245.node.kernel = extern_kernels.convolution


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 4816896}, None)]
op246.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 4816896}, None)]
op246.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 6272, c1: 768}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (4816896, 1)
op246.sizes = ([6272, 768], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
class op246_loop_body:
    var_ranges = {z0: 6272, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg111_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf246', get_index_4, mul_2, None)
        return store


op247: ExternKernelSchedulerNode(ExternKernelAlloc)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelAlloc
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf247.users = [
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
    ]
]
op247.node.kernel = extern_kernels.convolution


op248_op249_op250: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op248_op249_op250.writes = 
    [   MemoryDep('buf248', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf249', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf250', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op248_op249_op250.unmet_dependencies = 
    [   MemoryDep('buf237', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf247', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op248_op249_op250.met_dependencies = 
    [   MemoryDep('arg113_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg114_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op248_op249_op250.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
    ]
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
    ]
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
    ]
]
op248_op249_op250.snodes[0] =
op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf237', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf247', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op248.met_dependencies = 
    [   MemoryDep('arg113_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg114_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
    ]
]
op248.group.device = cuda:0
op248.group.iteration = (9424, 128)
op248.sizes = ([8, 19, 62], [128])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op248_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf248', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg113_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg114_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op248_op249_op250.snodes[1] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op249.unmet_dependencies = 
    [   MemoryDep('buf237', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf247', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op249.met_dependencies = 
    [   MemoryDep('arg113_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg114_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
    ]
]
op249.group.device = cuda:0
op249.group.iteration = (9424, 128)
op249.sizes = ([8, 19, 62], [128])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op249_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf249', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg113_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg114_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op248_op249_op250.snodes[2] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf237', 150528*c0 + ModularIndexing(7923*c1 + c2, 1, 150528), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('buf247', 150528*c0 + 192*ModularIndexing(7923*c1 + c2, 1, 784) + ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op250.met_dependencies = 
    [   MemoryDep('arg113_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None),
        MemoryDep('arg114_1', ModularIndexing(7923*c1 + c2, 784, 192), {c0: 8, c1: 19, c2: 7936}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
    ]
]
op250.group.device = cuda:0
op250.group.iteration = (9424, 128)
op250.sizes = ([8, 19, 62], [128])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
class op250_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7923*z1 + 128*z2 + z3
    index2 = 150528*z0 + ModularIndexing(7923*z1 + 128*z2 + z3, 1, 150528)
    index3 = 150528*z0 + 192*ModularIndexing(7923*z1 + 128*z2 + z3, 1, 784) + ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index4 = ModularIndexing(7923*z1 + 128*z2 + z3, 784, 192)
    index5 = 1184*z0 + 62*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7923, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7923, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7923, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf250', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg113_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg114_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op251_op252_op253: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op251_op252_op253.writes = 
    [   MemoryDep('buf251', c0, {c0: 152}, None),
        MemoryDep('buf252', c0, {c0: 152}, None),
        MemoryDep('buf253', c0, {c0: 152}, None)]
op251_op252_op253.unmet_dependencies = 
    [   MemoryDep('buf248', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf249', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf250', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op251_op252_op253.met_dependencies = []
op251_op252_op253.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
    ]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
    ]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
    ]
]
op251_op252_op253.snodes[0] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 152}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf248', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf249', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf250', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op251.met_dependencies = []
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
    ]
]
op251.group.device = cuda:0
op251.group.iteration = (152, 62)
op251.sizes = ([8, 19], [62])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op251_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf251', get_index_3, getitem)
        return store_reduction
op251_op252_op253.snodes[1] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 152}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf248', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf249', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf250', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (152, 62)
op252.sizes = ([8, 19], [62])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf252', get_index_3, getitem_1)
        return store_reduction
op251_op252_op253.snodes[2] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 152}, None)]
op253.unmet_dependencies = 
    [   MemoryDep('buf248', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf249', 1184*c0 + c1, {c0: 8, c1: 1178}, None),
        MemoryDep('buf250', 1184*c0 + c1, {c0: 8, c1: 1178}, None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (152, 62)
op253.sizes = ([8, 19], [62])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19, 62], stride=[1184, 9472, 9472, 9472, 62, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op253_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 62}
    index0 = 1184*z0 + 62*z1 + z2
    index1 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_3, getitem_2)
        return store_reduction


op254_op255: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op254_op255.writes = [MemoryDep('buf254', c0, {c0: 8}, None), MemoryDep('buf255', c0, {c0: 8}, None)]
op254_op255.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 152}, None),
        MemoryDep('buf252', c0, {c0: 152}, None),
        MemoryDep('buf253', c0, {c0: 152}, None)]
op254_op255.met_dependencies = []
op254_op255.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf255.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op254_op255.snodes[0] =
op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 8}, None)]
op254.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 152}, None),
        MemoryDep('buf252', c0, {c0: 152}, None),
        MemoryDep('buf253', c0, {c0: 152}, None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (8, 19)
op254.sizes = ([8], [19])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op254_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf252', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf253', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf254', get_index_3, getitem)
        return store_reduction
op254_op255.snodes[1] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 8}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 152}, None),
        MemoryDep('buf252', c0, {c0: 152}, None),
        MemoryDep('buf253', c0, {c0: 152}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf255.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (8, 19)
op255.sizes = ([8], [19])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op255_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf252', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf253', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf255', get_index_3, getitem_1)
        return store_reduction


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 1204224}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 1204224}, None),
        MemoryDep('buf247', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf254', c0, {c0: 8}, None),
        MemoryDep('buf255', c0, {c0: 8}, None)]
op257.met_dependencies = 
    [   MemoryDep('arg113_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg114_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg115_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg116_1', c1, {c0: 8, c1: 192}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False),
    ]
]
op257.group.device = cuda:0
op257.group.iteration = (1204224, 1)
op257.sizes = ([8, 192, 784], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op257_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = 150528*z0 + z1 + 192*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg113_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg114_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf254', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf255', get_index_5)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg115_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg116_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf257', get_index_8, add_3, None)
        return store


op258_op259: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op258_op259.writes = 
    [   MemoryDep('buf258', c0, {c0: 1204224}, None),
        MemoryDep('buf259', c0, {c0: 1204224}, None)]
op258_op259.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 1204224}, None),
        MemoryDep('buf247', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf257', c0 + 1, {c0: 1204224}, None),
        MemoryDep('buf257', c0 + 27, {c0: 1204224}, None),
        MemoryDep('buf257', c0 + 28, {c0: 1204224}, None),
        MemoryDep('buf257', c0 + 29, {c0: 1204224}, None),
        MemoryDep('buf257', c0 - 1, {c0: 1204224}, None),
        MemoryDep('buf257', c0 - 27, {c0: 1204224}, None),
        MemoryDep('buf257', c0 - 28, {c0: 1204224}, None),
        MemoryDep('buf257', c0 - 29, {c0: 1204224}, None),
        MemoryDep('buf257', c0, {c0: 1204224}, None)]
op258_op259.met_dependencies = 
    [   MemoryDep('arg113_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg114_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg117_1', c1, {c0: 8, c1: 192}, None)]
op258_op259.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf258.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False)]
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
    ]
]
op258_op259.snodes[0] =
op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 1204224}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf257', c0 + 1, {c0: 1204224}, None),
        MemoryDep('buf257', c0 + 27, {c0: 1204224}, None),
        MemoryDep('buf257', c0 + 28, {c0: 1204224}, None),
        MemoryDep('buf257', c0 + 29, {c0: 1204224}, None),
        MemoryDep('buf257', c0 - 1, {c0: 1204224}, None),
        MemoryDep('buf257', c0 - 27, {c0: 1204224}, None),
        MemoryDep('buf257', c0 - 28, {c0: 1204224}, None),
        MemoryDep('buf257', c0 - 29, {c0: 1204224}, None),
        MemoryDep('buf257', c0, {c0: 1204224}, None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf258.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (1204224, 1)
op258.sizes = ([1536, 28, 28], [])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op258_loop_body:
    var_ranges = {z0: 1536, z1: 28, z2: 28}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 784*z0 + 28*z1 + z2 - 29
    index3 = z2
    index4 = 784*z0 + 28*z1 + z2 - 28
    index5 = z2 + 1
    index6 = 784*z0 + 28*z1 + z2 - 27
    index7 = z1
    index8 = 784*z0 + 28*z1 + z2 - 1
    index9 = 784*z0 + 28*z1 + z2
    index10 = 784*z0 + 28*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 784*z0 + 28*z1 + z2 + 27
    index13 = 784*z0 + 28*z1 + z2 + 28
    index14 = 784*z0 + 28*z1 + z2 + 29
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(28, z2 + 2) - Max(0, z2 - 1)*Min(28, z1 + 2) + Min(28, z1 + 2)*Min(28, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(28, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(28, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(28, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(28, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(28, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(28, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(28, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(28, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(28, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(28, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(28, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(28, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(28, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(28, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(28, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(28, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf258', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf257', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf257', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf257', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf257', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf257', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf257', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf257', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf257', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf257', get_index)
        return load
op258_op259.snodes[1] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 1204224}, None)]
op259.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 1204224}, None),
        MemoryDep('buf247', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None),
        MemoryDep('buf257', c0, {c0: 1204224}, None),
        MemoryDep('buf258', c0, {c0: 1204224}, None)]
op259.met_dependencies = 
    [   MemoryDep('arg113_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg114_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg117_1', c1, {c0: 8, c1: 192}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (1204224, 1)
op259.sizes = ([8, 192, 784], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
class op259_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = 150528*z0 + z1 + 192*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg113_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg114_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf258', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf257', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg117_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf259', get_index_7, add_2, None)
        return store


op260_op261_op262: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op260_op261_op262.writes = 
    [   MemoryDep('buf260', c0, {c0: 152}, None),
        MemoryDep('buf261', c0, {c0: 152}, None),
        MemoryDep('buf262', c0, {c0: 152}, None)]
op260_op261_op262.unmet_dependencies = [   MemoryDep('buf259', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op260_op261_op262.met_dependencies = []
op260_op261_op262.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf260.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
]
op260_op261_op262.snodes[0] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 152}, None)]
op260.unmet_dependencies = [   MemoryDep('buf259', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf260.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
]
op260.group.device = cuda:0
op260.group.iteration = (152, 7923)
op260.sizes = ([8, 19], [7923])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op260_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf260', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op260_op261_op262.snodes[1] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 152}, None)]
op261.unmet_dependencies = [   MemoryDep('buf259', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
]
op261.group.device = cuda:0
op261.group.iteration = (152, 7923)
op261.sizes = ([8, 19], [7923])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op261_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf261', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op260_op261_op262.snodes[2] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 152}, None)]
op262.unmet_dependencies = [   MemoryDep('buf259', 150528*c0 + ModularIndexing(c1, 1, 150528), {c0: 8, c1: 150537}, None)]
op262.met_dependencies = []
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (152, 7923)
op262.sizes = ([8, 19], [7923])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
class op262_loop_body:
    var_ranges = {z0: 8, z1: 19, z2: 7923}
    index0 = 7923*z1 + z2
    index1 = 150528*z0 + ModularIndexing(7923*z1 + z2, 1, 150528)
    index2 = 19*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(150528, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(150528, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(150528, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf262', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf259', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op263_op264: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op263_op264.writes = [MemoryDep('buf263', c0, {c0: 8}, None), MemoryDep('buf264', c0, {c0: 8}, None)]
op263_op264.unmet_dependencies = 
    [   MemoryDep('buf260', c0, {c0: 152}, None),
        MemoryDep('buf261', c0, {c0: 152}, None),
        MemoryDep('buf262', c0, {c0: 152}, None)]
op263_op264.met_dependencies = []
op263_op264.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op263_op264.snodes[0] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 8}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf260', c0, {c0: 152}, None),
        MemoryDep('buf261', c0, {c0: 152}, None),
        MemoryDep('buf262', c0, {c0: 152}, None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (8, 19)
op263.sizes = ([8], [19])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op263_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf261', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf262', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf263', get_index_3, getitem)
        return store_reduction
op263_op264.snodes[1] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 8}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf260', c0, {c0: 152}, None),
        MemoryDep('buf261', c0, {c0: 152}, None),
        MemoryDep('buf262', c0, {c0: 152}, None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (8, 19)
op264.sizes = ([8], [19])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 19], stride=[19, 152, 152, 152, 1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op264_loop_body:
    var_ranges = {z0: 8, z1: 19}
    index0 = 19*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf261', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf262', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf264', get_index_3, getitem_1)
        return store_reduction


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', 150528*c0 + c1 + 192*c2, {c0: 8, c1: 192, c2: 784}, None)]
op266.unmet_dependencies = 
    [   MemoryDep('buf259', c0, {c0: 1204224}, None),
        MemoryDep('buf263', c0, {c0: 8}, None),
        MemoryDep('buf264', c0, {c0: 8}, None)]
op266.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 8, c1: 192}, None),
        MemoryDep('arg119_1', c1, {c0: 8, c1: 192}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (1204224, 1)
op266.sizes = ([8, 192, 784], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
class op266_loop_body:
    var_ranges = {z0: 8, z1: 192, z2: 784}
    index0 = 150528*z0 + 784*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 150528*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf263', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf264', get_index_2)
        constant = ops.constant(150528.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg118_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg119_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf266', get_index_5, add_1, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelAlloc)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op267.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelAlloc
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf267.users = [NodeUser(node=SchedulerNode(name='op268'), can_inplace=True, is_weak=False)]
]
op267.node.kernel = extern_kernels.convolution


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 4816896}, None)]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 4816896}, None)]
op268.met_dependencies = [MemoryDep('arg121_1', c1, {c0: 6272, c1: 768}, None)]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (4816896, 1)
op268.sizes = ([6272, 768], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=[602112, 1, 21504, 768])
class op268_loop_body:
    var_ranges = {z0: 6272, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf267', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg121_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf268', get_index_4, mul_2, None)
        return store


op269: ExternKernelSchedulerNode(ExternKernelAlloc)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf268', mode=None)]
op269.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op269.outputs = [
    buf269: ExternKernelAlloc
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False)]
]
op269.node.kernel = extern_kernels.convolution


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 1204224}, None)]
op270.unmet_dependencies = 
    [   MemoryDep('buf259', 150528*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 192}, None),
        MemoryDep('buf269', c0, {c0: 1204224}, None)]
op270.met_dependencies = 
    [   MemoryDep('arg123_1', c1, {c0: 6272, c1: 192}, None),
        MemoryDep('arg124_1', c1, {c0: 6272, c1: 192}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (1204224, 1)
op270.sizes = ([8, 784, 192], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 784, 28, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 28, 28], stride=[150528, 1, 5376, 192])
class op270_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 192}
    index0 = 150528*z0 + z1 + 784*z2
    index1 = 150528*z0 + 192*z1 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf269', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg123_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg124_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf270', get_index_4, add_1, None)
        return store


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', 1728*c0 + c1 + 192*c2, {c0: 384, c1: 192, c2: 9}, None)]
op271.unmet_dependencies = []
op271.met_dependencies = [MemoryDep('arg125_1', c0, {c0: 663552}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 1, 576, 192])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (663552, 1)
op271.sizes = ([384, 192, 9], [])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 9, 3, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[384, 192, 3, 3], stride=[1728, 1, 576, 192])
class op271_loop_body:
    var_ranges = {z0: 384, z1: 192, z2: 9}
    index0 = 1728*z0 + 9*z1 + z2
    index1 = 1728*z0 + z1 + 192*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg125_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf271', get_index_1, load, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelAlloc)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf270', mode=None), StarDep(name='buf271', mode=None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ExternKernelAlloc
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
    ]
]
op272.node.kernel = extern_kernels.convolution


op273_op274_op275: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op273_op274_op275.writes = 
    [   MemoryDep('buf273', c0, {c0: 4720}, None),
        MemoryDep('buf274', c0, {c0: 4720}, None),
        MemoryDep('buf275', c0, {c0: 4720}, None)]
op273_op274_op275.unmet_dependencies = [   MemoryDep('buf272', 75264*c0 + 384*ModularIndexing(128*c1 + 7527*c2 + c3, 1, 196) + ModularIndexing(128*c1 + 7527*c2 + c3, 196, 384), {c0: 8, c1: 59, c2: 10, c3: 128}, None)]
op273_op274_op275.met_dependencies = [   MemoryDep('arg126_1', ModularIndexing(128*c1 + 7527*c2 + c3, 196, 384), {c0: 8, c1: 59, c2: 10, c3: 128}, None)]
op273_op274_op275.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
]
op273_op274_op275.snodes[0] =
op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 4720}, None)]
op273.unmet_dependencies = [   MemoryDep('buf272', 75264*c0 + 384*ModularIndexing(128*c1 + 7527*c2 + c3, 1, 196) + ModularIndexing(128*c1 + 7527*c2 + c3, 196, 384), {c0: 8, c1: 59, c2: 10, c3: 128}, None)]
op273.met_dependencies = [   MemoryDep('arg126_1', ModularIndexing(128*c1 + 7527*c2 + c3, 196, 384), {c0: 8, c1: 59, c2: 10, c3: 128}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
]
op273.group.device = cuda:0
op273.group.iteration = (4720, 128)
op273.sizes = ([8, 59, 10], [128])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
class op273_loop_body:
    var_ranges = {z0: 8, z1: 59, z2: 10, z3: 128}
    index0 = 128*z1 + z3
    index1 = 128*z1 + 7527*z2 + z3
    index2 = 75264*z0 + 384*ModularIndexing(128*z1 + 7527*z2 + z3, 1, 196) + ModularIndexing(128*z1 + 7527*z2 + z3, 196, 384)
    index3 = ModularIndexing(128*z1 + 7527*z2 + z3, 196, 384)
    index4 = 590*z0 + 10*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf273', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op273_op274_op275.snodes[1] =
op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 4720}, None)]
op274.unmet_dependencies = [   MemoryDep('buf272', 75264*c0 + 384*ModularIndexing(128*c1 + 7527*c2 + c3, 1, 196) + ModularIndexing(128*c1 + 7527*c2 + c3, 196, 384), {c0: 8, c1: 59, c2: 10, c3: 128}, None)]
op274.met_dependencies = [   MemoryDep('arg126_1', ModularIndexing(128*c1 + 7527*c2 + c3, 196, 384), {c0: 8, c1: 59, c2: 10, c3: 128}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
]
op274.group.device = cuda:0
op274.group.iteration = (4720, 128)
op274.sizes = ([8, 59, 10], [128])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
class op274_loop_body:
    var_ranges = {z0: 8, z1: 59, z2: 10, z3: 128}
    index0 = 128*z1 + z3
    index1 = 128*z1 + 7527*z2 + z3
    index2 = 75264*z0 + 384*ModularIndexing(128*z1 + 7527*z2 + z3, 1, 196) + ModularIndexing(128*z1 + 7527*z2 + z3, 196, 384)
    index3 = ModularIndexing(128*z1 + 7527*z2 + z3, 196, 384)
    index4 = 590*z0 + 10*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf274', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op273_op274_op275.snodes[2] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 4720}, None)]
op275.unmet_dependencies = [   MemoryDep('buf272', 75264*c0 + 384*ModularIndexing(128*c1 + 7527*c2 + c3, 1, 196) + ModularIndexing(128*c1 + 7527*c2 + c3, 196, 384), {c0: 8, c1: 59, c2: 10, c3: 128}, None)]
op275.met_dependencies = [   MemoryDep('arg126_1', ModularIndexing(128*c1 + 7527*c2 + c3, 196, 384), {c0: 8, c1: 59, c2: 10, c3: 128}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
]
op275.group.device = cuda:0
op275.group.iteration = (4720, 128)
op275.sizes = ([8, 59, 10], [128])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
class op275_loop_body:
    var_ranges = {z0: 8, z1: 59, z2: 10, z3: 128}
    index0 = 128*z1 + z3
    index1 = 128*z1 + 7527*z2 + z3
    index2 = 75264*z0 + 384*ModularIndexing(128*z1 + 7527*z2 + z3, 1, 196) + ModularIndexing(128*z1 + 7527*z2 + z3, 196, 384)
    index3 = ModularIndexing(128*z1 + 7527*z2 + z3, 196, 384)
    index4 = 590*z0 + 10*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf275', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op276_op277_op278: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op276_op277_op278.writes = 
    [   MemoryDep('buf276', c0, {c0: 80}, None),
        MemoryDep('buf277', c0, {c0: 80}, None),
        MemoryDep('buf278', c0, {c0: 80}, None)]
op276_op277_op278.unmet_dependencies = 
    [   MemoryDep('buf273', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None),
        MemoryDep('buf274', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None),
        MemoryDep('buf275', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None)]
op276_op277_op278.met_dependencies = []
op276_op277_op278.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf276.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf277.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
]
op276_op277_op278.snodes[0] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 80}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf273', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None),
        MemoryDep('buf274', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None),
        MemoryDep('buf275', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf276.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
]
op276.group.device = cuda:0
op276.group.iteration = (80, 59)
op276.sizes = ([8, 10], [59])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op276_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59}
    index0 = 590*z0 + z1 + 10*z2
    index1 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf275', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf276', get_index_3, getitem)
        return store_reduction
op276_op277_op278.snodes[1] =
op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 80}, None)]
op277.unmet_dependencies = 
    [   MemoryDep('buf273', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None),
        MemoryDep('buf274', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None),
        MemoryDep('buf275', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf277.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
]
op277.group.device = cuda:0
op277.group.iteration = (80, 59)
op277.sizes = ([8, 10], [59])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op277_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59}
    index0 = 590*z0 + z1 + 10*z2
    index1 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf275', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf277', get_index_3, getitem_1)
        return store_reduction
op276_op277_op278.snodes[2] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 80}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf273', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None),
        MemoryDep('buf274', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None),
        MemoryDep('buf275', 590*c0 + c1 + 10*c2, {c0: 8, c1: 10, c2: 59}, None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf278.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (80, 59)
op278.sizes = ([8, 10], [59])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 1, 10])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op278_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59}
    index0 = 590*z0 + z1 + 10*z2
    index1 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf275', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf278', get_index_3, getitem_2)
        return store_reduction


op279_op280: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op279_op280.writes = [MemoryDep('buf279', c0, {c0: 8}, None), MemoryDep('buf280', c0, {c0: 8}, None)]
op279_op280.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 80}, None),
        MemoryDep('buf277', c0, {c0: 80}, None),
        MemoryDep('buf278', c0, {c0: 80}, None)]
op279_op280.met_dependencies = []
op279_op280.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf279.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf280.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op279_op280.snodes[0] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 8}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 80}, None),
        MemoryDep('buf277', c0, {c0: 80}, None),
        MemoryDep('buf278', c0, {c0: 80}, None)]
op279.met_dependencies = []
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf279.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (8, 10)
op279.sizes = ([8], [10])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op279_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf277', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf278', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf279', get_index_3, getitem)
        return store_reduction
op279_op280.snodes[1] =
op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 8}, None)]
op280.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 80}, None),
        MemoryDep('buf277', c0, {c0: 80}, None),
        MemoryDep('buf278', c0, {c0: 80}, None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf280.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (8, 10)
op280.sizes = ([8], [10])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op280_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf277', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf278', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf280', get_index_3, getitem_1)
        return store_reduction


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 602112}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 602112}, None),
        MemoryDep('buf279', c0, {c0: 8}, None),
        MemoryDep('buf280', c0, {c0: 8}, None)]
op282.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg127_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg128_1', c1, {c0: 1568, c1: 384}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf282.users = [
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
    ]
]
op282.group.device = cuda:0
op282.group.iteration = (602112, 1)
op282.sizes = ([8, 196, 384], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op282_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = 75264*z0 + 384*z1 + z2
    index1 = z2
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf279', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf280', get_index_3)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg127_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg128_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf282', get_index_6, add_2, None)
        return store


op283_op284: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op283_op284.writes = 
    [   MemoryDep('buf283', c0, {c0: 602112}, None),
        MemoryDep('buf284', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op283_op284.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 602112}, None),
        MemoryDep('buf282', c0 + 384, {c0: 602112}, None),
        MemoryDep('buf282', c0 + 4992, {c0: 602112}, None),
        MemoryDep('buf282', c0 + 5376, {c0: 602112}, None),
        MemoryDep('buf282', c0 + 5760, {c0: 602112}, None),
        MemoryDep('buf282', c0 - 384, {c0: 602112}, None),
        MemoryDep('buf282', c0 - 4992, {c0: 602112}, None),
        MemoryDep('buf282', c0 - 5376, {c0: 602112}, None),
        MemoryDep('buf282', c0 - 5760, {c0: 602112}, None),
        MemoryDep('buf282', c0, {c0: 602112}, None)]
op283_op284.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg129_1', c1, {c0: 1568, c1: 384}, None)]
op283_op284.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf283.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
    ]
]
op283_op284.snodes[0] =
op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 602112}, None)]
op283.unmet_dependencies = 
    [   MemoryDep('buf282', c0 + 384, {c0: 602112}, None),
        MemoryDep('buf282', c0 + 4992, {c0: 602112}, None),
        MemoryDep('buf282', c0 + 5376, {c0: 602112}, None),
        MemoryDep('buf282', c0 + 5760, {c0: 602112}, None),
        MemoryDep('buf282', c0 - 384, {c0: 602112}, None),
        MemoryDep('buf282', c0 - 4992, {c0: 602112}, None),
        MemoryDep('buf282', c0 - 5376, {c0: 602112}, None),
        MemoryDep('buf282', c0 - 5760, {c0: 602112}, None),
        MemoryDep('buf282', c0, {c0: 602112}, None)]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf283.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (602112, 1)
op283.sizes = ([8, 14, 14, 384], [])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op283_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 14, z3: 384}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 75264*z0 + 5376*z1 + 384*z2 + z3 - 5760
    index3 = z2
    index4 = 75264*z0 + 5376*z1 + 384*z2 + z3 - 5376
    index5 = z2 + 1
    index6 = 75264*z0 + 5376*z1 + 384*z2 + z3 - 4992
    index7 = z1
    index8 = 75264*z0 + 5376*z1 + 384*z2 + z3 - 384
    index9 = 75264*z0 + 5376*z1 + 384*z2 + z3
    index10 = 75264*z0 + 5376*z1 + 384*z2 + z3 + 384
    index11 = z1 + 1
    index12 = 75264*z0 + 5376*z1 + 384*z2 + z3 + 4992
    index13 = 75264*z0 + 5376*z1 + 384*z2 + z3 + 5376
    index14 = 75264*z0 + 5376*z1 + 384*z2 + z3 + 5760
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf283', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf282', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf282', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf282', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf282', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf282', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf282', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf282', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf282', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf282', get_index)
        return load
op283_op284.snodes[1] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf272', c0, {c0: 602112}, None),
        MemoryDep('buf282', c0, {c0: 602112}, None),
        MemoryDep('buf283', c0, {c0: 602112}, None)]
op284.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg129_1', c1, {c0: 1568, c1: 384}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (602112, 1)
op284.sizes = ([8, 196, 384], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op284_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = 75264*z0 + 384*z1 + z2
    index1 = z2
    index2 = 75264*z0 + z1 + 196*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf283', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf282', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg129_1', get_index_4)
        mul = ops.mul(sub, load_4)
        add_1 = ops.add(add, mul)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf284', get_index_5, add_1, None)
        return store


op285_op286_op287: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op285_op286_op287.writes = 
    [   MemoryDep('buf285', c0, {c0: 80}, None),
        MemoryDep('buf286', c0, {c0: 80}, None),
        MemoryDep('buf287', c0, {c0: 80}, None)]
op285_op286_op287.unmet_dependencies = [   MemoryDep('buf284', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op285_op286_op287.met_dependencies = []
op285_op286_op287.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
    ]
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
    ]
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf287.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
    ]
]
op285_op286_op287.snodes[0] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 80}, None)]
op285.unmet_dependencies = [   MemoryDep('buf284', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
    ]
]
op285.group.device = cuda:0
op285.group.iteration = (80, 7527)
op285.sizes = ([8, 10], [7527])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op285_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf285', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf284', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op285_op286_op287.snodes[1] =
op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 80}, None)]
op286.unmet_dependencies = [   MemoryDep('buf284', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
    ]
]
op286.group.device = cuda:0
op286.group.iteration = (80, 7527)
op286.sizes = ([8, 10], [7527])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op286_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf286', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf284', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op285_op286_op287.snodes[2] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 80}, None)]
op287.unmet_dependencies = [   MemoryDep('buf284', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf287.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
    ]
]
op287.group.device = cuda:0
op287.group.iteration = (80, 7527)
op287.sizes = ([8, 10], [7527])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op287_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf287', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf284', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op288_op289: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op288_op289.writes = [MemoryDep('buf288', c0, {c0: 8}, None), MemoryDep('buf289', c0, {c0: 8}, None)]
op288_op289.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 80}, None),
        MemoryDep('buf286', c0, {c0: 80}, None),
        MemoryDep('buf287', c0, {c0: 80}, None)]
op288_op289.met_dependencies = []
op288_op289.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf288.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf289.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op288_op289.snodes[0] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 8}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 80}, None),
        MemoryDep('buf286', c0, {c0: 80}, None),
        MemoryDep('buf287', c0, {c0: 80}, None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf288.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (8, 10)
op288.sizes = ([8], [10])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op288_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf287', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf288', get_index_3, getitem)
        return store_reduction
op288_op289.snodes[1] =
op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 8}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 80}, None),
        MemoryDep('buf286', c0, {c0: 80}, None),
        MemoryDep('buf287', c0, {c0: 80}, None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf289.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (8, 10)
op289.sizes = ([8], [10])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op289_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf286', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf287', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf289', get_index_3, getitem_1)
        return store_reduction


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op291.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 602112}, None),
        MemoryDep('buf288', c0, {c0: 8}, None),
        MemoryDep('buf289', c0, {c0: 8}, None)]
op291.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg131_1', c1, {c0: 8, c1: 384}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf291.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (602112, 1)
op291.sizes = ([8, 384, 196], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op291_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf288', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf289', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg130_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg131_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf291', get_index_5, add_1, None)
        return store


op292: ExternKernelSchedulerNode(ExternKernelAlloc)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf291', mode=None)]
op292.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op292.outputs = [
    buf292: ExternKernelAlloc
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf292.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False)]
]
op292.node.kernel = extern_kernels.convolution


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 2408448}, None)]
op293.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 2408448}, None)]
op293.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 1568, c1: 1536}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf293.users = [NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (2408448, 1)
op293.sizes = ([1568, 1536], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op293_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf292', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg133_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf293', get_index_4, mul_2, None)
        return store


op294: ExternKernelSchedulerNode(ExternKernelAlloc)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf293', mode=None)]
op294.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op294.outputs = [
    buf294: ExternKernelAlloc
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
    ]
]
op294.node.kernel = extern_kernels.convolution


op295_op296_op297: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op295_op296_op297.writes = 
    [   MemoryDep('buf295', c0, {c0: 4720}, None),
        MemoryDep('buf296', c0, {c0: 4720}, None),
        MemoryDep('buf297', c0, {c0: 4720}, None)]
op295_op296_op297.unmet_dependencies = 
    [   MemoryDep('buf284', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf294', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op295_op296_op297.met_dependencies = 
    [   MemoryDep('arg135_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg136_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op295_op296_op297.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf296.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf297.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op295_op296_op297.snodes[0] =
op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 4720}, None)]
op295.unmet_dependencies = 
    [   MemoryDep('buf284', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf294', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op295.met_dependencies = 
    [   MemoryDep('arg135_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg136_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op295.group.device = cuda:0
op295.group.iteration = (4720, 128)
op295.sizes = ([8, 10, 59], [128])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op295_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf295', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf294', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg136_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op295_op296_op297.snodes[1] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 4720}, None)]
op296.unmet_dependencies = 
    [   MemoryDep('buf284', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf294', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op296.met_dependencies = 
    [   MemoryDep('arg135_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg136_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf296.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op296.group.device = cuda:0
op296.group.iteration = (4720, 128)
op296.sizes = ([8, 10, 59], [128])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op296_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf296', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf294', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg136_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op295_op296_op297.snodes[2] =
op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 4720}, None)]
op297.unmet_dependencies = 
    [   MemoryDep('buf284', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf294', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op297.met_dependencies = 
    [   MemoryDep('arg135_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg136_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf297.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op297.group.device = cuda:0
op297.group.iteration = (4720, 128)
op297.sizes = ([8, 10, 59], [128])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op297_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf297', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf294', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg136_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op298_op299_op300: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op298_op299_op300.writes = 
    [   MemoryDep('buf298', c0, {c0: 80}, None),
        MemoryDep('buf299', c0, {c0: 80}, None),
        MemoryDep('buf300', c0, {c0: 80}, None)]
op298_op299_op300.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 4720}, None),
        MemoryDep('buf296', c0, {c0: 4720}, None),
        MemoryDep('buf297', c0, {c0: 4720}, None)]
op298_op299_op300.met_dependencies = []
op298_op299_op300.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
]
op298_op299_op300.snodes[0] =
op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 80}, None)]
op298.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 4720}, None),
        MemoryDep('buf296', c0, {c0: 4720}, None),
        MemoryDep('buf297', c0, {c0: 4720}, None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
]
op298.group.device = cuda:0
op298.group.iteration = (80, 59)
op298.sizes = ([80], [59])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op298_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf296', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf297', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf298', get_index_3, getitem)
        return store_reduction
op298_op299_op300.snodes[1] =
op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 80}, None)]
op299.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 4720}, None),
        MemoryDep('buf296', c0, {c0: 4720}, None),
        MemoryDep('buf297', c0, {c0: 4720}, None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
]
op299.group.device = cuda:0
op299.group.iteration = (80, 59)
op299.sizes = ([80], [59])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op299_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf296', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf297', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf299', get_index_3, getitem_1)
        return store_reduction
op298_op299_op300.snodes[2] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 80}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 4720}, None),
        MemoryDep('buf296', c0, {c0: 4720}, None),
        MemoryDep('buf297', c0, {c0: 4720}, None)]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf300.users = [
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
]
op300.group.device = cuda:0
op300.group.iteration = (80, 59)
op300.sizes = ([80], [59])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op300_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf296', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf297', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf300', get_index_3, getitem_2)
        return store_reduction


op301_op302: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op301_op302.writes = [MemoryDep('buf301', c0, {c0: 8}, None), MemoryDep('buf302', c0, {c0: 8}, None)]
op301_op302.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 80}, None),
        MemoryDep('buf299', c0, {c0: 80}, None),
        MemoryDep('buf300', c0, {c0: 80}, None)]
op301_op302.met_dependencies = []
op301_op302.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op301_op302.snodes[0] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 8}, None)]
op301.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 80}, None),
        MemoryDep('buf299', c0, {c0: 80}, None),
        MemoryDep('buf300', c0, {c0: 80}, None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf301.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (8, 10)
op301.sizes = ([8], [10])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op301_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf300', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf301', get_index_3, getitem)
        return store_reduction
op301_op302.snodes[1] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 8}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 80}, None),
        MemoryDep('buf299', c0, {c0: 80}, None),
        MemoryDep('buf300', c0, {c0: 80}, None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf302.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (8, 10)
op302.sizes = ([8], [10])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op302_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf300', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf302', get_index_3, getitem_1)
        return store_reduction


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 602112}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 602112}, None),
        MemoryDep('buf294', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf301', c0, {c0: 8}, None),
        MemoryDep('buf302', c0, {c0: 8}, None)]
op304.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg136_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg137_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg138_1', c1, {c0: 8, c1: 384}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf304.users = [
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
    ]
]
op304.group.device = cuda:0
op304.group.iteration = (602112, 1)
op304.sizes = ([8, 384, 196], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op304_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf294', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg136_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf301', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf302', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg137_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg138_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf304', get_index_8, add_3, None)
        return store


op305_op306: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op305_op306.writes = 
    [   MemoryDep('buf305', c0, {c0: 602112}, None),
        MemoryDep('buf306', c0, {c0: 602112}, None)]
op305_op306.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 602112}, None),
        MemoryDep('buf294', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf304', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf304', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf304', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf304', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf304', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf304', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf304', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf304', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf304', c0, {c0: 602112}, None)]
op305_op306.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg136_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg139_1', c1, {c0: 8, c1: 384}, None)]
op305_op306.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf305.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False)]
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
    ]
]
op305_op306.snodes[0] =
op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 602112}, None)]
op305.unmet_dependencies = 
    [   MemoryDep('buf304', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf304', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf304', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf304', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf304', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf304', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf304', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf304', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf304', c0, {c0: 602112}, None)]
op305.met_dependencies = []
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf305.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (602112, 1)
op305.sizes = ([3072, 14, 14], [])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op305_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf305', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf304', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf304', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf304', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf304', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf304', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf304', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf304', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf304', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf304', get_index)
        return load
op305_op306.snodes[1] =
op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 602112}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 602112}, None),
        MemoryDep('buf294', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf304', c0, {c0: 602112}, None),
        MemoryDep('buf305', c0, {c0: 602112}, None)]
op306.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg136_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg139_1', c1, {c0: 8, c1: 384}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (602112, 1)
op306.sizes = ([8, 384, 196], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op306_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf294', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg136_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf305', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf304', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg139_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf306', get_index_7, add_2, None)
        return store


op307_op308_op309: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op307_op308_op309.writes = 
    [   MemoryDep('buf307', c0, {c0: 80}, None),
        MemoryDep('buf308', c0, {c0: 80}, None),
        MemoryDep('buf309', c0, {c0: 80}, None)]
op307_op308_op309.unmet_dependencies = [   MemoryDep('buf306', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op307_op308_op309.met_dependencies = []
op307_op308_op309.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf307.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
    ]
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
    ]
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
    ]
]
op307_op308_op309.snodes[0] =
op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 80}, None)]
op307.unmet_dependencies = [   MemoryDep('buf306', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf307.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
    ]
]
op307.group.device = cuda:0
op307.group.iteration = (80, 7527)
op307.sizes = ([8, 10], [7527])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op307_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf307', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf306', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op307_op308_op309.snodes[1] =
op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 80}, None)]
op308.unmet_dependencies = [   MemoryDep('buf306', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
    ]
]
op308.group.device = cuda:0
op308.group.iteration = (80, 7527)
op308.sizes = ([8, 10], [7527])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op308_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf308', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf306', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op307_op308_op309.snodes[2] =
op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 80}, None)]
op309.unmet_dependencies = [   MemoryDep('buf306', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op309.met_dependencies = []
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
    ]
]
op309.group.device = cuda:0
op309.group.iteration = (80, 7527)
op309.sizes = ([8, 10], [7527])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op309_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf309', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf306', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op310_op311: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op310_op311.writes = [MemoryDep('buf310', c0, {c0: 8}, None), MemoryDep('buf311', c0, {c0: 8}, None)]
op310_op311.unmet_dependencies = 
    [   MemoryDep('buf307', c0, {c0: 80}, None),
        MemoryDep('buf308', c0, {c0: 80}, None),
        MemoryDep('buf309', c0, {c0: 80}, None)]
op310_op311.met_dependencies = []
op310_op311.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf310.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf311.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op310_op311.snodes[0] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 8}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf307', c0, {c0: 80}, None),
        MemoryDep('buf308', c0, {c0: 80}, None),
        MemoryDep('buf309', c0, {c0: 80}, None)]
op310.met_dependencies = []
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf310.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (8, 10)
op310.sizes = ([8], [10])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op310_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf308', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf309', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf310', get_index_3, getitem)
        return store_reduction
op310_op311.snodes[1] =
op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 8}, None)]
op311.unmet_dependencies = 
    [   MemoryDep('buf307', c0, {c0: 80}, None),
        MemoryDep('buf308', c0, {c0: 80}, None),
        MemoryDep('buf309', c0, {c0: 80}, None)]
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf311.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (8, 10)
op311.sizes = ([8], [10])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op311_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf308', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf309', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf311', get_index_3, getitem_1)
        return store_reduction


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 602112}, None),
        MemoryDep('buf310', c0, {c0: 8}, None),
        MemoryDep('buf311', c0, {c0: 8}, None)]
op313.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg141_1', c1, {c0: 8, c1: 384}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (602112, 1)
op313.sizes = ([8, 384, 196], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op313_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf310', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf311', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg140_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg141_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf313', get_index_5, add_1, None)
        return store


op314: ExternKernelSchedulerNode(ExternKernelAlloc)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op314.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op314.outputs = [
    buf314: ExternKernelAlloc
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf314.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False)]
]
op314.node.kernel = extern_kernels.convolution


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 2408448}, None)]
op315.unmet_dependencies = [MemoryDep('buf314', c0, {c0: 2408448}, None)]
op315.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 1568, c1: 1536}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (2408448, 1)
op315.sizes = ([1568, 1536], [])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op315_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf314', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg143_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf315', get_index_4, mul_2, None)
        return store


op316: ExternKernelSchedulerNode(ExternKernelAlloc)
op316.writes = [StarDep(name='buf316', mode=None)]
op316.unmet_dependencies = [StarDep(name='buf315', mode=None)]
op316.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op316.outputs = [
    buf316: ExternKernelAlloc
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf316.users = [
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
    ]
]
op316.node.kernel = extern_kernels.convolution


op317_op318_op319: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op317_op318_op319.writes = 
    [   MemoryDep('buf317', c0, {c0: 4720}, None),
        MemoryDep('buf318', c0, {c0: 4720}, None),
        MemoryDep('buf319', c0, {c0: 4720}, None)]
op317_op318_op319.unmet_dependencies = 
    [   MemoryDep('buf306', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf316', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op317_op318_op319.met_dependencies = 
    [   MemoryDep('arg145_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg146_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op317_op318_op319.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf317.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
    ]
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf318.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
    ]
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf319.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
    ]
]
op317_op318_op319.snodes[0] =
op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 4720}, None)]
op317.unmet_dependencies = 
    [   MemoryDep('buf306', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf316', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op317.met_dependencies = 
    [   MemoryDep('arg145_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg146_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf317.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
    ]
]
op317.group.device = cuda:0
op317.group.iteration = (4720, 128)
op317.sizes = ([8, 10, 59], [128])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op317_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf317', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf316', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg145_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg146_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op317_op318_op319.snodes[1] =
op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 4720}, None)]
op318.unmet_dependencies = 
    [   MemoryDep('buf306', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf316', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op318.met_dependencies = 
    [   MemoryDep('arg145_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg146_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf318.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
    ]
]
op318.group.device = cuda:0
op318.group.iteration = (4720, 128)
op318.sizes = ([8, 10, 59], [128])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op318_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf318', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf316', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg145_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg146_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op317_op318_op319.snodes[2] =
op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 4720}, None)]
op319.unmet_dependencies = 
    [   MemoryDep('buf306', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf316', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op319.met_dependencies = 
    [   MemoryDep('arg145_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg146_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf319.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
    ]
]
op319.group.device = cuda:0
op319.group.iteration = (4720, 128)
op319.sizes = ([8, 10, 59], [128])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op319_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf319', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf316', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg145_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg146_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op320_op321_op322: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op320_op321_op322.writes = 
    [   MemoryDep('buf320', c0, {c0: 80}, None),
        MemoryDep('buf321', c0, {c0: 80}, None),
        MemoryDep('buf322', c0, {c0: 80}, None)]
op320_op321_op322.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 4720}, None),
        MemoryDep('buf318', c0, {c0: 4720}, None),
        MemoryDep('buf319', c0, {c0: 4720}, None)]
op320_op321_op322.met_dependencies = []
op320_op321_op322.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
    ]
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf321.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
    ]
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf322.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
    ]
]
op320_op321_op322.snodes[0] =
op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 80}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 4720}, None),
        MemoryDep('buf318', c0, {c0: 4720}, None),
        MemoryDep('buf319', c0, {c0: 4720}, None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
    ]
]
op320.group.device = cuda:0
op320.group.iteration = (80, 59)
op320.sizes = ([80], [59])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op320_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf318', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf319', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf320', get_index_3, getitem)
        return store_reduction
op320_op321_op322.snodes[1] =
op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 80}, None)]
op321.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 4720}, None),
        MemoryDep('buf318', c0, {c0: 4720}, None),
        MemoryDep('buf319', c0, {c0: 4720}, None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf321.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
    ]
]
op321.group.device = cuda:0
op321.group.iteration = (80, 59)
op321.sizes = ([80], [59])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op321_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf318', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf319', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf321', get_index_3, getitem_1)
        return store_reduction
op320_op321_op322.snodes[2] =
op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 80}, None)]
op322.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 4720}, None),
        MemoryDep('buf318', c0, {c0: 4720}, None),
        MemoryDep('buf319', c0, {c0: 4720}, None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf322.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
    ]
]
op322.group.device = cuda:0
op322.group.iteration = (80, 59)
op322.sizes = ([80], [59])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op322_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf318', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf319', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf322', get_index_3, getitem_2)
        return store_reduction


op323_op324: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op323_op324.writes = [MemoryDep('buf323', c0, {c0: 8}, None), MemoryDep('buf324', c0, {c0: 8}, None)]
op323_op324.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 80}, None),
        MemoryDep('buf321', c0, {c0: 80}, None),
        MemoryDep('buf322', c0, {c0: 80}, None)]
op323_op324.met_dependencies = []
op323_op324.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf323.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf324.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op323_op324.snodes[0] =
op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 8}, None)]
op323.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 80}, None),
        MemoryDep('buf321', c0, {c0: 80}, None),
        MemoryDep('buf322', c0, {c0: 80}, None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf323.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (8, 10)
op323.sizes = ([8], [10])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op323_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf321', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf322', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf323', get_index_3, getitem)
        return store_reduction
op323_op324.snodes[1] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 8}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 80}, None),
        MemoryDep('buf321', c0, {c0: 80}, None),
        MemoryDep('buf322', c0, {c0: 80}, None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf324.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (8, 10)
op324.sizes = ([8], [10])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op324_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf321', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf322', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf324', get_index_3, getitem_1)
        return store_reduction


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 602112}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 602112}, None),
        MemoryDep('buf316', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf323', c0, {c0: 8}, None),
        MemoryDep('buf324', c0, {c0: 8}, None)]
op326.met_dependencies = 
    [   MemoryDep('arg145_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg146_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg147_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg148_1', c1, {c0: 8, c1: 384}, None)]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf326.users = [
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
    ]
]
op326.group.device = cuda:0
op326.group.iteration = (602112, 1)
op326.sizes = ([8, 384, 196], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op326_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf316', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg145_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg146_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf323', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf324', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg147_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg148_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf326', get_index_8, add_3, None)
        return store


op327_op328: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op327_op328.writes = 
    [   MemoryDep('buf327', c0, {c0: 602112}, None),
        MemoryDep('buf328', c0, {c0: 602112}, None)]
op327_op328.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 602112}, None),
        MemoryDep('buf316', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf326', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf326', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf326', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf326', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf326', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf326', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf326', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf326', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf326', c0, {c0: 602112}, None)]
op327_op328.met_dependencies = 
    [   MemoryDep('arg145_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg146_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg149_1', c1, {c0: 8, c1: 384}, None)]
op327_op328.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf327.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False)]
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
    ]
]
op327_op328.snodes[0] =
op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 602112}, None)]
op327.unmet_dependencies = 
    [   MemoryDep('buf326', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf326', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf326', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf326', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf326', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf326', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf326', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf326', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf326', c0, {c0: 602112}, None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf327.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (602112, 1)
op327.sizes = ([3072, 14, 14], [])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op327_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf327', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf326', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf326', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf326', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf326', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf326', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf326', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf326', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf326', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf326', get_index)
        return load
op327_op328.snodes[1] =
op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 602112}, None)]
op328.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 602112}, None),
        MemoryDep('buf316', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf326', c0, {c0: 602112}, None),
        MemoryDep('buf327', c0, {c0: 602112}, None)]
op328.met_dependencies = 
    [   MemoryDep('arg145_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg146_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg149_1', c1, {c0: 8, c1: 384}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
    ]
]
op328.group.device = cuda:0
op328.group.iteration = (602112, 1)
op328.sizes = ([8, 384, 196], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op328_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf316', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg145_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg146_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf327', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf326', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg149_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf328', get_index_7, add_2, None)
        return store


op329_op330_op331: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op329_op330_op331.writes = 
    [   MemoryDep('buf329', c0, {c0: 80}, None),
        MemoryDep('buf330', c0, {c0: 80}, None),
        MemoryDep('buf331', c0, {c0: 80}, None)]
op329_op330_op331.unmet_dependencies = [   MemoryDep('buf328', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op329_op330_op331.met_dependencies = []
op329_op330_op331.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf329.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
    ]
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf330.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
    ]
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
    ]
]
op329_op330_op331.snodes[0] =
op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 80}, None)]
op329.unmet_dependencies = [   MemoryDep('buf328', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf329.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
    ]
]
op329.group.device = cuda:0
op329.group.iteration = (80, 7527)
op329.sizes = ([8, 10], [7527])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op329_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf329', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op329_op330_op331.snodes[1] =
op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 80}, None)]
op330.unmet_dependencies = [   MemoryDep('buf328', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf330.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
    ]
]
op330.group.device = cuda:0
op330.group.iteration = (80, 7527)
op330.sizes = ([8, 10], [7527])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op330_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf330', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op329_op330_op331.snodes[2] =
op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 80}, None)]
op331.unmet_dependencies = [   MemoryDep('buf328', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
    ]
]
op331.group.device = cuda:0
op331.group.iteration = (80, 7527)
op331.sizes = ([8, 10], [7527])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op331_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf331', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf328', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op332_op333: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op332_op333.writes = [MemoryDep('buf332', c0, {c0: 8}, None), MemoryDep('buf333', c0, {c0: 8}, None)]
op332_op333.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 80}, None),
        MemoryDep('buf330', c0, {c0: 80}, None),
        MemoryDep('buf331', c0, {c0: 80}, None)]
op332_op333.met_dependencies = []
op332_op333.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op332_op333.snodes[0] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 8}, None)]
op332.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 80}, None),
        MemoryDep('buf330', c0, {c0: 80}, None),
        MemoryDep('buf331', c0, {c0: 80}, None)]
op332.met_dependencies = []
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (8, 10)
op332.sizes = ([8], [10])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op332_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf330', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf331', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf332', get_index_3, getitem)
        return store_reduction
op332_op333.snodes[1] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 8}, None)]
op333.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 80}, None),
        MemoryDep('buf330', c0, {c0: 80}, None),
        MemoryDep('buf331', c0, {c0: 80}, None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (8, 10)
op333.sizes = ([8], [10])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op333_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf330', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf331', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf333', get_index_3, getitem_1)
        return store_reduction


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 602112}, None),
        MemoryDep('buf332', c0, {c0: 8}, None),
        MemoryDep('buf333', c0, {c0: 8}, None)]
op335.met_dependencies = 
    [   MemoryDep('arg150_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg151_1', c1, {c0: 8, c1: 384}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (602112, 1)
op335.sizes = ([8, 384, 196], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op335_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf332', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf333', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg150_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg151_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf335', get_index_5, add_1, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelAlloc)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelAlloc
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False)]
]
op336.node.kernel = extern_kernels.convolution


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 2408448}, None)]
op337.unmet_dependencies = [MemoryDep('buf336', c0, {c0: 2408448}, None)]
op337.met_dependencies = [MemoryDep('arg153_1', c1, {c0: 1568, c1: 1536}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (2408448, 1)
op337.sizes = ([1568, 1536], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op337_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg153_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf337', get_index_4, mul_2, None)
        return store


op338: ExternKernelSchedulerNode(ExternKernelAlloc)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op338.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op338.outputs = [
    buf338: ExternKernelAlloc
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
    ]
]
op338.node.kernel = extern_kernels.convolution


op339_op340_op341: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op339_op340_op341.writes = 
    [   MemoryDep('buf339', c0, {c0: 4720}, None),
        MemoryDep('buf340', c0, {c0: 4720}, None),
        MemoryDep('buf341', c0, {c0: 4720}, None)]
op339_op340_op341.unmet_dependencies = 
    [   MemoryDep('buf328', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf338', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op339_op340_op341.met_dependencies = 
    [   MemoryDep('arg155_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg156_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op339_op340_op341.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf341.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
]
op339_op340_op341.snodes[0] =
op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 4720}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf328', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf338', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op339.met_dependencies = 
    [   MemoryDep('arg155_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg156_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (4720, 128)
op339.sizes = ([8, 10, 59], [128])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op339_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf339', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg155_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg156_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op339_op340_op341.snodes[1] =
op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 4720}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf328', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf338', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op340.met_dependencies = 
    [   MemoryDep('arg155_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg156_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
]
op340.group.device = cuda:0
op340.group.iteration = (4720, 128)
op340.sizes = ([8, 10, 59], [128])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op340_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf340', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg155_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg156_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op339_op340_op341.snodes[2] =
op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 4720}, None)]
op341.unmet_dependencies = 
    [   MemoryDep('buf328', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf338', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op341.met_dependencies = 
    [   MemoryDep('arg155_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg156_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf341.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
]
op341.group.device = cuda:0
op341.group.iteration = (4720, 128)
op341.sizes = ([8, 10, 59], [128])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op341_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf341', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg155_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg156_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op342_op343_op344: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op342_op343_op344.writes = 
    [   MemoryDep('buf342', c0, {c0: 80}, None),
        MemoryDep('buf343', c0, {c0: 80}, None),
        MemoryDep('buf344', c0, {c0: 80}, None)]
op342_op343_op344.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 4720}, None),
        MemoryDep('buf340', c0, {c0: 4720}, None),
        MemoryDep('buf341', c0, {c0: 4720}, None)]
op342_op343_op344.met_dependencies = []
op342_op343_op344.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf342.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
    ]
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
    ]
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf344.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
    ]
]
op342_op343_op344.snodes[0] =
op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 80}, None)]
op342.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 4720}, None),
        MemoryDep('buf340', c0, {c0: 4720}, None),
        MemoryDep('buf341', c0, {c0: 4720}, None)]
op342.met_dependencies = []
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf342.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
    ]
]
op342.group.device = cuda:0
op342.group.iteration = (80, 59)
op342.sizes = ([80], [59])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op342_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf340', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf341', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf342', get_index_3, getitem)
        return store_reduction
op342_op343_op344.snodes[1] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 80}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 4720}, None),
        MemoryDep('buf340', c0, {c0: 4720}, None),
        MemoryDep('buf341', c0, {c0: 4720}, None)]
op343.met_dependencies = []
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
    ]
]
op343.group.device = cuda:0
op343.group.iteration = (80, 59)
op343.sizes = ([80], [59])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op343_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf340', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf341', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf343', get_index_3, getitem_1)
        return store_reduction
op342_op343_op344.snodes[2] =
op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 80}, None)]
op344.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 4720}, None),
        MemoryDep('buf340', c0, {c0: 4720}, None),
        MemoryDep('buf341', c0, {c0: 4720}, None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf344.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
    ]
]
op344.group.device = cuda:0
op344.group.iteration = (80, 59)
op344.sizes = ([80], [59])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op344_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf340', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf341', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf344', get_index_3, getitem_2)
        return store_reduction


op345_op346: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op345_op346.writes = [MemoryDep('buf345', c0, {c0: 8}, None), MemoryDep('buf346', c0, {c0: 8}, None)]
op345_op346.unmet_dependencies = 
    [   MemoryDep('buf342', c0, {c0: 80}, None),
        MemoryDep('buf343', c0, {c0: 80}, None),
        MemoryDep('buf344', c0, {c0: 80}, None)]
op345_op346.met_dependencies = []
op345_op346.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf345.users = [NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf346.users = [NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op345_op346.snodes[0] =
op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 8}, None)]
op345.unmet_dependencies = 
    [   MemoryDep('buf342', c0, {c0: 80}, None),
        MemoryDep('buf343', c0, {c0: 80}, None),
        MemoryDep('buf344', c0, {c0: 80}, None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf345.users = [NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (8, 10)
op345.sizes = ([8], [10])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op345_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf344', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf345', get_index_3, getitem)
        return store_reduction
op345_op346.snodes[1] =
op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 8}, None)]
op346.unmet_dependencies = 
    [   MemoryDep('buf342', c0, {c0: 80}, None),
        MemoryDep('buf343', c0, {c0: 80}, None),
        MemoryDep('buf344', c0, {c0: 80}, None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf346.users = [NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (8, 10)
op346.sizes = ([8], [10])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op346_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf344', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf346', get_index_3, getitem_1)
        return store_reduction


op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 602112}, None)]
op348.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 602112}, None),
        MemoryDep('buf338', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf345', c0, {c0: 8}, None),
        MemoryDep('buf346', c0, {c0: 8}, None)]
op348.met_dependencies = 
    [   MemoryDep('arg155_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg156_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg157_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg158_1', c1, {c0: 8, c1: 384}, None)]
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf348.users = [
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
    ]
]
op348.group.device = cuda:0
op348.group.iteration = (602112, 1)
op348.sizes = ([8, 384, 196], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op348_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg155_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg156_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf345', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf346', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg157_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg158_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf348', get_index_8, add_3, None)
        return store


op349_op350: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op349_op350.writes = 
    [   MemoryDep('buf349', c0, {c0: 602112}, None),
        MemoryDep('buf350', c0, {c0: 602112}, None)]
op349_op350.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 602112}, None),
        MemoryDep('buf338', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf348', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf348', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf348', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf348', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf348', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf348', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf348', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf348', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf348', c0, {c0: 602112}, None)]
op349_op350.met_dependencies = 
    [   MemoryDep('arg155_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg156_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg159_1', c1, {c0: 8, c1: 384}, None)]
op349_op350.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf349.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False)]
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
    ]
]
op349_op350.snodes[0] =
op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 602112}, None)]
op349.unmet_dependencies = 
    [   MemoryDep('buf348', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf348', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf348', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf348', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf348', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf348', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf348', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf348', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf348', c0, {c0: 602112}, None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf349.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (602112, 1)
op349.sizes = ([3072, 14, 14], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op349_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf349', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf348', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf348', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf348', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf348', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf348', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf348', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf348', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf348', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf348', get_index)
        return load
op349_op350.snodes[1] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 602112}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 602112}, None),
        MemoryDep('buf338', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf349', c0, {c0: 602112}, None)]
op350.met_dependencies = 
    [   MemoryDep('arg155_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg156_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg159_1', c1, {c0: 8, c1: 384}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
    ]
]
op350.group.device = cuda:0
op350.group.iteration = (602112, 1)
op350.sizes = ([8, 384, 196], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op350_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf338', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg155_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg156_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf349', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf348', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg159_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf350', get_index_7, add_2, None)
        return store


op351_op352_op353: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op351_op352_op353.writes = 
    [   MemoryDep('buf351', c0, {c0: 80}, None),
        MemoryDep('buf352', c0, {c0: 80}, None),
        MemoryDep('buf353', c0, {c0: 80}, None)]
op351_op352_op353.unmet_dependencies = [   MemoryDep('buf350', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op351_op352_op353.met_dependencies = []
op351_op352_op353.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf351.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
    ]
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
    ]
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf353.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
    ]
]
op351_op352_op353.snodes[0] =
op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 80}, None)]
op351.unmet_dependencies = [   MemoryDep('buf350', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf351.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
    ]
]
op351.group.device = cuda:0
op351.group.iteration = (80, 7527)
op351.sizes = ([8, 10], [7527])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op351_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf351', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf350', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op351_op352_op353.snodes[1] =
op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 80}, None)]
op352.unmet_dependencies = [   MemoryDep('buf350', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op352.met_dependencies = []
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
    ]
]
op352.group.device = cuda:0
op352.group.iteration = (80, 7527)
op352.sizes = ([8, 10], [7527])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op352_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf352', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf350', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op351_op352_op353.snodes[2] =
op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 80}, None)]
op353.unmet_dependencies = [   MemoryDep('buf350', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op353.met_dependencies = []
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf353.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
    ]
]
op353.group.device = cuda:0
op353.group.iteration = (80, 7527)
op353.sizes = ([8, 10], [7527])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op353_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf353', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf350', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op354_op355: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op354_op355.writes = [MemoryDep('buf354', c0, {c0: 8}, None), MemoryDep('buf355', c0, {c0: 8}, None)]
op354_op355.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 80}, None),
        MemoryDep('buf352', c0, {c0: 80}, None),
        MemoryDep('buf353', c0, {c0: 80}, None)]
op354_op355.met_dependencies = []
op354_op355.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf354.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf355.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op354_op355.snodes[0] =
op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 8}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 80}, None),
        MemoryDep('buf352', c0, {c0: 80}, None),
        MemoryDep('buf353', c0, {c0: 80}, None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf354.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (8, 10)
op354.sizes = ([8], [10])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op354_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf352', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf353', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf354', get_index_3, getitem)
        return store_reduction
op354_op355.snodes[1] =
op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 8}, None)]
op355.unmet_dependencies = 
    [   MemoryDep('buf351', c0, {c0: 80}, None),
        MemoryDep('buf352', c0, {c0: 80}, None),
        MemoryDep('buf353', c0, {c0: 80}, None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf355.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (8, 10)
op355.sizes = ([8], [10])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op355_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf352', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf353', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf355', get_index_3, getitem_1)
        return store_reduction


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op357.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf354', c0, {c0: 8}, None),
        MemoryDep('buf355', c0, {c0: 8}, None)]
op357.met_dependencies = 
    [   MemoryDep('arg160_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg161_1', c1, {c0: 8, c1: 384}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf357.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (602112, 1)
op357.sizes = ([8, 384, 196], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op357_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf354', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf355', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg160_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg161_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf357', get_index_5, add_1, None)
        return store


op358: ExternKernelSchedulerNode(ExternKernelAlloc)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf357', mode=None)]
op358.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op358.outputs = [
    buf358: ExternKernelAlloc
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf358.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False)]
]
op358.node.kernel = extern_kernels.convolution


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 2408448}, None)]
op359.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 2408448}, None)]
op359.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 1568, c1: 1536}, None)]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (2408448, 1)
op359.sizes = ([1568, 1536], [])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op359_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf358', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg163_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf359', get_index_4, mul_2, None)
        return store


op360: ExternKernelSchedulerNode(ExternKernelAlloc)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf359', mode=None)]
op360.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op360.outputs = [
    buf360: ExternKernelAlloc
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf360.users = [
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
    ]
]
op360.node.kernel = extern_kernels.convolution


op361_op362_op363: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op361_op362_op363.writes = 
    [   MemoryDep('buf361', c0, {c0: 4720}, None),
        MemoryDep('buf362', c0, {c0: 4720}, None),
        MemoryDep('buf363', c0, {c0: 4720}, None)]
op361_op362_op363.unmet_dependencies = 
    [   MemoryDep('buf350', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf360', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op361_op362_op363.met_dependencies = 
    [   MemoryDep('arg165_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg166_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op361_op362_op363.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf361.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
    ]
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf362.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
    ]
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
    ]
]
op361_op362_op363.snodes[0] =
op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 4720}, None)]
op361.unmet_dependencies = 
    [   MemoryDep('buf350', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf360', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op361.met_dependencies = 
    [   MemoryDep('arg165_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg166_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf361.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
    ]
]
op361.group.device = cuda:0
op361.group.iteration = (4720, 128)
op361.sizes = ([8, 10, 59], [128])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op361_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf361', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf360', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg165_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg166_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op361_op362_op363.snodes[1] =
op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 4720}, None)]
op362.unmet_dependencies = 
    [   MemoryDep('buf350', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf360', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op362.met_dependencies = 
    [   MemoryDep('arg165_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg166_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf362.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
    ]
]
op362.group.device = cuda:0
op362.group.iteration = (4720, 128)
op362.sizes = ([8, 10, 59], [128])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op362_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf362', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf360', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg165_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg166_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op361_op362_op363.snodes[2] =
op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 4720}, None)]
op363.unmet_dependencies = 
    [   MemoryDep('buf350', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf360', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op363.met_dependencies = 
    [   MemoryDep('arg165_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg166_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (4720, 128)
op363.sizes = ([8, 10, 59], [128])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op363_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf363', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf360', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg165_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg166_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op364_op365_op366: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op364_op365_op366.writes = 
    [   MemoryDep('buf364', c0, {c0: 80}, None),
        MemoryDep('buf365', c0, {c0: 80}, None),
        MemoryDep('buf366', c0, {c0: 80}, None)]
op364_op365_op366.unmet_dependencies = 
    [   MemoryDep('buf361', c0, {c0: 4720}, None),
        MemoryDep('buf362', c0, {c0: 4720}, None),
        MemoryDep('buf363', c0, {c0: 4720}, None)]
op364_op365_op366.met_dependencies = []
op364_op365_op366.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf364.users = [
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
    ]
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf365.users = [
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
    ]
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf366.users = [
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
    ]
]
op364_op365_op366.snodes[0] =
op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 80}, None)]
op364.unmet_dependencies = 
    [   MemoryDep('buf361', c0, {c0: 4720}, None),
        MemoryDep('buf362', c0, {c0: 4720}, None),
        MemoryDep('buf363', c0, {c0: 4720}, None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf364.users = [
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
    ]
]
op364.group.device = cuda:0
op364.group.iteration = (80, 59)
op364.sizes = ([80], [59])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op364_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf362', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf363', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf364', get_index_3, getitem)
        return store_reduction
op364_op365_op366.snodes[1] =
op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 80}, None)]
op365.unmet_dependencies = 
    [   MemoryDep('buf361', c0, {c0: 4720}, None),
        MemoryDep('buf362', c0, {c0: 4720}, None),
        MemoryDep('buf363', c0, {c0: 4720}, None)]
op365.met_dependencies = []
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf365.users = [
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
    ]
]
op365.group.device = cuda:0
op365.group.iteration = (80, 59)
op365.sizes = ([80], [59])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op365_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf362', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf363', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf365', get_index_3, getitem_1)
        return store_reduction
op364_op365_op366.snodes[2] =
op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 80}, None)]
op366.unmet_dependencies = 
    [   MemoryDep('buf361', c0, {c0: 4720}, None),
        MemoryDep('buf362', c0, {c0: 4720}, None),
        MemoryDep('buf363', c0, {c0: 4720}, None)]
op366.met_dependencies = []
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf366.users = [
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
    ]
]
op366.group.device = cuda:0
op366.group.iteration = (80, 59)
op366.sizes = ([80], [59])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op366_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf362', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf363', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf366', get_index_3, getitem_2)
        return store_reduction


op367_op368: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op367_op368.writes = [MemoryDep('buf367', c0, {c0: 8}, None), MemoryDep('buf368', c0, {c0: 8}, None)]
op367_op368.unmet_dependencies = 
    [   MemoryDep('buf364', c0, {c0: 80}, None),
        MemoryDep('buf365', c0, {c0: 80}, None),
        MemoryDep('buf366', c0, {c0: 80}, None)]
op367_op368.met_dependencies = []
op367_op368.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf367.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf368.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op367_op368.snodes[0] =
op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 8}, None)]
op367.unmet_dependencies = 
    [   MemoryDep('buf364', c0, {c0: 80}, None),
        MemoryDep('buf365', c0, {c0: 80}, None),
        MemoryDep('buf366', c0, {c0: 80}, None)]
op367.met_dependencies = []
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf367.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (8, 10)
op367.sizes = ([8], [10])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op367_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf366', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf367', get_index_3, getitem)
        return store_reduction
op367_op368.snodes[1] =
op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 8}, None)]
op368.unmet_dependencies = 
    [   MemoryDep('buf364', c0, {c0: 80}, None),
        MemoryDep('buf365', c0, {c0: 80}, None),
        MemoryDep('buf366', c0, {c0: 80}, None)]
op368.met_dependencies = []
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf368.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (8, 10)
op368.sizes = ([8], [10])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op368_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf366', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf368', get_index_3, getitem_1)
        return store_reduction


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 602112}, None)]
op370.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf360', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf367', c0, {c0: 8}, None),
        MemoryDep('buf368', c0, {c0: 8}, None)]
op370.met_dependencies = 
    [   MemoryDep('arg165_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg166_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg167_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg168_1', c1, {c0: 8, c1: 384}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
    ]
]
op370.group.device = cuda:0
op370.group.iteration = (602112, 1)
op370.sizes = ([8, 384, 196], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op370_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf360', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg165_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg166_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf367', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf368', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg167_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg168_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf370', get_index_8, add_3, None)
        return store


op371_op372: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op371_op372.writes = 
    [   MemoryDep('buf371', c0, {c0: 602112}, None),
        MemoryDep('buf372', c0, {c0: 602112}, None)]
op371_op372.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf360', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf370', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf370', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf370', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf370', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf370', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf370', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf370', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf370', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf370', c0, {c0: 602112}, None)]
op371_op372.met_dependencies = 
    [   MemoryDep('arg165_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg166_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg169_1', c1, {c0: 8, c1: 384}, None)]
op371_op372.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False)]
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False),
    ]
]
op371_op372.snodes[0] =
op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 602112}, None)]
op371.unmet_dependencies = 
    [   MemoryDep('buf370', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf370', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf370', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf370', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf370', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf370', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf370', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf370', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf370', c0, {c0: 602112}, None)]
op371.met_dependencies = []
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (602112, 1)
op371.sizes = ([3072, 14, 14], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op371_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf371', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf370', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf370', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf370', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf370', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf370', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf370', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf370', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf370', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf370', get_index)
        return load
op371_op372.snodes[1] =
op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 602112}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf350', c0, {c0: 602112}, None),
        MemoryDep('buf360', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf370', c0, {c0: 602112}, None),
        MemoryDep('buf371', c0, {c0: 602112}, None)]
op372.met_dependencies = 
    [   MemoryDep('arg165_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg166_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg169_1', c1, {c0: 8, c1: 384}, None)]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf372.users = [
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False),
    ]
]
op372.group.device = cuda:0
op372.group.iteration = (602112, 1)
op372.sizes = ([8, 384, 196], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op372_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf360', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg165_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg166_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf371', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf370', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg169_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf372', get_index_7, add_2, None)
        return store


op373_op374_op375: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op373_op374_op375.writes = 
    [   MemoryDep('buf373', c0, {c0: 80}, None),
        MemoryDep('buf374', c0, {c0: 80}, None),
        MemoryDep('buf375', c0, {c0: 80}, None)]
op373_op374_op375.unmet_dependencies = [   MemoryDep('buf372', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op373_op374_op375.met_dependencies = []
op373_op374_op375.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf375.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op373_op374_op375.snodes[0] =
op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 80}, None)]
op373.unmet_dependencies = [   MemoryDep('buf372', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op373.met_dependencies = []
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op373.group.device = cuda:0
op373.group.iteration = (80, 7527)
op373.sizes = ([8, 10], [7527])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op373_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf373', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf372', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op373_op374_op375.snodes[1] =
op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 80}, None)]
op374.unmet_dependencies = [   MemoryDep('buf372', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op374.met_dependencies = []
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op374.group.device = cuda:0
op374.group.iteration = (80, 7527)
op374.sizes = ([8, 10], [7527])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op374_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf374', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf372', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op373_op374_op375.snodes[2] =
op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 80}, None)]
op375.unmet_dependencies = [   MemoryDep('buf372', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf375.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op375.group.device = cuda:0
op375.group.iteration = (80, 7527)
op375.sizes = ([8, 10], [7527])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op375_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf375', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf372', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op376_op377: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op376_op377.writes = [MemoryDep('buf376', c0, {c0: 8}, None), MemoryDep('buf377', c0, {c0: 8}, None)]
op376_op377.unmet_dependencies = 
    [   MemoryDep('buf373', c0, {c0: 80}, None),
        MemoryDep('buf374', c0, {c0: 80}, None),
        MemoryDep('buf375', c0, {c0: 80}, None)]
op376_op377.met_dependencies = []
op376_op377.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf376.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf377.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op376_op377.snodes[0] =
op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 8}, None)]
op376.unmet_dependencies = 
    [   MemoryDep('buf373', c0, {c0: 80}, None),
        MemoryDep('buf374', c0, {c0: 80}, None),
        MemoryDep('buf375', c0, {c0: 80}, None)]
op376.met_dependencies = []
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf376.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (8, 10)
op376.sizes = ([8], [10])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op376_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf374', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf375', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf376', get_index_3, getitem)
        return store_reduction
op376_op377.snodes[1] =
op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 8}, None)]
op377.unmet_dependencies = 
    [   MemoryDep('buf373', c0, {c0: 80}, None),
        MemoryDep('buf374', c0, {c0: 80}, None),
        MemoryDep('buf375', c0, {c0: 80}, None)]
op377.met_dependencies = []
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf377.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (8, 10)
op377.sizes = ([8], [10])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op377_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf374', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf375', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf377', get_index_3, getitem_1)
        return store_reduction


op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op379.unmet_dependencies = 
    [   MemoryDep('buf372', c0, {c0: 602112}, None),
        MemoryDep('buf376', c0, {c0: 8}, None),
        MemoryDep('buf377', c0, {c0: 8}, None)]
op379.met_dependencies = 
    [   MemoryDep('arg170_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg171_1', c1, {c0: 8, c1: 384}, None)]
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf379.users = [NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op379.group.device = cuda:0
op379.group.iteration = (602112, 1)
op379.sizes = ([8, 384, 196], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op379_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf376', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf377', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg170_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg171_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf379', get_index_5, add_1, None)
        return store


op380: ExternKernelSchedulerNode(ExternKernelAlloc)
op380.writes = [StarDep(name='buf380', mode=None)]
op380.unmet_dependencies = [StarDep(name='buf379', mode=None)]
op380.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op380.outputs = [
    buf380: ExternKernelAlloc
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf380.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False)]
]
op380.node.kernel = extern_kernels.convolution


op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 2408448}, None)]
op381.unmet_dependencies = [MemoryDep('buf380', c0, {c0: 2408448}, None)]
op381.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 1568, c1: 1536}, None)]
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op381.group.device = cuda:0
op381.group.iteration = (2408448, 1)
op381.sizes = ([1568, 1536], [])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op381_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf380', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg173_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf381', get_index_4, mul_2, None)
        return store


op382: ExternKernelSchedulerNode(ExternKernelAlloc)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf381', mode=None)]
op382.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op382.outputs = [
    buf382: ExternKernelAlloc
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf382.users = [
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
    ]
]
op382.node.kernel = extern_kernels.convolution


op383_op384_op385: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op383_op384_op385.writes = 
    [   MemoryDep('buf383', c0, {c0: 4720}, None),
        MemoryDep('buf384', c0, {c0: 4720}, None),
        MemoryDep('buf385', c0, {c0: 4720}, None)]
op383_op384_op385.unmet_dependencies = 
    [   MemoryDep('buf372', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf382', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op383_op384_op385.met_dependencies = 
    [   MemoryDep('arg175_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg176_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op383_op384_op385.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf383.users = [
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
    ]
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
    ]
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf385.users = [
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
    ]
]
op383_op384_op385.snodes[0] =
op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 4720}, None)]
op383.unmet_dependencies = 
    [   MemoryDep('buf372', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf382', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op383.met_dependencies = 
    [   MemoryDep('arg175_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg176_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf383.users = [
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
    ]
]
op383.group.device = cuda:0
op383.group.iteration = (4720, 128)
op383.sizes = ([8, 10, 59], [128])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op383_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf383', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf382', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg176_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op383_op384_op385.snodes[1] =
op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 4720}, None)]
op384.unmet_dependencies = 
    [   MemoryDep('buf372', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf382', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op384.met_dependencies = 
    [   MemoryDep('arg175_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg176_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
    ]
]
op384.group.device = cuda:0
op384.group.iteration = (4720, 128)
op384.sizes = ([8, 10, 59], [128])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op384_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf384', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf382', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg176_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op383_op384_op385.snodes[2] =
op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 4720}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf372', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf382', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op385.met_dependencies = 
    [   MemoryDep('arg175_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg176_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf385.users = [
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
    ]
]
op385.group.device = cuda:0
op385.group.iteration = (4720, 128)
op385.sizes = ([8, 10, 59], [128])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op385_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf385', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf382', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg176_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op386_op387_op388: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op386_op387_op388.writes = 
    [   MemoryDep('buf386', c0, {c0: 80}, None),
        MemoryDep('buf387', c0, {c0: 80}, None),
        MemoryDep('buf388', c0, {c0: 80}, None)]
op386_op387_op388.unmet_dependencies = 
    [   MemoryDep('buf383', c0, {c0: 4720}, None),
        MemoryDep('buf384', c0, {c0: 4720}, None),
        MemoryDep('buf385', c0, {c0: 4720}, None)]
op386_op387_op388.met_dependencies = []
op386_op387_op388.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf386.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf387.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf388.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
]
op386_op387_op388.snodes[0] =
op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 80}, None)]
op386.unmet_dependencies = 
    [   MemoryDep('buf383', c0, {c0: 4720}, None),
        MemoryDep('buf384', c0, {c0: 4720}, None),
        MemoryDep('buf385', c0, {c0: 4720}, None)]
op386.met_dependencies = []
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf386.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
]
op386.group.device = cuda:0
op386.group.iteration = (80, 59)
op386.sizes = ([80], [59])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op386_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf385', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf386', get_index_3, getitem)
        return store_reduction
op386_op387_op388.snodes[1] =
op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 80}, None)]
op387.unmet_dependencies = 
    [   MemoryDep('buf383', c0, {c0: 4720}, None),
        MemoryDep('buf384', c0, {c0: 4720}, None),
        MemoryDep('buf385', c0, {c0: 4720}, None)]
op387.met_dependencies = []
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf387.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (80, 59)
op387.sizes = ([80], [59])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op387_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf385', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf387', get_index_3, getitem_1)
        return store_reduction
op386_op387_op388.snodes[2] =
op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 80}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf383', c0, {c0: 4720}, None),
        MemoryDep('buf384', c0, {c0: 4720}, None),
        MemoryDep('buf385', c0, {c0: 4720}, None)]
op388.met_dependencies = []
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf388.users = [
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
    ]
]
op388.group.device = cuda:0
op388.group.iteration = (80, 59)
op388.sizes = ([80], [59])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op388_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf384', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf385', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf388', get_index_3, getitem_2)
        return store_reduction


op389_op390: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op389_op390.writes = [MemoryDep('buf389', c0, {c0: 8}, None), MemoryDep('buf390', c0, {c0: 8}, None)]
op389_op390.unmet_dependencies = 
    [   MemoryDep('buf386', c0, {c0: 80}, None),
        MemoryDep('buf387', c0, {c0: 80}, None),
        MemoryDep('buf388', c0, {c0: 80}, None)]
op389_op390.met_dependencies = []
op389_op390.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf389.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf390.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op389_op390.snodes[0] =
op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 8}, None)]
op389.unmet_dependencies = 
    [   MemoryDep('buf386', c0, {c0: 80}, None),
        MemoryDep('buf387', c0, {c0: 80}, None),
        MemoryDep('buf388', c0, {c0: 80}, None)]
op389.met_dependencies = []
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf389.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (8, 10)
op389.sizes = ([8], [10])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op389_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf387', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf388', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf389', get_index_3, getitem)
        return store_reduction
op389_op390.snodes[1] =
op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 8}, None)]
op390.unmet_dependencies = 
    [   MemoryDep('buf386', c0, {c0: 80}, None),
        MemoryDep('buf387', c0, {c0: 80}, None),
        MemoryDep('buf388', c0, {c0: 80}, None)]
op390.met_dependencies = []
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf390.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (8, 10)
op390.sizes = ([8], [10])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op390_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf387', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf388', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf390', get_index_3, getitem_1)
        return store_reduction


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 602112}, None)]
op392.unmet_dependencies = 
    [   MemoryDep('buf372', c0, {c0: 602112}, None),
        MemoryDep('buf382', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf389', c0, {c0: 8}, None),
        MemoryDep('buf390', c0, {c0: 8}, None)]
op392.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg176_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg177_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg178_1', c1, {c0: 8, c1: 384}, None)]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf392.users = [
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False),
    ]
]
op392.group.device = cuda:0
op392.group.iteration = (602112, 1)
op392.sizes = ([8, 384, 196], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op392_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf382', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg176_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf389', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf390', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg177_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg178_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf392', get_index_8, add_3, None)
        return store


op393_op394: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op393_op394.writes = 
    [   MemoryDep('buf393', c0, {c0: 602112}, None),
        MemoryDep('buf394', c0, {c0: 602112}, None)]
op393_op394.unmet_dependencies = 
    [   MemoryDep('buf372', c0, {c0: 602112}, None),
        MemoryDep('buf382', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf392', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf392', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf392', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf392', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf392', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf392', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf392', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf392', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf392', c0, {c0: 602112}, None)]
op393_op394.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg176_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg179_1', c1, {c0: 8, c1: 384}, None)]
op393_op394.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf393.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False)]
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf394.users = [
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False),
    ]
]
op393_op394.snodes[0] =
op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 602112}, None)]
op393.unmet_dependencies = 
    [   MemoryDep('buf392', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf392', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf392', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf392', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf392', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf392', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf392', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf392', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf392', c0, {c0: 602112}, None)]
op393.met_dependencies = []
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf393.users = [NodeUser(node=SchedulerNode(name='op394'), can_inplace=True, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (602112, 1)
op393.sizes = ([3072, 14, 14], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op393_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf393', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf392', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf392', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf392', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf392', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf392', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf392', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf392', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf392', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf392', get_index)
        return load
op393_op394.snodes[1] =
op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 602112}, None)]
op394.unmet_dependencies = 
    [   MemoryDep('buf372', c0, {c0: 602112}, None),
        MemoryDep('buf382', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf392', c0, {c0: 602112}, None),
        MemoryDep('buf393', c0, {c0: 602112}, None)]
op394.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg176_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg179_1', c1, {c0: 8, c1: 384}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf394.users = [
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False),
    ]
]
op394.group.device = cuda:0
op394.group.iteration = (602112, 1)
op394.sizes = ([8, 384, 196], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op394_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf382', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg176_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf393', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf392', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg179_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf394', get_index_7, add_2, None)
        return store


op395_op396_op397: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op395_op396_op397.writes = 
    [   MemoryDep('buf395', c0, {c0: 80}, None),
        MemoryDep('buf396', c0, {c0: 80}, None),
        MemoryDep('buf397', c0, {c0: 80}, None)]
op395_op396_op397.unmet_dependencies = [   MemoryDep('buf394', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op395_op396_op397.met_dependencies = []
op395_op396_op397.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
    ]
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf396.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
    ]
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf397.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
    ]
]
op395_op396_op397.snodes[0] =
op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 80}, None)]
op395.unmet_dependencies = [   MemoryDep('buf394', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op395.met_dependencies = []
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
    ]
]
op395.group.device = cuda:0
op395.group.iteration = (80, 7527)
op395.sizes = ([8, 10], [7527])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op395_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf395', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf394', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op395_op396_op397.snodes[1] =
op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 80}, None)]
op396.unmet_dependencies = [   MemoryDep('buf394', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op396.met_dependencies = []
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf396.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
    ]
]
op396.group.device = cuda:0
op396.group.iteration = (80, 7527)
op396.sizes = ([8, 10], [7527])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op396_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf396', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf394', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op395_op396_op397.snodes[2] =
op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 80}, None)]
op397.unmet_dependencies = [   MemoryDep('buf394', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op397.met_dependencies = []
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf397.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
    ]
]
op397.group.device = cuda:0
op397.group.iteration = (80, 7527)
op397.sizes = ([8, 10], [7527])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op397_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf397', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf394', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op398_op399: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op398_op399.writes = [MemoryDep('buf398', c0, {c0: 8}, None), MemoryDep('buf399', c0, {c0: 8}, None)]
op398_op399.unmet_dependencies = 
    [   MemoryDep('buf395', c0, {c0: 80}, None),
        MemoryDep('buf396', c0, {c0: 80}, None),
        MemoryDep('buf397', c0, {c0: 80}, None)]
op398_op399.met_dependencies = []
op398_op399.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf398.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf399.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op398_op399.snodes[0] =
op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 8}, None)]
op398.unmet_dependencies = 
    [   MemoryDep('buf395', c0, {c0: 80}, None),
        MemoryDep('buf396', c0, {c0: 80}, None),
        MemoryDep('buf397', c0, {c0: 80}, None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf398.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (8, 10)
op398.sizes = ([8], [10])
buf395_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op398_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf396', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf397', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf398', get_index_3, getitem)
        return store_reduction
op398_op399.snodes[1] =
op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 8}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf395', c0, {c0: 80}, None),
        MemoryDep('buf396', c0, {c0: 80}, None),
        MemoryDep('buf397', c0, {c0: 80}, None)]
op399.met_dependencies = []
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf399.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (8, 10)
op399.sizes = ([8], [10])
buf395_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op399_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf396', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf397', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf399', get_index_3, getitem_1)
        return store_reduction


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op401.unmet_dependencies = 
    [   MemoryDep('buf394', c0, {c0: 602112}, None),
        MemoryDep('buf398', c0, {c0: 8}, None),
        MemoryDep('buf399', c0, {c0: 8}, None)]
op401.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg181_1', c1, {c0: 8, c1: 384}, None)]
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf401.users = [NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (602112, 1)
op401.sizes = ([8, 384, 196], [])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op401_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf398', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf399', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg180_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg181_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf401', get_index_5, add_1, None)
        return store


op402: ExternKernelSchedulerNode(ExternKernelAlloc)
op402.writes = [StarDep(name='buf402', mode=None)]
op402.unmet_dependencies = [StarDep(name='buf401', mode=None)]
op402.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op402.outputs = [
    buf402: ExternKernelAlloc
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf402.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False)]
]
op402.node.kernel = extern_kernels.convolution


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 2408448}, None)]
op403.unmet_dependencies = [MemoryDep('buf402', c0, {c0: 2408448}, None)]
op403.met_dependencies = [MemoryDep('arg183_1', c1, {c0: 1568, c1: 1536}, None)]
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf403.users = [NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (2408448, 1)
op403.sizes = ([1568, 1536], [])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op403_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf402', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg183_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf403', get_index_4, mul_2, None)
        return store


op404: ExternKernelSchedulerNode(ExternKernelAlloc)
op404.writes = [StarDep(name='buf404', mode=None)]
op404.unmet_dependencies = [StarDep(name='buf403', mode=None)]
op404.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op404.outputs = [
    buf404: ExternKernelAlloc
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf404.users = [
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
    ]
]
op404.node.kernel = extern_kernels.convolution


op405_op406_op407: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op405_op406_op407.writes = 
    [   MemoryDep('buf405', c0, {c0: 4720}, None),
        MemoryDep('buf406', c0, {c0: 4720}, None),
        MemoryDep('buf407', c0, {c0: 4720}, None)]
op405_op406_op407.unmet_dependencies = 
    [   MemoryDep('buf394', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf404', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op405_op406_op407.met_dependencies = 
    [   MemoryDep('arg185_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg186_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op405_op406_op407.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf405.users = [
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
    ]
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
    ]
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf407.users = [
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
    ]
]
op405_op406_op407.snodes[0] =
op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 4720}, None)]
op405.unmet_dependencies = 
    [   MemoryDep('buf394', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf404', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op405.met_dependencies = 
    [   MemoryDep('arg185_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg186_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf405.users = [
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
    ]
]
op405.group.device = cuda:0
op405.group.iteration = (4720, 128)
op405.sizes = ([8, 10, 59], [128])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op405_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf405', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf404', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg185_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg186_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op405_op406_op407.snodes[1] =
op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 4720}, None)]
op406.unmet_dependencies = 
    [   MemoryDep('buf394', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf404', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op406.met_dependencies = 
    [   MemoryDep('arg185_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg186_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
    ]
]
op406.group.device = cuda:0
op406.group.iteration = (4720, 128)
op406.sizes = ([8, 10, 59], [128])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op406_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf406', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf404', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg185_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg186_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op405_op406_op407.snodes[2] =
op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 4720}, None)]
op407.unmet_dependencies = 
    [   MemoryDep('buf394', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf404', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op407.met_dependencies = 
    [   MemoryDep('arg185_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg186_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf407.users = [
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
    ]
]
op407.group.device = cuda:0
op407.group.iteration = (4720, 128)
op407.sizes = ([8, 10, 59], [128])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op407_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf407', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf404', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg185_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg186_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op408_op409_op410: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op408_op409_op410.writes = 
    [   MemoryDep('buf408', c0, {c0: 80}, None),
        MemoryDep('buf409', c0, {c0: 80}, None),
        MemoryDep('buf410', c0, {c0: 80}, None)]
op408_op409_op410.unmet_dependencies = 
    [   MemoryDep('buf405', c0, {c0: 4720}, None),
        MemoryDep('buf406', c0, {c0: 4720}, None),
        MemoryDep('buf407', c0, {c0: 4720}, None)]
op408_op409_op410.met_dependencies = []
op408_op409_op410.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf408.users = [
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
    ]
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf409.users = [
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
    ]
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf410.users = [
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
    ]
]
op408_op409_op410.snodes[0] =
op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 80}, None)]
op408.unmet_dependencies = 
    [   MemoryDep('buf405', c0, {c0: 4720}, None),
        MemoryDep('buf406', c0, {c0: 4720}, None),
        MemoryDep('buf407', c0, {c0: 4720}, None)]
op408.met_dependencies = []
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf408.users = [
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
    ]
]
op408.group.device = cuda:0
op408.group.iteration = (80, 59)
op408.sizes = ([80], [59])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op408_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf406', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf407', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf408', get_index_3, getitem)
        return store_reduction
op408_op409_op410.snodes[1] =
op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 80}, None)]
op409.unmet_dependencies = 
    [   MemoryDep('buf405', c0, {c0: 4720}, None),
        MemoryDep('buf406', c0, {c0: 4720}, None),
        MemoryDep('buf407', c0, {c0: 4720}, None)]
op409.met_dependencies = []
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf409.users = [
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
    ]
]
op409.group.device = cuda:0
op409.group.iteration = (80, 59)
op409.sizes = ([80], [59])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op409_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf406', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf407', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf409', get_index_3, getitem_1)
        return store_reduction
op408_op409_op410.snodes[2] =
op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 80}, None)]
op410.unmet_dependencies = 
    [   MemoryDep('buf405', c0, {c0: 4720}, None),
        MemoryDep('buf406', c0, {c0: 4720}, None),
        MemoryDep('buf407', c0, {c0: 4720}, None)]
op410.met_dependencies = []
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf410.users = [
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
    ]
]
op410.group.device = cuda:0
op410.group.iteration = (80, 59)
op410.sizes = ([80], [59])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op410_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf406', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf407', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf410', get_index_3, getitem_2)
        return store_reduction


op411_op412: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op411_op412.writes = [MemoryDep('buf411', c0, {c0: 8}, None), MemoryDep('buf412', c0, {c0: 8}, None)]
op411_op412.unmet_dependencies = 
    [   MemoryDep('buf408', c0, {c0: 80}, None),
        MemoryDep('buf409', c0, {c0: 80}, None),
        MemoryDep('buf410', c0, {c0: 80}, None)]
op411_op412.met_dependencies = []
op411_op412.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf411.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf412.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op411_op412.snodes[0] =
op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 8}, None)]
op411.unmet_dependencies = 
    [   MemoryDep('buf408', c0, {c0: 80}, None),
        MemoryDep('buf409', c0, {c0: 80}, None),
        MemoryDep('buf410', c0, {c0: 80}, None)]
op411.met_dependencies = []
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf411.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op411.group.device = cuda:0
op411.group.iteration = (8, 10)
op411.sizes = ([8], [10])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op411_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf409', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf410', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf411', get_index_3, getitem)
        return store_reduction
op411_op412.snodes[1] =
op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 8}, None)]
op412.unmet_dependencies = 
    [   MemoryDep('buf408', c0, {c0: 80}, None),
        MemoryDep('buf409', c0, {c0: 80}, None),
        MemoryDep('buf410', c0, {c0: 80}, None)]
op412.met_dependencies = []
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf412.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (8, 10)
op412.sizes = ([8], [10])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op412_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf409', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf410', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf412', get_index_3, getitem_1)
        return store_reduction


op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 602112}, None)]
op414.unmet_dependencies = 
    [   MemoryDep('buf394', c0, {c0: 602112}, None),
        MemoryDep('buf404', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf411', c0, {c0: 8}, None),
        MemoryDep('buf412', c0, {c0: 8}, None)]
op414.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg186_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg187_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg188_1', c1, {c0: 8, c1: 384}, None)]
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf414.users = [
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False),
    ]
]
op414.group.device = cuda:0
op414.group.iteration = (602112, 1)
op414.sizes = ([8, 384, 196], [])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op414_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf404', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg185_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg186_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf411', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf412', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg187_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg188_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf414', get_index_8, add_3, None)
        return store


op415_op416: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op415_op416.writes = 
    [   MemoryDep('buf415', c0, {c0: 602112}, None),
        MemoryDep('buf416', c0, {c0: 602112}, None)]
op415_op416.unmet_dependencies = 
    [   MemoryDep('buf394', c0, {c0: 602112}, None),
        MemoryDep('buf404', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf414', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf414', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf414', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf414', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf414', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf414', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf414', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf414', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf414', c0, {c0: 602112}, None)]
op415_op416.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg186_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg189_1', c1, {c0: 8, c1: 384}, None)]
op415_op416.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf415.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False)]
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf416.users = [
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False),
    ]
]
op415_op416.snodes[0] =
op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 602112}, None)]
op415.unmet_dependencies = 
    [   MemoryDep('buf414', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf414', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf414', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf414', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf414', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf414', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf414', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf414', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf414', c0, {c0: 602112}, None)]
op415.met_dependencies = []
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf415.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (602112, 1)
op415.sizes = ([3072, 14, 14], [])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op415_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf415', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf414', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf414', get_index)
        return load
op415_op416.snodes[1] =
op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 602112}, None)]
op416.unmet_dependencies = 
    [   MemoryDep('buf394', c0, {c0: 602112}, None),
        MemoryDep('buf404', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf414', c0, {c0: 602112}, None),
        MemoryDep('buf415', c0, {c0: 602112}, None)]
op416.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg186_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg189_1', c1, {c0: 8, c1: 384}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf416.users = [
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False),
    ]
]
op416.group.device = cuda:0
op416.group.iteration = (602112, 1)
op416.sizes = ([8, 384, 196], [])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op416_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf404', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg185_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg186_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf415', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf414', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg189_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf416', get_index_7, add_2, None)
        return store


op417_op418_op419: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op417_op418_op419.writes = 
    [   MemoryDep('buf417', c0, {c0: 80}, None),
        MemoryDep('buf418', c0, {c0: 80}, None),
        MemoryDep('buf419', c0, {c0: 80}, None)]
op417_op418_op419.unmet_dependencies = [   MemoryDep('buf416', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op417_op418_op419.met_dependencies = []
op417_op418_op419.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf417.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
    ]
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf418.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
    ]
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf419.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
    ]
]
op417_op418_op419.snodes[0] =
op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 80}, None)]
op417.unmet_dependencies = [   MemoryDep('buf416', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op417.met_dependencies = []
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf417.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
    ]
]
op417.group.device = cuda:0
op417.group.iteration = (80, 7527)
op417.sizes = ([8, 10], [7527])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op417_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf417', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf416', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op417_op418_op419.snodes[1] =
op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 80}, None)]
op418.unmet_dependencies = [   MemoryDep('buf416', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op418.met_dependencies = []
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf418.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
    ]
]
op418.group.device = cuda:0
op418.group.iteration = (80, 7527)
op418.sizes = ([8, 10], [7527])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op418_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf418', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf416', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op417_op418_op419.snodes[2] =
op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 80}, None)]
op419.unmet_dependencies = [   MemoryDep('buf416', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op419.met_dependencies = []
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf419.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
    ]
]
op419.group.device = cuda:0
op419.group.iteration = (80, 7527)
op419.sizes = ([8, 10], [7527])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op419_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf419', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf416', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op420_op421: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op420_op421.writes = [MemoryDep('buf420', c0, {c0: 8}, None), MemoryDep('buf421', c0, {c0: 8}, None)]
op420_op421.unmet_dependencies = 
    [   MemoryDep('buf417', c0, {c0: 80}, None),
        MemoryDep('buf418', c0, {c0: 80}, None),
        MemoryDep('buf419', c0, {c0: 80}, None)]
op420_op421.met_dependencies = []
op420_op421.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf420.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf421.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op420_op421.snodes[0] =
op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 8}, None)]
op420.unmet_dependencies = 
    [   MemoryDep('buf417', c0, {c0: 80}, None),
        MemoryDep('buf418', c0, {c0: 80}, None),
        MemoryDep('buf419', c0, {c0: 80}, None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf420.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (8, 10)
op420.sizes = ([8], [10])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op420_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf418', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf419', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf420', get_index_3, getitem)
        return store_reduction
op420_op421.snodes[1] =
op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 8}, None)]
op421.unmet_dependencies = 
    [   MemoryDep('buf417', c0, {c0: 80}, None),
        MemoryDep('buf418', c0, {c0: 80}, None),
        MemoryDep('buf419', c0, {c0: 80}, None)]
op421.met_dependencies = []
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf421.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op421.group.device = cuda:0
op421.group.iteration = (8, 10)
op421.sizes = ([8], [10])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op421_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf418', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf419', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf421', get_index_3, getitem_1)
        return store_reduction


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op423.unmet_dependencies = 
    [   MemoryDep('buf416', c0, {c0: 602112}, None),
        MemoryDep('buf420', c0, {c0: 8}, None),
        MemoryDep('buf421', c0, {c0: 8}, None)]
op423.met_dependencies = 
    [   MemoryDep('arg190_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg191_1', c1, {c0: 8, c1: 384}, None)]
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (602112, 1)
op423.sizes = ([8, 384, 196], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op423_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf420', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf421', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg190_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg191_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf423', get_index_5, add_1, None)
        return store


op424: ExternKernelSchedulerNode(ExternKernelAlloc)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf423', mode=None)]
op424.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op424.outputs = [
    buf424: ExternKernelAlloc
    buf424.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf424.users = [NodeUser(node=SchedulerNode(name='op425'), can_inplace=True, is_weak=False)]
]
op424.node.kernel = extern_kernels.convolution


op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 2408448}, None)]
op425.unmet_dependencies = [MemoryDep('buf424', c0, {c0: 2408448}, None)]
op425.met_dependencies = [MemoryDep('arg193_1', c1, {c0: 1568, c1: 1536}, None)]
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf425.users = [NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (2408448, 1)
op425.sizes = ([1568, 1536], [])
buf424_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op425_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg193_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf424', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg193_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf425', get_index_4, mul_2, None)
        return store


op426: ExternKernelSchedulerNode(ExternKernelAlloc)
op426.writes = [StarDep(name='buf426', mode=None)]
op426.unmet_dependencies = [StarDep(name='buf425', mode=None)]
op426.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op426.outputs = [
    buf426: ExternKernelAlloc
    buf426.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf426.users = [
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
    ]
]
op426.node.kernel = extern_kernels.convolution


op427_op428_op429: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op427_op428_op429.writes = 
    [   MemoryDep('buf427', c0, {c0: 4720}, None),
        MemoryDep('buf428', c0, {c0: 4720}, None),
        MemoryDep('buf429', c0, {c0: 4720}, None)]
op427_op428_op429.unmet_dependencies = 
    [   MemoryDep('buf416', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf426', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op427_op428_op429.met_dependencies = 
    [   MemoryDep('arg195_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg196_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op427_op428_op429.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf427.users = [
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf428.users = [
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf429.users = [
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op427_op428_op429.snodes[0] =
op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', c0, {c0: 4720}, None)]
op427.unmet_dependencies = 
    [   MemoryDep('buf416', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf426', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op427.met_dependencies = 
    [   MemoryDep('arg195_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg196_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf427.users = [
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op427.group.device = cuda:0
op427.group.iteration = (4720, 128)
op427.sizes = ([8, 10, 59], [128])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op427_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf427', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf426', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg196_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op427_op428_op429.snodes[1] =
op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 4720}, None)]
op428.unmet_dependencies = 
    [   MemoryDep('buf416', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf426', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op428.met_dependencies = 
    [   MemoryDep('arg195_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg196_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf428.users = [
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op428.group.device = cuda:0
op428.group.iteration = (4720, 128)
op428.sizes = ([8, 10, 59], [128])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op428_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf428', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf426', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg196_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op427_op428_op429.snodes[2] =
op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 4720}, None)]
op429.unmet_dependencies = 
    [   MemoryDep('buf416', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf426', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op429.met_dependencies = 
    [   MemoryDep('arg195_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg196_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf429.users = [
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op429.group.device = cuda:0
op429.group.iteration = (4720, 128)
op429.sizes = ([8, 10, 59], [128])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op429_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf429', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf426', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg196_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op430_op431_op432: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op430_op431_op432.writes = 
    [   MemoryDep('buf430', c0, {c0: 80}, None),
        MemoryDep('buf431', c0, {c0: 80}, None),
        MemoryDep('buf432', c0, {c0: 80}, None)]
op430_op431_op432.unmet_dependencies = 
    [   MemoryDep('buf427', c0, {c0: 4720}, None),
        MemoryDep('buf428', c0, {c0: 4720}, None),
        MemoryDep('buf429', c0, {c0: 4720}, None)]
op430_op431_op432.met_dependencies = []
op430_op431_op432.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf430.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf432.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
]
op430_op431_op432.snodes[0] =
op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 80}, None)]
op430.unmet_dependencies = 
    [   MemoryDep('buf427', c0, {c0: 4720}, None),
        MemoryDep('buf428', c0, {c0: 4720}, None),
        MemoryDep('buf429', c0, {c0: 4720}, None)]
op430.met_dependencies = []
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf430.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
]
op430.group.device = cuda:0
op430.group.iteration = (80, 59)
op430.sizes = ([80], [59])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op430_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf428', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf429', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf430', get_index_3, getitem)
        return store_reduction
op430_op431_op432.snodes[1] =
op431: SchedulerNode(ComputedBuffer)
op431.writes = [MemoryDep('buf431', c0, {c0: 80}, None)]
op431.unmet_dependencies = 
    [   MemoryDep('buf427', c0, {c0: 4720}, None),
        MemoryDep('buf428', c0, {c0: 4720}, None),
        MemoryDep('buf429', c0, {c0: 4720}, None)]
op431.met_dependencies = []
op431.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
]
op431.group.device = cuda:0
op431.group.iteration = (80, 59)
op431.sizes = ([80], [59])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op431_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf428', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf429', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf431', get_index_3, getitem_1)
        return store_reduction
op430_op431_op432.snodes[2] =
op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 80}, None)]
op432.unmet_dependencies = 
    [   MemoryDep('buf427', c0, {c0: 4720}, None),
        MemoryDep('buf428', c0, {c0: 4720}, None),
        MemoryDep('buf429', c0, {c0: 4720}, None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf432.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
]
op432.group.device = cuda:0
op432.group.iteration = (80, 59)
op432.sizes = ([80], [59])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op432_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf428', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf429', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf432', get_index_3, getitem_2)
        return store_reduction


op433_op434: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op433_op434.writes = [MemoryDep('buf433', c0, {c0: 8}, None), MemoryDep('buf434', c0, {c0: 8}, None)]
op433_op434.unmet_dependencies = 
    [   MemoryDep('buf430', c0, {c0: 80}, None),
        MemoryDep('buf431', c0, {c0: 80}, None),
        MemoryDep('buf432', c0, {c0: 80}, None)]
op433_op434.met_dependencies = []
op433_op434.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf433.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf434.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op433_op434.snodes[0] =
op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 8}, None)]
op433.unmet_dependencies = 
    [   MemoryDep('buf430', c0, {c0: 80}, None),
        MemoryDep('buf431', c0, {c0: 80}, None),
        MemoryDep('buf432', c0, {c0: 80}, None)]
op433.met_dependencies = []
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf433.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (8, 10)
op433.sizes = ([8], [10])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op433_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf431', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf432', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf433', get_index_3, getitem)
        return store_reduction
op433_op434.snodes[1] =
op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 8}, None)]
op434.unmet_dependencies = 
    [   MemoryDep('buf430', c0, {c0: 80}, None),
        MemoryDep('buf431', c0, {c0: 80}, None),
        MemoryDep('buf432', c0, {c0: 80}, None)]
op434.met_dependencies = []
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf434.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (8, 10)
op434.sizes = ([8], [10])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op434_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf431', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf432', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf434', get_index_3, getitem_1)
        return store_reduction


op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 602112}, None)]
op436.unmet_dependencies = 
    [   MemoryDep('buf416', c0, {c0: 602112}, None),
        MemoryDep('buf426', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf433', c0, {c0: 8}, None),
        MemoryDep('buf434', c0, {c0: 8}, None)]
op436.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg196_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg197_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg198_1', c1, {c0: 8, c1: 384}, None)]
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf436.users = [
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False),
    ]
]
op436.group.device = cuda:0
op436.group.iteration = (602112, 1)
op436.sizes = ([8, 384, 196], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op436_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf426', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg196_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf433', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf434', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg197_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg198_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf436', get_index_8, add_3, None)
        return store


op437_op438: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op437_op438.writes = 
    [   MemoryDep('buf437', c0, {c0: 602112}, None),
        MemoryDep('buf438', c0, {c0: 602112}, None)]
op437_op438.unmet_dependencies = 
    [   MemoryDep('buf416', c0, {c0: 602112}, None),
        MemoryDep('buf426', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf436', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf436', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf436', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf436', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf436', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf436', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf436', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf436', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf436', c0, {c0: 602112}, None)]
op437_op438.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg196_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg199_1', c1, {c0: 8, c1: 384}, None)]
op437_op438.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False)]
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf438.users = [
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False),
    ]
]
op437_op438.snodes[0] =
op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 602112}, None)]
op437.unmet_dependencies = 
    [   MemoryDep('buf436', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf436', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf436', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf436', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf436', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf436', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf436', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf436', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf436', c0, {c0: 602112}, None)]
op437.met_dependencies = []
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False)]
]
op437.group.device = cuda:0
op437.group.iteration = (602112, 1)
op437.sizes = ([3072, 14, 14], [])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op437_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf437', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf436', get_index)
        return load
op437_op438.snodes[1] =
op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 602112}, None)]
op438.unmet_dependencies = 
    [   MemoryDep('buf416', c0, {c0: 602112}, None),
        MemoryDep('buf426', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf436', c0, {c0: 602112}, None),
        MemoryDep('buf437', c0, {c0: 602112}, None)]
op438.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg196_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg199_1', c1, {c0: 8, c1: 384}, None)]
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf438.users = [
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False),
    ]
]
op438.group.device = cuda:0
op438.group.iteration = (602112, 1)
op438.sizes = ([8, 384, 196], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op438_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf426', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg196_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf437', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf436', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg199_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf438', get_index_7, add_2, None)
        return store


op439_op440_op441: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op439_op440_op441.writes = 
    [   MemoryDep('buf439', c0, {c0: 80}, None),
        MemoryDep('buf440', c0, {c0: 80}, None),
        MemoryDep('buf441', c0, {c0: 80}, None)]
op439_op440_op441.unmet_dependencies = [   MemoryDep('buf438', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op439_op440_op441.met_dependencies = []
op439_op440_op441.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf439.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf440.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf441.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
]
op439_op440_op441.snodes[0] =
op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', c0, {c0: 80}, None)]
op439.unmet_dependencies = [   MemoryDep('buf438', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op439.met_dependencies = []
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf439.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
]
op439.group.device = cuda:0
op439.group.iteration = (80, 7527)
op439.sizes = ([8, 10], [7527])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op439_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf439', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf438', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op439_op440_op441.snodes[1] =
op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 80}, None)]
op440.unmet_dependencies = [   MemoryDep('buf438', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op440.met_dependencies = []
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf440.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
]
op440.group.device = cuda:0
op440.group.iteration = (80, 7527)
op440.sizes = ([8, 10], [7527])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op440_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf440', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf438', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op439_op440_op441.snodes[2] =
op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 80}, None)]
op441.unmet_dependencies = [   MemoryDep('buf438', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op441.met_dependencies = []
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf441.users = [
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
    ]
]
op441.group.device = cuda:0
op441.group.iteration = (80, 7527)
op441.sizes = ([8, 10], [7527])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op441_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf441', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf438', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op442_op443: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op442_op443.writes = [MemoryDep('buf442', c0, {c0: 8}, None), MemoryDep('buf443', c0, {c0: 8}, None)]
op442_op443.unmet_dependencies = 
    [   MemoryDep('buf439', c0, {c0: 80}, None),
        MemoryDep('buf440', c0, {c0: 80}, None),
        MemoryDep('buf441', c0, {c0: 80}, None)]
op442_op443.met_dependencies = []
op442_op443.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf442.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf443.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op442_op443.snodes[0] =
op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 8}, None)]
op442.unmet_dependencies = 
    [   MemoryDep('buf439', c0, {c0: 80}, None),
        MemoryDep('buf440', c0, {c0: 80}, None),
        MemoryDep('buf441', c0, {c0: 80}, None)]
op442.met_dependencies = []
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf442.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op442.group.device = cuda:0
op442.group.iteration = (8, 10)
op442.sizes = ([8], [10])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op442_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf439', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf440', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf441', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf442', get_index_3, getitem)
        return store_reduction
op442_op443.snodes[1] =
op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 8}, None)]
op443.unmet_dependencies = 
    [   MemoryDep('buf439', c0, {c0: 80}, None),
        MemoryDep('buf440', c0, {c0: 80}, None),
        MemoryDep('buf441', c0, {c0: 80}, None)]
op443.met_dependencies = []
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf443.users = [NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op443.group.device = cuda:0
op443.group.iteration = (8, 10)
op443.sizes = ([8], [10])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op443_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf439', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf440', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf441', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf443', get_index_3, getitem_1)
        return store_reduction


op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op445.unmet_dependencies = 
    [   MemoryDep('buf438', c0, {c0: 602112}, None),
        MemoryDep('buf442', c0, {c0: 8}, None),
        MemoryDep('buf443', c0, {c0: 8}, None)]
op445.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg201_1', c1, {c0: 8, c1: 384}, None)]
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf445.users = [NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (602112, 1)
op445.sizes = ([8, 384, 196], [])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op445_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf438', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf442', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf443', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg200_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg201_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf445', get_index_5, add_1, None)
        return store


op446: ExternKernelSchedulerNode(ExternKernelAlloc)
op446.writes = [StarDep(name='buf446', mode=None)]
op446.unmet_dependencies = [StarDep(name='buf445', mode=None)]
op446.met_dependencies = [StarDep(name='arg202_1', mode=None)]
op446.outputs = [
    buf446: ExternKernelAlloc
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf446.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False)]
]
op446.node.kernel = extern_kernels.convolution


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 2408448}, None)]
op447.unmet_dependencies = [MemoryDep('buf446', c0, {c0: 2408448}, None)]
op447.met_dependencies = [MemoryDep('arg203_1', c1, {c0: 1568, c1: 1536}, None)]
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (2408448, 1)
op447.sizes = ([1568, 1536], [])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op447_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf446', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf446', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg203_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf447', get_index_4, mul_2, None)
        return store


op448: ExternKernelSchedulerNode(ExternKernelAlloc)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op448.met_dependencies = [StarDep(name='arg204_1', mode=None)]
op448.outputs = [
    buf448: ExternKernelAlloc
    buf448.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf448.users = [
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
    ]
]
op448.node.kernel = extern_kernels.convolution


op449_op450_op451: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op449_op450_op451.writes = 
    [   MemoryDep('buf449', c0, {c0: 4720}, None),
        MemoryDep('buf450', c0, {c0: 4720}, None),
        MemoryDep('buf451', c0, {c0: 4720}, None)]
op449_op450_op451.unmet_dependencies = 
    [   MemoryDep('buf438', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf448', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op449_op450_op451.met_dependencies = 
    [   MemoryDep('arg205_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg206_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op449_op450_op451.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf449.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
    ]
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf450.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
    ]
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf451.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
    ]
]
op449_op450_op451.snodes[0] =
op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 4720}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf438', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf448', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op449.met_dependencies = 
    [   MemoryDep('arg205_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg206_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf449.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
    ]
]
op449.group.device = cuda:0
op449.group.iteration = (4720, 128)
op449.sizes = ([8, 10, 59], [128])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op449_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf449', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf438', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf448', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg205_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg206_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op449_op450_op451.snodes[1] =
op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 4720}, None)]
op450.unmet_dependencies = 
    [   MemoryDep('buf438', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf448', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op450.met_dependencies = 
    [   MemoryDep('arg205_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg206_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf450.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
    ]
]
op450.group.device = cuda:0
op450.group.iteration = (4720, 128)
op450.sizes = ([8, 10, 59], [128])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op450_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf450', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf438', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf448', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg205_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg206_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op449_op450_op451.snodes[2] =
op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', c0, {c0: 4720}, None)]
op451.unmet_dependencies = 
    [   MemoryDep('buf438', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf448', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op451.met_dependencies = 
    [   MemoryDep('arg205_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg206_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf451.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
    ]
]
op451.group.device = cuda:0
op451.group.iteration = (4720, 128)
op451.sizes = ([8, 10, 59], [128])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op451_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf451', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf438', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf448', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg205_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg206_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op452_op453_op454: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op452_op453_op454.writes = 
    [   MemoryDep('buf452', c0, {c0: 80}, None),
        MemoryDep('buf453', c0, {c0: 80}, None),
        MemoryDep('buf454', c0, {c0: 80}, None)]
op452_op453_op454.unmet_dependencies = 
    [   MemoryDep('buf449', c0, {c0: 4720}, None),
        MemoryDep('buf450', c0, {c0: 4720}, None),
        MemoryDep('buf451', c0, {c0: 4720}, None)]
op452_op453_op454.met_dependencies = []
op452_op453_op454.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf452.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf453.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf454.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op452_op453_op454.snodes[0] =
op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 80}, None)]
op452.unmet_dependencies = 
    [   MemoryDep('buf449', c0, {c0: 4720}, None),
        MemoryDep('buf450', c0, {c0: 4720}, None),
        MemoryDep('buf451', c0, {c0: 4720}, None)]
op452.met_dependencies = []
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf452.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op452.group.device = cuda:0
op452.group.iteration = (80, 59)
op452.sizes = ([80], [59])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op452_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf450', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf451', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf452', get_index_3, getitem)
        return store_reduction
op452_op453_op454.snodes[1] =
op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 80}, None)]
op453.unmet_dependencies = 
    [   MemoryDep('buf449', c0, {c0: 4720}, None),
        MemoryDep('buf450', c0, {c0: 4720}, None),
        MemoryDep('buf451', c0, {c0: 4720}, None)]
op453.met_dependencies = []
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf453.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op453.group.device = cuda:0
op453.group.iteration = (80, 59)
op453.sizes = ([80], [59])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op453_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf450', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf451', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf453', get_index_3, getitem_1)
        return store_reduction
op452_op453_op454.snodes[2] =
op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', c0, {c0: 80}, None)]
op454.unmet_dependencies = 
    [   MemoryDep('buf449', c0, {c0: 4720}, None),
        MemoryDep('buf450', c0, {c0: 4720}, None),
        MemoryDep('buf451', c0, {c0: 4720}, None)]
op454.met_dependencies = []
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf454.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op454.group.device = cuda:0
op454.group.iteration = (80, 59)
op454.sizes = ([80], [59])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op454_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf450', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf451', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf454', get_index_3, getitem_2)
        return store_reduction


op455_op456: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op455_op456.writes = [MemoryDep('buf455', c0, {c0: 8}, None), MemoryDep('buf456', c0, {c0: 8}, None)]
op455_op456.unmet_dependencies = 
    [   MemoryDep('buf452', c0, {c0: 80}, None),
        MemoryDep('buf453', c0, {c0: 80}, None),
        MemoryDep('buf454', c0, {c0: 80}, None)]
op455_op456.met_dependencies = []
op455_op456.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf455.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf456.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op455_op456.snodes[0] =
op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 8}, None)]
op455.unmet_dependencies = 
    [   MemoryDep('buf452', c0, {c0: 80}, None),
        MemoryDep('buf453', c0, {c0: 80}, None),
        MemoryDep('buf454', c0, {c0: 80}, None)]
op455.met_dependencies = []
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf455.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op455.group.device = cuda:0
op455.group.iteration = (8, 10)
op455.sizes = ([8], [10])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op455_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf453', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf454', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf455', get_index_3, getitem)
        return store_reduction
op455_op456.snodes[1] =
op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 8}, None)]
op456.unmet_dependencies = 
    [   MemoryDep('buf452', c0, {c0: 80}, None),
        MemoryDep('buf453', c0, {c0: 80}, None),
        MemoryDep('buf454', c0, {c0: 80}, None)]
op456.met_dependencies = []
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf456.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (8, 10)
op456.sizes = ([8], [10])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op456_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf453', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf454', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf456', get_index_3, getitem_1)
        return store_reduction


op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', c0, {c0: 602112}, None)]
op458.unmet_dependencies = 
    [   MemoryDep('buf438', c0, {c0: 602112}, None),
        MemoryDep('buf448', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf455', c0, {c0: 8}, None),
        MemoryDep('buf456', c0, {c0: 8}, None)]
op458.met_dependencies = 
    [   MemoryDep('arg205_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg206_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg207_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg208_1', c1, {c0: 8, c1: 384}, None)]
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf458.users = [
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False),
    ]
]
op458.group.device = cuda:0
op458.group.iteration = (602112, 1)
op458.sizes = ([8, 384, 196], [])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op458_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf438', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf448', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg205_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg206_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf455', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf456', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg207_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg208_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf458', get_index_8, add_3, None)
        return store


op459_op460: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op459_op460.writes = 
    [   MemoryDep('buf459', c0, {c0: 602112}, None),
        MemoryDep('buf460', c0, {c0: 602112}, None)]
op459_op460.unmet_dependencies = 
    [   MemoryDep('buf438', c0, {c0: 602112}, None),
        MemoryDep('buf448', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf458', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf458', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf458', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf458', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf458', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf458', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf458', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf458', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf458', c0, {c0: 602112}, None)]
op459_op460.met_dependencies = 
    [   MemoryDep('arg205_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg206_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg209_1', c1, {c0: 8, c1: 384}, None)]
op459_op460.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf459.users = [NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False)]
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf460.users = [
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False),
    ]
]
op459_op460.snodes[0] =
op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 602112}, None)]
op459.unmet_dependencies = 
    [   MemoryDep('buf458', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf458', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf458', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf458', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf458', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf458', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf458', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf458', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf458', c0, {c0: 602112}, None)]
op459.met_dependencies = []
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf459.users = [NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False)]
]
op459.group.device = cuda:0
op459.group.iteration = (602112, 1)
op459.sizes = ([3072, 14, 14], [])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op459_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf459', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf458', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf458', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf458', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf458', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf458', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf458', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf458', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf458', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf458', get_index)
        return load
op459_op460.snodes[1] =
op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 602112}, None)]
op460.unmet_dependencies = 
    [   MemoryDep('buf438', c0, {c0: 602112}, None),
        MemoryDep('buf448', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf458', c0, {c0: 602112}, None),
        MemoryDep('buf459', c0, {c0: 602112}, None)]
op460.met_dependencies = 
    [   MemoryDep('arg205_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg206_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg209_1', c1, {c0: 8, c1: 384}, None)]
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf460.users = [
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False),
    ]
]
op460.group.device = cuda:0
op460.group.iteration = (602112, 1)
op460.sizes = ([8, 384, 196], [])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op460_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf438', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf448', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg205_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg206_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf459', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf458', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg209_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf460', get_index_7, add_2, None)
        return store


op461_op462_op463: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op461_op462_op463.writes = 
    [   MemoryDep('buf461', c0, {c0: 80}, None),
        MemoryDep('buf462', c0, {c0: 80}, None),
        MemoryDep('buf463', c0, {c0: 80}, None)]
op461_op462_op463.unmet_dependencies = [   MemoryDep('buf460', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op461_op462_op463.met_dependencies = []
op461_op462_op463.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf461.users = [
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
    ]
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf462.users = [
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
    ]
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf463.users = [
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
    ]
]
op461_op462_op463.snodes[0] =
op461: SchedulerNode(ComputedBuffer)
op461.writes = [MemoryDep('buf461', c0, {c0: 80}, None)]
op461.unmet_dependencies = [   MemoryDep('buf460', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op461.met_dependencies = []
op461.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf461.users = [
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
    ]
]
op461.group.device = cuda:0
op461.group.iteration = (80, 7527)
op461.sizes = ([8, 10], [7527])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op461_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf461', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf460', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op461_op462_op463.snodes[1] =
op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', c0, {c0: 80}, None)]
op462.unmet_dependencies = [   MemoryDep('buf460', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op462.met_dependencies = []
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf462.users = [
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
    ]
]
op462.group.device = cuda:0
op462.group.iteration = (80, 7527)
op462.sizes = ([8, 10], [7527])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op462_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf462', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf460', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op461_op462_op463.snodes[2] =
op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 80}, None)]
op463.unmet_dependencies = [   MemoryDep('buf460', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op463.met_dependencies = []
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf463.users = [
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
    ]
]
op463.group.device = cuda:0
op463.group.iteration = (80, 7527)
op463.sizes = ([8, 10], [7527])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op463_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf463', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf460', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op464_op465: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op464_op465.writes = [MemoryDep('buf464', c0, {c0: 8}, None), MemoryDep('buf465', c0, {c0: 8}, None)]
op464_op465.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 80}, None),
        MemoryDep('buf462', c0, {c0: 80}, None),
        MemoryDep('buf463', c0, {c0: 80}, None)]
op464_op465.met_dependencies = []
op464_op465.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf464.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf465.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
]
op464_op465.snodes[0] =
op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 8}, None)]
op464.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 80}, None),
        MemoryDep('buf462', c0, {c0: 80}, None),
        MemoryDep('buf463', c0, {c0: 80}, None)]
op464.met_dependencies = []
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf464.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
]
op464.group.device = cuda:0
op464.group.iteration = (8, 10)
op464.sizes = ([8], [10])
buf461_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op464_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf462', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf463', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf464', get_index_3, getitem)
        return store_reduction
op464_op465.snodes[1] =
op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 8}, None)]
op465.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 80}, None),
        MemoryDep('buf462', c0, {c0: 80}, None),
        MemoryDep('buf463', c0, {c0: 80}, None)]
op465.met_dependencies = []
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf465.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
]
op465.group.device = cuda:0
op465.group.iteration = (8, 10)
op465.sizes = ([8], [10])
buf461_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op465_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf462', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf463', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf465', get_index_3, getitem_1)
        return store_reduction


op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op467.unmet_dependencies = 
    [   MemoryDep('buf460', c0, {c0: 602112}, None),
        MemoryDep('buf464', c0, {c0: 8}, None),
        MemoryDep('buf465', c0, {c0: 8}, None)]
op467.met_dependencies = 
    [   MemoryDep('arg210_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg211_1', c1, {c0: 8, c1: 384}, None)]
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf467.users = [NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False)]
]
op467.group.device = cuda:0
op467.group.iteration = (602112, 1)
op467.sizes = ([8, 384, 196], [])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf465_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op467_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf464', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf465', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg210_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg211_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf467', get_index_5, add_1, None)
        return store


op468: ExternKernelSchedulerNode(ExternKernelAlloc)
op468.writes = [StarDep(name='buf468', mode=None)]
op468.unmet_dependencies = [StarDep(name='buf467', mode=None)]
op468.met_dependencies = [StarDep(name='arg212_1', mode=None)]
op468.outputs = [
    buf468: ExternKernelAlloc
    buf468.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf468.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=True, is_weak=False)]
]
op468.node.kernel = extern_kernels.convolution


op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 2408448}, None)]
op469.unmet_dependencies = [MemoryDep('buf468', c0, {c0: 2408448}, None)]
op469.met_dependencies = [MemoryDep('arg213_1', c1, {c0: 1568, c1: 1536}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf469.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (2408448, 1)
op469.sizes = ([1568, 1536], [])
buf468_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op469_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg213_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf468', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg213_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf469', get_index_4, mul_2, None)
        return store


op470: ExternKernelSchedulerNode(ExternKernelAlloc)
op470.writes = [StarDep(name='buf470', mode=None)]
op470.unmet_dependencies = [StarDep(name='buf469', mode=None)]
op470.met_dependencies = [StarDep(name='arg214_1', mode=None)]
op470.outputs = [
    buf470: ExternKernelAlloc
    buf470.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf470.users = [
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
    ]
]
op470.node.kernel = extern_kernels.convolution


op471_op472_op473: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op471_op472_op473.writes = 
    [   MemoryDep('buf471', c0, {c0: 4720}, None),
        MemoryDep('buf472', c0, {c0: 4720}, None),
        MemoryDep('buf473', c0, {c0: 4720}, None)]
op471_op472_op473.unmet_dependencies = 
    [   MemoryDep('buf460', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf470', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op471_op472_op473.met_dependencies = 
    [   MemoryDep('arg215_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg216_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op471_op472_op473.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf471.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
    ]
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf472.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
    ]
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf473.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
    ]
]
op471_op472_op473.snodes[0] =
op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 4720}, None)]
op471.unmet_dependencies = 
    [   MemoryDep('buf460', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf470', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op471.met_dependencies = 
    [   MemoryDep('arg215_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg216_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf471.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
    ]
]
op471.group.device = cuda:0
op471.group.iteration = (4720, 128)
op471.sizes = ([8, 10, 59], [128])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op471_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf471', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf470', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg215_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg216_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op471_op472_op473.snodes[1] =
op472: SchedulerNode(ComputedBuffer)
op472.writes = [MemoryDep('buf472', c0, {c0: 4720}, None)]
op472.unmet_dependencies = 
    [   MemoryDep('buf460', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf470', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op472.met_dependencies = 
    [   MemoryDep('arg215_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg216_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op472.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf472.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
    ]
]
op472.group.device = cuda:0
op472.group.iteration = (4720, 128)
op472.sizes = ([8, 10, 59], [128])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op472_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf472', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf470', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg215_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg216_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op471_op472_op473.snodes[2] =
op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', c0, {c0: 4720}, None)]
op473.unmet_dependencies = 
    [   MemoryDep('buf460', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf470', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op473.met_dependencies = 
    [   MemoryDep('arg215_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg216_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf473.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
    ]
]
op473.group.device = cuda:0
op473.group.iteration = (4720, 128)
op473.sizes = ([8, 10, 59], [128])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op473_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf473', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf470', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg215_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg216_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op474_op475_op476: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op474_op475_op476.writes = 
    [   MemoryDep('buf474', c0, {c0: 80}, None),
        MemoryDep('buf475', c0, {c0: 80}, None),
        MemoryDep('buf476', c0, {c0: 80}, None)]
op474_op475_op476.unmet_dependencies = 
    [   MemoryDep('buf471', c0, {c0: 4720}, None),
        MemoryDep('buf472', c0, {c0: 4720}, None),
        MemoryDep('buf473', c0, {c0: 4720}, None)]
op474_op475_op476.met_dependencies = []
op474_op475_op476.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf474.users = [
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
    ]
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf475.users = [
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
    ]
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf476.users = [
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
    ]
]
op474_op475_op476.snodes[0] =
op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', c0, {c0: 80}, None)]
op474.unmet_dependencies = 
    [   MemoryDep('buf471', c0, {c0: 4720}, None),
        MemoryDep('buf472', c0, {c0: 4720}, None),
        MemoryDep('buf473', c0, {c0: 4720}, None)]
op474.met_dependencies = []
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf474.users = [
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
    ]
]
op474.group.device = cuda:0
op474.group.iteration = (80, 59)
op474.sizes = ([80], [59])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op474_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf472', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf473', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf474', get_index_3, getitem)
        return store_reduction
op474_op475_op476.snodes[1] =
op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 80}, None)]
op475.unmet_dependencies = 
    [   MemoryDep('buf471', c0, {c0: 4720}, None),
        MemoryDep('buf472', c0, {c0: 4720}, None),
        MemoryDep('buf473', c0, {c0: 4720}, None)]
op475.met_dependencies = []
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf475.users = [
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
    ]
]
op475.group.device = cuda:0
op475.group.iteration = (80, 59)
op475.sizes = ([80], [59])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op475_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf472', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf473', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf475', get_index_3, getitem_1)
        return store_reduction
op474_op475_op476.snodes[2] =
op476: SchedulerNode(ComputedBuffer)
op476.writes = [MemoryDep('buf476', c0, {c0: 80}, None)]
op476.unmet_dependencies = 
    [   MemoryDep('buf471', c0, {c0: 4720}, None),
        MemoryDep('buf472', c0, {c0: 4720}, None),
        MemoryDep('buf473', c0, {c0: 4720}, None)]
op476.met_dependencies = []
op476.outputs = [
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf476.users = [
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False),
    ]
]
op476.group.device = cuda:0
op476.group.iteration = (80, 59)
op476.sizes = ([80], [59])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op476_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf472', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf473', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf476', get_index_3, getitem_2)
        return store_reduction


op477_op478: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op477_op478.writes = [MemoryDep('buf477', c0, {c0: 8}, None), MemoryDep('buf478', c0, {c0: 8}, None)]
op477_op478.unmet_dependencies = 
    [   MemoryDep('buf474', c0, {c0: 80}, None),
        MemoryDep('buf475', c0, {c0: 80}, None),
        MemoryDep('buf476', c0, {c0: 80}, None)]
op477_op478.met_dependencies = []
op477_op478.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf477.users = [NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf478.users = [NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op477_op478.snodes[0] =
op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 8}, None)]
op477.unmet_dependencies = 
    [   MemoryDep('buf474', c0, {c0: 80}, None),
        MemoryDep('buf475', c0, {c0: 80}, None),
        MemoryDep('buf476', c0, {c0: 80}, None)]
op477.met_dependencies = []
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf477.users = [NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op477.group.device = cuda:0
op477.group.iteration = (8, 10)
op477.sizes = ([8], [10])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op477_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf474', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf475', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf476', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf477', get_index_3, getitem)
        return store_reduction
op477_op478.snodes[1] =
op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 8}, None)]
op478.unmet_dependencies = 
    [   MemoryDep('buf474', c0, {c0: 80}, None),
        MemoryDep('buf475', c0, {c0: 80}, None),
        MemoryDep('buf476', c0, {c0: 80}, None)]
op478.met_dependencies = []
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf478.users = [NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op478.group.device = cuda:0
op478.group.iteration = (8, 10)
op478.sizes = ([8], [10])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op478_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf474', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf475', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf476', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf478', get_index_3, getitem_1)
        return store_reduction


op480: SchedulerNode(ComputedBuffer)
op480.writes = [MemoryDep('buf480', c0, {c0: 602112}, None)]
op480.unmet_dependencies = 
    [   MemoryDep('buf460', c0, {c0: 602112}, None),
        MemoryDep('buf470', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf477', c0, {c0: 8}, None),
        MemoryDep('buf478', c0, {c0: 8}, None)]
op480.met_dependencies = 
    [   MemoryDep('arg215_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg216_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg217_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg218_1', c1, {c0: 8, c1: 384}, None)]
op480.outputs = [
    buf480: ComputedBuffer
    buf480.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf480.users = [
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False),
    ]
]
op480.group.device = cuda:0
op480.group.iteration = (602112, 1)
op480.sizes = ([8, 384, 196], [])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf478_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op480_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf470', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg215_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg216_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf477', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf478', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg217_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg218_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf480', get_index_8, add_3, None)
        return store


op481_op482: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op481_op482.writes = 
    [   MemoryDep('buf481', c0, {c0: 602112}, None),
        MemoryDep('buf482', c0, {c0: 602112}, None)]
op481_op482.unmet_dependencies = 
    [   MemoryDep('buf460', c0, {c0: 602112}, None),
        MemoryDep('buf470', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf480', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf480', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf480', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf480', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf480', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf480', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf480', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf480', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf480', c0, {c0: 602112}, None)]
op481_op482.met_dependencies = 
    [   MemoryDep('arg215_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg216_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg219_1', c1, {c0: 8, c1: 384}, None)]
op481_op482.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf481.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False)]
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf482.users = [
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=True, is_weak=False),
    ]
]
op481_op482.snodes[0] =
op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 602112}, None)]
op481.unmet_dependencies = 
    [   MemoryDep('buf480', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf480', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf480', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf480', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf480', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf480', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf480', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf480', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf480', c0, {c0: 602112}, None)]
op481.met_dependencies = []
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf481.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False)]
]
op481.group.device = cuda:0
op481.group.iteration = (602112, 1)
op481.sizes = ([3072, 14, 14], [])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op481_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf481', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf480', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf480', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf480', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf480', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf480', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf480', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf480', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf480', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf480', get_index)
        return load
op481_op482.snodes[1] =
op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', c0, {c0: 602112}, None)]
op482.unmet_dependencies = 
    [   MemoryDep('buf460', c0, {c0: 602112}, None),
        MemoryDep('buf470', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf480', c0, {c0: 602112}, None),
        MemoryDep('buf481', c0, {c0: 602112}, None)]
op482.met_dependencies = 
    [   MemoryDep('arg215_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg216_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg219_1', c1, {c0: 8, c1: 384}, None)]
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf482.users = [
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=True, is_weak=False),
    ]
]
op482.group.device = cuda:0
op482.group.iteration = (602112, 1)
op482.sizes = ([8, 384, 196], [])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op482_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf470', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg215_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg216_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf481', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf480', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg219_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf482', get_index_7, add_2, None)
        return store


op483_op484_op485: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op483_op484_op485.writes = 
    [   MemoryDep('buf483', c0, {c0: 80}, None),
        MemoryDep('buf484', c0, {c0: 80}, None),
        MemoryDep('buf485', c0, {c0: 80}, None)]
op483_op484_op485.unmet_dependencies = [   MemoryDep('buf482', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op483_op484_op485.met_dependencies = []
op483_op484_op485.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
    ]
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf484.users = [
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
    ]
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf485.users = [
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
    ]
]
op483_op484_op485.snodes[0] =
op483: SchedulerNode(ComputedBuffer)
op483.writes = [MemoryDep('buf483', c0, {c0: 80}, None)]
op483.unmet_dependencies = [   MemoryDep('buf482', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op483.met_dependencies = []
op483.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
    ]
]
op483.group.device = cuda:0
op483.group.iteration = (80, 7527)
op483.sizes = ([8, 10], [7527])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op483_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf483', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf482', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op483_op484_op485.snodes[1] =
op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 80}, None)]
op484.unmet_dependencies = [   MemoryDep('buf482', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf484.users = [
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
    ]
]
op484.group.device = cuda:0
op484.group.iteration = (80, 7527)
op484.sizes = ([8, 10], [7527])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op484_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf484', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf482', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op483_op484_op485.snodes[2] =
op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 80}, None)]
op485.unmet_dependencies = [   MemoryDep('buf482', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op485.met_dependencies = []
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf485.users = [
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
    ]
]
op485.group.device = cuda:0
op485.group.iteration = (80, 7527)
op485.sizes = ([8, 10], [7527])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op485_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf485', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf482', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op486_op487: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op486_op487.writes = [MemoryDep('buf486', c0, {c0: 8}, None), MemoryDep('buf487', c0, {c0: 8}, None)]
op486_op487.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 80}, None),
        MemoryDep('buf484', c0, {c0: 80}, None),
        MemoryDep('buf485', c0, {c0: 80}, None)]
op486_op487.met_dependencies = []
op486_op487.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf486.users = [NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf487.users = [NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op486_op487.snodes[0] =
op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 8}, None)]
op486.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 80}, None),
        MemoryDep('buf484', c0, {c0: 80}, None),
        MemoryDep('buf485', c0, {c0: 80}, None)]
op486.met_dependencies = []
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf486.users = [NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (8, 10)
op486.sizes = ([8], [10])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op486_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf484', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf485', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf486', get_index_3, getitem)
        return store_reduction
op486_op487.snodes[1] =
op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 8}, None)]
op487.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 80}, None),
        MemoryDep('buf484', c0, {c0: 80}, None),
        MemoryDep('buf485', c0, {c0: 80}, None)]
op487.met_dependencies = []
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf487.users = [NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op487.group.device = cuda:0
op487.group.iteration = (8, 10)
op487.sizes = ([8], [10])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op487_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf484', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf485', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf487', get_index_3, getitem_1)
        return store_reduction


op489: SchedulerNode(ComputedBuffer)
op489.writes = [MemoryDep('buf489', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op489.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 602112}, None),
        MemoryDep('buf486', c0, {c0: 8}, None),
        MemoryDep('buf487', c0, {c0: 8}, None)]
op489.met_dependencies = 
    [   MemoryDep('arg220_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg221_1', c1, {c0: 8, c1: 384}, None)]
op489.outputs = [
    buf489: ComputedBuffer
    buf489.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf489.users = [NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
]
op489.group.device = cuda:0
op489.group.iteration = (602112, 1)
op489.sizes = ([8, 384, 196], [])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf487_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op489_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf486', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf487', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg220_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg221_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf489', get_index_5, add_1, None)
        return store


op490: ExternKernelSchedulerNode(ExternKernelAlloc)
op490.writes = [StarDep(name='buf490', mode=None)]
op490.unmet_dependencies = [StarDep(name='buf489', mode=None)]
op490.met_dependencies = [StarDep(name='arg222_1', mode=None)]
op490.outputs = [
    buf490: ExternKernelAlloc
    buf490.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf490.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=True, is_weak=False)]
]
op490.node.kernel = extern_kernels.convolution


op491: SchedulerNode(ComputedBuffer)
op491.writes = [MemoryDep('buf491', c0, {c0: 2408448}, None)]
op491.unmet_dependencies = [MemoryDep('buf490', c0, {c0: 2408448}, None)]
op491.met_dependencies = [MemoryDep('arg223_1', c1, {c0: 1568, c1: 1536}, None)]
op491.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf491.users = [NodeUser(node=ExternKernelSchedulerNode(name='op492'), can_inplace=False, is_weak=False)]
]
op491.group.device = cuda:0
op491.group.iteration = (2408448, 1)
op491.sizes = ([1568, 1536], [])
buf490_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op491_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf490', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg223_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf490', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg223_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf491', get_index_4, mul_2, None)
        return store


op492: ExternKernelSchedulerNode(ExternKernelAlloc)
op492.writes = [StarDep(name='buf492', mode=None)]
op492.unmet_dependencies = [StarDep(name='buf491', mode=None)]
op492.met_dependencies = [StarDep(name='arg224_1', mode=None)]
op492.outputs = [
    buf492: ExternKernelAlloc
    buf492.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf492.users = [
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
    ]
]
op492.node.kernel = extern_kernels.convolution


op493_op494_op495: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op493_op494_op495.writes = 
    [   MemoryDep('buf493', c0, {c0: 4720}, None),
        MemoryDep('buf494', c0, {c0: 4720}, None),
        MemoryDep('buf495', c0, {c0: 4720}, None)]
op493_op494_op495.unmet_dependencies = 
    [   MemoryDep('buf482', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf492', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op493_op494_op495.met_dependencies = 
    [   MemoryDep('arg225_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg226_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op493_op494_op495.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf493.users = [
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
    ]
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf494.users = [
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
    ]
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf495.users = [
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
    ]
]
op493_op494_op495.snodes[0] =
op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', c0, {c0: 4720}, None)]
op493.unmet_dependencies = 
    [   MemoryDep('buf482', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf492', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op493.met_dependencies = 
    [   MemoryDep('arg225_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg226_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf493.users = [
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
    ]
]
op493.group.device = cuda:0
op493.group.iteration = (4720, 128)
op493.sizes = ([8, 10, 59], [128])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op493_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf493', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf492', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg225_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg226_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op493_op494_op495.snodes[1] =
op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', c0, {c0: 4720}, None)]
op494.unmet_dependencies = 
    [   MemoryDep('buf482', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf492', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op494.met_dependencies = 
    [   MemoryDep('arg225_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg226_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf494.users = [
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
    ]
]
op494.group.device = cuda:0
op494.group.iteration = (4720, 128)
op494.sizes = ([8, 10, 59], [128])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op494_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf494', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf492', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg225_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg226_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op493_op494_op495.snodes[2] =
op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 4720}, None)]
op495.unmet_dependencies = 
    [   MemoryDep('buf482', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf492', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op495.met_dependencies = 
    [   MemoryDep('arg225_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg226_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf495.users = [
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
    ]
]
op495.group.device = cuda:0
op495.group.iteration = (4720, 128)
op495.sizes = ([8, 10, 59], [128])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op495_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf495', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf492', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg225_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg226_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op496_op497_op498: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op496_op497_op498.writes = 
    [   MemoryDep('buf496', c0, {c0: 80}, None),
        MemoryDep('buf497', c0, {c0: 80}, None),
        MemoryDep('buf498', c0, {c0: 80}, None)]
op496_op497_op498.unmet_dependencies = 
    [   MemoryDep('buf493', c0, {c0: 4720}, None),
        MemoryDep('buf494', c0, {c0: 4720}, None),
        MemoryDep('buf495', c0, {c0: 4720}, None)]
op496_op497_op498.met_dependencies = []
op496_op497_op498.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf496.users = [
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
    ]
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf497.users = [
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
    ]
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf498.users = [
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
    ]
]
op496_op497_op498.snodes[0] =
op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 80}, None)]
op496.unmet_dependencies = 
    [   MemoryDep('buf493', c0, {c0: 4720}, None),
        MemoryDep('buf494', c0, {c0: 4720}, None),
        MemoryDep('buf495', c0, {c0: 4720}, None)]
op496.met_dependencies = []
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf496.users = [
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
    ]
]
op496.group.device = cuda:0
op496.group.iteration = (80, 59)
op496.sizes = ([80], [59])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op496_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf493', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf494', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf495', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf496', get_index_3, getitem)
        return store_reduction
op496_op497_op498.snodes[1] =
op497: SchedulerNode(ComputedBuffer)
op497.writes = [MemoryDep('buf497', c0, {c0: 80}, None)]
op497.unmet_dependencies = 
    [   MemoryDep('buf493', c0, {c0: 4720}, None),
        MemoryDep('buf494', c0, {c0: 4720}, None),
        MemoryDep('buf495', c0, {c0: 4720}, None)]
op497.met_dependencies = []
op497.outputs = [
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf497.users = [
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
    ]
]
op497.group.device = cuda:0
op497.group.iteration = (80, 59)
op497.sizes = ([80], [59])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op497_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf493', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf494', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf495', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf497', get_index_3, getitem_1)
        return store_reduction
op496_op497_op498.snodes[2] =
op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 80}, None)]
op498.unmet_dependencies = 
    [   MemoryDep('buf493', c0, {c0: 4720}, None),
        MemoryDep('buf494', c0, {c0: 4720}, None),
        MemoryDep('buf495', c0, {c0: 4720}, None)]
op498.met_dependencies = []
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf498.users = [
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
    ]
]
op498.group.device = cuda:0
op498.group.iteration = (80, 59)
op498.sizes = ([80], [59])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op498_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf493', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf494', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf495', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf498', get_index_3, getitem_2)
        return store_reduction


op499_op500: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op499_op500.writes = [MemoryDep('buf499', c0, {c0: 8}, None), MemoryDep('buf500', c0, {c0: 8}, None)]
op499_op500.unmet_dependencies = 
    [   MemoryDep('buf496', c0, {c0: 80}, None),
        MemoryDep('buf497', c0, {c0: 80}, None),
        MemoryDep('buf498', c0, {c0: 80}, None)]
op499_op500.met_dependencies = []
op499_op500.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf499.users = [NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf500.users = [NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op499_op500.snodes[0] =
op499: SchedulerNode(ComputedBuffer)
op499.writes = [MemoryDep('buf499', c0, {c0: 8}, None)]
op499.unmet_dependencies = 
    [   MemoryDep('buf496', c0, {c0: 80}, None),
        MemoryDep('buf497', c0, {c0: 80}, None),
        MemoryDep('buf498', c0, {c0: 80}, None)]
op499.met_dependencies = []
op499.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf499.users = [NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op499.group.device = cuda:0
op499.group.iteration = (8, 10)
op499.sizes = ([8], [10])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op499_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf496', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf497', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf498', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf499', get_index_3, getitem)
        return store_reduction
op499_op500.snodes[1] =
op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', c0, {c0: 8}, None)]
op500.unmet_dependencies = 
    [   MemoryDep('buf496', c0, {c0: 80}, None),
        MemoryDep('buf497', c0, {c0: 80}, None),
        MemoryDep('buf498', c0, {c0: 80}, None)]
op500.met_dependencies = []
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf500.users = [NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op500.group.device = cuda:0
op500.group.iteration = (8, 10)
op500.sizes = ([8], [10])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op500_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf496', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf497', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf498', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf500', get_index_3, getitem_1)
        return store_reduction


op502: SchedulerNode(ComputedBuffer)
op502.writes = [MemoryDep('buf502', c0, {c0: 602112}, None)]
op502.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 602112}, None),
        MemoryDep('buf492', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf499', c0, {c0: 8}, None),
        MemoryDep('buf500', c0, {c0: 8}, None)]
op502.met_dependencies = 
    [   MemoryDep('arg225_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg226_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg227_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg228_1', c1, {c0: 8, c1: 384}, None)]
op502.outputs = [
    buf502: ComputedBuffer
    buf502.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf502.users = [
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=True, is_weak=False),
    ]
]
op502.group.device = cuda:0
op502.group.iteration = (602112, 1)
op502.sizes = ([8, 384, 196], [])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op502_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf492', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg225_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg226_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf499', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf500', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg227_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg228_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf502', get_index_8, add_3, None)
        return store


op503_op504: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op503_op504.writes = 
    [   MemoryDep('buf503', c0, {c0: 602112}, None),
        MemoryDep('buf504', c0, {c0: 602112}, None)]
op503_op504.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 602112}, None),
        MemoryDep('buf492', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf502', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf502', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf502', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf502', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf502', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf502', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf502', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf502', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf502', c0, {c0: 602112}, None)]
op503_op504.met_dependencies = 
    [   MemoryDep('arg225_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg226_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg229_1', c1, {c0: 8, c1: 384}, None)]
op503_op504.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf503.users = [NodeUser(node=SchedulerNode(name='op504'), can_inplace=True, is_weak=False)]
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf504.users = [
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
    ]
]
op503_op504.snodes[0] =
op503: SchedulerNode(ComputedBuffer)
op503.writes = [MemoryDep('buf503', c0, {c0: 602112}, None)]
op503.unmet_dependencies = 
    [   MemoryDep('buf502', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf502', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf502', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf502', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf502', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf502', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf502', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf502', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf502', c0, {c0: 602112}, None)]
op503.met_dependencies = []
op503.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf503.users = [NodeUser(node=SchedulerNode(name='op504'), can_inplace=True, is_weak=False)]
]
op503.group.device = cuda:0
op503.group.iteration = (602112, 1)
op503.sizes = ([3072, 14, 14], [])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op503_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf503', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf502', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf502', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf502', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf502', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf502', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf502', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf502', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf502', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf502', get_index)
        return load
op503_op504.snodes[1] =
op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 602112}, None)]
op504.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 602112}, None),
        MemoryDep('buf492', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf502', c0, {c0: 602112}, None),
        MemoryDep('buf503', c0, {c0: 602112}, None)]
op504.met_dependencies = 
    [   MemoryDep('arg225_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg226_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg229_1', c1, {c0: 8, c1: 384}, None)]
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf504.users = [
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
    ]
]
op504.group.device = cuda:0
op504.group.iteration = (602112, 1)
op504.sizes = ([8, 384, 196], [])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op504_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf492', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg225_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg226_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf503', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf502', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg229_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf504', get_index_7, add_2, None)
        return store


op505_op506_op507: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op505_op506_op507.writes = 
    [   MemoryDep('buf505', c0, {c0: 80}, None),
        MemoryDep('buf506', c0, {c0: 80}, None),
        MemoryDep('buf507', c0, {c0: 80}, None)]
op505_op506_op507.unmet_dependencies = [   MemoryDep('buf504', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op505_op506_op507.met_dependencies = []
op505_op506_op507.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf505.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf506.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf507.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op505_op506_op507.snodes[0] =
op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', c0, {c0: 80}, None)]
op505.unmet_dependencies = [   MemoryDep('buf504', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op505.met_dependencies = []
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf505.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op505.group.device = cuda:0
op505.group.iteration = (80, 7527)
op505.sizes = ([8, 10], [7527])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf505_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op505_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf505', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf504', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op505_op506_op507.snodes[1] =
op506: SchedulerNode(ComputedBuffer)
op506.writes = [MemoryDep('buf506', c0, {c0: 80}, None)]
op506.unmet_dependencies = [   MemoryDep('buf504', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op506.met_dependencies = []
op506.outputs = [
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf506.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op506.group.device = cuda:0
op506.group.iteration = (80, 7527)
op506.sizes = ([8, 10], [7527])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf506_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op506_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf506', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf504', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op505_op506_op507.snodes[2] =
op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 80}, None)]
op507.unmet_dependencies = [   MemoryDep('buf504', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op507.met_dependencies = []
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf507.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op507.group.device = cuda:0
op507.group.iteration = (80, 7527)
op507.sizes = ([8, 10], [7527])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op507_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf507', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf504', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op508_op509: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op508_op509.writes = [MemoryDep('buf508', c0, {c0: 8}, None), MemoryDep('buf509', c0, {c0: 8}, None)]
op508_op509.unmet_dependencies = 
    [   MemoryDep('buf505', c0, {c0: 80}, None),
        MemoryDep('buf506', c0, {c0: 80}, None),
        MemoryDep('buf507', c0, {c0: 80}, None)]
op508_op509.met_dependencies = []
op508_op509.outputs = [
    buf508: ComputedBuffer
    buf508.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf508.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf509.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op508_op509.snodes[0] =
op508: SchedulerNode(ComputedBuffer)
op508.writes = [MemoryDep('buf508', c0, {c0: 8}, None)]
op508.unmet_dependencies = 
    [   MemoryDep('buf505', c0, {c0: 80}, None),
        MemoryDep('buf506', c0, {c0: 80}, None),
        MemoryDep('buf507', c0, {c0: 80}, None)]
op508.met_dependencies = []
op508.outputs = [
    buf508: ComputedBuffer
    buf508.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf508.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op508.group.device = cuda:0
op508.group.iteration = (8, 10)
op508.sizes = ([8], [10])
buf505_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf506_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op508_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf506', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf507', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf508', get_index_3, getitem)
        return store_reduction
op508_op509.snodes[1] =
op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 8}, None)]
op509.unmet_dependencies = 
    [   MemoryDep('buf505', c0, {c0: 80}, None),
        MemoryDep('buf506', c0, {c0: 80}, None),
        MemoryDep('buf507', c0, {c0: 80}, None)]
op509.met_dependencies = []
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf509.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (8, 10)
op509.sizes = ([8], [10])
buf505_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf506_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op509_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf506', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf507', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf509', get_index_3, getitem_1)
        return store_reduction


op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op511.unmet_dependencies = 
    [   MemoryDep('buf504', c0, {c0: 602112}, None),
        MemoryDep('buf508', c0, {c0: 8}, None),
        MemoryDep('buf509', c0, {c0: 8}, None)]
op511.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg231_1', c1, {c0: 8, c1: 384}, None)]
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf511.users = [NodeUser(node=ExternKernelSchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op511.group.device = cuda:0
op511.group.iteration = (602112, 1)
op511.sizes = ([8, 384, 196], [])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op511_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf508', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf509', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg230_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg231_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf511', get_index_5, add_1, None)
        return store


op512: ExternKernelSchedulerNode(ExternKernelAlloc)
op512.writes = [StarDep(name='buf512', mode=None)]
op512.unmet_dependencies = [StarDep(name='buf511', mode=None)]
op512.met_dependencies = [StarDep(name='arg232_1', mode=None)]
op512.outputs = [
    buf512: ExternKernelAlloc
    buf512.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf512.users = [NodeUser(node=SchedulerNode(name='op513'), can_inplace=True, is_weak=False)]
]
op512.node.kernel = extern_kernels.convolution


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 2408448}, None)]
op513.unmet_dependencies = [MemoryDep('buf512', c0, {c0: 2408448}, None)]
op513.met_dependencies = [MemoryDep('arg233_1', c1, {c0: 1568, c1: 1536}, None)]
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf513.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op513.group.device = cuda:0
op513.group.iteration = (2408448, 1)
op513.sizes = ([1568, 1536], [])
buf512_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op513_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg233_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf512', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg233_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf513', get_index_4, mul_2, None)
        return store


op514: ExternKernelSchedulerNode(ExternKernelAlloc)
op514.writes = [StarDep(name='buf514', mode=None)]
op514.unmet_dependencies = [StarDep(name='buf513', mode=None)]
op514.met_dependencies = [StarDep(name='arg234_1', mode=None)]
op514.outputs = [
    buf514: ExternKernelAlloc
    buf514.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf514.users = [
        NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False),
    ]
]
op514.node.kernel = extern_kernels.convolution


op515_op516_op517: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op515_op516_op517.writes = 
    [   MemoryDep('buf515', c0, {c0: 4720}, None),
        MemoryDep('buf516', c0, {c0: 4720}, None),
        MemoryDep('buf517', c0, {c0: 4720}, None)]
op515_op516_op517.unmet_dependencies = 
    [   MemoryDep('buf504', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf514', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op515_op516_op517.met_dependencies = 
    [   MemoryDep('arg235_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg236_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op515_op516_op517.outputs = [
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf515.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
    ]
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf516.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
    ]
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf517.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
    ]
]
op515_op516_op517.snodes[0] =
op515: SchedulerNode(ComputedBuffer)
op515.writes = [MemoryDep('buf515', c0, {c0: 4720}, None)]
op515.unmet_dependencies = 
    [   MemoryDep('buf504', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf514', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op515.met_dependencies = 
    [   MemoryDep('arg235_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg236_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op515.outputs = [
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf515.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
    ]
]
op515.group.device = cuda:0
op515.group.iteration = (4720, 128)
op515.sizes = ([8, 10, 59], [128])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf514_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf515_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op515_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf515', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf504', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf514', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg235_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg236_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op515_op516_op517.snodes[1] =
op516: SchedulerNode(ComputedBuffer)
op516.writes = [MemoryDep('buf516', c0, {c0: 4720}, None)]
op516.unmet_dependencies = 
    [   MemoryDep('buf504', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf514', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op516.met_dependencies = 
    [   MemoryDep('arg235_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg236_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op516.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf516.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
    ]
]
op516.group.device = cuda:0
op516.group.iteration = (4720, 128)
op516.sizes = ([8, 10, 59], [128])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf514_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op516_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf516', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf504', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf514', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg235_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg236_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op515_op516_op517.snodes[2] =
op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 4720}, None)]
op517.unmet_dependencies = 
    [   MemoryDep('buf504', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf514', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op517.met_dependencies = 
    [   MemoryDep('arg235_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg236_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf517.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
    ]
]
op517.group.device = cuda:0
op517.group.iteration = (4720, 128)
op517.sizes = ([8, 10, 59], [128])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf514_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op517_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf517', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf504', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf514', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg235_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg236_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op518_op519_op520: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op518_op519_op520.writes = 
    [   MemoryDep('buf518', c0, {c0: 80}, None),
        MemoryDep('buf519', c0, {c0: 80}, None),
        MemoryDep('buf520', c0, {c0: 80}, None)]
op518_op519_op520.unmet_dependencies = 
    [   MemoryDep('buf515', c0, {c0: 4720}, None),
        MemoryDep('buf516', c0, {c0: 4720}, None),
        MemoryDep('buf517', c0, {c0: 4720}, None)]
op518_op519_op520.met_dependencies = []
op518_op519_op520.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf518.users = [
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
    ]
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf519.users = [
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
    ]
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf520.users = [
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
    ]
]
op518_op519_op520.snodes[0] =
op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 80}, None)]
op518.unmet_dependencies = 
    [   MemoryDep('buf515', c0, {c0: 4720}, None),
        MemoryDep('buf516', c0, {c0: 4720}, None),
        MemoryDep('buf517', c0, {c0: 4720}, None)]
op518.met_dependencies = []
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf518.users = [
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
    ]
]
op518.group.device = cuda:0
op518.group.iteration = (80, 59)
op518.sizes = ([80], [59])
buf515_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op518_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf516', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf517', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf518', get_index_3, getitem)
        return store_reduction
op518_op519_op520.snodes[1] =
op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', c0, {c0: 80}, None)]
op519.unmet_dependencies = 
    [   MemoryDep('buf515', c0, {c0: 4720}, None),
        MemoryDep('buf516', c0, {c0: 4720}, None),
        MemoryDep('buf517', c0, {c0: 4720}, None)]
op519.met_dependencies = []
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf519.users = [
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
    ]
]
op519.group.device = cuda:0
op519.group.iteration = (80, 59)
op519.sizes = ([80], [59])
buf515_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op519_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf516', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf517', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf519', get_index_3, getitem_1)
        return store_reduction
op518_op519_op520.snodes[2] =
op520: SchedulerNode(ComputedBuffer)
op520.writes = [MemoryDep('buf520', c0, {c0: 80}, None)]
op520.unmet_dependencies = 
    [   MemoryDep('buf515', c0, {c0: 4720}, None),
        MemoryDep('buf516', c0, {c0: 4720}, None),
        MemoryDep('buf517', c0, {c0: 4720}, None)]
op520.met_dependencies = []
op520.outputs = [
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf520.users = [
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
    ]
]
op520.group.device = cuda:0
op520.group.iteration = (80, 59)
op520.sizes = ([80], [59])
buf515_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf520_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op520_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf516', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf517', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf520', get_index_3, getitem_2)
        return store_reduction


op521_op522: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op521_op522.writes = [MemoryDep('buf521', c0, {c0: 8}, None), MemoryDep('buf522', c0, {c0: 8}, None)]
op521_op522.unmet_dependencies = 
    [   MemoryDep('buf518', c0, {c0: 80}, None),
        MemoryDep('buf519', c0, {c0: 80}, None),
        MemoryDep('buf520', c0, {c0: 80}, None)]
op521_op522.met_dependencies = []
op521_op522.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf521.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf522.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op521_op522.snodes[0] =
op521: SchedulerNode(ComputedBuffer)
op521.writes = [MemoryDep('buf521', c0, {c0: 8}, None)]
op521.unmet_dependencies = 
    [   MemoryDep('buf518', c0, {c0: 80}, None),
        MemoryDep('buf519', c0, {c0: 80}, None),
        MemoryDep('buf520', c0, {c0: 80}, None)]
op521.met_dependencies = []
op521.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf521.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op521.group.device = cuda:0
op521.group.iteration = (8, 10)
op521.sizes = ([8], [10])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf520_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf521_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op521_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf518', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf519', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf520', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf521', get_index_3, getitem)
        return store_reduction
op521_op522.snodes[1] =
op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', c0, {c0: 8}, None)]
op522.unmet_dependencies = 
    [   MemoryDep('buf518', c0, {c0: 80}, None),
        MemoryDep('buf519', c0, {c0: 80}, None),
        MemoryDep('buf520', c0, {c0: 80}, None)]
op522.met_dependencies = []
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf522.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op522.group.device = cuda:0
op522.group.iteration = (8, 10)
op522.sizes = ([8], [10])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf520_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf522_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op522_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf518', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf519', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf520', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf522', get_index_3, getitem_1)
        return store_reduction


op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 602112}, None)]
op524.unmet_dependencies = 
    [   MemoryDep('buf504', c0, {c0: 602112}, None),
        MemoryDep('buf514', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf521', c0, {c0: 8}, None),
        MemoryDep('buf522', c0, {c0: 8}, None)]
op524.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg236_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg237_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg238_1', c1, {c0: 8, c1: 384}, None)]
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf524.users = [
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
    ]
]
op524.group.device = cuda:0
op524.group.iteration = (602112, 1)
op524.sizes = ([8, 384, 196], [])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf514_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf521_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf522_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op524_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf514', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg235_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg236_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf521', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf522', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg237_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg238_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf524', get_index_8, add_3, None)
        return store


op525_op526: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op525_op526.writes = 
    [   MemoryDep('buf525', c0, {c0: 602112}, None),
        MemoryDep('buf526', c0, {c0: 602112}, None)]
op525_op526.unmet_dependencies = 
    [   MemoryDep('buf504', c0, {c0: 602112}, None),
        MemoryDep('buf514', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf524', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf524', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf524', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf524', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf524', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf524', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf524', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf524', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf524', c0, {c0: 602112}, None)]
op525_op526.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg236_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg239_1', c1, {c0: 8, c1: 384}, None)]
op525_op526.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf525.users = [NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False)]
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf526.users = [
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False),
    ]
]
op525_op526.snodes[0] =
op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 602112}, None)]
op525.unmet_dependencies = 
    [   MemoryDep('buf524', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf524', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf524', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf524', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf524', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf524', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf524', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf524', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf524', c0, {c0: 602112}, None)]
op525.met_dependencies = []
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf525.users = [NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False)]
]
op525.group.device = cuda:0
op525.group.iteration = (602112, 1)
op525.sizes = ([3072, 14, 14], [])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op525_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf525', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf524', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf524', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf524', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf524', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf524', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf524', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf524', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf524', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf524', get_index)
        return load
op525_op526.snodes[1] =
op526: SchedulerNode(ComputedBuffer)
op526.writes = [MemoryDep('buf526', c0, {c0: 602112}, None)]
op526.unmet_dependencies = 
    [   MemoryDep('buf504', c0, {c0: 602112}, None),
        MemoryDep('buf514', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf524', c0, {c0: 602112}, None),
        MemoryDep('buf525', c0, {c0: 602112}, None)]
op526.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg236_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg239_1', c1, {c0: 8, c1: 384}, None)]
op526.outputs = [
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf526.users = [
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False),
    ]
]
op526.group.device = cuda:0
op526.group.iteration = (602112, 1)
op526.sizes = ([8, 384, 196], [])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf514_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op526_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf514', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg235_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg236_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf525', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf524', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg239_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf526', get_index_7, add_2, None)
        return store


op527_op528_op529: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op527_op528_op529.writes = 
    [   MemoryDep('buf527', c0, {c0: 80}, None),
        MemoryDep('buf528', c0, {c0: 80}, None),
        MemoryDep('buf529', c0, {c0: 80}, None)]
op527_op528_op529.unmet_dependencies = [   MemoryDep('buf526', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op527_op528_op529.met_dependencies = []
op527_op528_op529.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf527.users = [
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False),
    ]
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf528.users = [
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False),
    ]
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf529.users = [
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False),
    ]
]
op527_op528_op529.snodes[0] =
op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', c0, {c0: 80}, None)]
op527.unmet_dependencies = [   MemoryDep('buf526', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op527.met_dependencies = []
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf527.users = [
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False),
    ]
]
op527.group.device = cuda:0
op527.group.iteration = (80, 7527)
op527.sizes = ([8, 10], [7527])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op527_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf527', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf526', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op527_op528_op529.snodes[1] =
op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', c0, {c0: 80}, None)]
op528.unmet_dependencies = [   MemoryDep('buf526', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op528.met_dependencies = []
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf528.users = [
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False),
    ]
]
op528.group.device = cuda:0
op528.group.iteration = (80, 7527)
op528.sizes = ([8, 10], [7527])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op528_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf528', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf526', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op527_op528_op529.snodes[2] =
op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', c0, {c0: 80}, None)]
op529.unmet_dependencies = [   MemoryDep('buf526', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op529.met_dependencies = []
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf529.users = [
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False),
    ]
]
op529.group.device = cuda:0
op529.group.iteration = (80, 7527)
op529.sizes = ([8, 10], [7527])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op529_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf529', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf526', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op530_op531: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op530_op531.writes = [MemoryDep('buf530', c0, {c0: 8}, None), MemoryDep('buf531', c0, {c0: 8}, None)]
op530_op531.unmet_dependencies = 
    [   MemoryDep('buf527', c0, {c0: 80}, None),
        MemoryDep('buf528', c0, {c0: 80}, None),
        MemoryDep('buf529', c0, {c0: 80}, None)]
op530_op531.met_dependencies = []
op530_op531.outputs = [
    buf530: ComputedBuffer
    buf530.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf530.users = [NodeUser(node=SchedulerNode(name='op533'), can_inplace=False, is_weak=False)]
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf531.users = [NodeUser(node=SchedulerNode(name='op533'), can_inplace=False, is_weak=False)]
]
op530_op531.snodes[0] =
op530: SchedulerNode(ComputedBuffer)
op530.writes = [MemoryDep('buf530', c0, {c0: 8}, None)]
op530.unmet_dependencies = 
    [   MemoryDep('buf527', c0, {c0: 80}, None),
        MemoryDep('buf528', c0, {c0: 80}, None),
        MemoryDep('buf529', c0, {c0: 80}, None)]
op530.met_dependencies = []
op530.outputs = [
    buf530: ComputedBuffer
    buf530.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf530.users = [NodeUser(node=SchedulerNode(name='op533'), can_inplace=False, is_weak=False)]
]
op530.group.device = cuda:0
op530.group.iteration = (8, 10)
op530.sizes = ([8], [10])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf530_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op530_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf528', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf529', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf530', get_index_3, getitem)
        return store_reduction
op530_op531.snodes[1] =
op531: SchedulerNode(ComputedBuffer)
op531.writes = [MemoryDep('buf531', c0, {c0: 8}, None)]
op531.unmet_dependencies = 
    [   MemoryDep('buf527', c0, {c0: 80}, None),
        MemoryDep('buf528', c0, {c0: 80}, None),
        MemoryDep('buf529', c0, {c0: 80}, None)]
op531.met_dependencies = []
op531.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf531.users = [NodeUser(node=SchedulerNode(name='op533'), can_inplace=False, is_weak=False)]
]
op531.group.device = cuda:0
op531.group.iteration = (8, 10)
op531.sizes = ([8], [10])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op531_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf527', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf528', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf529', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf531', get_index_3, getitem_1)
        return store_reduction


op533: SchedulerNode(ComputedBuffer)
op533.writes = [MemoryDep('buf533', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op533.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 602112}, None),
        MemoryDep('buf530', c0, {c0: 8}, None),
        MemoryDep('buf531', c0, {c0: 8}, None)]
op533.met_dependencies = 
    [   MemoryDep('arg240_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg241_1', c1, {c0: 8, c1: 384}, None)]
op533.outputs = [
    buf533: ComputedBuffer
    buf533.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf533.users = [NodeUser(node=ExternKernelSchedulerNode(name='op534'), can_inplace=False, is_weak=False)]
]
op533.group.device = cuda:0
op533.group.iteration = (602112, 1)
op533.sizes = ([8, 384, 196], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf530_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf533_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op533_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf530', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf531', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg240_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg241_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf533', get_index_5, add_1, None)
        return store


op534: ExternKernelSchedulerNode(ExternKernelAlloc)
op534.writes = [StarDep(name='buf534', mode=None)]
op534.unmet_dependencies = [StarDep(name='buf533', mode=None)]
op534.met_dependencies = [StarDep(name='arg242_1', mode=None)]
op534.outputs = [
    buf534: ExternKernelAlloc
    buf534.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf534.users = [NodeUser(node=SchedulerNode(name='op535'), can_inplace=True, is_weak=False)]
]
op534.node.kernel = extern_kernels.convolution


op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', c0, {c0: 2408448}, None)]
op535.unmet_dependencies = [MemoryDep('buf534', c0, {c0: 2408448}, None)]
op535.met_dependencies = [MemoryDep('arg243_1', c1, {c0: 1568, c1: 1536}, None)]
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf535.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op535.group.device = cuda:0
op535.group.iteration = (2408448, 1)
op535.sizes = ([1568, 1536], [])
buf534_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf535_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op535_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf534', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg243_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf534', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg243_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf535', get_index_4, mul_2, None)
        return store


op536: ExternKernelSchedulerNode(ExternKernelAlloc)
op536.writes = [StarDep(name='buf536', mode=None)]
op536.unmet_dependencies = [StarDep(name='buf535', mode=None)]
op536.met_dependencies = [StarDep(name='arg244_1', mode=None)]
op536.outputs = [
    buf536: ExternKernelAlloc
    buf536.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf536.users = [
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
    ]
]
op536.node.kernel = extern_kernels.convolution


op537_op538_op539: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op537_op538_op539.writes = 
    [   MemoryDep('buf537', c0, {c0: 4720}, None),
        MemoryDep('buf538', c0, {c0: 4720}, None),
        MemoryDep('buf539', c0, {c0: 4720}, None)]
op537_op538_op539.unmet_dependencies = 
    [   MemoryDep('buf526', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf536', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op537_op538_op539.met_dependencies = 
    [   MemoryDep('arg245_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg246_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op537_op538_op539.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf537.users = [
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False),
    ]
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf538.users = [
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False),
    ]
    buf539: ComputedBuffer
    buf539.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf539.users = [
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False),
    ]
]
op537_op538_op539.snodes[0] =
op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 4720}, None)]
op537.unmet_dependencies = 
    [   MemoryDep('buf526', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf536', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op537.met_dependencies = 
    [   MemoryDep('arg245_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg246_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf537.users = [
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False),
    ]
]
op537.group.device = cuda:0
op537.group.iteration = (4720, 128)
op537.sizes = ([8, 10, 59], [128])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op537_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf537', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf536', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg245_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg246_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op537_op538_op539.snodes[1] =
op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 4720}, None)]
op538.unmet_dependencies = 
    [   MemoryDep('buf526', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf536', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op538.met_dependencies = 
    [   MemoryDep('arg245_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg246_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf538.users = [
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False),
    ]
]
op538.group.device = cuda:0
op538.group.iteration = (4720, 128)
op538.sizes = ([8, 10, 59], [128])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op538_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf538', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf536', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg245_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg246_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op537_op538_op539.snodes[2] =
op539: SchedulerNode(ComputedBuffer)
op539.writes = [MemoryDep('buf539', c0, {c0: 4720}, None)]
op539.unmet_dependencies = 
    [   MemoryDep('buf526', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf536', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op539.met_dependencies = 
    [   MemoryDep('arg245_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg246_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op539.outputs = [
    buf539: ComputedBuffer
    buf539.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf539.users = [
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False),
    ]
]
op539.group.device = cuda:0
op539.group.iteration = (4720, 128)
op539.sizes = ([8, 10, 59], [128])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf539_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op539_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf539', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf536', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg245_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg246_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op540_op541_op542: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op540_op541_op542.writes = 
    [   MemoryDep('buf540', c0, {c0: 80}, None),
        MemoryDep('buf541', c0, {c0: 80}, None),
        MemoryDep('buf542', c0, {c0: 80}, None)]
op540_op541_op542.unmet_dependencies = 
    [   MemoryDep('buf537', c0, {c0: 4720}, None),
        MemoryDep('buf538', c0, {c0: 4720}, None),
        MemoryDep('buf539', c0, {c0: 4720}, None)]
op540_op541_op542.met_dependencies = []
op540_op541_op542.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf540.users = [
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
    ]
    buf541: ComputedBuffer
    buf541.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf541.users = [
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
    ]
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf542.users = [
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
    ]
]
op540_op541_op542.snodes[0] =
op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', c0, {c0: 80}, None)]
op540.unmet_dependencies = 
    [   MemoryDep('buf537', c0, {c0: 4720}, None),
        MemoryDep('buf538', c0, {c0: 4720}, None),
        MemoryDep('buf539', c0, {c0: 4720}, None)]
op540.met_dependencies = []
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf540.users = [
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
    ]
]
op540.group.device = cuda:0
op540.group.iteration = (80, 59)
op540.sizes = ([80], [59])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf539_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf540_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op540_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf537', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf538', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf539', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf540', get_index_3, getitem)
        return store_reduction
op540_op541_op542.snodes[1] =
op541: SchedulerNode(ComputedBuffer)
op541.writes = [MemoryDep('buf541', c0, {c0: 80}, None)]
op541.unmet_dependencies = 
    [   MemoryDep('buf537', c0, {c0: 4720}, None),
        MemoryDep('buf538', c0, {c0: 4720}, None),
        MemoryDep('buf539', c0, {c0: 4720}, None)]
op541.met_dependencies = []
op541.outputs = [
    buf541: ComputedBuffer
    buf541.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf541.users = [
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
    ]
]
op541.group.device = cuda:0
op541.group.iteration = (80, 59)
op541.sizes = ([80], [59])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf539_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op541_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf537', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf538', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf539', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf541', get_index_3, getitem_1)
        return store_reduction
op540_op541_op542.snodes[2] =
op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 80}, None)]
op542.unmet_dependencies = 
    [   MemoryDep('buf537', c0, {c0: 4720}, None),
        MemoryDep('buf538', c0, {c0: 4720}, None),
        MemoryDep('buf539', c0, {c0: 4720}, None)]
op542.met_dependencies = []
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf542.users = [
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
    ]
]
op542.group.device = cuda:0
op542.group.iteration = (80, 59)
op542.sizes = ([80], [59])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf539_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op542_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf537', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf538', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf539', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf542', get_index_3, getitem_2)
        return store_reduction


op543_op544: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op543_op544.writes = [MemoryDep('buf543', c0, {c0: 8}, None), MemoryDep('buf544', c0, {c0: 8}, None)]
op543_op544.unmet_dependencies = 
    [   MemoryDep('buf540', c0, {c0: 80}, None),
        MemoryDep('buf541', c0, {c0: 80}, None),
        MemoryDep('buf542', c0, {c0: 80}, None)]
op543_op544.met_dependencies = []
op543_op544.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf543.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf544.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
]
op543_op544.snodes[0] =
op543: SchedulerNode(ComputedBuffer)
op543.writes = [MemoryDep('buf543', c0, {c0: 8}, None)]
op543.unmet_dependencies = 
    [   MemoryDep('buf540', c0, {c0: 80}, None),
        MemoryDep('buf541', c0, {c0: 80}, None),
        MemoryDep('buf542', c0, {c0: 80}, None)]
op543.met_dependencies = []
op543.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf543.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
]
op543.group.device = cuda:0
op543.group.iteration = (8, 10)
op543.sizes = ([8], [10])
buf540_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op543_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf541', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf542', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf543', get_index_3, getitem)
        return store_reduction
op543_op544.snodes[1] =
op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 8}, None)]
op544.unmet_dependencies = 
    [   MemoryDep('buf540', c0, {c0: 80}, None),
        MemoryDep('buf541', c0, {c0: 80}, None),
        MemoryDep('buf542', c0, {c0: 80}, None)]
op544.met_dependencies = []
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf544.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
]
op544.group.device = cuda:0
op544.group.iteration = (8, 10)
op544.sizes = ([8], [10])
buf540_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op544_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf541', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf542', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf544', get_index_3, getitem_1)
        return store_reduction


op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 602112}, None)]
op546.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 602112}, None),
        MemoryDep('buf536', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf543', c0, {c0: 8}, None),
        MemoryDep('buf544', c0, {c0: 8}, None)]
op546.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg246_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg247_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg248_1', c1, {c0: 8, c1: 384}, None)]
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf546.users = [
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False),
    ]
]
op546.group.device = cuda:0
op546.group.iteration = (602112, 1)
op546.sizes = ([8, 384, 196], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf544_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op546_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf536', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg245_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg246_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf543', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf544', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg247_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg248_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf546', get_index_8, add_3, None)
        return store


op547_op548: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op547_op548.writes = 
    [   MemoryDep('buf547', c0, {c0: 602112}, None),
        MemoryDep('buf548', c0, {c0: 602112}, None)]
op547_op548.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 602112}, None),
        MemoryDep('buf536', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf546', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf546', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf546', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf546', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf546', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf546', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf546', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf546', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf546', c0, {c0: 602112}, None)]
op547_op548.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg246_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg249_1', c1, {c0: 8, c1: 384}, None)]
op547_op548.outputs = [
    buf547: ComputedBuffer
    buf547.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf547.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False)]
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf548.users = [
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=True, is_weak=False),
    ]
]
op547_op548.snodes[0] =
op547: SchedulerNode(ComputedBuffer)
op547.writes = [MemoryDep('buf547', c0, {c0: 602112}, None)]
op547.unmet_dependencies = 
    [   MemoryDep('buf546', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf546', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf546', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf546', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf546', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf546', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf546', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf546', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf546', c0, {c0: 602112}, None)]
op547.met_dependencies = []
op547.outputs = [
    buf547: ComputedBuffer
    buf547.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf547.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False)]
]
op547.group.device = cuda:0
op547.group.iteration = (602112, 1)
op547.sizes = ([3072, 14, 14], [])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf547_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op547_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf547', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf546', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf546', get_index)
        return load
op547_op548.snodes[1] =
op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 602112}, None)]
op548.unmet_dependencies = 
    [   MemoryDep('buf526', c0, {c0: 602112}, None),
        MemoryDep('buf536', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf546', c0, {c0: 602112}, None),
        MemoryDep('buf547', c0, {c0: 602112}, None)]
op548.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg246_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg249_1', c1, {c0: 8, c1: 384}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf548.users = [
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=True, is_weak=False),
    ]
]
op548.group.device = cuda:0
op548.group.iteration = (602112, 1)
op548.sizes = ([8, 384, 196], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf547_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op548_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf536', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg245_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg246_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf547', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf546', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg249_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf548', get_index_7, add_2, None)
        return store


op549_op550_op551: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op549_op550_op551.writes = 
    [   MemoryDep('buf549', c0, {c0: 80}, None),
        MemoryDep('buf550', c0, {c0: 80}, None),
        MemoryDep('buf551', c0, {c0: 80}, None)]
op549_op550_op551.unmet_dependencies = [   MemoryDep('buf548', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op549_op550_op551.met_dependencies = []
op549_op550_op551.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf549.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
    ]
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf550.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
    ]
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf551.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
    ]
]
op549_op550_op551.snodes[0] =
op549: SchedulerNode(ComputedBuffer)
op549.writes = [MemoryDep('buf549', c0, {c0: 80}, None)]
op549.unmet_dependencies = [   MemoryDep('buf548', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op549.met_dependencies = []
op549.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf549.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
    ]
]
op549.group.device = cuda:0
op549.group.iteration = (80, 7527)
op549.sizes = ([8, 10], [7527])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op549_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf549', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf548', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op549_op550_op551.snodes[1] =
op550: SchedulerNode(ComputedBuffer)
op550.writes = [MemoryDep('buf550', c0, {c0: 80}, None)]
op550.unmet_dependencies = [   MemoryDep('buf548', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op550.met_dependencies = []
op550.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf550.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
    ]
]
op550.group.device = cuda:0
op550.group.iteration = (80, 7527)
op550.sizes = ([8, 10], [7527])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op550_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf550', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf548', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op549_op550_op551.snodes[2] =
op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 80}, None)]
op551.unmet_dependencies = [   MemoryDep('buf548', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op551.met_dependencies = []
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf551.users = [
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
    ]
]
op551.group.device = cuda:0
op551.group.iteration = (80, 7527)
op551.sizes = ([8, 10], [7527])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op551_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf551', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf548', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op552_op553: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op552_op553.writes = [MemoryDep('buf552', c0, {c0: 8}, None), MemoryDep('buf553', c0, {c0: 8}, None)]
op552_op553.unmet_dependencies = 
    [   MemoryDep('buf549', c0, {c0: 80}, None),
        MemoryDep('buf550', c0, {c0: 80}, None),
        MemoryDep('buf551', c0, {c0: 80}, None)]
op552_op553.met_dependencies = []
op552_op553.outputs = [
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf552.users = [NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf553.users = [NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op552_op553.snodes[0] =
op552: SchedulerNode(ComputedBuffer)
op552.writes = [MemoryDep('buf552', c0, {c0: 8}, None)]
op552.unmet_dependencies = 
    [   MemoryDep('buf549', c0, {c0: 80}, None),
        MemoryDep('buf550', c0, {c0: 80}, None),
        MemoryDep('buf551', c0, {c0: 80}, None)]
op552.met_dependencies = []
op552.outputs = [
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf552.users = [NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op552.group.device = cuda:0
op552.group.iteration = (8, 10)
op552.sizes = ([8], [10])
buf549_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op552_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf549', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf550', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf551', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf552', get_index_3, getitem)
        return store_reduction
op552_op553.snodes[1] =
op553: SchedulerNode(ComputedBuffer)
op553.writes = [MemoryDep('buf553', c0, {c0: 8}, None)]
op553.unmet_dependencies = 
    [   MemoryDep('buf549', c0, {c0: 80}, None),
        MemoryDep('buf550', c0, {c0: 80}, None),
        MemoryDep('buf551', c0, {c0: 80}, None)]
op553.met_dependencies = []
op553.outputs = [
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf553.users = [NodeUser(node=SchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op553.group.device = cuda:0
op553.group.iteration = (8, 10)
op553.sizes = ([8], [10])
buf549_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf553_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op553_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf549', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf550', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf551', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf553', get_index_3, getitem_1)
        return store_reduction


op555: SchedulerNode(ComputedBuffer)
op555.writes = [MemoryDep('buf555', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op555.unmet_dependencies = 
    [   MemoryDep('buf548', c0, {c0: 602112}, None),
        MemoryDep('buf552', c0, {c0: 8}, None),
        MemoryDep('buf553', c0, {c0: 8}, None)]
op555.met_dependencies = 
    [   MemoryDep('arg250_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg251_1', c1, {c0: 8, c1: 384}, None)]
op555.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf555.users = [NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
]
op555.group.device = cuda:0
op555.group.iteration = (602112, 1)
op555.sizes = ([8, 384, 196], [])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf553_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op555_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf548', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf552', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf553', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg250_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg251_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf555', get_index_5, add_1, None)
        return store


op556: ExternKernelSchedulerNode(ExternKernelAlloc)
op556.writes = [StarDep(name='buf556', mode=None)]
op556.unmet_dependencies = [StarDep(name='buf555', mode=None)]
op556.met_dependencies = [StarDep(name='arg252_1', mode=None)]
op556.outputs = [
    buf556: ExternKernelAlloc
    buf556.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf556.users = [NodeUser(node=SchedulerNode(name='op557'), can_inplace=True, is_weak=False)]
]
op556.node.kernel = extern_kernels.convolution


op557: SchedulerNode(ComputedBuffer)
op557.writes = [MemoryDep('buf557', c0, {c0: 2408448}, None)]
op557.unmet_dependencies = [MemoryDep('buf556', c0, {c0: 2408448}, None)]
op557.met_dependencies = [MemoryDep('arg253_1', c1, {c0: 1568, c1: 1536}, None)]
op557.outputs = [
    buf557: ComputedBuffer
    buf557.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf557.users = [NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op557.group.device = cuda:0
op557.group.iteration = (2408448, 1)
op557.sizes = ([1568, 1536], [])
buf556_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf557_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op557_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf556', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg253_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf556', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg253_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf557', get_index_4, mul_2, None)
        return store


op558: ExternKernelSchedulerNode(ExternKernelAlloc)
op558.writes = [StarDep(name='buf558', mode=None)]
op558.unmet_dependencies = [StarDep(name='buf557', mode=None)]
op558.met_dependencies = [StarDep(name='arg254_1', mode=None)]
op558.outputs = [
    buf558: ExternKernelAlloc
    buf558.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf558.users = [
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
    ]
]
op558.node.kernel = extern_kernels.convolution


op559_op560_op561: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op559_op560_op561.writes = 
    [   MemoryDep('buf559', c0, {c0: 4720}, None),
        MemoryDep('buf560', c0, {c0: 4720}, None),
        MemoryDep('buf561', c0, {c0: 4720}, None)]
op559_op560_op561.unmet_dependencies = 
    [   MemoryDep('buf548', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf558', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op559_op560_op561.met_dependencies = 
    [   MemoryDep('arg255_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg256_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op559_op560_op561.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf559.users = [
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
    ]
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf560.users = [
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
    ]
    buf561: ComputedBuffer
    buf561.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf561.users = [
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
    ]
]
op559_op560_op561.snodes[0] =
op559: SchedulerNode(ComputedBuffer)
op559.writes = [MemoryDep('buf559', c0, {c0: 4720}, None)]
op559.unmet_dependencies = 
    [   MemoryDep('buf548', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf558', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op559.met_dependencies = 
    [   MemoryDep('arg255_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg256_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op559.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf559.users = [
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
    ]
]
op559.group.device = cuda:0
op559.group.iteration = (4720, 128)
op559.sizes = ([8, 10, 59], [128])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op559_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf559', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf548', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf558', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg255_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg256_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op559_op560_op561.snodes[1] =
op560: SchedulerNode(ComputedBuffer)
op560.writes = [MemoryDep('buf560', c0, {c0: 4720}, None)]
op560.unmet_dependencies = 
    [   MemoryDep('buf548', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf558', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op560.met_dependencies = 
    [   MemoryDep('arg255_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg256_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op560.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf560.users = [
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
    ]
]
op560.group.device = cuda:0
op560.group.iteration = (4720, 128)
op560.sizes = ([8, 10, 59], [128])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op560_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf560', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf548', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf558', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg255_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg256_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op559_op560_op561.snodes[2] =
op561: SchedulerNode(ComputedBuffer)
op561.writes = [MemoryDep('buf561', c0, {c0: 4720}, None)]
op561.unmet_dependencies = 
    [   MemoryDep('buf548', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf558', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op561.met_dependencies = 
    [   MemoryDep('arg255_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg256_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op561.outputs = [
    buf561: ComputedBuffer
    buf561.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf561.users = [
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
    ]
]
op561.group.device = cuda:0
op561.group.iteration = (4720, 128)
op561.sizes = ([8, 10, 59], [128])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op561_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf561', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf548', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf558', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg255_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg256_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op562_op563_op564: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op562_op563_op564.writes = 
    [   MemoryDep('buf562', c0, {c0: 80}, None),
        MemoryDep('buf563', c0, {c0: 80}, None),
        MemoryDep('buf564', c0, {c0: 80}, None)]
op562_op563_op564.unmet_dependencies = 
    [   MemoryDep('buf559', c0, {c0: 4720}, None),
        MemoryDep('buf560', c0, {c0: 4720}, None),
        MemoryDep('buf561', c0, {c0: 4720}, None)]
op562_op563_op564.met_dependencies = []
op562_op563_op564.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf562.users = [
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
    ]
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf563.users = [
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
    ]
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf564.users = [
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
    ]
]
op562_op563_op564.snodes[0] =
op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 80}, None)]
op562.unmet_dependencies = 
    [   MemoryDep('buf559', c0, {c0: 4720}, None),
        MemoryDep('buf560', c0, {c0: 4720}, None),
        MemoryDep('buf561', c0, {c0: 4720}, None)]
op562.met_dependencies = []
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf562.users = [
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
    ]
]
op562.group.device = cuda:0
op562.group.iteration = (80, 59)
op562.sizes = ([80], [59])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op562_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf559', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf560', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf561', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf562', get_index_3, getitem)
        return store_reduction
op562_op563_op564.snodes[1] =
op563: SchedulerNode(ComputedBuffer)
op563.writes = [MemoryDep('buf563', c0, {c0: 80}, None)]
op563.unmet_dependencies = 
    [   MemoryDep('buf559', c0, {c0: 4720}, None),
        MemoryDep('buf560', c0, {c0: 4720}, None),
        MemoryDep('buf561', c0, {c0: 4720}, None)]
op563.met_dependencies = []
op563.outputs = [
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf563.users = [
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
    ]
]
op563.group.device = cuda:0
op563.group.iteration = (80, 59)
op563.sizes = ([80], [59])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op563_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf559', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf560', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf561', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf563', get_index_3, getitem_1)
        return store_reduction
op562_op563_op564.snodes[2] =
op564: SchedulerNode(ComputedBuffer)
op564.writes = [MemoryDep('buf564', c0, {c0: 80}, None)]
op564.unmet_dependencies = 
    [   MemoryDep('buf559', c0, {c0: 4720}, None),
        MemoryDep('buf560', c0, {c0: 4720}, None),
        MemoryDep('buf561', c0, {c0: 4720}, None)]
op564.met_dependencies = []
op564.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf564.users = [
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
    ]
]
op564.group.device = cuda:0
op564.group.iteration = (80, 59)
op564.sizes = ([80], [59])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf564_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op564_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf559', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf560', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf561', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf564', get_index_3, getitem_2)
        return store_reduction


op565_op566: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op565_op566.writes = [MemoryDep('buf565', c0, {c0: 8}, None), MemoryDep('buf566', c0, {c0: 8}, None)]
op565_op566.unmet_dependencies = 
    [   MemoryDep('buf562', c0, {c0: 80}, None),
        MemoryDep('buf563', c0, {c0: 80}, None),
        MemoryDep('buf564', c0, {c0: 80}, None)]
op565_op566.met_dependencies = []
op565_op566.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf565.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf566.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
]
op565_op566.snodes[0] =
op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 8}, None)]
op565.unmet_dependencies = 
    [   MemoryDep('buf562', c0, {c0: 80}, None),
        MemoryDep('buf563', c0, {c0: 80}, None),
        MemoryDep('buf564', c0, {c0: 80}, None)]
op565.met_dependencies = []
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf565.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
]
op565.group.device = cuda:0
op565.group.iteration = (8, 10)
op565.sizes = ([8], [10])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf564_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op565_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf563', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf564', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf565', get_index_3, getitem)
        return store_reduction
op565_op566.snodes[1] =
op566: SchedulerNode(ComputedBuffer)
op566.writes = [MemoryDep('buf566', c0, {c0: 8}, None)]
op566.unmet_dependencies = 
    [   MemoryDep('buf562', c0, {c0: 80}, None),
        MemoryDep('buf563', c0, {c0: 80}, None),
        MemoryDep('buf564', c0, {c0: 80}, None)]
op566.met_dependencies = []
op566.outputs = [
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf566.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
]
op566.group.device = cuda:0
op566.group.iteration = (8, 10)
op566.sizes = ([8], [10])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf564_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf566_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op566_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf563', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf564', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf566', get_index_3, getitem_1)
        return store_reduction


op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 602112}, None)]
op568.unmet_dependencies = 
    [   MemoryDep('buf548', c0, {c0: 602112}, None),
        MemoryDep('buf558', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf565', c0, {c0: 8}, None),
        MemoryDep('buf566', c0, {c0: 8}, None)]
op568.met_dependencies = 
    [   MemoryDep('arg255_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg256_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg257_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg258_1', c1, {c0: 8, c1: 384}, None)]
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf568.users = [
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=True, is_weak=False),
    ]
]
op568.group.device = cuda:0
op568.group.iteration = (602112, 1)
op568.sizes = ([8, 384, 196], [])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf566_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op568_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf548', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf558', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg255_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg256_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf565', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf566', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg257_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg258_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf568', get_index_8, add_3, None)
        return store


op569_op570: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op569_op570.writes = 
    [   MemoryDep('buf569', c0, {c0: 602112}, None),
        MemoryDep('buf570', c0, {c0: 602112}, None)]
op569_op570.unmet_dependencies = 
    [   MemoryDep('buf548', c0, {c0: 602112}, None),
        MemoryDep('buf558', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf568', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf568', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf568', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf568', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf568', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf568', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf568', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf568', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf568', c0, {c0: 602112}, None)]
op569_op570.met_dependencies = 
    [   MemoryDep('arg255_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg256_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg259_1', c1, {c0: 8, c1: 384}, None)]
op569_op570.outputs = [
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf569.users = [NodeUser(node=SchedulerNode(name='op570'), can_inplace=True, is_weak=False)]
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf570.users = [
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False),
    ]
]
op569_op570.snodes[0] =
op569: SchedulerNode(ComputedBuffer)
op569.writes = [MemoryDep('buf569', c0, {c0: 602112}, None)]
op569.unmet_dependencies = 
    [   MemoryDep('buf568', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf568', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf568', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf568', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf568', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf568', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf568', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf568', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf568', c0, {c0: 602112}, None)]
op569.met_dependencies = []
op569.outputs = [
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf569.users = [NodeUser(node=SchedulerNode(name='op570'), can_inplace=True, is_weak=False)]
]
op569.group.device = cuda:0
op569.group.iteration = (602112, 1)
op569.sizes = ([3072, 14, 14], [])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op569_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf569', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf568', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf568', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf568', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf568', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf568', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf568', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf568', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf568', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf568', get_index)
        return load
op569_op570.snodes[1] =
op570: SchedulerNode(ComputedBuffer)
op570.writes = [MemoryDep('buf570', c0, {c0: 602112}, None)]
op570.unmet_dependencies = 
    [   MemoryDep('buf548', c0, {c0: 602112}, None),
        MemoryDep('buf558', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf568', c0, {c0: 602112}, None),
        MemoryDep('buf569', c0, {c0: 602112}, None)]
op570.met_dependencies = 
    [   MemoryDep('arg255_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg256_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg259_1', c1, {c0: 8, c1: 384}, None)]
op570.outputs = [
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf570.users = [
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False),
    ]
]
op570.group.device = cuda:0
op570.group.iteration = (602112, 1)
op570.sizes = ([8, 384, 196], [])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op570_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf548', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf558', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg255_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg256_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf569', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf568', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg259_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf570', get_index_7, add_2, None)
        return store


op571_op572_op573: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op571_op572_op573.writes = 
    [   MemoryDep('buf571', c0, {c0: 80}, None),
        MemoryDep('buf572', c0, {c0: 80}, None),
        MemoryDep('buf573', c0, {c0: 80}, None)]
op571_op572_op573.unmet_dependencies = [   MemoryDep('buf570', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op571_op572_op573.met_dependencies = []
op571_op572_op573.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf571.users = [
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
    ]
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf572.users = [
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
    ]
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf573.users = [
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
    ]
]
op571_op572_op573.snodes[0] =
op571: SchedulerNode(ComputedBuffer)
op571.writes = [MemoryDep('buf571', c0, {c0: 80}, None)]
op571.unmet_dependencies = [   MemoryDep('buf570', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op571.met_dependencies = []
op571.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf571.users = [
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
    ]
]
op571.group.device = cuda:0
op571.group.iteration = (80, 7527)
op571.sizes = ([8, 10], [7527])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op571_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf571', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf570', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op571_op572_op573.snodes[1] =
op572: SchedulerNode(ComputedBuffer)
op572.writes = [MemoryDep('buf572', c0, {c0: 80}, None)]
op572.unmet_dependencies = [   MemoryDep('buf570', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op572.met_dependencies = []
op572.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf572.users = [
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
    ]
]
op572.group.device = cuda:0
op572.group.iteration = (80, 7527)
op572.sizes = ([8, 10], [7527])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op572_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf572', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf570', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op571_op572_op573.snodes[2] =
op573: SchedulerNode(ComputedBuffer)
op573.writes = [MemoryDep('buf573', c0, {c0: 80}, None)]
op573.unmet_dependencies = [   MemoryDep('buf570', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op573.met_dependencies = []
op573.outputs = [
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf573.users = [
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
    ]
]
op573.group.device = cuda:0
op573.group.iteration = (80, 7527)
op573.sizes = ([8, 10], [7527])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf573_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op573_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf573', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf570', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op574_op575: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op574_op575.writes = [MemoryDep('buf574', c0, {c0: 8}, None), MemoryDep('buf575', c0, {c0: 8}, None)]
op574_op575.unmet_dependencies = 
    [   MemoryDep('buf571', c0, {c0: 80}, None),
        MemoryDep('buf572', c0, {c0: 80}, None),
        MemoryDep('buf573', c0, {c0: 80}, None)]
op574_op575.met_dependencies = []
op574_op575.outputs = [
    buf574: ComputedBuffer
    buf574.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf574.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf575.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op574_op575.snodes[0] =
op574: SchedulerNode(ComputedBuffer)
op574.writes = [MemoryDep('buf574', c0, {c0: 8}, None)]
op574.unmet_dependencies = 
    [   MemoryDep('buf571', c0, {c0: 80}, None),
        MemoryDep('buf572', c0, {c0: 80}, None),
        MemoryDep('buf573', c0, {c0: 80}, None)]
op574.met_dependencies = []
op574.outputs = [
    buf574: ComputedBuffer
    buf574.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf574.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op574.group.device = cuda:0
op574.group.iteration = (8, 10)
op574.sizes = ([8], [10])
buf571_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf573_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op574_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf571', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf572', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf573', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf574', get_index_3, getitem)
        return store_reduction
op574_op575.snodes[1] =
op575: SchedulerNode(ComputedBuffer)
op575.writes = [MemoryDep('buf575', c0, {c0: 8}, None)]
op575.unmet_dependencies = 
    [   MemoryDep('buf571', c0, {c0: 80}, None),
        MemoryDep('buf572', c0, {c0: 80}, None),
        MemoryDep('buf573', c0, {c0: 80}, None)]
op575.met_dependencies = []
op575.outputs = [
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf575.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op575.group.device = cuda:0
op575.group.iteration = (8, 10)
op575.sizes = ([8], [10])
buf571_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf573_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf575_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op575_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf571', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf572', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf573', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf575', get_index_3, getitem_1)
        return store_reduction


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op577.unmet_dependencies = 
    [   MemoryDep('buf570', c0, {c0: 602112}, None),
        MemoryDep('buf574', c0, {c0: 8}, None),
        MemoryDep('buf575', c0, {c0: 8}, None)]
op577.met_dependencies = 
    [   MemoryDep('arg260_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg261_1', c1, {c0: 8, c1: 384}, None)]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf577.users = [NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
]
op577.group.device = cuda:0
op577.group.iteration = (602112, 1)
op577.sizes = ([8, 384, 196], [])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf575_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op577_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf570', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf574', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf575', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg260_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg261_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf577', get_index_5, add_1, None)
        return store


op578: ExternKernelSchedulerNode(ExternKernelAlloc)
op578.writes = [StarDep(name='buf578', mode=None)]
op578.unmet_dependencies = [StarDep(name='buf577', mode=None)]
op578.met_dependencies = [StarDep(name='arg262_1', mode=None)]
op578.outputs = [
    buf578: ExternKernelAlloc
    buf578.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf578.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False)]
]
op578.node.kernel = extern_kernels.convolution


op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', c0, {c0: 2408448}, None)]
op579.unmet_dependencies = [MemoryDep('buf578', c0, {c0: 2408448}, None)]
op579.met_dependencies = [MemoryDep('arg263_1', c1, {c0: 1568, c1: 1536}, None)]
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op579.group.device = cuda:0
op579.group.iteration = (2408448, 1)
op579.sizes = ([1568, 1536], [])
buf578_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op579_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg263_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf578', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg263_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf579', get_index_4, mul_2, None)
        return store


op580: ExternKernelSchedulerNode(ExternKernelAlloc)
op580.writes = [StarDep(name='buf580', mode=None)]
op580.unmet_dependencies = [StarDep(name='buf579', mode=None)]
op580.met_dependencies = [StarDep(name='arg264_1', mode=None)]
op580.outputs = [
    buf580: ExternKernelAlloc
    buf580.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf580.users = [
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False),
    ]
]
op580.node.kernel = extern_kernels.convolution


op581_op582_op583: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op581_op582_op583.writes = 
    [   MemoryDep('buf581', c0, {c0: 4720}, None),
        MemoryDep('buf582', c0, {c0: 4720}, None),
        MemoryDep('buf583', c0, {c0: 4720}, None)]
op581_op582_op583.unmet_dependencies = 
    [   MemoryDep('buf570', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf580', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op581_op582_op583.met_dependencies = 
    [   MemoryDep('arg265_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg266_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op581_op582_op583.outputs = [
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf581.users = [
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
    ]
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf582.users = [
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
    ]
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf583.users = [
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
    ]
]
op581_op582_op583.snodes[0] =
op581: SchedulerNode(ComputedBuffer)
op581.writes = [MemoryDep('buf581', c0, {c0: 4720}, None)]
op581.unmet_dependencies = 
    [   MemoryDep('buf570', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf580', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op581.met_dependencies = 
    [   MemoryDep('arg265_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg266_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op581.outputs = [
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf581.users = [
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
    ]
]
op581.group.device = cuda:0
op581.group.iteration = (4720, 128)
op581.sizes = ([8, 10, 59], [128])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op581_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf581', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf570', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf580', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg265_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg266_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op581_op582_op583.snodes[1] =
op582: SchedulerNode(ComputedBuffer)
op582.writes = [MemoryDep('buf582', c0, {c0: 4720}, None)]
op582.unmet_dependencies = 
    [   MemoryDep('buf570', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf580', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op582.met_dependencies = 
    [   MemoryDep('arg265_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg266_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op582.outputs = [
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf582.users = [
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
    ]
]
op582.group.device = cuda:0
op582.group.iteration = (4720, 128)
op582.sizes = ([8, 10, 59], [128])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op582_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf582', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf570', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf580', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg265_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg266_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op581_op582_op583.snodes[2] =
op583: SchedulerNode(ComputedBuffer)
op583.writes = [MemoryDep('buf583', c0, {c0: 4720}, None)]
op583.unmet_dependencies = 
    [   MemoryDep('buf570', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf580', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op583.met_dependencies = 
    [   MemoryDep('arg265_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg266_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op583.outputs = [
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf583.users = [
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
    ]
]
op583.group.device = cuda:0
op583.group.iteration = (4720, 128)
op583.sizes = ([8, 10, 59], [128])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op583_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf583', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf570', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf580', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg265_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg266_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op584_op585_op586: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op584_op585_op586.writes = 
    [   MemoryDep('buf584', c0, {c0: 80}, None),
        MemoryDep('buf585', c0, {c0: 80}, None),
        MemoryDep('buf586', c0, {c0: 80}, None)]
op584_op585_op586.unmet_dependencies = 
    [   MemoryDep('buf581', c0, {c0: 4720}, None),
        MemoryDep('buf582', c0, {c0: 4720}, None),
        MemoryDep('buf583', c0, {c0: 4720}, None)]
op584_op585_op586.met_dependencies = []
op584_op585_op586.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf584.users = [
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
    ]
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf585.users = [
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
    ]
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf586.users = [
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
    ]
]
op584_op585_op586.snodes[0] =
op584: SchedulerNode(ComputedBuffer)
op584.writes = [MemoryDep('buf584', c0, {c0: 80}, None)]
op584.unmet_dependencies = 
    [   MemoryDep('buf581', c0, {c0: 4720}, None),
        MemoryDep('buf582', c0, {c0: 4720}, None),
        MemoryDep('buf583', c0, {c0: 4720}, None)]
op584.met_dependencies = []
op584.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf584.users = [
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
    ]
]
op584.group.device = cuda:0
op584.group.iteration = (80, 59)
op584.sizes = ([80], [59])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op584_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf581', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf582', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf583', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf584', get_index_3, getitem)
        return store_reduction
op584_op585_op586.snodes[1] =
op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 80}, None)]
op585.unmet_dependencies = 
    [   MemoryDep('buf581', c0, {c0: 4720}, None),
        MemoryDep('buf582', c0, {c0: 4720}, None),
        MemoryDep('buf583', c0, {c0: 4720}, None)]
op585.met_dependencies = []
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf585.users = [
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
    ]
]
op585.group.device = cuda:0
op585.group.iteration = (80, 59)
op585.sizes = ([80], [59])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op585_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf581', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf582', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf583', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf585', get_index_3, getitem_1)
        return store_reduction
op584_op585_op586.snodes[2] =
op586: SchedulerNode(ComputedBuffer)
op586.writes = [MemoryDep('buf586', c0, {c0: 80}, None)]
op586.unmet_dependencies = 
    [   MemoryDep('buf581', c0, {c0: 4720}, None),
        MemoryDep('buf582', c0, {c0: 4720}, None),
        MemoryDep('buf583', c0, {c0: 4720}, None)]
op586.met_dependencies = []
op586.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf586.users = [
        NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
    ]
]
op586.group.device = cuda:0
op586.group.iteration = (80, 59)
op586.sizes = ([80], [59])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op586_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf581', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf582', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf583', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf586', get_index_3, getitem_2)
        return store_reduction


op587_op588: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op587_op588.writes = [MemoryDep('buf587', c0, {c0: 8}, None), MemoryDep('buf588', c0, {c0: 8}, None)]
op587_op588.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 80}, None),
        MemoryDep('buf585', c0, {c0: 80}, None),
        MemoryDep('buf586', c0, {c0: 80}, None)]
op587_op588.met_dependencies = []
op587_op588.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf587.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf588.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op587_op588.snodes[0] =
op587: SchedulerNode(ComputedBuffer)
op587.writes = [MemoryDep('buf587', c0, {c0: 8}, None)]
op587.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 80}, None),
        MemoryDep('buf585', c0, {c0: 80}, None),
        MemoryDep('buf586', c0, {c0: 80}, None)]
op587.met_dependencies = []
op587.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf587.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op587.group.device = cuda:0
op587.group.iteration = (8, 10)
op587.sizes = ([8], [10])
buf584_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op587_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf585', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf586', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf587', get_index_3, getitem)
        return store_reduction
op587_op588.snodes[1] =
op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', c0, {c0: 8}, None)]
op588.unmet_dependencies = 
    [   MemoryDep('buf584', c0, {c0: 80}, None),
        MemoryDep('buf585', c0, {c0: 80}, None),
        MemoryDep('buf586', c0, {c0: 80}, None)]
op588.met_dependencies = []
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf588.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op588.group.device = cuda:0
op588.group.iteration = (8, 10)
op588.sizes = ([8], [10])
buf584_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op588_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf585', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf586', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf588', get_index_3, getitem_1)
        return store_reduction


op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 602112}, None)]
op590.unmet_dependencies = 
    [   MemoryDep('buf570', c0, {c0: 602112}, None),
        MemoryDep('buf580', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf587', c0, {c0: 8}, None),
        MemoryDep('buf588', c0, {c0: 8}, None)]
op590.met_dependencies = 
    [   MemoryDep('arg265_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg266_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg267_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg268_1', c1, {c0: 8, c1: 384}, None)]
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf590.users = [
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False),
    ]
]
op590.group.device = cuda:0
op590.group.iteration = (602112, 1)
op590.sizes = ([8, 384, 196], [])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op590_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf570', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf580', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg265_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg266_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf587', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf588', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg267_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg268_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf590', get_index_8, add_3, None)
        return store


op591_op592: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op591_op592.writes = 
    [   MemoryDep('buf591', c0, {c0: 602112}, None),
        MemoryDep('buf592', c0, {c0: 602112}, None)]
op591_op592.unmet_dependencies = 
    [   MemoryDep('buf570', c0, {c0: 602112}, None),
        MemoryDep('buf580', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf590', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf590', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf590', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf590', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf590', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf590', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf590', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf590', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf590', c0, {c0: 602112}, None)]
op591_op592.met_dependencies = 
    [   MemoryDep('arg265_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg266_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg269_1', c1, {c0: 8, c1: 384}, None)]
op591_op592.outputs = [
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf591.users = [NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False)]
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf592.users = [
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False),
    ]
]
op591_op592.snodes[0] =
op591: SchedulerNode(ComputedBuffer)
op591.writes = [MemoryDep('buf591', c0, {c0: 602112}, None)]
op591.unmet_dependencies = 
    [   MemoryDep('buf590', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf590', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf590', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf590', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf590', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf590', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf590', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf590', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf590', c0, {c0: 602112}, None)]
op591.met_dependencies = []
op591.outputs = [
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf591.users = [NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False)]
]
op591.group.device = cuda:0
op591.group.iteration = (602112, 1)
op591.sizes = ([3072, 14, 14], [])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op591_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf591', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf590', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf590', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf590', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf590', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf590', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf590', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf590', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf590', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf590', get_index)
        return load
op591_op592.snodes[1] =
op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 602112}, None)]
op592.unmet_dependencies = 
    [   MemoryDep('buf570', c0, {c0: 602112}, None),
        MemoryDep('buf580', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf590', c0, {c0: 602112}, None),
        MemoryDep('buf591', c0, {c0: 602112}, None)]
op592.met_dependencies = 
    [   MemoryDep('arg265_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg266_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg269_1', c1, {c0: 8, c1: 384}, None)]
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf592.users = [
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False),
    ]
]
op592.group.device = cuda:0
op592.group.iteration = (602112, 1)
op592.sizes = ([8, 384, 196], [])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op592_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf570', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf580', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg265_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg266_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf591', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf590', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg269_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf592', get_index_7, add_2, None)
        return store


op593_op594_op595: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op593_op594_op595.writes = 
    [   MemoryDep('buf593', c0, {c0: 80}, None),
        MemoryDep('buf594', c0, {c0: 80}, None),
        MemoryDep('buf595', c0, {c0: 80}, None)]
op593_op594_op595.unmet_dependencies = [   MemoryDep('buf592', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op593_op594_op595.met_dependencies = []
op593_op594_op595.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf593.users = [
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
    ]
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf594.users = [
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
    ]
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf595.users = [
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
    ]
]
op593_op594_op595.snodes[0] =
op593: SchedulerNode(ComputedBuffer)
op593.writes = [MemoryDep('buf593', c0, {c0: 80}, None)]
op593.unmet_dependencies = [   MemoryDep('buf592', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op593.met_dependencies = []
op593.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf593.users = [
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
    ]
]
op593.group.device = cuda:0
op593.group.iteration = (80, 7527)
op593.sizes = ([8, 10], [7527])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op593_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf593', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf592', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op593_op594_op595.snodes[1] =
op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', c0, {c0: 80}, None)]
op594.unmet_dependencies = [   MemoryDep('buf592', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op594.met_dependencies = []
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf594.users = [
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
    ]
]
op594.group.device = cuda:0
op594.group.iteration = (80, 7527)
op594.sizes = ([8, 10], [7527])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op594_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf594', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf592', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op593_op594_op595.snodes[2] =
op595: SchedulerNode(ComputedBuffer)
op595.writes = [MemoryDep('buf595', c0, {c0: 80}, None)]
op595.unmet_dependencies = [   MemoryDep('buf592', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op595.met_dependencies = []
op595.outputs = [
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf595.users = [
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
    ]
]
op595.group.device = cuda:0
op595.group.iteration = (80, 7527)
op595.sizes = ([8, 10], [7527])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op595_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf595', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf592', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op596_op597: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op596_op597.writes = [MemoryDep('buf596', c0, {c0: 8}, None), MemoryDep('buf597', c0, {c0: 8}, None)]
op596_op597.unmet_dependencies = 
    [   MemoryDep('buf593', c0, {c0: 80}, None),
        MemoryDep('buf594', c0, {c0: 80}, None),
        MemoryDep('buf595', c0, {c0: 80}, None)]
op596_op597.met_dependencies = []
op596_op597.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf596.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
    buf597: ComputedBuffer
    buf597.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf597.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op596_op597.snodes[0] =
op596: SchedulerNode(ComputedBuffer)
op596.writes = [MemoryDep('buf596', c0, {c0: 8}, None)]
op596.unmet_dependencies = 
    [   MemoryDep('buf593', c0, {c0: 80}, None),
        MemoryDep('buf594', c0, {c0: 80}, None),
        MemoryDep('buf595', c0, {c0: 80}, None)]
op596.met_dependencies = []
op596.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf596.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op596.group.device = cuda:0
op596.group.iteration = (8, 10)
op596.sizes = ([8], [10])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op596_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf594', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf595', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf596', get_index_3, getitem)
        return store_reduction
op596_op597.snodes[1] =
op597: SchedulerNode(ComputedBuffer)
op597.writes = [MemoryDep('buf597', c0, {c0: 8}, None)]
op597.unmet_dependencies = 
    [   MemoryDep('buf593', c0, {c0: 80}, None),
        MemoryDep('buf594', c0, {c0: 80}, None),
        MemoryDep('buf595', c0, {c0: 80}, None)]
op597.met_dependencies = []
op597.outputs = [
    buf597: ComputedBuffer
    buf597.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf597.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op597.group.device = cuda:0
op597.group.iteration = (8, 10)
op597.sizes = ([8], [10])
buf593_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf597_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op597_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf594', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf595', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf597', get_index_3, getitem_1)
        return store_reduction


op599: SchedulerNode(ComputedBuffer)
op599.writes = [MemoryDep('buf599', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op599.unmet_dependencies = 
    [   MemoryDep('buf592', c0, {c0: 602112}, None),
        MemoryDep('buf596', c0, {c0: 8}, None),
        MemoryDep('buf597', c0, {c0: 8}, None)]
op599.met_dependencies = 
    [   MemoryDep('arg270_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg271_1', c1, {c0: 8, c1: 384}, None)]
op599.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf599.users = [NodeUser(node=ExternKernelSchedulerNode(name='op600'), can_inplace=False, is_weak=False)]
]
op599.group.device = cuda:0
op599.group.iteration = (602112, 1)
op599.sizes = ([8, 384, 196], [])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf597_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op599_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf596', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf597', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg270_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg271_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf599', get_index_5, add_1, None)
        return store


op600: ExternKernelSchedulerNode(ExternKernelAlloc)
op600.writes = [StarDep(name='buf600', mode=None)]
op600.unmet_dependencies = [StarDep(name='buf599', mode=None)]
op600.met_dependencies = [StarDep(name='arg272_1', mode=None)]
op600.outputs = [
    buf600: ExternKernelAlloc
    buf600.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf600.users = [NodeUser(node=SchedulerNode(name='op601'), can_inplace=True, is_weak=False)]
]
op600.node.kernel = extern_kernels.convolution


op601: SchedulerNode(ComputedBuffer)
op601.writes = [MemoryDep('buf601', c0, {c0: 2408448}, None)]
op601.unmet_dependencies = [MemoryDep('buf600', c0, {c0: 2408448}, None)]
op601.met_dependencies = [MemoryDep('arg273_1', c1, {c0: 1568, c1: 1536}, None)]
op601.outputs = [
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf601.users = [NodeUser(node=ExternKernelSchedulerNode(name='op602'), can_inplace=False, is_weak=False)]
]
op601.group.device = cuda:0
op601.group.iteration = (2408448, 1)
op601.sizes = ([1568, 1536], [])
buf600_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf601_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op601_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf600', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg273_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf600', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg273_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf601', get_index_4, mul_2, None)
        return store


op602: ExternKernelSchedulerNode(ExternKernelAlloc)
op602.writes = [StarDep(name='buf602', mode=None)]
op602.unmet_dependencies = [StarDep(name='buf601', mode=None)]
op602.met_dependencies = [StarDep(name='arg274_1', mode=None)]
op602.outputs = [
    buf602: ExternKernelAlloc
    buf602.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf602.users = [
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False),
    ]
]
op602.node.kernel = extern_kernels.convolution


op603_op604_op605: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op603_op604_op605.writes = 
    [   MemoryDep('buf603', c0, {c0: 4720}, None),
        MemoryDep('buf604', c0, {c0: 4720}, None),
        MemoryDep('buf605', c0, {c0: 4720}, None)]
op603_op604_op605.unmet_dependencies = 
    [   MemoryDep('buf592', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf602', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op603_op604_op605.met_dependencies = 
    [   MemoryDep('arg275_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg276_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op603_op604_op605.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf603.users = [
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
    ]
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf604.users = [
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
    ]
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf605.users = [
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
    ]
]
op603_op604_op605.snodes[0] =
op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 4720}, None)]
op603.unmet_dependencies = 
    [   MemoryDep('buf592', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf602', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op603.met_dependencies = 
    [   MemoryDep('arg275_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg276_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf603.users = [
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
    ]
]
op603.group.device = cuda:0
op603.group.iteration = (4720, 128)
op603.sizes = ([8, 10, 59], [128])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op603_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf603', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf602', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg276_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op603_op604_op605.snodes[1] =
op604: SchedulerNode(ComputedBuffer)
op604.writes = [MemoryDep('buf604', c0, {c0: 4720}, None)]
op604.unmet_dependencies = 
    [   MemoryDep('buf592', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf602', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op604.met_dependencies = 
    [   MemoryDep('arg275_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg276_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op604.outputs = [
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf604.users = [
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
    ]
]
op604.group.device = cuda:0
op604.group.iteration = (4720, 128)
op604.sizes = ([8, 10, 59], [128])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op604_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf604', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf602', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg276_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op603_op604_op605.snodes[2] =
op605: SchedulerNode(ComputedBuffer)
op605.writes = [MemoryDep('buf605', c0, {c0: 4720}, None)]
op605.unmet_dependencies = 
    [   MemoryDep('buf592', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf602', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op605.met_dependencies = 
    [   MemoryDep('arg275_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg276_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op605.outputs = [
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf605.users = [
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
    ]
]
op605.group.device = cuda:0
op605.group.iteration = (4720, 128)
op605.sizes = ([8, 10, 59], [128])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op605_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf605', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf602', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg276_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op606_op607_op608: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op606_op607_op608.writes = 
    [   MemoryDep('buf606', c0, {c0: 80}, None),
        MemoryDep('buf607', c0, {c0: 80}, None),
        MemoryDep('buf608', c0, {c0: 80}, None)]
op606_op607_op608.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 4720}, None),
        MemoryDep('buf604', c0, {c0: 4720}, None),
        MemoryDep('buf605', c0, {c0: 4720}, None)]
op606_op607_op608.met_dependencies = []
op606_op607_op608.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf606.users = [
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
    ]
    buf607: ComputedBuffer
    buf607.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf607.users = [
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
    ]
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf608.users = [
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
    ]
]
op606_op607_op608.snodes[0] =
op606: SchedulerNode(ComputedBuffer)
op606.writes = [MemoryDep('buf606', c0, {c0: 80}, None)]
op606.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 4720}, None),
        MemoryDep('buf604', c0, {c0: 4720}, None),
        MemoryDep('buf605', c0, {c0: 4720}, None)]
op606.met_dependencies = []
op606.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf606.users = [
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
    ]
]
op606.group.device = cuda:0
op606.group.iteration = (80, 59)
op606.sizes = ([80], [59])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf606_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op606_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf604', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf605', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf606', get_index_3, getitem)
        return store_reduction
op606_op607_op608.snodes[1] =
op607: SchedulerNode(ComputedBuffer)
op607.writes = [MemoryDep('buf607', c0, {c0: 80}, None)]
op607.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 4720}, None),
        MemoryDep('buf604', c0, {c0: 4720}, None),
        MemoryDep('buf605', c0, {c0: 4720}, None)]
op607.met_dependencies = []
op607.outputs = [
    buf607: ComputedBuffer
    buf607.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf607.users = [
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
    ]
]
op607.group.device = cuda:0
op607.group.iteration = (80, 59)
op607.sizes = ([80], [59])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf607_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op607_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf604', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf605', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf607', get_index_3, getitem_1)
        return store_reduction
op606_op607_op608.snodes[2] =
op608: SchedulerNode(ComputedBuffer)
op608.writes = [MemoryDep('buf608', c0, {c0: 80}, None)]
op608.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 4720}, None),
        MemoryDep('buf604', c0, {c0: 4720}, None),
        MemoryDep('buf605', c0, {c0: 4720}, None)]
op608.met_dependencies = []
op608.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf608.users = [
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
    ]
]
op608.group.device = cuda:0
op608.group.iteration = (80, 59)
op608.sizes = ([80], [59])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op608_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf604', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf605', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf608', get_index_3, getitem_2)
        return store_reduction


op609_op610: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op609_op610.writes = [MemoryDep('buf609', c0, {c0: 8}, None), MemoryDep('buf610', c0, {c0: 8}, None)]
op609_op610.unmet_dependencies = 
    [   MemoryDep('buf606', c0, {c0: 80}, None),
        MemoryDep('buf607', c0, {c0: 80}, None),
        MemoryDep('buf608', c0, {c0: 80}, None)]
op609_op610.met_dependencies = []
op609_op610.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf609.users = [NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False)]
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf610.users = [NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False)]
]
op609_op610.snodes[0] =
op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 8}, None)]
op609.unmet_dependencies = 
    [   MemoryDep('buf606', c0, {c0: 80}, None),
        MemoryDep('buf607', c0, {c0: 80}, None),
        MemoryDep('buf608', c0, {c0: 80}, None)]
op609.met_dependencies = []
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf609.users = [NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False)]
]
op609.group.device = cuda:0
op609.group.iteration = (8, 10)
op609.sizes = ([8], [10])
buf606_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf607_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf609_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op609_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf606', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf607', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf608', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf609', get_index_3, getitem)
        return store_reduction
op609_op610.snodes[1] =
op610: SchedulerNode(ComputedBuffer)
op610.writes = [MemoryDep('buf610', c0, {c0: 8}, None)]
op610.unmet_dependencies = 
    [   MemoryDep('buf606', c0, {c0: 80}, None),
        MemoryDep('buf607', c0, {c0: 80}, None),
        MemoryDep('buf608', c0, {c0: 80}, None)]
op610.met_dependencies = []
op610.outputs = [
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf610.users = [NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False)]
]
op610.group.device = cuda:0
op610.group.iteration = (8, 10)
op610.sizes = ([8], [10])
buf606_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf607_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf610_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op610_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf606', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf607', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf608', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf610', get_index_3, getitem_1)
        return store_reduction


op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 602112}, None)]
op612.unmet_dependencies = 
    [   MemoryDep('buf592', c0, {c0: 602112}, None),
        MemoryDep('buf602', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf609', c0, {c0: 8}, None),
        MemoryDep('buf610', c0, {c0: 8}, None)]
op612.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg276_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg277_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg278_1', c1, {c0: 8, c1: 384}, None)]
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf612.users = [
        NodeUser(node=SchedulerNode(name='op613'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False),
    ]
]
op612.group.device = cuda:0
op612.group.iteration = (602112, 1)
op612.sizes = ([8, 384, 196], [])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf609_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf610_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op612_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf602', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg276_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf609', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf610', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg277_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg278_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf612', get_index_8, add_3, None)
        return store


op613_op614: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op613_op614.writes = 
    [   MemoryDep('buf613', c0, {c0: 602112}, None),
        MemoryDep('buf614', c0, {c0: 602112}, None)]
op613_op614.unmet_dependencies = 
    [   MemoryDep('buf592', c0, {c0: 602112}, None),
        MemoryDep('buf602', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf612', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf612', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf612', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf612', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf612', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf612', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf612', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf612', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf612', c0, {c0: 602112}, None)]
op613_op614.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg276_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg279_1', c1, {c0: 8, c1: 384}, None)]
op613_op614.outputs = [
    buf613: ComputedBuffer
    buf613.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf613.users = [NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False)]
    buf614: ComputedBuffer
    buf614.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf614.users = [
        NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op616'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op617'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op634'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=True, is_weak=False),
    ]
]
op613_op614.snodes[0] =
op613: SchedulerNode(ComputedBuffer)
op613.writes = [MemoryDep('buf613', c0, {c0: 602112}, None)]
op613.unmet_dependencies = 
    [   MemoryDep('buf612', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf612', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf612', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf612', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf612', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf612', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf612', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf612', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf612', c0, {c0: 602112}, None)]
op613.met_dependencies = []
op613.outputs = [
    buf613: ComputedBuffer
    buf613.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf613.users = [NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False)]
]
op613.group.device = cuda:0
op613.group.iteration = (602112, 1)
op613.sizes = ([3072, 14, 14], [])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf613_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op613_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf613', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf612', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf612', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf612', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf612', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf612', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf612', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf612', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf612', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf612', get_index)
        return load
op613_op614.snodes[1] =
op614: SchedulerNode(ComputedBuffer)
op614.writes = [MemoryDep('buf614', c0, {c0: 602112}, None)]
op614.unmet_dependencies = 
    [   MemoryDep('buf592', c0, {c0: 602112}, None),
        MemoryDep('buf602', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf612', c0, {c0: 602112}, None),
        MemoryDep('buf613', c0, {c0: 602112}, None)]
op614.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg276_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg279_1', c1, {c0: 8, c1: 384}, None)]
op614.outputs = [
    buf614: ComputedBuffer
    buf614.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf614.users = [
        NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op616'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op617'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op634'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=True, is_weak=False),
    ]
]
op614.group.device = cuda:0
op614.group.iteration = (602112, 1)
op614.sizes = ([8, 384, 196], [])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf613_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op614_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf602', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg276_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf613', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf612', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg279_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf614', get_index_7, add_2, None)
        return store


op615_op616_op617: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op615_op616_op617.writes = 
    [   MemoryDep('buf615', c0, {c0: 80}, None),
        MemoryDep('buf616', c0, {c0: 80}, None),
        MemoryDep('buf617', c0, {c0: 80}, None)]
op615_op616_op617.unmet_dependencies = [   MemoryDep('buf614', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op615_op616_op617.met_dependencies = []
op615_op616_op617.outputs = [
    buf615: ComputedBuffer
    buf615.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf615.users = [
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
    ]
    buf616: ComputedBuffer
    buf616.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf616.users = [
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
    ]
    buf617: ComputedBuffer
    buf617.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf617.users = [
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
    ]
]
op615_op616_op617.snodes[0] =
op615: SchedulerNode(ComputedBuffer)
op615.writes = [MemoryDep('buf615', c0, {c0: 80}, None)]
op615.unmet_dependencies = [   MemoryDep('buf614', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op615.met_dependencies = []
op615.outputs = [
    buf615: ComputedBuffer
    buf615.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf615.users = [
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
    ]
]
op615.group.device = cuda:0
op615.group.iteration = (80, 7527)
op615.sizes = ([8, 10], [7527])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf615_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op615_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf615', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf614', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op615_op616_op617.snodes[1] =
op616: SchedulerNode(ComputedBuffer)
op616.writes = [MemoryDep('buf616', c0, {c0: 80}, None)]
op616.unmet_dependencies = [   MemoryDep('buf614', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op616.met_dependencies = []
op616.outputs = [
    buf616: ComputedBuffer
    buf616.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf616.users = [
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
    ]
]
op616.group.device = cuda:0
op616.group.iteration = (80, 7527)
op616.sizes = ([8, 10], [7527])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf616_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op616_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf616', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf614', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op615_op616_op617.snodes[2] =
op617: SchedulerNode(ComputedBuffer)
op617.writes = [MemoryDep('buf617', c0, {c0: 80}, None)]
op617.unmet_dependencies = [   MemoryDep('buf614', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op617.met_dependencies = []
op617.outputs = [
    buf617: ComputedBuffer
    buf617.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf617.users = [
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
    ]
]
op617.group.device = cuda:0
op617.group.iteration = (80, 7527)
op617.sizes = ([8, 10], [7527])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op617_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf617', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf614', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op618_op619: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op618_op619.writes = [MemoryDep('buf618', c0, {c0: 8}, None), MemoryDep('buf619', c0, {c0: 8}, None)]
op618_op619.unmet_dependencies = 
    [   MemoryDep('buf615', c0, {c0: 80}, None),
        MemoryDep('buf616', c0, {c0: 80}, None),
        MemoryDep('buf617', c0, {c0: 80}, None)]
op618_op619.met_dependencies = []
op618_op619.outputs = [
    buf618: ComputedBuffer
    buf618.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf618.users = [NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False)]
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf619.users = [NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False)]
]
op618_op619.snodes[0] =
op618: SchedulerNode(ComputedBuffer)
op618.writes = [MemoryDep('buf618', c0, {c0: 8}, None)]
op618.unmet_dependencies = 
    [   MemoryDep('buf615', c0, {c0: 80}, None),
        MemoryDep('buf616', c0, {c0: 80}, None),
        MemoryDep('buf617', c0, {c0: 80}, None)]
op618.met_dependencies = []
op618.outputs = [
    buf618: ComputedBuffer
    buf618.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf618.users = [NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False)]
]
op618.group.device = cuda:0
op618.group.iteration = (8, 10)
op618.sizes = ([8], [10])
buf615_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf616_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op618_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf615', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf616', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf617', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf618', get_index_3, getitem)
        return store_reduction
op618_op619.snodes[1] =
op619: SchedulerNode(ComputedBuffer)
op619.writes = [MemoryDep('buf619', c0, {c0: 8}, None)]
op619.unmet_dependencies = 
    [   MemoryDep('buf615', c0, {c0: 80}, None),
        MemoryDep('buf616', c0, {c0: 80}, None),
        MemoryDep('buf617', c0, {c0: 80}, None)]
op619.met_dependencies = []
op619.outputs = [
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf619.users = [NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False)]
]
op619.group.device = cuda:0
op619.group.iteration = (8, 10)
op619.sizes = ([8], [10])
buf615_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf616_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf617_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op619_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf615', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf616', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf617', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf619', get_index_3, getitem_1)
        return store_reduction


op621: SchedulerNode(ComputedBuffer)
op621.writes = [MemoryDep('buf621', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op621.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 602112}, None),
        MemoryDep('buf618', c0, {c0: 8}, None),
        MemoryDep('buf619', c0, {c0: 8}, None)]
op621.met_dependencies = 
    [   MemoryDep('arg280_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg281_1', c1, {c0: 8, c1: 384}, None)]
op621.outputs = [
    buf621: ComputedBuffer
    buf621.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf621.users = [NodeUser(node=ExternKernelSchedulerNode(name='op622'), can_inplace=False, is_weak=False)]
]
op621.group.device = cuda:0
op621.group.iteration = (602112, 1)
op621.sizes = ([8, 384, 196], [])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf619_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op621_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf618', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf619', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg280_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg281_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf621', get_index_5, add_1, None)
        return store


op622: ExternKernelSchedulerNode(ExternKernelAlloc)
op622.writes = [StarDep(name='buf622', mode=None)]
op622.unmet_dependencies = [StarDep(name='buf621', mode=None)]
op622.met_dependencies = [StarDep(name='arg282_1', mode=None)]
op622.outputs = [
    buf622: ExternKernelAlloc
    buf622.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf622.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False)]
]
op622.node.kernel = extern_kernels.convolution


op623: SchedulerNode(ComputedBuffer)
op623.writes = [MemoryDep('buf623', c0, {c0: 2408448}, None)]
op623.unmet_dependencies = [MemoryDep('buf622', c0, {c0: 2408448}, None)]
op623.met_dependencies = [MemoryDep('arg283_1', c1, {c0: 1568, c1: 1536}, None)]
op623.outputs = [
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf623.users = [NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False)]
]
op623.group.device = cuda:0
op623.group.iteration = (2408448, 1)
op623.sizes = ([1568, 1536], [])
buf622_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf623_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op623_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf622', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg283_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf622', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg283_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf623', get_index_4, mul_2, None)
        return store


op624: ExternKernelSchedulerNode(ExternKernelAlloc)
op624.writes = [StarDep(name='buf624', mode=None)]
op624.unmet_dependencies = [StarDep(name='buf623', mode=None)]
op624.met_dependencies = [StarDep(name='arg284_1', mode=None)]
op624.outputs = [
    buf624: ExternKernelAlloc
    buf624.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf624.users = [
        NodeUser(node=SchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False),
    ]
]
op624.node.kernel = extern_kernels.convolution


op625_op626_op627: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op625_op626_op627.writes = 
    [   MemoryDep('buf625', c0, {c0: 4720}, None),
        MemoryDep('buf626', c0, {c0: 4720}, None),
        MemoryDep('buf627', c0, {c0: 4720}, None)]
op625_op626_op627.unmet_dependencies = 
    [   MemoryDep('buf614', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf624', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op625_op626_op627.met_dependencies = 
    [   MemoryDep('arg285_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg286_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op625_op626_op627.outputs = [
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf625.users = [
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False),
    ]
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf626.users = [
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False),
    ]
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf627.users = [
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False),
    ]
]
op625_op626_op627.snodes[0] =
op625: SchedulerNode(ComputedBuffer)
op625.writes = [MemoryDep('buf625', c0, {c0: 4720}, None)]
op625.unmet_dependencies = 
    [   MemoryDep('buf614', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf624', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op625.met_dependencies = 
    [   MemoryDep('arg285_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg286_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op625.outputs = [
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf625.users = [
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False),
    ]
]
op625.group.device = cuda:0
op625.group.iteration = (4720, 128)
op625.sizes = ([8, 10, 59], [128])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf625_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op625_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf625', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf624', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg285_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg286_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op625_op626_op627.snodes[1] =
op626: SchedulerNode(ComputedBuffer)
op626.writes = [MemoryDep('buf626', c0, {c0: 4720}, None)]
op626.unmet_dependencies = 
    [   MemoryDep('buf614', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf624', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op626.met_dependencies = 
    [   MemoryDep('arg285_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg286_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op626.outputs = [
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf626.users = [
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False),
    ]
]
op626.group.device = cuda:0
op626.group.iteration = (4720, 128)
op626.sizes = ([8, 10, 59], [128])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op626_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf626', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf624', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg285_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg286_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op625_op626_op627.snodes[2] =
op627: SchedulerNode(ComputedBuffer)
op627.writes = [MemoryDep('buf627', c0, {c0: 4720}, None)]
op627.unmet_dependencies = 
    [   MemoryDep('buf614', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf624', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op627.met_dependencies = 
    [   MemoryDep('arg285_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg286_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op627.outputs = [
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf627.users = [
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False),
    ]
]
op627.group.device = cuda:0
op627.group.iteration = (4720, 128)
op627.sizes = ([8, 10, 59], [128])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op627_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf627', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf624', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg285_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg286_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op628_op629_op630: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op628_op629_op630.writes = 
    [   MemoryDep('buf628', c0, {c0: 80}, None),
        MemoryDep('buf629', c0, {c0: 80}, None),
        MemoryDep('buf630', c0, {c0: 80}, None)]
op628_op629_op630.unmet_dependencies = 
    [   MemoryDep('buf625', c0, {c0: 4720}, None),
        MemoryDep('buf626', c0, {c0: 4720}, None),
        MemoryDep('buf627', c0, {c0: 4720}, None)]
op628_op629_op630.met_dependencies = []
op628_op629_op630.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf628.users = [
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf629.users = [
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
    buf630: ComputedBuffer
    buf630.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf630.users = [
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
]
op628_op629_op630.snodes[0] =
op628: SchedulerNode(ComputedBuffer)
op628.writes = [MemoryDep('buf628', c0, {c0: 80}, None)]
op628.unmet_dependencies = 
    [   MemoryDep('buf625', c0, {c0: 4720}, None),
        MemoryDep('buf626', c0, {c0: 4720}, None),
        MemoryDep('buf627', c0, {c0: 4720}, None)]
op628.met_dependencies = []
op628.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf628.users = [
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
]
op628.group.device = cuda:0
op628.group.iteration = (80, 59)
op628.sizes = ([80], [59])
buf625_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op628_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf626', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf627', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf628', get_index_3, getitem)
        return store_reduction
op628_op629_op630.snodes[1] =
op629: SchedulerNode(ComputedBuffer)
op629.writes = [MemoryDep('buf629', c0, {c0: 80}, None)]
op629.unmet_dependencies = 
    [   MemoryDep('buf625', c0, {c0: 4720}, None),
        MemoryDep('buf626', c0, {c0: 4720}, None),
        MemoryDep('buf627', c0, {c0: 4720}, None)]
op629.met_dependencies = []
op629.outputs = [
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf629.users = [
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
]
op629.group.device = cuda:0
op629.group.iteration = (80, 59)
op629.sizes = ([80], [59])
buf625_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf629_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op629_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf626', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf627', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf629', get_index_3, getitem_1)
        return store_reduction
op628_op629_op630.snodes[2] =
op630: SchedulerNode(ComputedBuffer)
op630.writes = [MemoryDep('buf630', c0, {c0: 80}, None)]
op630.unmet_dependencies = 
    [   MemoryDep('buf625', c0, {c0: 4720}, None),
        MemoryDep('buf626', c0, {c0: 4720}, None),
        MemoryDep('buf627', c0, {c0: 4720}, None)]
op630.met_dependencies = []
op630.outputs = [
    buf630: ComputedBuffer
    buf630.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf630.users = [
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
]
op630.group.device = cuda:0
op630.group.iteration = (80, 59)
op630.sizes = ([80], [59])
buf625_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf630_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op630_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf626', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf627', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf630', get_index_3, getitem_2)
        return store_reduction


op631_op632: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op631_op632.writes = [MemoryDep('buf631', c0, {c0: 8}, None), MemoryDep('buf632', c0, {c0: 8}, None)]
op631_op632.unmet_dependencies = 
    [   MemoryDep('buf628', c0, {c0: 80}, None),
        MemoryDep('buf629', c0, {c0: 80}, None),
        MemoryDep('buf630', c0, {c0: 80}, None)]
op631_op632.met_dependencies = []
op631_op632.outputs = [
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf631.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
    buf632: ComputedBuffer
    buf632.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf632.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op631_op632.snodes[0] =
op631: SchedulerNode(ComputedBuffer)
op631.writes = [MemoryDep('buf631', c0, {c0: 8}, None)]
op631.unmet_dependencies = 
    [   MemoryDep('buf628', c0, {c0: 80}, None),
        MemoryDep('buf629', c0, {c0: 80}, None),
        MemoryDep('buf630', c0, {c0: 80}, None)]
op631.met_dependencies = []
op631.outputs = [
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf631.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op631.group.device = cuda:0
op631.group.iteration = (8, 10)
op631.sizes = ([8], [10])
buf628_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf629_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf630_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf631_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op631_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf628', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf629', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf630', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf631', get_index_3, getitem)
        return store_reduction
op631_op632.snodes[1] =
op632: SchedulerNode(ComputedBuffer)
op632.writes = [MemoryDep('buf632', c0, {c0: 8}, None)]
op632.unmet_dependencies = 
    [   MemoryDep('buf628', c0, {c0: 80}, None),
        MemoryDep('buf629', c0, {c0: 80}, None),
        MemoryDep('buf630', c0, {c0: 80}, None)]
op632.met_dependencies = []
op632.outputs = [
    buf632: ComputedBuffer
    buf632.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf632.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op632.group.device = cuda:0
op632.group.iteration = (8, 10)
op632.sizes = ([8], [10])
buf628_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf629_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf630_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf632_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op632_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf628', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf629', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf630', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf632', get_index_3, getitem_1)
        return store_reduction


op634: SchedulerNode(ComputedBuffer)
op634.writes = [MemoryDep('buf634', c0, {c0: 602112}, None)]
op634.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 602112}, None),
        MemoryDep('buf624', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf631', c0, {c0: 8}, None),
        MemoryDep('buf632', c0, {c0: 8}, None)]
op634.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg286_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg287_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg288_1', c1, {c0: 8, c1: 384}, None)]
op634.outputs = [
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf634.users = [
        NodeUser(node=SchedulerNode(name='op635'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=True, is_weak=False),
    ]
]
op634.group.device = cuda:0
op634.group.iteration = (602112, 1)
op634.sizes = ([8, 384, 196], [])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf631_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf632_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op634_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf624', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg285_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg286_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf631', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf632', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg287_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg288_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf634', get_index_8, add_3, None)
        return store


op635_op636: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op635_op636.writes = 
    [   MemoryDep('buf635', c0, {c0: 602112}, None),
        MemoryDep('buf636', c0, {c0: 602112}, None)]
op635_op636.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 602112}, None),
        MemoryDep('buf624', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf634', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf634', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf634', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf634', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf634', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf634', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf634', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf634', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf634', c0, {c0: 602112}, None)]
op635_op636.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg286_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg289_1', c1, {c0: 8, c1: 384}, None)]
op635_op636.outputs = [
    buf635: ComputedBuffer
    buf635.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf635.users = [NodeUser(node=SchedulerNode(name='op636'), can_inplace=True, is_weak=False)]
    buf636: ComputedBuffer
    buf636.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf636.users = [
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op638'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op647'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op649'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op656'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op658'), can_inplace=True, is_weak=False),
    ]
]
op635_op636.snodes[0] =
op635: SchedulerNode(ComputedBuffer)
op635.writes = [MemoryDep('buf635', c0, {c0: 602112}, None)]
op635.unmet_dependencies = 
    [   MemoryDep('buf634', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf634', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf634', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf634', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf634', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf634', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf634', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf634', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf634', c0, {c0: 602112}, None)]
op635.met_dependencies = []
op635.outputs = [
    buf635: ComputedBuffer
    buf635.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf635.users = [NodeUser(node=SchedulerNode(name='op636'), can_inplace=True, is_weak=False)]
]
op635.group.device = cuda:0
op635.group.iteration = (602112, 1)
op635.sizes = ([3072, 14, 14], [])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf635_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op635_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf635', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf634', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf634', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf634', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf634', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf634', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf634', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf634', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf634', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf634', get_index)
        return load
op635_op636.snodes[1] =
op636: SchedulerNode(ComputedBuffer)
op636.writes = [MemoryDep('buf636', c0, {c0: 602112}, None)]
op636.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 602112}, None),
        MemoryDep('buf624', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf634', c0, {c0: 602112}, None),
        MemoryDep('buf635', c0, {c0: 602112}, None)]
op636.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg286_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg289_1', c1, {c0: 8, c1: 384}, None)]
op636.outputs = [
    buf636: ComputedBuffer
    buf636.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf636.users = [
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op638'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op647'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op649'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op656'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op658'), can_inplace=True, is_weak=False),
    ]
]
op636.group.device = cuda:0
op636.group.iteration = (602112, 1)
op636.sizes = ([8, 384, 196], [])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf635_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op636_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf624', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg285_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg286_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf635', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf634', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg289_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf636', get_index_7, add_2, None)
        return store


op637_op638_op639: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op637_op638_op639.writes = 
    [   MemoryDep('buf637', c0, {c0: 80}, None),
        MemoryDep('buf638', c0, {c0: 80}, None),
        MemoryDep('buf639', c0, {c0: 80}, None)]
op637_op638_op639.unmet_dependencies = [   MemoryDep('buf636', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op637_op638_op639.met_dependencies = []
op637_op638_op639.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf637.users = [
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False),
    ]
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf638.users = [
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False),
    ]
    buf639: ComputedBuffer
    buf639.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf639.users = [
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False),
    ]
]
op637_op638_op639.snodes[0] =
op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 80}, None)]
op637.unmet_dependencies = [   MemoryDep('buf636', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op637.met_dependencies = []
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf637.users = [
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False),
    ]
]
op637.group.device = cuda:0
op637.group.iteration = (80, 7527)
op637.sizes = ([8, 10], [7527])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf637_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op637_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf637', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf636', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op637_op638_op639.snodes[1] =
op638: SchedulerNode(ComputedBuffer)
op638.writes = [MemoryDep('buf638', c0, {c0: 80}, None)]
op638.unmet_dependencies = [   MemoryDep('buf636', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op638.met_dependencies = []
op638.outputs = [
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf638.users = [
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False),
    ]
]
op638.group.device = cuda:0
op638.group.iteration = (80, 7527)
op638.sizes = ([8, 10], [7527])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf638_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op638_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf638', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf636', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op637_op638_op639.snodes[2] =
op639: SchedulerNode(ComputedBuffer)
op639.writes = [MemoryDep('buf639', c0, {c0: 80}, None)]
op639.unmet_dependencies = [   MemoryDep('buf636', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op639.met_dependencies = []
op639.outputs = [
    buf639: ComputedBuffer
    buf639.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf639.users = [
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False),
    ]
]
op639.group.device = cuda:0
op639.group.iteration = (80, 7527)
op639.sizes = ([8, 10], [7527])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf639_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op639_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf639', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf636', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op640_op641: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op640_op641.writes = [MemoryDep('buf640', c0, {c0: 8}, None), MemoryDep('buf641', c0, {c0: 8}, None)]
op640_op641.unmet_dependencies = 
    [   MemoryDep('buf637', c0, {c0: 80}, None),
        MemoryDep('buf638', c0, {c0: 80}, None),
        MemoryDep('buf639', c0, {c0: 80}, None)]
op640_op641.met_dependencies = []
op640_op641.outputs = [
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf640.users = [NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False)]
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf641.users = [NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False)]
]
op640_op641.snodes[0] =
op640: SchedulerNode(ComputedBuffer)
op640.writes = [MemoryDep('buf640', c0, {c0: 8}, None)]
op640.unmet_dependencies = 
    [   MemoryDep('buf637', c0, {c0: 80}, None),
        MemoryDep('buf638', c0, {c0: 80}, None),
        MemoryDep('buf639', c0, {c0: 80}, None)]
op640.met_dependencies = []
op640.outputs = [
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf640.users = [NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False)]
]
op640.group.device = cuda:0
op640.group.iteration = (8, 10)
op640.sizes = ([8], [10])
buf637_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf638_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf639_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op640_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf637', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf638', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf639', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf640', get_index_3, getitem)
        return store_reduction
op640_op641.snodes[1] =
op641: SchedulerNode(ComputedBuffer)
op641.writes = [MemoryDep('buf641', c0, {c0: 8}, None)]
op641.unmet_dependencies = 
    [   MemoryDep('buf637', c0, {c0: 80}, None),
        MemoryDep('buf638', c0, {c0: 80}, None),
        MemoryDep('buf639', c0, {c0: 80}, None)]
op641.met_dependencies = []
op641.outputs = [
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf641.users = [NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False)]
]
op641.group.device = cuda:0
op641.group.iteration = (8, 10)
op641.sizes = ([8], [10])
buf637_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf638_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf639_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf641_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op641_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf637', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf638', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf639', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf641', get_index_3, getitem_1)
        return store_reduction


op643: SchedulerNode(ComputedBuffer)
op643.writes = [MemoryDep('buf643', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op643.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 602112}, None),
        MemoryDep('buf640', c0, {c0: 8}, None),
        MemoryDep('buf641', c0, {c0: 8}, None)]
op643.met_dependencies = 
    [   MemoryDep('arg290_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg291_1', c1, {c0: 8, c1: 384}, None)]
op643.outputs = [
    buf643: ComputedBuffer
    buf643.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf643.users = [NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False)]
]
op643.group.device = cuda:0
op643.group.iteration = (602112, 1)
op643.sizes = ([8, 384, 196], [])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf641_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op643_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf640', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf641', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg290_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg291_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf643', get_index_5, add_1, None)
        return store


op644: ExternKernelSchedulerNode(ExternKernelAlloc)
op644.writes = [StarDep(name='buf644', mode=None)]
op644.unmet_dependencies = [StarDep(name='buf643', mode=None)]
op644.met_dependencies = [StarDep(name='arg292_1', mode=None)]
op644.outputs = [
    buf644: ExternKernelAlloc
    buf644.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf644.users = [NodeUser(node=SchedulerNode(name='op645'), can_inplace=True, is_weak=False)]
]
op644.node.kernel = extern_kernels.convolution


op645: SchedulerNode(ComputedBuffer)
op645.writes = [MemoryDep('buf645', c0, {c0: 2408448}, None)]
op645.unmet_dependencies = [MemoryDep('buf644', c0, {c0: 2408448}, None)]
op645.met_dependencies = [MemoryDep('arg293_1', c1, {c0: 1568, c1: 1536}, None)]
op645.outputs = [
    buf645: ComputedBuffer
    buf645.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf645.users = [NodeUser(node=ExternKernelSchedulerNode(name='op646'), can_inplace=False, is_weak=False)]
]
op645.group.device = cuda:0
op645.group.iteration = (2408448, 1)
op645.sizes = ([1568, 1536], [])
buf644_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf645_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op645_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg293_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf644', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg293_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf645', get_index_4, mul_2, None)
        return store


op646: ExternKernelSchedulerNode(ExternKernelAlloc)
op646.writes = [StarDep(name='buf646', mode=None)]
op646.unmet_dependencies = [StarDep(name='buf645', mode=None)]
op646.met_dependencies = [StarDep(name='arg294_1', mode=None)]
op646.outputs = [
    buf646: ExternKernelAlloc
    buf646.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf646.users = [
        NodeUser(node=SchedulerNode(name='op647'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op649'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op658'), can_inplace=False, is_weak=False),
    ]
]
op646.node.kernel = extern_kernels.convolution


op647_op648_op649: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op647_op648_op649.writes = 
    [   MemoryDep('buf647', c0, {c0: 4720}, None),
        MemoryDep('buf648', c0, {c0: 4720}, None),
        MemoryDep('buf649', c0, {c0: 4720}, None)]
op647_op648_op649.unmet_dependencies = 
    [   MemoryDep('buf636', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf646', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op647_op648_op649.met_dependencies = 
    [   MemoryDep('arg295_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg296_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op647_op648_op649.outputs = [
    buf647: ComputedBuffer
    buf647.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf647.users = [
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
    ]
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf648.users = [
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
    ]
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf649.users = [
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
    ]
]
op647_op648_op649.snodes[0] =
op647: SchedulerNode(ComputedBuffer)
op647.writes = [MemoryDep('buf647', c0, {c0: 4720}, None)]
op647.unmet_dependencies = 
    [   MemoryDep('buf636', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf646', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op647.met_dependencies = 
    [   MemoryDep('arg295_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg296_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op647.outputs = [
    buf647: ComputedBuffer
    buf647.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf647.users = [
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
    ]
]
op647.group.device = cuda:0
op647.group.iteration = (4720, 128)
op647.sizes = ([8, 10, 59], [128])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf647_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op647_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf647', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf646', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg295_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg296_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op647_op648_op649.snodes[1] =
op648: SchedulerNode(ComputedBuffer)
op648.writes = [MemoryDep('buf648', c0, {c0: 4720}, None)]
op648.unmet_dependencies = 
    [   MemoryDep('buf636', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf646', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op648.met_dependencies = 
    [   MemoryDep('arg295_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg296_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op648.outputs = [
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf648.users = [
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
    ]
]
op648.group.device = cuda:0
op648.group.iteration = (4720, 128)
op648.sizes = ([8, 10, 59], [128])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf648_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op648_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf648', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf646', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg295_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg296_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op647_op648_op649.snodes[2] =
op649: SchedulerNode(ComputedBuffer)
op649.writes = [MemoryDep('buf649', c0, {c0: 4720}, None)]
op649.unmet_dependencies = 
    [   MemoryDep('buf636', 75264*c0 + ModularIndexing(7527*c1 + c2, 1, 75264), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('buf646', 75264*c0 + 384*ModularIndexing(7527*c1 + c2, 1, 196) + ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op649.met_dependencies = 
    [   MemoryDep('arg295_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None),
        MemoryDep('arg296_1', ModularIndexing(7527*c1 + c2, 196, 384), {c0: 8, c1: 10, c2: 7552}, None)]
op649.outputs = [
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
    buf649.users = [
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op652'), can_inplace=False, is_weak=False),
    ]
]
op649.group.device = cuda:0
op649.group.iteration = (4720, 128)
op649.sizes = ([8, 10, 59], [128])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf649_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
class op649_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 75264*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 75264)
    index3 = 75264*z0 + 384*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 196) + ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 196, 384)
    index5 = 590*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf649', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf646', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg295_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg296_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op650_op651_op652: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op650_op651_op652.writes = 
    [   MemoryDep('buf650', c0, {c0: 80}, None),
        MemoryDep('buf651', c0, {c0: 80}, None),
        MemoryDep('buf652', c0, {c0: 80}, None)]
op650_op651_op652.unmet_dependencies = 
    [   MemoryDep('buf647', c0, {c0: 4720}, None),
        MemoryDep('buf648', c0, {c0: 4720}, None),
        MemoryDep('buf649', c0, {c0: 4720}, None)]
op650_op651_op652.met_dependencies = []
op650_op651_op652.outputs = [
    buf650: ComputedBuffer
    buf650.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf650.users = [
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False),
    ]
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf651.users = [
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False),
    ]
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf652.users = [
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False),
    ]
]
op650_op651_op652.snodes[0] =
op650: SchedulerNode(ComputedBuffer)
op650.writes = [MemoryDep('buf650', c0, {c0: 80}, None)]
op650.unmet_dependencies = 
    [   MemoryDep('buf647', c0, {c0: 4720}, None),
        MemoryDep('buf648', c0, {c0: 4720}, None),
        MemoryDep('buf649', c0, {c0: 4720}, None)]
op650.met_dependencies = []
op650.outputs = [
    buf650: ComputedBuffer
    buf650.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf650.users = [
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False),
    ]
]
op650.group.device = cuda:0
op650.group.iteration = (80, 59)
op650.sizes = ([80], [59])
buf647_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf648_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf649_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf650_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op650_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf647', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf648', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf649', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf650', get_index_3, getitem)
        return store_reduction
op650_op651_op652.snodes[1] =
op651: SchedulerNode(ComputedBuffer)
op651.writes = [MemoryDep('buf651', c0, {c0: 80}, None)]
op651.unmet_dependencies = 
    [   MemoryDep('buf647', c0, {c0: 4720}, None),
        MemoryDep('buf648', c0, {c0: 4720}, None),
        MemoryDep('buf649', c0, {c0: 4720}, None)]
op651.met_dependencies = []
op651.outputs = [
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf651.users = [
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False),
    ]
]
op651.group.device = cuda:0
op651.group.iteration = (80, 59)
op651.sizes = ([80], [59])
buf647_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf648_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf649_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op651_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf647', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf648', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf649', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf651', get_index_3, getitem_1)
        return store_reduction
op650_op651_op652.snodes[2] =
op652: SchedulerNode(ComputedBuffer)
op652.writes = [MemoryDep('buf652', c0, {c0: 80}, None)]
op652.unmet_dependencies = 
    [   MemoryDep('buf647', c0, {c0: 4720}, None),
        MemoryDep('buf648', c0, {c0: 4720}, None),
        MemoryDep('buf649', c0, {c0: 4720}, None)]
op652.met_dependencies = []
op652.outputs = [
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf652.users = [
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False),
    ]
]
op652.group.device = cuda:0
op652.group.iteration = (80, 59)
op652.sizes = ([80], [59])
buf647_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf648_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf649_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10, 59], stride=[590, 4736, 4736, 4736, 59, 1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op652_loop_body:
    var_ranges = {z0: 80, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf647', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf648', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf649', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf652', get_index_3, getitem_2)
        return store_reduction


op653_op654: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op653_op654.writes = [MemoryDep('buf653', c0, {c0: 8}, None), MemoryDep('buf654', c0, {c0: 8}, None)]
op653_op654.unmet_dependencies = 
    [   MemoryDep('buf650', c0, {c0: 80}, None),
        MemoryDep('buf651', c0, {c0: 80}, None),
        MemoryDep('buf652', c0, {c0: 80}, None)]
op653_op654.met_dependencies = []
op653_op654.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf653.users = [NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf654.users = [NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
]
op653_op654.snodes[0] =
op653: SchedulerNode(ComputedBuffer)
op653.writes = [MemoryDep('buf653', c0, {c0: 8}, None)]
op653.unmet_dependencies = 
    [   MemoryDep('buf650', c0, {c0: 80}, None),
        MemoryDep('buf651', c0, {c0: 80}, None),
        MemoryDep('buf652', c0, {c0: 80}, None)]
op653.met_dependencies = []
op653.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf653.users = [NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
]
op653.group.device = cuda:0
op653.group.iteration = (8, 10)
op653.sizes = ([8], [10])
buf650_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op653_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf651', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf652', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf653', get_index_3, getitem)
        return store_reduction
op653_op654.snodes[1] =
op654: SchedulerNode(ComputedBuffer)
op654.writes = [MemoryDep('buf654', c0, {c0: 8}, None)]
op654.unmet_dependencies = 
    [   MemoryDep('buf650', c0, {c0: 80}, None),
        MemoryDep('buf651', c0, {c0: 80}, None),
        MemoryDep('buf652', c0, {c0: 80}, None)]
op654.met_dependencies = []
op654.outputs = [
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf654.users = [NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
]
op654.group.device = cuda:0
op654.group.iteration = (8, 10)
op654.sizes = ([8], [10])
buf650_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf654_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op654_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf651', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf652', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf654', get_index_3, getitem_1)
        return store_reduction


op656: SchedulerNode(ComputedBuffer)
op656.writes = [MemoryDep('buf656', c0, {c0: 602112}, None)]
op656.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 602112}, None),
        MemoryDep('buf646', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf653', c0, {c0: 8}, None),
        MemoryDep('buf654', c0, {c0: 8}, None)]
op656.met_dependencies = 
    [   MemoryDep('arg295_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg296_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg297_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg298_1', c1, {c0: 8, c1: 384}, None)]
op656.outputs = [
    buf656: ComputedBuffer
    buf656.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf656.users = [
        NodeUser(node=SchedulerNode(name='op657'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op658'), can_inplace=True, is_weak=False),
    ]
]
op656.group.device = cuda:0
op656.group.iteration = (602112, 1)
op656.sizes = ([8, 384, 196], [])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf654_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op656_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf646', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg295_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg296_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf653', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf654', get_index_5)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg297_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg298_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf656', get_index_8, add_3, None)
        return store


op657_op658: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op657_op658.writes = 
    [   MemoryDep('buf657', c0, {c0: 602112}, None),
        MemoryDep('buf658', c0, {c0: 602112}, None)]
op657_op658.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 602112}, None),
        MemoryDep('buf646', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf656', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf656', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf656', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf656', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf656', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf656', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf656', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf656', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf656', c0, {c0: 602112}, None)]
op657_op658.met_dependencies = 
    [   MemoryDep('arg295_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg296_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg299_1', c1, {c0: 8, c1: 384}, None)]
op657_op658.outputs = [
    buf657: ComputedBuffer
    buf657.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf657.users = [NodeUser(node=SchedulerNode(name='op658'), can_inplace=True, is_weak=False)]
    buf658: ComputedBuffer
    buf658.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf658.users = [
        NodeUser(node=SchedulerNode(name='op659'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op660'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False),
    ]
]
op657_op658.snodes[0] =
op657: SchedulerNode(ComputedBuffer)
op657.writes = [MemoryDep('buf657', c0, {c0: 602112}, None)]
op657.unmet_dependencies = 
    [   MemoryDep('buf656', c0 + 1, {c0: 602112}, None),
        MemoryDep('buf656', c0 + 13, {c0: 602112}, None),
        MemoryDep('buf656', c0 + 14, {c0: 602112}, None),
        MemoryDep('buf656', c0 + 15, {c0: 602112}, None),
        MemoryDep('buf656', c0 - 1, {c0: 602112}, None),
        MemoryDep('buf656', c0 - 13, {c0: 602112}, None),
        MemoryDep('buf656', c0 - 14, {c0: 602112}, None),
        MemoryDep('buf656', c0 - 15, {c0: 602112}, None),
        MemoryDep('buf656', c0, {c0: 602112}, None)]
op657.met_dependencies = []
op657.outputs = [
    buf657: ComputedBuffer
    buf657.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf657.users = [NodeUser(node=SchedulerNode(name='op658'), can_inplace=True, is_weak=False)]
]
op657.group.device = cuda:0
op657.group.iteration = (602112, 1)
op657.sizes = ([3072, 14, 14], [])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf657_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op657_loop_body:
    var_ranges = {z0: 3072, z1: 14, z2: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 196*z0 + 14*z1 + z2 - 15
    index3 = z2
    index4 = 196*z0 + 14*z1 + z2 - 14
    index5 = z2 + 1
    index6 = 196*z0 + 14*z1 + z2 - 13
    index7 = z1
    index8 = 196*z0 + 14*z1 + z2 - 1
    index9 = 196*z0 + 14*z1 + z2
    index10 = 196*z0 + 14*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 196*z0 + 14*z1 + z2 + 13
    index13 = 196*z0 + 14*z1 + z2 + 14
    index14 = 196*z0 + 14*z1 + z2 + 15
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(14, z2 + 2) - Max(0, z2 - 1)*Min(14, z1 + 2) + Min(14, z1 + 2)*Min(14, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf657', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf656', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf656', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf656', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf656', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf656', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf656', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf656', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf656', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf656', get_index)
        return load
op657_op658.snodes[1] =
op658: SchedulerNode(ComputedBuffer)
op658.writes = [MemoryDep('buf658', c0, {c0: 602112}, None)]
op658.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 602112}, None),
        MemoryDep('buf646', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None),
        MemoryDep('buf656', c0, {c0: 602112}, None),
        MemoryDep('buf657', c0, {c0: 602112}, None)]
op658.met_dependencies = 
    [   MemoryDep('arg295_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg296_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg299_1', c1, {c0: 8, c1: 384}, None)]
op658.outputs = [
    buf658: ComputedBuffer
    buf658.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
    buf658.users = [
        NodeUser(node=SchedulerNode(name='op659'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op660'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False),
    ]
]
op658.group.device = cuda:0
op658.group.iteration = (602112, 1)
op658.sizes = ([8, 384, 196], [])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf657_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf658_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
class op658_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = 75264*z0 + z1 + 384*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf646', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg295_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg296_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf657', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf656', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg299_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf658', get_index_7, add_2, None)
        return store


op659_op660_op661: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op659_op660_op661.writes = 
    [   MemoryDep('buf659', c0, {c0: 80}, None),
        MemoryDep('buf660', c0, {c0: 80}, None),
        MemoryDep('buf661', c0, {c0: 80}, None)]
op659_op660_op661.unmet_dependencies = [   MemoryDep('buf658', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op659_op660_op661.met_dependencies = []
op659_op660_op661.outputs = [
    buf659: ComputedBuffer
    buf659.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf659.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
    ]
    buf660: ComputedBuffer
    buf660.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf660.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
    ]
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf661.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
    ]
]
op659_op660_op661.snodes[0] =
op659: SchedulerNode(ComputedBuffer)
op659.writes = [MemoryDep('buf659', c0, {c0: 80}, None)]
op659.unmet_dependencies = [   MemoryDep('buf658', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op659.met_dependencies = []
op659.outputs = [
    buf659: ComputedBuffer
    buf659.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf659.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
    ]
]
op659.group.device = cuda:0
op659.group.iteration = (80, 7527)
op659.sizes = ([8, 10], [7527])
buf658_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf659_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op659_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf659', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf658', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op659_op660_op661.snodes[1] =
op660: SchedulerNode(ComputedBuffer)
op660.writes = [MemoryDep('buf660', c0, {c0: 80}, None)]
op660.unmet_dependencies = [   MemoryDep('buf658', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op660.met_dependencies = []
op660.outputs = [
    buf660: ComputedBuffer
    buf660.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf660.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
    ]
]
op660.group.device = cuda:0
op660.group.iteration = (80, 7527)
op660.sizes = ([8, 10], [7527])
buf658_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf660_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op660_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf660', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf658', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op659_op660_op661.snodes[2] =
op661: SchedulerNode(ComputedBuffer)
op661.writes = [MemoryDep('buf661', c0, {c0: 80}, None)]
op661.unmet_dependencies = [   MemoryDep('buf658', 75264*c0 + ModularIndexing(c1, 1, 75264), {c0: 8, c1: 75270}, None)]
op661.met_dependencies = []
op661.outputs = [
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
    buf661.users = [
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
    ]
]
op661.group.device = cuda:0
op661.group.iteration = (80, 7527)
op661.sizes = ([8, 10], [7527])
buf658_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf661_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
class op661_loop_body:
    var_ranges = {z0: 8, z1: 10, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 75264*z0 + ModularIndexing(7527*z1 + z2, 1, 75264)
    index2 = 10*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(75264, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(75264, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(75264, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf661', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf658', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op662_op663: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op662_op663.writes = [MemoryDep('buf662', c0, {c0: 8}, None), MemoryDep('buf663', c0, {c0: 8}, None)]
op662_op663.unmet_dependencies = 
    [   MemoryDep('buf659', c0, {c0: 80}, None),
        MemoryDep('buf660', c0, {c0: 80}, None),
        MemoryDep('buf661', c0, {c0: 80}, None)]
op662_op663.met_dependencies = []
op662_op663.outputs = [
    buf662: ComputedBuffer
    buf662.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf662.users = [NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf663.users = [NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op662_op663.snodes[0] =
op662: SchedulerNode(ComputedBuffer)
op662.writes = [MemoryDep('buf662', c0, {c0: 8}, None)]
op662.unmet_dependencies = 
    [   MemoryDep('buf659', c0, {c0: 80}, None),
        MemoryDep('buf660', c0, {c0: 80}, None),
        MemoryDep('buf661', c0, {c0: 80}, None)]
op662.met_dependencies = []
op662.outputs = [
    buf662: ComputedBuffer
    buf662.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf662.users = [NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op662.group.device = cuda:0
op662.group.iteration = (8, 10)
op662.sizes = ([8], [10])
buf659_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf660_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf661_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf662_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op662_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf659', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf660', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf661', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf662', get_index_3, getitem)
        return store_reduction
op662_op663.snodes[1] =
op663: SchedulerNode(ComputedBuffer)
op663.writes = [MemoryDep('buf663', c0, {c0: 8}, None)]
op663.unmet_dependencies = 
    [   MemoryDep('buf659', c0, {c0: 80}, None),
        MemoryDep('buf660', c0, {c0: 80}, None),
        MemoryDep('buf661', c0, {c0: 80}, None)]
op663.met_dependencies = []
op663.outputs = [
    buf663: ComputedBuffer
    buf663.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf663.users = [NodeUser(node=SchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op663.group.device = cuda:0
op663.group.iteration = (8, 10)
op663.sizes = ([8], [10])
buf659_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf660_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf661_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 10], stride=[10, 80, 80, 80, 1])
buf663_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op663_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf659', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf660', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf661', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf663', get_index_3, getitem_1)
        return store_reduction


op665: SchedulerNode(ComputedBuffer)
op665.writes = [MemoryDep('buf665', 75264*c0 + c1 + 384*c2, {c0: 8, c1: 384, c2: 196}, None)]
op665.unmet_dependencies = 
    [   MemoryDep('buf658', c0, {c0: 602112}, None),
        MemoryDep('buf662', c0, {c0: 8}, None),
        MemoryDep('buf663', c0, {c0: 8}, None)]
op665.met_dependencies = 
    [   MemoryDep('arg300_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg301_1', c1, {c0: 8, c1: 384}, None)]
op665.outputs = [
    buf665: ComputedBuffer
    buf665.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf665.users = [NodeUser(node=ExternKernelSchedulerNode(name='op666'), can_inplace=False, is_weak=False)]
]
op665.group.device = cuda:0
op665.group.iteration = (602112, 1)
op665.sizes = ([8, 384, 196], [])
buf658_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf662_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf663_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf665_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op665_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 196}
    index0 = 75264*z0 + 196*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 75264*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf658', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf662', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf663', get_index_2)
        constant = ops.constant(75264.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg300_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg301_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf665', get_index_5, add_1, None)
        return store


op666: ExternKernelSchedulerNode(ExternKernelAlloc)
op666.writes = [StarDep(name='buf666', mode=None)]
op666.unmet_dependencies = [StarDep(name='buf665', mode=None)]
op666.met_dependencies = [StarDep(name='arg302_1', mode=None)]
op666.outputs = [
    buf666: ExternKernelAlloc
    buf666.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf666.users = [NodeUser(node=SchedulerNode(name='op667'), can_inplace=True, is_weak=False)]
]
op666.node.kernel = extern_kernels.convolution


op667: SchedulerNode(ComputedBuffer)
op667.writes = [MemoryDep('buf667', c0, {c0: 2408448}, None)]
op667.unmet_dependencies = [MemoryDep('buf666', c0, {c0: 2408448}, None)]
op667.met_dependencies = [MemoryDep('arg303_1', c1, {c0: 1568, c1: 1536}, None)]
op667.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
    buf667.users = [NodeUser(node=ExternKernelSchedulerNode(name='op668'), can_inplace=False, is_weak=False)]
]
op667.group.device = cuda:0
op667.group.iteration = (2408448, 1)
op667.sizes = ([1568, 1536], [])
buf666_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf667_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=[301056, 1, 21504, 1536])
class op667_loop_body:
    var_ranges = {z0: 1568, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf666', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg303_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf666', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg303_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf667', get_index_4, mul_2, None)
        return store


op668: ExternKernelSchedulerNode(ExternKernelAlloc)
op668.writes = [StarDep(name='buf668', mode=None)]
op668.unmet_dependencies = [StarDep(name='buf667', mode=None)]
op668.met_dependencies = [StarDep(name='arg304_1', mode=None)]
op668.outputs = [
    buf668: ExternKernelAlloc
    buf668.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf668.users = [NodeUser(node=SchedulerNode(name='op669'), can_inplace=True, is_weak=False)]
]
op668.node.kernel = extern_kernels.convolution


op669: SchedulerNode(ComputedBuffer)
op669.writes = [MemoryDep('buf669', c0, {c0: 602112}, None)]
op669.unmet_dependencies = 
    [   MemoryDep('buf658', 75264*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf668', c0, {c0: 602112}, None)]
op669.met_dependencies = 
    [   MemoryDep('arg305_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg306_1', c1, {c0: 1568, c1: 384}, None)]
op669.outputs = [
    buf669: ComputedBuffer
    buf669.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
    buf669.users = [NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
]
op669.group.device = cuda:0
op669.group.iteration = (602112, 1)
op669.sizes = ([8, 196, 384], [])
buf658_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 196, 14, 1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf669_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 14, 14], stride=[75264, 1, 5376, 384])
class op669_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = 75264*z0 + z1 + 196*z2
    index1 = 75264*z0 + 384*z1 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf658', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf668', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg305_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg306_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf669', get_index_4, add_1, None)
        return store


op670: SchedulerNode(ComputedBuffer)
op670.writes = [MemoryDep('buf670', 3456*c0 + c1 + 384*c2, {c0: 768, c1: 384, c2: 9}, None)]
op670.unmet_dependencies = []
op670.met_dependencies = [MemoryDep('arg307_1', c0, {c0: 2654208}, None)]
op670.outputs = [
    buf670: ComputedBuffer
    buf670.layout = FixedLayout('cuda', torch.float32, size=[768, 384, 3, 3], stride=[3456, 1, 1152, 384])
    buf670.users = [NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
]
op670.group.device = cuda:0
op670.group.iteration = (2654208, 1)
op670.sizes = ([768, 384, 9], [])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[768, 384, 3, 3], stride=[3456, 9, 3, 1])
buf670_layout = FixedLayout('cuda', torch.float32, size=[768, 384, 3, 3], stride=[3456, 1, 1152, 384])
class op670_loop_body:
    var_ranges = {z0: 768, z1: 384, z2: 9}
    index0 = 3456*z0 + 9*z1 + z2
    index1 = 3456*z0 + z1 + 384*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg307_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf670', get_index_1, load, None)
        return store


op671: ExternKernelSchedulerNode(ExternKernelAlloc)
op671.writes = [StarDep(name='buf671', mode=None)]
op671.unmet_dependencies = [StarDep(name='buf669', mode=None), StarDep(name='buf670', mode=None)]
op671.met_dependencies = []
op671.outputs = [
    buf671: ExternKernelAlloc
    buf671.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf671.users = [
        NodeUser(node=SchedulerNode(name='op672'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op673'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op674'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op683'), can_inplace=False, is_weak=False),
    ]
]
op671.node.kernel = extern_kernels.convolution


op672_op673_op674: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op672_op673_op674.writes = 
    [   MemoryDep('buf672', c0, {c0: 2360}, None),
        MemoryDep('buf673', c0, {c0: 2360}, None),
        MemoryDep('buf674', c0, {c0: 2360}, None)]
op672_op673_op674.unmet_dependencies = [   MemoryDep('buf671', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op672_op673_op674.met_dependencies = [   MemoryDep('arg308_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op672_op673_op674.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf672.users = [
        NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
    ]
    buf673: ComputedBuffer
    buf673.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf673.users = [
        NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
    ]
    buf674: ComputedBuffer
    buf674.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf674.users = [
        NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
    ]
]
op672_op673_op674.snodes[0] =
op672: SchedulerNode(ComputedBuffer)
op672.writes = [MemoryDep('buf672', c0, {c0: 2360}, None)]
op672.unmet_dependencies = [   MemoryDep('buf671', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op672.met_dependencies = [   MemoryDep('arg308_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op672.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf672.users = [
        NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
    ]
]
op672.group.device = cuda:0
op672.group.iteration = (2360, 128)
op672.sizes = ([8, 5, 59], [128])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf672_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op672_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index3 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf672', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op672_op673_op674.snodes[1] =
op673: SchedulerNode(ComputedBuffer)
op673.writes = [MemoryDep('buf673', c0, {c0: 2360}, None)]
op673.unmet_dependencies = [   MemoryDep('buf671', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op673.met_dependencies = [   MemoryDep('arg308_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op673.outputs = [
    buf673: ComputedBuffer
    buf673.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf673.users = [
        NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
    ]
]
op673.group.device = cuda:0
op673.group.iteration = (2360, 128)
op673.sizes = ([8, 5, 59], [128])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf673_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op673_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index3 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf673', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op672_op673_op674.snodes[2] =
op674: SchedulerNode(ComputedBuffer)
op674.writes = [MemoryDep('buf674', c0, {c0: 2360}, None)]
op674.unmet_dependencies = [   MemoryDep('buf671', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op674.met_dependencies = [   MemoryDep('arg308_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op674.outputs = [
    buf674: ComputedBuffer
    buf674.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf674.users = [
        NodeUser(node=SchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op676'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
    ]
]
op674.group.device = cuda:0
op674.group.iteration = (2360, 128)
op674.sizes = ([8, 5, 59], [128])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op674_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index3 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf674', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op675_op676_op677: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op675_op676_op677.writes = 
    [   MemoryDep('buf675', c0, {c0: 40}, None),
        MemoryDep('buf676', c0, {c0: 40}, None),
        MemoryDep('buf677', c0, {c0: 40}, None)]
op675_op676_op677.unmet_dependencies = 
    [   MemoryDep('buf672', c0, {c0: 2360}, None),
        MemoryDep('buf673', c0, {c0: 2360}, None),
        MemoryDep('buf674', c0, {c0: 2360}, None)]
op675_op676_op677.met_dependencies = []
op675_op676_op677.outputs = [
    buf675: ComputedBuffer
    buf675.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf675.users = [
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
    ]
    buf676: ComputedBuffer
    buf676.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf676.users = [
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
    ]
    buf677: ComputedBuffer
    buf677.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf677.users = [
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
    ]
]
op675_op676_op677.snodes[0] =
op675: SchedulerNode(ComputedBuffer)
op675.writes = [MemoryDep('buf675', c0, {c0: 40}, None)]
op675.unmet_dependencies = 
    [   MemoryDep('buf672', c0, {c0: 2360}, None),
        MemoryDep('buf673', c0, {c0: 2360}, None),
        MemoryDep('buf674', c0, {c0: 2360}, None)]
op675.met_dependencies = []
op675.outputs = [
    buf675: ComputedBuffer
    buf675.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf675.users = [
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
    ]
]
op675.group.device = cuda:0
op675.group.iteration = (40, 59)
op675.sizes = ([40], [59])
buf672_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf673_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf675_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op675_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf672', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf673', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf674', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf675', get_index_3, getitem)
        return store_reduction
op675_op676_op677.snodes[1] =
op676: SchedulerNode(ComputedBuffer)
op676.writes = [MemoryDep('buf676', c0, {c0: 40}, None)]
op676.unmet_dependencies = 
    [   MemoryDep('buf672', c0, {c0: 2360}, None),
        MemoryDep('buf673', c0, {c0: 2360}, None),
        MemoryDep('buf674', c0, {c0: 2360}, None)]
op676.met_dependencies = []
op676.outputs = [
    buf676: ComputedBuffer
    buf676.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf676.users = [
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
    ]
]
op676.group.device = cuda:0
op676.group.iteration = (40, 59)
op676.sizes = ([40], [59])
buf672_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf673_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf676_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op676_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf672', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf673', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf674', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf676', get_index_3, getitem_1)
        return store_reduction
op675_op676_op677.snodes[2] =
op677: SchedulerNode(ComputedBuffer)
op677.writes = [MemoryDep('buf677', c0, {c0: 40}, None)]
op677.unmet_dependencies = 
    [   MemoryDep('buf672', c0, {c0: 2360}, None),
        MemoryDep('buf673', c0, {c0: 2360}, None),
        MemoryDep('buf674', c0, {c0: 2360}, None)]
op677.met_dependencies = []
op677.outputs = [
    buf677: ComputedBuffer
    buf677.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf677.users = [
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False),
    ]
]
op677.group.device = cuda:0
op677.group.iteration = (40, 59)
op677.sizes = ([40], [59])
buf672_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf673_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf677_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op677_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf672', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf673', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf674', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf677', get_index_3, getitem_2)
        return store_reduction


op678_op679: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op678_op679.writes = [MemoryDep('buf678', c0, {c0: 8}, None), MemoryDep('buf679', c0, {c0: 8}, None)]
op678_op679.unmet_dependencies = 
    [   MemoryDep('buf675', c0, {c0: 40}, None),
        MemoryDep('buf676', c0, {c0: 40}, None),
        MemoryDep('buf677', c0, {c0: 40}, None)]
op678_op679.met_dependencies = []
op678_op679.outputs = [
    buf678: ComputedBuffer
    buf678.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf678.users = [NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False)]
    buf679: ComputedBuffer
    buf679.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf679.users = [NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False)]
]
op678_op679.snodes[0] =
op678: SchedulerNode(ComputedBuffer)
op678.writes = [MemoryDep('buf678', c0, {c0: 8}, None)]
op678.unmet_dependencies = 
    [   MemoryDep('buf675', c0, {c0: 40}, None),
        MemoryDep('buf676', c0, {c0: 40}, None),
        MemoryDep('buf677', c0, {c0: 40}, None)]
op678.met_dependencies = []
op678.outputs = [
    buf678: ComputedBuffer
    buf678.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf678.users = [NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False)]
]
op678.group.device = cuda:0
op678.group.iteration = (8, 5)
op678.sizes = ([8], [5])
buf675_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf676_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf677_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op678_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf675', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf676', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf677', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf678', get_index_3, getitem)
        return store_reduction
op678_op679.snodes[1] =
op679: SchedulerNode(ComputedBuffer)
op679.writes = [MemoryDep('buf679', c0, {c0: 8}, None)]
op679.unmet_dependencies = 
    [   MemoryDep('buf675', c0, {c0: 40}, None),
        MemoryDep('buf676', c0, {c0: 40}, None),
        MemoryDep('buf677', c0, {c0: 40}, None)]
op679.met_dependencies = []
op679.outputs = [
    buf679: ComputedBuffer
    buf679.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf679.users = [NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False)]
]
op679.group.device = cuda:0
op679.group.iteration = (8, 5)
op679.sizes = ([8], [5])
buf675_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf676_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf677_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf679_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op679_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf675', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf676', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf677', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf679', get_index_3, getitem_1)
        return store_reduction


op681: SchedulerNode(ComputedBuffer)
op681.writes = [MemoryDep('buf681', c0, {c0: 301056}, None)]
op681.unmet_dependencies = 
    [   MemoryDep('buf671', c0, {c0: 301056}, None),
        MemoryDep('buf678', c0, {c0: 8}, None),
        MemoryDep('buf679', c0, {c0: 8}, None)]
op681.met_dependencies = 
    [   MemoryDep('arg308_1', c1, {c0: 392, c1: 768}, None),
        MemoryDep('arg309_1', c1, {c0: 392, c1: 768}, None),
        MemoryDep('arg310_1', c1, {c0: 392, c1: 768}, None)]
op681.outputs = [
    buf681: ComputedBuffer
    buf681.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf681.users = [
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op683'), can_inplace=False, is_weak=False),
    ]
]
op681.group.device = cuda:0
op681.group.iteration = (301056, 1)
op681.sizes = ([8, 49, 768], [])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf679_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op681_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 768}
    index0 = 37632*z0 + 768*z1 + z2
    index1 = z2
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf678', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf679', get_index_3)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg309_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg310_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf681', get_index_6, add_2, None)
        return store


op682_op683: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op682_op683.writes = 
    [   MemoryDep('buf682', c0, {c0: 301056}, None),
        MemoryDep('buf683', 37632*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 768}, None)]
op682_op683.unmet_dependencies = 
    [   MemoryDep('buf671', c0, {c0: 301056}, None),
        MemoryDep('buf681', c0 + 4608, {c0: 301056}, None),
        MemoryDep('buf681', c0 + 5376, {c0: 301056}, None),
        MemoryDep('buf681', c0 + 6144, {c0: 301056}, None),
        MemoryDep('buf681', c0 + 768, {c0: 301056}, None),
        MemoryDep('buf681', c0 - 4608, {c0: 301056}, None),
        MemoryDep('buf681', c0 - 5376, {c0: 301056}, None),
        MemoryDep('buf681', c0 - 6144, {c0: 301056}, None),
        MemoryDep('buf681', c0 - 768, {c0: 301056}, None),
        MemoryDep('buf681', c0, {c0: 301056}, None)]
op682_op683.met_dependencies = 
    [   MemoryDep('arg308_1', c1, {c0: 392, c1: 768}, None),
        MemoryDep('arg311_1', c1, {c0: 392, c1: 768}, None)]
op682_op683.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf682.users = [NodeUser(node=SchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
    buf683: ComputedBuffer
    buf683.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf683.users = [
        NodeUser(node=SchedulerNode(name='op684'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op685'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op703'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=True, is_weak=False),
    ]
]
op682_op683.snodes[0] =
op682: SchedulerNode(ComputedBuffer)
op682.writes = [MemoryDep('buf682', c0, {c0: 301056}, None)]
op682.unmet_dependencies = 
    [   MemoryDep('buf681', c0 + 4608, {c0: 301056}, None),
        MemoryDep('buf681', c0 + 5376, {c0: 301056}, None),
        MemoryDep('buf681', c0 + 6144, {c0: 301056}, None),
        MemoryDep('buf681', c0 + 768, {c0: 301056}, None),
        MemoryDep('buf681', c0 - 4608, {c0: 301056}, None),
        MemoryDep('buf681', c0 - 5376, {c0: 301056}, None),
        MemoryDep('buf681', c0 - 6144, {c0: 301056}, None),
        MemoryDep('buf681', c0 - 768, {c0: 301056}, None),
        MemoryDep('buf681', c0, {c0: 301056}, None)]
op682.met_dependencies = []
op682.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf682.users = [NodeUser(node=SchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
]
op682.group.device = cuda:0
op682.group.iteration = (301056, 1)
op682.sizes = ([8, 7, 7, 768], [])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf682_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op682_loop_body:
    var_ranges = {z0: 8, z1: 7, z2: 7, z3: 768}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 37632*z0 + 5376*z1 + 768*z2 + z3 - 6144
    index3 = z2
    index4 = 37632*z0 + 5376*z1 + 768*z2 + z3 - 5376
    index5 = z2 + 1
    index6 = 37632*z0 + 5376*z1 + 768*z2 + z3 - 4608
    index7 = z1
    index8 = 37632*z0 + 5376*z1 + 768*z2 + z3 - 768
    index9 = 37632*z0 + 5376*z1 + 768*z2 + z3
    index10 = 37632*z0 + 5376*z1 + 768*z2 + z3 + 768
    index11 = z1 + 1
    index12 = 37632*z0 + 5376*z1 + 768*z2 + z3 + 4608
    index13 = 37632*z0 + 5376*z1 + 768*z2 + z3 + 5376
    index14 = 37632*z0 + 5376*z1 + 768*z2 + z3 + 6144
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(7, z2 + 2) - Max(0, z2 - 1)*Min(7, z1 + 2) + Min(7, z1 + 2)*Min(7, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(7, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(7, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(7, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(7, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(7, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(7, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(7, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(7, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(7, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(7, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(7, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(7, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(7, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(7, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(7, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(7, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(7, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(7, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf682', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf681', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf681', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf681', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf681', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf681', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf681', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf681', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf681', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf681', get_index)
        return load
op682_op683.snodes[1] =
op683: SchedulerNode(ComputedBuffer)
op683.writes = [MemoryDep('buf683', 37632*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 768}, None)]
op683.unmet_dependencies = 
    [   MemoryDep('buf671', c0, {c0: 301056}, None),
        MemoryDep('buf681', c0, {c0: 301056}, None),
        MemoryDep('buf682', c0, {c0: 301056}, None)]
op683.met_dependencies = 
    [   MemoryDep('arg308_1', c1, {c0: 392, c1: 768}, None),
        MemoryDep('arg311_1', c1, {c0: 392, c1: 768}, None)]
op683.outputs = [
    buf683: ComputedBuffer
    buf683.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf683.users = [
        NodeUser(node=SchedulerNode(name='op684'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op685'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op686'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op703'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=True, is_weak=False),
    ]
]
op683.group.device = cuda:0
op683.group.iteration = (301056, 1)
op683.sizes = ([8, 49, 768], [])
buf671_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf682_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op683_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 768}
    index0 = 37632*z0 + 768*z1 + z2
    index1 = z2
    index2 = 37632*z0 + z1 + 49*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf682', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf681', get_index_3)
        sub = ops.sub(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg311_1', get_index_4)
        mul = ops.mul(sub, load_4)
        add_1 = ops.add(add, mul)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf683', get_index_5, add_1, None)
        return store


op684_op685_op686: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op684_op685_op686.writes = 
    [   MemoryDep('buf684', c0, {c0: 40}, None),
        MemoryDep('buf685', c0, {c0: 40}, None),
        MemoryDep('buf686', c0, {c0: 40}, None)]
op684_op685_op686.unmet_dependencies = [   MemoryDep('buf683', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op684_op685_op686.met_dependencies = []
op684_op685_op686.outputs = [
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf684.users = [
        NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
    ]
    buf685: ComputedBuffer
    buf685.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf685.users = [
        NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
    ]
    buf686: ComputedBuffer
    buf686.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf686.users = [
        NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
    ]
]
op684_op685_op686.snodes[0] =
op684: SchedulerNode(ComputedBuffer)
op684.writes = [MemoryDep('buf684', c0, {c0: 40}, None)]
op684.unmet_dependencies = [   MemoryDep('buf683', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op684.met_dependencies = []
op684.outputs = [
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf684.users = [
        NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
    ]
]
op684.group.device = cuda:0
op684.group.iteration = (40, 7527)
op684.sizes = ([8, 5], [7527])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf684_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op684_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf684', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf683', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op684_op685_op686.snodes[1] =
op685: SchedulerNode(ComputedBuffer)
op685.writes = [MemoryDep('buf685', c0, {c0: 40}, None)]
op685.unmet_dependencies = [   MemoryDep('buf683', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op685.met_dependencies = []
op685.outputs = [
    buf685: ComputedBuffer
    buf685.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf685.users = [
        NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
    ]
]
op685.group.device = cuda:0
op685.group.iteration = (40, 7527)
op685.sizes = ([8, 5], [7527])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf685_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op685_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf685', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf683', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op684_op685_op686.snodes[2] =
op686: SchedulerNode(ComputedBuffer)
op686.writes = [MemoryDep('buf686', c0, {c0: 40}, None)]
op686.unmet_dependencies = [   MemoryDep('buf683', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op686.met_dependencies = []
op686.outputs = [
    buf686: ComputedBuffer
    buf686.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf686.users = [
        NodeUser(node=SchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op689'), can_inplace=False, is_weak=False),
    ]
]
op686.group.device = cuda:0
op686.group.iteration = (40, 7527)
op686.sizes = ([8, 5], [7527])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf686_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op686_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf686', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf683', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op687_op688: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op687_op688.writes = [MemoryDep('buf687', c0, {c0: 8}, None), MemoryDep('buf688', c0, {c0: 8}, None)]
op687_op688.unmet_dependencies = 
    [   MemoryDep('buf684', c0, {c0: 40}, None),
        MemoryDep('buf685', c0, {c0: 40}, None),
        MemoryDep('buf686', c0, {c0: 40}, None)]
op687_op688.met_dependencies = []
op687_op688.outputs = [
    buf687: ComputedBuffer
    buf687.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf687.users = [NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
    buf688: ComputedBuffer
    buf688.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf688.users = [NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
]
op687_op688.snodes[0] =
op687: SchedulerNode(ComputedBuffer)
op687.writes = [MemoryDep('buf687', c0, {c0: 8}, None)]
op687.unmet_dependencies = 
    [   MemoryDep('buf684', c0, {c0: 40}, None),
        MemoryDep('buf685', c0, {c0: 40}, None),
        MemoryDep('buf686', c0, {c0: 40}, None)]
op687.met_dependencies = []
op687.outputs = [
    buf687: ComputedBuffer
    buf687.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf687.users = [NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
]
op687.group.device = cuda:0
op687.group.iteration = (8, 5)
op687.sizes = ([8], [5])
buf684_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf685_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf686_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf687_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op687_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf684', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf685', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf686', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf687', get_index_3, getitem)
        return store_reduction
op687_op688.snodes[1] =
op688: SchedulerNode(ComputedBuffer)
op688.writes = [MemoryDep('buf688', c0, {c0: 8}, None)]
op688.unmet_dependencies = 
    [   MemoryDep('buf684', c0, {c0: 40}, None),
        MemoryDep('buf685', c0, {c0: 40}, None),
        MemoryDep('buf686', c0, {c0: 40}, None)]
op688.met_dependencies = []
op688.outputs = [
    buf688: ComputedBuffer
    buf688.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf688.users = [NodeUser(node=SchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
]
op688.group.device = cuda:0
op688.group.iteration = (8, 5)
op688.sizes = ([8], [5])
buf684_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf685_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf686_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf688_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op688_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf684', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf685', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf686', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf688', get_index_3, getitem_1)
        return store_reduction


op690: SchedulerNode(ComputedBuffer)
op690.writes = [MemoryDep('buf690', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None)]
op690.unmet_dependencies = 
    [   MemoryDep('buf683', c0, {c0: 301056}, None),
        MemoryDep('buf687', c0, {c0: 8}, None),
        MemoryDep('buf688', c0, {c0: 8}, None)]
op690.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg313_1', c1, {c0: 8, c1: 768}, None)]
op690.outputs = [
    buf690: ComputedBuffer
    buf690.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf690.users = [NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False)]
]
op690.group.device = cuda:0
op690.group.iteration = (301056, 1)
op690.sizes = ([8, 768, 49], [])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf687_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf688_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf690_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op690_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 37632*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf687', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf688', get_index_2)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg312_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg313_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf690', get_index_5, add_1, None)
        return store


op691: ExternKernelSchedulerNode(ExternKernelAlloc)
op691.writes = [StarDep(name='buf691', mode=None)]
op691.unmet_dependencies = [StarDep(name='buf690', mode=None)]
op691.met_dependencies = [StarDep(name='arg314_1', mode=None)]
op691.outputs = [
    buf691: ExternKernelAlloc
    buf691.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf691.users = [NodeUser(node=SchedulerNode(name='op692'), can_inplace=True, is_weak=False)]
]
op691.node.kernel = extern_kernels.convolution


op692: SchedulerNode(ComputedBuffer)
op692.writes = [MemoryDep('buf692', c0, {c0: 1204224}, None)]
op692.unmet_dependencies = [MemoryDep('buf691', c0, {c0: 1204224}, None)]
op692.met_dependencies = [MemoryDep('arg315_1', c1, {c0: 392, c1: 3072}, None)]
op692.outputs = [
    buf692: ComputedBuffer
    buf692.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf692.users = [NodeUser(node=ExternKernelSchedulerNode(name='op693'), can_inplace=False, is_weak=False)]
]
op692.group.device = cuda:0
op692.group.iteration = (1204224, 1)
op692.sizes = ([392, 3072], [])
buf691_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf692_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
class op692_loop_body:
    var_ranges = {z0: 392, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf691', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg315_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf691', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg315_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf692', get_index_4, mul_2, None)
        return store


op693: ExternKernelSchedulerNode(ExternKernelAlloc)
op693.writes = [StarDep(name='buf693', mode=None)]
op693.unmet_dependencies = [StarDep(name='buf692', mode=None)]
op693.met_dependencies = [StarDep(name='arg316_1', mode=None)]
op693.outputs = [
    buf693: ExternKernelAlloc
    buf693.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf693.users = [
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False),
    ]
]
op693.node.kernel = extern_kernels.convolution


op694_op695_op696: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op694_op695_op696.writes = 
    [   MemoryDep('buf694', c0, {c0: 2360}, None),
        MemoryDep('buf695', c0, {c0: 2360}, None),
        MemoryDep('buf696', c0, {c0: 2360}, None)]
op694_op695_op696.unmet_dependencies = 
    [   MemoryDep('buf683', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf693', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op694_op695_op696.met_dependencies = 
    [   MemoryDep('arg317_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg318_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op694_op695_op696.outputs = [
    buf694: ComputedBuffer
    buf694.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf694.users = [
        NodeUser(node=SchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op699'), can_inplace=False, is_weak=False),
    ]
    buf695: ComputedBuffer
    buf695.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf695.users = [
        NodeUser(node=SchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op699'), can_inplace=False, is_weak=False),
    ]
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf696.users = [
        NodeUser(node=SchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op699'), can_inplace=False, is_weak=False),
    ]
]
op694_op695_op696.snodes[0] =
op694: SchedulerNode(ComputedBuffer)
op694.writes = [MemoryDep('buf694', c0, {c0: 2360}, None)]
op694.unmet_dependencies = 
    [   MemoryDep('buf683', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf693', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op694.met_dependencies = 
    [   MemoryDep('arg317_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg318_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op694.outputs = [
    buf694: ComputedBuffer
    buf694.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf694.users = [
        NodeUser(node=SchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op699'), can_inplace=False, is_weak=False),
    ]
]
op694.group.device = cuda:0
op694.group.iteration = (2360, 128)
op694.sizes = ([8, 5, 59], [128])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf694_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op694_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf694', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf693', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg317_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg318_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op694_op695_op696.snodes[1] =
op695: SchedulerNode(ComputedBuffer)
op695.writes = [MemoryDep('buf695', c0, {c0: 2360}, None)]
op695.unmet_dependencies = 
    [   MemoryDep('buf683', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf693', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op695.met_dependencies = 
    [   MemoryDep('arg317_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg318_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op695.outputs = [
    buf695: ComputedBuffer
    buf695.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf695.users = [
        NodeUser(node=SchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op699'), can_inplace=False, is_weak=False),
    ]
]
op695.group.device = cuda:0
op695.group.iteration = (2360, 128)
op695.sizes = ([8, 5, 59], [128])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf695_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op695_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf695', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf693', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg317_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg318_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op694_op695_op696.snodes[2] =
op696: SchedulerNode(ComputedBuffer)
op696.writes = [MemoryDep('buf696', c0, {c0: 2360}, None)]
op696.unmet_dependencies = 
    [   MemoryDep('buf683', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf693', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op696.met_dependencies = 
    [   MemoryDep('arg317_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg318_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op696.outputs = [
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf696.users = [
        NodeUser(node=SchedulerNode(name='op697'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op699'), can_inplace=False, is_weak=False),
    ]
]
op696.group.device = cuda:0
op696.group.iteration = (2360, 128)
op696.sizes = ([8, 5, 59], [128])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op696_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf696', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf693', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg317_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg318_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op697_op698_op699: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op697_op698_op699.writes = 
    [   MemoryDep('buf697', c0, {c0: 40}, None),
        MemoryDep('buf698', c0, {c0: 40}, None),
        MemoryDep('buf699', c0, {c0: 40}, None)]
op697_op698_op699.unmet_dependencies = 
    [   MemoryDep('buf694', c0, {c0: 2360}, None),
        MemoryDep('buf695', c0, {c0: 2360}, None),
        MemoryDep('buf696', c0, {c0: 2360}, None)]
op697_op698_op699.met_dependencies = []
op697_op698_op699.outputs = [
    buf697: ComputedBuffer
    buf697.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf697.users = [
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False),
    ]
    buf698: ComputedBuffer
    buf698.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf698.users = [
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False),
    ]
    buf699: ComputedBuffer
    buf699.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf699.users = [
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False),
    ]
]
op697_op698_op699.snodes[0] =
op697: SchedulerNode(ComputedBuffer)
op697.writes = [MemoryDep('buf697', c0, {c0: 40}, None)]
op697.unmet_dependencies = 
    [   MemoryDep('buf694', c0, {c0: 2360}, None),
        MemoryDep('buf695', c0, {c0: 2360}, None),
        MemoryDep('buf696', c0, {c0: 2360}, None)]
op697.met_dependencies = []
op697.outputs = [
    buf697: ComputedBuffer
    buf697.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf697.users = [
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False),
    ]
]
op697.group.device = cuda:0
op697.group.iteration = (40, 59)
op697.sizes = ([40], [59])
buf694_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf695_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf697_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op697_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf694', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf695', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf696', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf697', get_index_3, getitem)
        return store_reduction
op697_op698_op699.snodes[1] =
op698: SchedulerNode(ComputedBuffer)
op698.writes = [MemoryDep('buf698', c0, {c0: 40}, None)]
op698.unmet_dependencies = 
    [   MemoryDep('buf694', c0, {c0: 2360}, None),
        MemoryDep('buf695', c0, {c0: 2360}, None),
        MemoryDep('buf696', c0, {c0: 2360}, None)]
op698.met_dependencies = []
op698.outputs = [
    buf698: ComputedBuffer
    buf698.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf698.users = [
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False),
    ]
]
op698.group.device = cuda:0
op698.group.iteration = (40, 59)
op698.sizes = ([40], [59])
buf694_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf695_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op698_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf694', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf695', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf696', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf698', get_index_3, getitem_1)
        return store_reduction
op697_op698_op699.snodes[2] =
op699: SchedulerNode(ComputedBuffer)
op699.writes = [MemoryDep('buf699', c0, {c0: 40}, None)]
op699.unmet_dependencies = 
    [   MemoryDep('buf694', c0, {c0: 2360}, None),
        MemoryDep('buf695', c0, {c0: 2360}, None),
        MemoryDep('buf696', c0, {c0: 2360}, None)]
op699.met_dependencies = []
op699.outputs = [
    buf699: ComputedBuffer
    buf699.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf699.users = [
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False),
    ]
]
op699.group.device = cuda:0
op699.group.iteration = (40, 59)
op699.sizes = ([40], [59])
buf694_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf695_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf699_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op699_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf694', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf695', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf696', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf699', get_index_3, getitem_2)
        return store_reduction


op700_op701: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op700_op701.writes = [MemoryDep('buf700', c0, {c0: 8}, None), MemoryDep('buf701', c0, {c0: 8}, None)]
op700_op701.unmet_dependencies = 
    [   MemoryDep('buf697', c0, {c0: 40}, None),
        MemoryDep('buf698', c0, {c0: 40}, None),
        MemoryDep('buf699', c0, {c0: 40}, None)]
op700_op701.met_dependencies = []
op700_op701.outputs = [
    buf700: ComputedBuffer
    buf700.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf700.users = [NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
    buf701: ComputedBuffer
    buf701.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf701.users = [NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op700_op701.snodes[0] =
op700: SchedulerNode(ComputedBuffer)
op700.writes = [MemoryDep('buf700', c0, {c0: 8}, None)]
op700.unmet_dependencies = 
    [   MemoryDep('buf697', c0, {c0: 40}, None),
        MemoryDep('buf698', c0, {c0: 40}, None),
        MemoryDep('buf699', c0, {c0: 40}, None)]
op700.met_dependencies = []
op700.outputs = [
    buf700: ComputedBuffer
    buf700.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf700.users = [NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op700.group.device = cuda:0
op700.group.iteration = (8, 5)
op700.sizes = ([8], [5])
buf697_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf699_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op700_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf697', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf698', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf699', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf700', get_index_3, getitem)
        return store_reduction
op700_op701.snodes[1] =
op701: SchedulerNode(ComputedBuffer)
op701.writes = [MemoryDep('buf701', c0, {c0: 8}, None)]
op701.unmet_dependencies = 
    [   MemoryDep('buf697', c0, {c0: 40}, None),
        MemoryDep('buf698', c0, {c0: 40}, None),
        MemoryDep('buf699', c0, {c0: 40}, None)]
op701.met_dependencies = []
op701.outputs = [
    buf701: ComputedBuffer
    buf701.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf701.users = [NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False)]
]
op701.group.device = cuda:0
op701.group.iteration = (8, 5)
op701.sizes = ([8], [5])
buf697_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf699_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf701_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op701_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf697', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf698', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf699', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf701', get_index_3, getitem_1)
        return store_reduction


op703: SchedulerNode(ComputedBuffer)
op703.writes = [MemoryDep('buf703', c0, {c0: 301056}, None)]
op703.unmet_dependencies = 
    [   MemoryDep('buf683', c0, {c0: 301056}, None),
        MemoryDep('buf693', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf700', c0, {c0: 8}, None),
        MemoryDep('buf701', c0, {c0: 8}, None)]
op703.met_dependencies = 
    [   MemoryDep('arg317_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg318_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg319_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg320_1', c1, {c0: 8, c1: 768}, None)]
op703.outputs = [
    buf703: ComputedBuffer
    buf703.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf703.users = [
        NodeUser(node=SchedulerNode(name='op704'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=True, is_weak=False),
    ]
]
op703.group.device = cuda:0
op703.group.iteration = (301056, 1)
op703.sizes = ([8, 768, 49], [])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf701_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op703_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf693', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg317_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg318_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf700', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf701', get_index_5)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg319_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg320_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf703', get_index_8, add_3, None)
        return store


op704_op705: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op704_op705.writes = 
    [   MemoryDep('buf704', c0, {c0: 301056}, None),
        MemoryDep('buf705', c0, {c0: 301056}, None)]
op704_op705.unmet_dependencies = 
    [   MemoryDep('buf683', c0, {c0: 301056}, None),
        MemoryDep('buf693', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf703', c0 + 1, {c0: 301056}, None),
        MemoryDep('buf703', c0 + 6, {c0: 301056}, None),
        MemoryDep('buf703', c0 + 7, {c0: 301056}, None),
        MemoryDep('buf703', c0 + 8, {c0: 301056}, None),
        MemoryDep('buf703', c0 - 1, {c0: 301056}, None),
        MemoryDep('buf703', c0 - 6, {c0: 301056}, None),
        MemoryDep('buf703', c0 - 7, {c0: 301056}, None),
        MemoryDep('buf703', c0 - 8, {c0: 301056}, None),
        MemoryDep('buf703', c0, {c0: 301056}, None)]
op704_op705.met_dependencies = 
    [   MemoryDep('arg317_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg318_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg321_1', c1, {c0: 8, c1: 768}, None)]
op704_op705.outputs = [
    buf704: ComputedBuffer
    buf704.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf704.users = [NodeUser(node=SchedulerNode(name='op705'), can_inplace=True, is_weak=False)]
    buf705: ComputedBuffer
    buf705.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf705.users = [
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op707'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op708'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op727'), can_inplace=True, is_weak=False),
    ]
]
op704_op705.snodes[0] =
op704: SchedulerNode(ComputedBuffer)
op704.writes = [MemoryDep('buf704', c0, {c0: 301056}, None)]
op704.unmet_dependencies = 
    [   MemoryDep('buf703', c0 + 1, {c0: 301056}, None),
        MemoryDep('buf703', c0 + 6, {c0: 301056}, None),
        MemoryDep('buf703', c0 + 7, {c0: 301056}, None),
        MemoryDep('buf703', c0 + 8, {c0: 301056}, None),
        MemoryDep('buf703', c0 - 1, {c0: 301056}, None),
        MemoryDep('buf703', c0 - 6, {c0: 301056}, None),
        MemoryDep('buf703', c0 - 7, {c0: 301056}, None),
        MemoryDep('buf703', c0 - 8, {c0: 301056}, None),
        MemoryDep('buf703', c0, {c0: 301056}, None)]
op704.met_dependencies = []
op704.outputs = [
    buf704: ComputedBuffer
    buf704.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf704.users = [NodeUser(node=SchedulerNode(name='op705'), can_inplace=True, is_weak=False)]
]
op704.group.device = cuda:0
op704.group.iteration = (301056, 1)
op704.sizes = ([6144, 7, 7], [])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf704_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op704_loop_body:
    var_ranges = {z0: 6144, z1: 7, z2: 7}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 49*z0 + 7*z1 + z2 - 8
    index3 = z2
    index4 = 49*z0 + 7*z1 + z2 - 7
    index5 = z2 + 1
    index6 = 49*z0 + 7*z1 + z2 - 6
    index7 = z1
    index8 = 49*z0 + 7*z1 + z2 - 1
    index9 = 49*z0 + 7*z1 + z2
    index10 = 49*z0 + 7*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 49*z0 + 7*z1 + z2 + 6
    index13 = 49*z0 + 7*z1 + z2 + 7
    index14 = 49*z0 + 7*z1 + z2 + 8
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(7, z2 + 2) - Max(0, z2 - 1)*Min(7, z1 + 2) + Min(7, z1 + 2)*Min(7, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(7, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(7, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(7, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(7, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(7, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(7, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(7, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(7, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(7, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(7, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(7, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(7, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(7, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(7, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(7, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(7, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(7, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(7, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf704', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf703', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf703', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf703', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf703', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf703', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf703', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf703', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf703', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf703', get_index)
        return load
op704_op705.snodes[1] =
op705: SchedulerNode(ComputedBuffer)
op705.writes = [MemoryDep('buf705', c0, {c0: 301056}, None)]
op705.unmet_dependencies = 
    [   MemoryDep('buf683', c0, {c0: 301056}, None),
        MemoryDep('buf693', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf703', c0, {c0: 301056}, None),
        MemoryDep('buf704', c0, {c0: 301056}, None)]
op705.met_dependencies = 
    [   MemoryDep('arg317_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg318_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg321_1', c1, {c0: 8, c1: 768}, None)]
op705.outputs = [
    buf705: ComputedBuffer
    buf705.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf705.users = [
        NodeUser(node=SchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op707'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op708'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op727'), can_inplace=True, is_weak=False),
    ]
]
op705.group.device = cuda:0
op705.group.iteration = (301056, 1)
op705.sizes = ([8, 768, 49], [])
buf683_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf704_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op705_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf693', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg317_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg318_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf704', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf703', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg321_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf705', get_index_7, add_2, None)
        return store


op706_op707_op708: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op706_op707_op708.writes = 
    [   MemoryDep('buf706', c0, {c0: 40}, None),
        MemoryDep('buf707', c0, {c0: 40}, None),
        MemoryDep('buf708', c0, {c0: 40}, None)]
op706_op707_op708.unmet_dependencies = [   MemoryDep('buf705', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op706_op707_op708.met_dependencies = []
op706_op707_op708.outputs = [
    buf706: ComputedBuffer
    buf706.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf706.users = [
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
    ]
    buf707: ComputedBuffer
    buf707.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf707.users = [
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
    ]
    buf708: ComputedBuffer
    buf708.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf708.users = [
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
    ]
]
op706_op707_op708.snodes[0] =
op706: SchedulerNode(ComputedBuffer)
op706.writes = [MemoryDep('buf706', c0, {c0: 40}, None)]
op706.unmet_dependencies = [   MemoryDep('buf705', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op706.met_dependencies = []
op706.outputs = [
    buf706: ComputedBuffer
    buf706.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf706.users = [
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
    ]
]
op706.group.device = cuda:0
op706.group.iteration = (40, 7527)
op706.sizes = ([8, 5], [7527])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf706_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op706_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf706', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf705', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op706_op707_op708.snodes[1] =
op707: SchedulerNode(ComputedBuffer)
op707.writes = [MemoryDep('buf707', c0, {c0: 40}, None)]
op707.unmet_dependencies = [   MemoryDep('buf705', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op707.met_dependencies = []
op707.outputs = [
    buf707: ComputedBuffer
    buf707.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf707.users = [
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
    ]
]
op707.group.device = cuda:0
op707.group.iteration = (40, 7527)
op707.sizes = ([8, 5], [7527])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf707_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op707_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf707', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf705', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op706_op707_op708.snodes[2] =
op708: SchedulerNode(ComputedBuffer)
op708.writes = [MemoryDep('buf708', c0, {c0: 40}, None)]
op708.unmet_dependencies = [   MemoryDep('buf705', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op708.met_dependencies = []
op708.outputs = [
    buf708: ComputedBuffer
    buf708.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf708.users = [
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op711'), can_inplace=False, is_weak=False),
    ]
]
op708.group.device = cuda:0
op708.group.iteration = (40, 7527)
op708.sizes = ([8, 5], [7527])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf708_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op708_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf708', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf705', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op709_op710: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op709_op710.writes = [MemoryDep('buf709', c0, {c0: 8}, None), MemoryDep('buf710', c0, {c0: 8}, None)]
op709_op710.unmet_dependencies = 
    [   MemoryDep('buf706', c0, {c0: 40}, None),
        MemoryDep('buf707', c0, {c0: 40}, None),
        MemoryDep('buf708', c0, {c0: 40}, None)]
op709_op710.met_dependencies = []
op709_op710.outputs = [
    buf709: ComputedBuffer
    buf709.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf709.users = [NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
    buf710: ComputedBuffer
    buf710.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf710.users = [NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
]
op709_op710.snodes[0] =
op709: SchedulerNode(ComputedBuffer)
op709.writes = [MemoryDep('buf709', c0, {c0: 8}, None)]
op709.unmet_dependencies = 
    [   MemoryDep('buf706', c0, {c0: 40}, None),
        MemoryDep('buf707', c0, {c0: 40}, None),
        MemoryDep('buf708', c0, {c0: 40}, None)]
op709.met_dependencies = []
op709.outputs = [
    buf709: ComputedBuffer
    buf709.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf709.users = [NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
]
op709.group.device = cuda:0
op709.group.iteration = (8, 5)
op709.sizes = ([8], [5])
buf706_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf707_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf708_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf709_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op709_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf706', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf707', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf708', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf709', get_index_3, getitem)
        return store_reduction
op709_op710.snodes[1] =
op710: SchedulerNode(ComputedBuffer)
op710.writes = [MemoryDep('buf710', c0, {c0: 8}, None)]
op710.unmet_dependencies = 
    [   MemoryDep('buf706', c0, {c0: 40}, None),
        MemoryDep('buf707', c0, {c0: 40}, None),
        MemoryDep('buf708', c0, {c0: 40}, None)]
op710.met_dependencies = []
op710.outputs = [
    buf710: ComputedBuffer
    buf710.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf710.users = [NodeUser(node=SchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
]
op710.group.device = cuda:0
op710.group.iteration = (8, 5)
op710.sizes = ([8], [5])
buf706_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf707_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf708_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf710_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op710_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf706', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf707', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf708', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf710', get_index_3, getitem_1)
        return store_reduction


op712: SchedulerNode(ComputedBuffer)
op712.writes = [MemoryDep('buf712', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None)]
op712.unmet_dependencies = 
    [   MemoryDep('buf705', c0, {c0: 301056}, None),
        MemoryDep('buf709', c0, {c0: 8}, None),
        MemoryDep('buf710', c0, {c0: 8}, None)]
op712.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg323_1', c1, {c0: 8, c1: 768}, None)]
op712.outputs = [
    buf712: ComputedBuffer
    buf712.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf712.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op712.group.device = cuda:0
op712.group.iteration = (301056, 1)
op712.sizes = ([8, 768, 49], [])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf709_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf710_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf712_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op712_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 37632*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf705', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf709', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf710', get_index_2)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg322_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg323_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf712', get_index_5, add_1, None)
        return store


op713: ExternKernelSchedulerNode(ExternKernelAlloc)
op713.writes = [StarDep(name='buf713', mode=None)]
op713.unmet_dependencies = [StarDep(name='buf712', mode=None)]
op713.met_dependencies = [StarDep(name='arg324_1', mode=None)]
op713.outputs = [
    buf713: ExternKernelAlloc
    buf713.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf713.users = [NodeUser(node=SchedulerNode(name='op714'), can_inplace=True, is_weak=False)]
]
op713.node.kernel = extern_kernels.convolution


op714: SchedulerNode(ComputedBuffer)
op714.writes = [MemoryDep('buf714', c0, {c0: 1204224}, None)]
op714.unmet_dependencies = [MemoryDep('buf713', c0, {c0: 1204224}, None)]
op714.met_dependencies = [MemoryDep('arg325_1', c1, {c0: 392, c1: 3072}, None)]
op714.outputs = [
    buf714: ComputedBuffer
    buf714.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf714.users = [NodeUser(node=ExternKernelSchedulerNode(name='op715'), can_inplace=False, is_weak=False)]
]
op714.group.device = cuda:0
op714.group.iteration = (1204224, 1)
op714.sizes = ([392, 3072], [])
buf713_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf714_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
class op714_loop_body:
    var_ranges = {z0: 392, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf713', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg325_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf713', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg325_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf714', get_index_4, mul_2, None)
        return store


op715: ExternKernelSchedulerNode(ExternKernelAlloc)
op715.writes = [StarDep(name='buf715', mode=None)]
op715.unmet_dependencies = [StarDep(name='buf714', mode=None)]
op715.met_dependencies = [StarDep(name='arg326_1', mode=None)]
op715.outputs = [
    buf715: ExternKernelAlloc
    buf715.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf715.users = [
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op727'), can_inplace=False, is_weak=False),
    ]
]
op715.node.kernel = extern_kernels.convolution


op716_op717_op718: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op716_op717_op718.writes = 
    [   MemoryDep('buf716', c0, {c0: 2360}, None),
        MemoryDep('buf717', c0, {c0: 2360}, None),
        MemoryDep('buf718', c0, {c0: 2360}, None)]
op716_op717_op718.unmet_dependencies = 
    [   MemoryDep('buf705', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf715', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op716_op717_op718.met_dependencies = 
    [   MemoryDep('arg327_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg328_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op716_op717_op718.outputs = [
    buf716: ComputedBuffer
    buf716.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf716.users = [
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=False, is_weak=False),
    ]
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf717.users = [
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=False, is_weak=False),
    ]
    buf718: ComputedBuffer
    buf718.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf718.users = [
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=False, is_weak=False),
    ]
]
op716_op717_op718.snodes[0] =
op716: SchedulerNode(ComputedBuffer)
op716.writes = [MemoryDep('buf716', c0, {c0: 2360}, None)]
op716.unmet_dependencies = 
    [   MemoryDep('buf705', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf715', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op716.met_dependencies = 
    [   MemoryDep('arg327_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg328_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op716.outputs = [
    buf716: ComputedBuffer
    buf716.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf716.users = [
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=False, is_weak=False),
    ]
]
op716.group.device = cuda:0
op716.group.iteration = (2360, 128)
op716.sizes = ([8, 5, 59], [128])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf715_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf716_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op716_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf716', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf705', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf715', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg327_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg328_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op716_op717_op718.snodes[1] =
op717: SchedulerNode(ComputedBuffer)
op717.writes = [MemoryDep('buf717', c0, {c0: 2360}, None)]
op717.unmet_dependencies = 
    [   MemoryDep('buf705', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf715', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op717.met_dependencies = 
    [   MemoryDep('arg327_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg328_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op717.outputs = [
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf717.users = [
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=False, is_weak=False),
    ]
]
op717.group.device = cuda:0
op717.group.iteration = (2360, 128)
op717.sizes = ([8, 5, 59], [128])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf715_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf717_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op717_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf717', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf705', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf715', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg327_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg328_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op716_op717_op718.snodes[2] =
op718: SchedulerNode(ComputedBuffer)
op718.writes = [MemoryDep('buf718', c0, {c0: 2360}, None)]
op718.unmet_dependencies = 
    [   MemoryDep('buf705', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf715', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op718.met_dependencies = 
    [   MemoryDep('arg327_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg328_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op718.outputs = [
    buf718: ComputedBuffer
    buf718.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf718.users = [
        NodeUser(node=SchedulerNode(name='op719'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op720'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op721'), can_inplace=False, is_weak=False),
    ]
]
op718.group.device = cuda:0
op718.group.iteration = (2360, 128)
op718.sizes = ([8, 5, 59], [128])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf715_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf718_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op718_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf718', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf705', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf715', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg327_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg328_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op719_op720_op721: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op719_op720_op721.writes = 
    [   MemoryDep('buf719', c0, {c0: 40}, None),
        MemoryDep('buf720', c0, {c0: 40}, None),
        MemoryDep('buf721', c0, {c0: 40}, None)]
op719_op720_op721.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2360}, None),
        MemoryDep('buf717', c0, {c0: 2360}, None),
        MemoryDep('buf718', c0, {c0: 2360}, None)]
op719_op720_op721.met_dependencies = []
op719_op720_op721.outputs = [
    buf719: ComputedBuffer
    buf719.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf719.users = [
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
    ]
    buf720: ComputedBuffer
    buf720.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf720.users = [
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
    ]
    buf721: ComputedBuffer
    buf721.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf721.users = [
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
    ]
]
op719_op720_op721.snodes[0] =
op719: SchedulerNode(ComputedBuffer)
op719.writes = [MemoryDep('buf719', c0, {c0: 40}, None)]
op719.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2360}, None),
        MemoryDep('buf717', c0, {c0: 2360}, None),
        MemoryDep('buf718', c0, {c0: 2360}, None)]
op719.met_dependencies = []
op719.outputs = [
    buf719: ComputedBuffer
    buf719.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf719.users = [
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
    ]
]
op719.group.device = cuda:0
op719.group.iteration = (40, 59)
op719.sizes = ([40], [59])
buf716_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf717_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf718_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf719_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op719_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf717', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf718', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf719', get_index_3, getitem)
        return store_reduction
op719_op720_op721.snodes[1] =
op720: SchedulerNode(ComputedBuffer)
op720.writes = [MemoryDep('buf720', c0, {c0: 40}, None)]
op720.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2360}, None),
        MemoryDep('buf717', c0, {c0: 2360}, None),
        MemoryDep('buf718', c0, {c0: 2360}, None)]
op720.met_dependencies = []
op720.outputs = [
    buf720: ComputedBuffer
    buf720.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf720.users = [
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
    ]
]
op720.group.device = cuda:0
op720.group.iteration = (40, 59)
op720.sizes = ([40], [59])
buf716_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf717_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf718_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf720_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op720_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf717', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf718', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf720', get_index_3, getitem_1)
        return store_reduction
op719_op720_op721.snodes[2] =
op721: SchedulerNode(ComputedBuffer)
op721.writes = [MemoryDep('buf721', c0, {c0: 40}, None)]
op721.unmet_dependencies = 
    [   MemoryDep('buf716', c0, {c0: 2360}, None),
        MemoryDep('buf717', c0, {c0: 2360}, None),
        MemoryDep('buf718', c0, {c0: 2360}, None)]
op721.met_dependencies = []
op721.outputs = [
    buf721: ComputedBuffer
    buf721.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf721.users = [
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
    ]
]
op721.group.device = cuda:0
op721.group.iteration = (40, 59)
op721.sizes = ([40], [59])
buf716_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf717_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf718_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op721_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf717', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf718', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf721', get_index_3, getitem_2)
        return store_reduction


op722_op723: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op722_op723.writes = [MemoryDep('buf722', c0, {c0: 8}, None), MemoryDep('buf723', c0, {c0: 8}, None)]
op722_op723.unmet_dependencies = 
    [   MemoryDep('buf719', c0, {c0: 40}, None),
        MemoryDep('buf720', c0, {c0: 40}, None),
        MemoryDep('buf721', c0, {c0: 40}, None)]
op722_op723.met_dependencies = []
op722_op723.outputs = [
    buf722: ComputedBuffer
    buf722.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf722.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
    buf723: ComputedBuffer
    buf723.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf723.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
]
op722_op723.snodes[0] =
op722: SchedulerNode(ComputedBuffer)
op722.writes = [MemoryDep('buf722', c0, {c0: 8}, None)]
op722.unmet_dependencies = 
    [   MemoryDep('buf719', c0, {c0: 40}, None),
        MemoryDep('buf720', c0, {c0: 40}, None),
        MemoryDep('buf721', c0, {c0: 40}, None)]
op722.met_dependencies = []
op722.outputs = [
    buf722: ComputedBuffer
    buf722.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf722.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
]
op722.group.device = cuda:0
op722.group.iteration = (8, 5)
op722.sizes = ([8], [5])
buf719_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf720_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf722_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op722_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf719', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf720', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf721', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf722', get_index_3, getitem)
        return store_reduction
op722_op723.snodes[1] =
op723: SchedulerNode(ComputedBuffer)
op723.writes = [MemoryDep('buf723', c0, {c0: 8}, None)]
op723.unmet_dependencies = 
    [   MemoryDep('buf719', c0, {c0: 40}, None),
        MemoryDep('buf720', c0, {c0: 40}, None),
        MemoryDep('buf721', c0, {c0: 40}, None)]
op723.met_dependencies = []
op723.outputs = [
    buf723: ComputedBuffer
    buf723.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf723.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
]
op723.group.device = cuda:0
op723.group.iteration = (8, 5)
op723.sizes = ([8], [5])
buf719_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf720_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf723_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op723_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf719', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf720', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf721', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf723', get_index_3, getitem_1)
        return store_reduction


op725: SchedulerNode(ComputedBuffer)
op725.writes = [MemoryDep('buf725', c0, {c0: 301056}, None)]
op725.unmet_dependencies = 
    [   MemoryDep('buf705', c0, {c0: 301056}, None),
        MemoryDep('buf715', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf722', c0, {c0: 8}, None),
        MemoryDep('buf723', c0, {c0: 8}, None)]
op725.met_dependencies = 
    [   MemoryDep('arg327_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg328_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg329_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg330_1', c1, {c0: 8, c1: 768}, None)]
op725.outputs = [
    buf725: ComputedBuffer
    buf725.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf725.users = [
        NodeUser(node=SchedulerNode(name='op726'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op727'), can_inplace=True, is_weak=False),
    ]
]
op725.group.device = cuda:0
op725.group.iteration = (301056, 1)
op725.sizes = ([8, 768, 49], [])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf715_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf722_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf723_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op725_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf705', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf715', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg327_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg328_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf722', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf723', get_index_5)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg329_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg330_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf725', get_index_8, add_3, None)
        return store


op726_op727: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op726_op727.writes = 
    [   MemoryDep('buf726', c0, {c0: 301056}, None),
        MemoryDep('buf727', c0, {c0: 301056}, None)]
op726_op727.unmet_dependencies = 
    [   MemoryDep('buf705', c0, {c0: 301056}, None),
        MemoryDep('buf715', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf725', c0 + 1, {c0: 301056}, None),
        MemoryDep('buf725', c0 + 6, {c0: 301056}, None),
        MemoryDep('buf725', c0 + 7, {c0: 301056}, None),
        MemoryDep('buf725', c0 + 8, {c0: 301056}, None),
        MemoryDep('buf725', c0 - 1, {c0: 301056}, None),
        MemoryDep('buf725', c0 - 6, {c0: 301056}, None),
        MemoryDep('buf725', c0 - 7, {c0: 301056}, None),
        MemoryDep('buf725', c0 - 8, {c0: 301056}, None),
        MemoryDep('buf725', c0, {c0: 301056}, None)]
op726_op727.met_dependencies = 
    [   MemoryDep('arg327_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg328_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg331_1', c1, {c0: 8, c1: 768}, None)]
op726_op727.outputs = [
    buf726: ComputedBuffer
    buf726.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf726.users = [NodeUser(node=SchedulerNode(name='op727'), can_inplace=True, is_weak=False)]
    buf727: ComputedBuffer
    buf727.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf727.users = [
        NodeUser(node=SchedulerNode(name='op728'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op730'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op740'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op747'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op749'), can_inplace=True, is_weak=False),
    ]
]
op726_op727.snodes[0] =
op726: SchedulerNode(ComputedBuffer)
op726.writes = [MemoryDep('buf726', c0, {c0: 301056}, None)]
op726.unmet_dependencies = 
    [   MemoryDep('buf725', c0 + 1, {c0: 301056}, None),
        MemoryDep('buf725', c0 + 6, {c0: 301056}, None),
        MemoryDep('buf725', c0 + 7, {c0: 301056}, None),
        MemoryDep('buf725', c0 + 8, {c0: 301056}, None),
        MemoryDep('buf725', c0 - 1, {c0: 301056}, None),
        MemoryDep('buf725', c0 - 6, {c0: 301056}, None),
        MemoryDep('buf725', c0 - 7, {c0: 301056}, None),
        MemoryDep('buf725', c0 - 8, {c0: 301056}, None),
        MemoryDep('buf725', c0, {c0: 301056}, None)]
op726.met_dependencies = []
op726.outputs = [
    buf726: ComputedBuffer
    buf726.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf726.users = [NodeUser(node=SchedulerNode(name='op727'), can_inplace=True, is_weak=False)]
]
op726.group.device = cuda:0
op726.group.iteration = (301056, 1)
op726.sizes = ([6144, 7, 7], [])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf726_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op726_loop_body:
    var_ranges = {z0: 6144, z1: 7, z2: 7}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 49*z0 + 7*z1 + z2 - 8
    index3 = z2
    index4 = 49*z0 + 7*z1 + z2 - 7
    index5 = z2 + 1
    index6 = 49*z0 + 7*z1 + z2 - 6
    index7 = z1
    index8 = 49*z0 + 7*z1 + z2 - 1
    index9 = 49*z0 + 7*z1 + z2
    index10 = 49*z0 + 7*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 49*z0 + 7*z1 + z2 + 6
    index13 = 49*z0 + 7*z1 + z2 + 7
    index14 = 49*z0 + 7*z1 + z2 + 8
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(7, z2 + 2) - Max(0, z2 - 1)*Min(7, z1 + 2) + Min(7, z1 + 2)*Min(7, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(7, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(7, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(7, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(7, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(7, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(7, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(7, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(7, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(7, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(7, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(7, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(7, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(7, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(7, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(7, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(7, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(7, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(7, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf726', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf725', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf725', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf725', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf725', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf725', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf725', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf725', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf725', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf725', get_index)
        return load
op726_op727.snodes[1] =
op727: SchedulerNode(ComputedBuffer)
op727.writes = [MemoryDep('buf727', c0, {c0: 301056}, None)]
op727.unmet_dependencies = 
    [   MemoryDep('buf705', c0, {c0: 301056}, None),
        MemoryDep('buf715', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf725', c0, {c0: 301056}, None),
        MemoryDep('buf726', c0, {c0: 301056}, None)]
op727.met_dependencies = 
    [   MemoryDep('arg327_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg328_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg331_1', c1, {c0: 8, c1: 768}, None)]
op727.outputs = [
    buf727: ComputedBuffer
    buf727.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf727.users = [
        NodeUser(node=SchedulerNode(name='op728'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op730'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op740'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op747'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op749'), can_inplace=True, is_weak=False),
    ]
]
op727.group.device = cuda:0
op727.group.iteration = (301056, 1)
op727.sizes = ([8, 768, 49], [])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf715_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf726_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op727_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf705', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf715', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg327_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg328_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf726', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf725', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg331_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf727', get_index_7, add_2, None)
        return store


op728_op729_op730: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op728_op729_op730.writes = 
    [   MemoryDep('buf728', c0, {c0: 40}, None),
        MemoryDep('buf729', c0, {c0: 40}, None),
        MemoryDep('buf730', c0, {c0: 40}, None)]
op728_op729_op730.unmet_dependencies = [   MemoryDep('buf727', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op728_op729_op730.met_dependencies = []
op728_op729_op730.outputs = [
    buf728: ComputedBuffer
    buf728.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf728.users = [
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=False, is_weak=False),
    ]
    buf729: ComputedBuffer
    buf729.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf729.users = [
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=False, is_weak=False),
    ]
    buf730: ComputedBuffer
    buf730.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf730.users = [
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=False, is_weak=False),
    ]
]
op728_op729_op730.snodes[0] =
op728: SchedulerNode(ComputedBuffer)
op728.writes = [MemoryDep('buf728', c0, {c0: 40}, None)]
op728.unmet_dependencies = [   MemoryDep('buf727', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op728.met_dependencies = []
op728.outputs = [
    buf728: ComputedBuffer
    buf728.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf728.users = [
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=False, is_weak=False),
    ]
]
op728.group.device = cuda:0
op728.group.iteration = (40, 7527)
op728.sizes = ([8, 5], [7527])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf728_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op728_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf728', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf727', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op728_op729_op730.snodes[1] =
op729: SchedulerNode(ComputedBuffer)
op729.writes = [MemoryDep('buf729', c0, {c0: 40}, None)]
op729.unmet_dependencies = [   MemoryDep('buf727', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op729.met_dependencies = []
op729.outputs = [
    buf729: ComputedBuffer
    buf729.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf729.users = [
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=False, is_weak=False),
    ]
]
op729.group.device = cuda:0
op729.group.iteration = (40, 7527)
op729.sizes = ([8, 5], [7527])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf729_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op729_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf729', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf727', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op728_op729_op730.snodes[2] =
op730: SchedulerNode(ComputedBuffer)
op730.writes = [MemoryDep('buf730', c0, {c0: 40}, None)]
op730.unmet_dependencies = [   MemoryDep('buf727', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op730.met_dependencies = []
op730.outputs = [
    buf730: ComputedBuffer
    buf730.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf730.users = [
        NodeUser(node=SchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op733'), can_inplace=False, is_weak=False),
    ]
]
op730.group.device = cuda:0
op730.group.iteration = (40, 7527)
op730.sizes = ([8, 5], [7527])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf730_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op730_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf730', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf727', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op731_op732: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op731_op732.writes = [MemoryDep('buf731', c0, {c0: 8}, None), MemoryDep('buf732', c0, {c0: 8}, None)]
op731_op732.unmet_dependencies = 
    [   MemoryDep('buf728', c0, {c0: 40}, None),
        MemoryDep('buf729', c0, {c0: 40}, None),
        MemoryDep('buf730', c0, {c0: 40}, None)]
op731_op732.met_dependencies = []
op731_op732.outputs = [
    buf731: ComputedBuffer
    buf731.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf731.users = [NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False)]
    buf732: ComputedBuffer
    buf732.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf732.users = [NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False)]
]
op731_op732.snodes[0] =
op731: SchedulerNode(ComputedBuffer)
op731.writes = [MemoryDep('buf731', c0, {c0: 8}, None)]
op731.unmet_dependencies = 
    [   MemoryDep('buf728', c0, {c0: 40}, None),
        MemoryDep('buf729', c0, {c0: 40}, None),
        MemoryDep('buf730', c0, {c0: 40}, None)]
op731.met_dependencies = []
op731.outputs = [
    buf731: ComputedBuffer
    buf731.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf731.users = [NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False)]
]
op731.group.device = cuda:0
op731.group.iteration = (8, 5)
op731.sizes = ([8], [5])
buf728_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf729_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf730_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf731_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op731_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf728', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf729', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf730', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf731', get_index_3, getitem)
        return store_reduction
op731_op732.snodes[1] =
op732: SchedulerNode(ComputedBuffer)
op732.writes = [MemoryDep('buf732', c0, {c0: 8}, None)]
op732.unmet_dependencies = 
    [   MemoryDep('buf728', c0, {c0: 40}, None),
        MemoryDep('buf729', c0, {c0: 40}, None),
        MemoryDep('buf730', c0, {c0: 40}, None)]
op732.met_dependencies = []
op732.outputs = [
    buf732: ComputedBuffer
    buf732.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf732.users = [NodeUser(node=SchedulerNode(name='op734'), can_inplace=False, is_weak=False)]
]
op732.group.device = cuda:0
op732.group.iteration = (8, 5)
op732.sizes = ([8], [5])
buf728_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf729_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf730_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op732_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf728', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf729', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf730', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf732', get_index_3, getitem_1)
        return store_reduction


op734: SchedulerNode(ComputedBuffer)
op734.writes = [MemoryDep('buf734', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None)]
op734.unmet_dependencies = 
    [   MemoryDep('buf727', c0, {c0: 301056}, None),
        MemoryDep('buf731', c0, {c0: 8}, None),
        MemoryDep('buf732', c0, {c0: 8}, None)]
op734.met_dependencies = 
    [   MemoryDep('arg332_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg333_1', c1, {c0: 8, c1: 768}, None)]
op734.outputs = [
    buf734: ComputedBuffer
    buf734.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf734.users = [NodeUser(node=ExternKernelSchedulerNode(name='op735'), can_inplace=False, is_weak=False)]
]
op734.group.device = cuda:0
op734.group.iteration = (301056, 1)
op734.sizes = ([8, 768, 49], [])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf731_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf732_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op734_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 37632*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf727', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf731', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf732', get_index_2)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg332_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg333_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf734', get_index_5, add_1, None)
        return store


op735: ExternKernelSchedulerNode(ExternKernelAlloc)
op735.writes = [StarDep(name='buf735', mode=None)]
op735.unmet_dependencies = [StarDep(name='buf734', mode=None)]
op735.met_dependencies = [StarDep(name='arg334_1', mode=None)]
op735.outputs = [
    buf735: ExternKernelAlloc
    buf735.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf735.users = [NodeUser(node=SchedulerNode(name='op736'), can_inplace=True, is_weak=False)]
]
op735.node.kernel = extern_kernels.convolution


op736: SchedulerNode(ComputedBuffer)
op736.writes = [MemoryDep('buf736', c0, {c0: 1204224}, None)]
op736.unmet_dependencies = [MemoryDep('buf735', c0, {c0: 1204224}, None)]
op736.met_dependencies = [MemoryDep('arg335_1', c1, {c0: 392, c1: 3072}, None)]
op736.outputs = [
    buf736: ComputedBuffer
    buf736.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf736.users = [NodeUser(node=ExternKernelSchedulerNode(name='op737'), can_inplace=False, is_weak=False)]
]
op736.group.device = cuda:0
op736.group.iteration = (1204224, 1)
op736.sizes = ([392, 3072], [])
buf735_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf736_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
class op736_loop_body:
    var_ranges = {z0: 392, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf735', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg335_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf735', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg335_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf736', get_index_4, mul_2, None)
        return store


op737: ExternKernelSchedulerNode(ExternKernelAlloc)
op737.writes = [StarDep(name='buf737', mode=None)]
op737.unmet_dependencies = [StarDep(name='buf736', mode=None)]
op737.met_dependencies = [StarDep(name='arg336_1', mode=None)]
op737.outputs = [
    buf737: ExternKernelAlloc
    buf737.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf737.users = [
        NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op739'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op740'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op747'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op749'), can_inplace=False, is_weak=False),
    ]
]
op737.node.kernel = extern_kernels.convolution


op738_op739_op740: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op738_op739_op740.writes = 
    [   MemoryDep('buf738', c0, {c0: 2360}, None),
        MemoryDep('buf739', c0, {c0: 2360}, None),
        MemoryDep('buf740', c0, {c0: 2360}, None)]
op738_op739_op740.unmet_dependencies = 
    [   MemoryDep('buf727', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf737', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op738_op739_op740.met_dependencies = 
    [   MemoryDep('arg337_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg338_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op738_op739_op740.outputs = [
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf738.users = [
        NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
    ]
    buf739: ComputedBuffer
    buf739.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf739.users = [
        NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
    ]
    buf740: ComputedBuffer
    buf740.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf740.users = [
        NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
    ]
]
op738_op739_op740.snodes[0] =
op738: SchedulerNode(ComputedBuffer)
op738.writes = [MemoryDep('buf738', c0, {c0: 2360}, None)]
op738.unmet_dependencies = 
    [   MemoryDep('buf727', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf737', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op738.met_dependencies = 
    [   MemoryDep('arg337_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg338_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op738.outputs = [
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf738.users = [
        NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
    ]
]
op738.group.device = cuda:0
op738.group.iteration = (2360, 128)
op738.sizes = ([8, 5, 59], [128])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf737_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf738_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op738_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf738', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf727', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf737', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg337_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg338_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op738_op739_op740.snodes[1] =
op739: SchedulerNode(ComputedBuffer)
op739.writes = [MemoryDep('buf739', c0, {c0: 2360}, None)]
op739.unmet_dependencies = 
    [   MemoryDep('buf727', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf737', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op739.met_dependencies = 
    [   MemoryDep('arg337_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg338_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op739.outputs = [
    buf739: ComputedBuffer
    buf739.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf739.users = [
        NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
    ]
]
op739.group.device = cuda:0
op739.group.iteration = (2360, 128)
op739.sizes = ([8, 5, 59], [128])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf737_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf739_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op739_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf739', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf727', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf737', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg337_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg338_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op738_op739_op740.snodes[2] =
op740: SchedulerNode(ComputedBuffer)
op740.writes = [MemoryDep('buf740', c0, {c0: 2360}, None)]
op740.unmet_dependencies = 
    [   MemoryDep('buf727', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf737', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op740.met_dependencies = 
    [   MemoryDep('arg337_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg338_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op740.outputs = [
    buf740: ComputedBuffer
    buf740.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf740.users = [
        NodeUser(node=SchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
    ]
]
op740.group.device = cuda:0
op740.group.iteration = (2360, 128)
op740.sizes = ([8, 5, 59], [128])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf737_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf740_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op740_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf740', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf727', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf737', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg337_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg338_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op741_op742_op743: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op741_op742_op743.writes = 
    [   MemoryDep('buf741', c0, {c0: 40}, None),
        MemoryDep('buf742', c0, {c0: 40}, None),
        MemoryDep('buf743', c0, {c0: 40}, None)]
op741_op742_op743.unmet_dependencies = 
    [   MemoryDep('buf738', c0, {c0: 2360}, None),
        MemoryDep('buf739', c0, {c0: 2360}, None),
        MemoryDep('buf740', c0, {c0: 2360}, None)]
op741_op742_op743.met_dependencies = []
op741_op742_op743.outputs = [
    buf741: ComputedBuffer
    buf741.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf741.users = [
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=False, is_weak=False),
    ]
    buf742: ComputedBuffer
    buf742.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf742.users = [
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=False, is_weak=False),
    ]
    buf743: ComputedBuffer
    buf743.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf743.users = [
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=False, is_weak=False),
    ]
]
op741_op742_op743.snodes[0] =
op741: SchedulerNode(ComputedBuffer)
op741.writes = [MemoryDep('buf741', c0, {c0: 40}, None)]
op741.unmet_dependencies = 
    [   MemoryDep('buf738', c0, {c0: 2360}, None),
        MemoryDep('buf739', c0, {c0: 2360}, None),
        MemoryDep('buf740', c0, {c0: 2360}, None)]
op741.met_dependencies = []
op741.outputs = [
    buf741: ComputedBuffer
    buf741.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf741.users = [
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=False, is_weak=False),
    ]
]
op741.group.device = cuda:0
op741.group.iteration = (40, 59)
op741.sizes = ([40], [59])
buf738_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf739_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf740_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf741_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op741_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf738', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf739', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf740', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf741', get_index_3, getitem)
        return store_reduction
op741_op742_op743.snodes[1] =
op742: SchedulerNode(ComputedBuffer)
op742.writes = [MemoryDep('buf742', c0, {c0: 40}, None)]
op742.unmet_dependencies = 
    [   MemoryDep('buf738', c0, {c0: 2360}, None),
        MemoryDep('buf739', c0, {c0: 2360}, None),
        MemoryDep('buf740', c0, {c0: 2360}, None)]
op742.met_dependencies = []
op742.outputs = [
    buf742: ComputedBuffer
    buf742.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf742.users = [
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=False, is_weak=False),
    ]
]
op742.group.device = cuda:0
op742.group.iteration = (40, 59)
op742.sizes = ([40], [59])
buf738_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf739_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf740_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf742_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op742_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf738', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf739', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf740', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf742', get_index_3, getitem_1)
        return store_reduction
op741_op742_op743.snodes[2] =
op743: SchedulerNode(ComputedBuffer)
op743.writes = [MemoryDep('buf743', c0, {c0: 40}, None)]
op743.unmet_dependencies = 
    [   MemoryDep('buf738', c0, {c0: 2360}, None),
        MemoryDep('buf739', c0, {c0: 2360}, None),
        MemoryDep('buf740', c0, {c0: 2360}, None)]
op743.met_dependencies = []
op743.outputs = [
    buf743: ComputedBuffer
    buf743.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf743.users = [
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=False, is_weak=False),
    ]
]
op743.group.device = cuda:0
op743.group.iteration = (40, 59)
op743.sizes = ([40], [59])
buf738_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf739_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf740_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf743_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op743_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf738', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf739', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf740', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf743', get_index_3, getitem_2)
        return store_reduction


op744_op745: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op744_op745.writes = [MemoryDep('buf744', c0, {c0: 8}, None), MemoryDep('buf745', c0, {c0: 8}, None)]
op744_op745.unmet_dependencies = 
    [   MemoryDep('buf741', c0, {c0: 40}, None),
        MemoryDep('buf742', c0, {c0: 40}, None),
        MemoryDep('buf743', c0, {c0: 40}, None)]
op744_op745.met_dependencies = []
op744_op745.outputs = [
    buf744: ComputedBuffer
    buf744.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf744.users = [NodeUser(node=SchedulerNode(name='op747'), can_inplace=False, is_weak=False)]
    buf745: ComputedBuffer
    buf745.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf745.users = [NodeUser(node=SchedulerNode(name='op747'), can_inplace=False, is_weak=False)]
]
op744_op745.snodes[0] =
op744: SchedulerNode(ComputedBuffer)
op744.writes = [MemoryDep('buf744', c0, {c0: 8}, None)]
op744.unmet_dependencies = 
    [   MemoryDep('buf741', c0, {c0: 40}, None),
        MemoryDep('buf742', c0, {c0: 40}, None),
        MemoryDep('buf743', c0, {c0: 40}, None)]
op744.met_dependencies = []
op744.outputs = [
    buf744: ComputedBuffer
    buf744.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf744.users = [NodeUser(node=SchedulerNode(name='op747'), can_inplace=False, is_weak=False)]
]
op744.group.device = cuda:0
op744.group.iteration = (8, 5)
op744.sizes = ([8], [5])
buf741_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf742_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf743_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf744_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op744_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf741', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf742', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf743', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf744', get_index_3, getitem)
        return store_reduction
op744_op745.snodes[1] =
op745: SchedulerNode(ComputedBuffer)
op745.writes = [MemoryDep('buf745', c0, {c0: 8}, None)]
op745.unmet_dependencies = 
    [   MemoryDep('buf741', c0, {c0: 40}, None),
        MemoryDep('buf742', c0, {c0: 40}, None),
        MemoryDep('buf743', c0, {c0: 40}, None)]
op745.met_dependencies = []
op745.outputs = [
    buf745: ComputedBuffer
    buf745.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf745.users = [NodeUser(node=SchedulerNode(name='op747'), can_inplace=False, is_weak=False)]
]
op745.group.device = cuda:0
op745.group.iteration = (8, 5)
op745.sizes = ([8], [5])
buf741_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf742_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf743_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf745_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op745_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf741', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf742', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf743', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf745', get_index_3, getitem_1)
        return store_reduction


op747: SchedulerNode(ComputedBuffer)
op747.writes = [MemoryDep('buf747', c0, {c0: 301056}, None)]
op747.unmet_dependencies = 
    [   MemoryDep('buf727', c0, {c0: 301056}, None),
        MemoryDep('buf737', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf744', c0, {c0: 8}, None),
        MemoryDep('buf745', c0, {c0: 8}, None)]
op747.met_dependencies = 
    [   MemoryDep('arg337_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg338_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg339_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg340_1', c1, {c0: 8, c1: 768}, None)]
op747.outputs = [
    buf747: ComputedBuffer
    buf747.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf747.users = [
        NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op749'), can_inplace=True, is_weak=False),
    ]
]
op747.group.device = cuda:0
op747.group.iteration = (301056, 1)
op747.sizes = ([8, 768, 49], [])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf737_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf744_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf745_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op747_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf727', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf737', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg337_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg338_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf744', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf745', get_index_5)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg339_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg340_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf747', get_index_8, add_3, None)
        return store


op748_op749: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op748_op749.writes = 
    [   MemoryDep('buf748', c0, {c0: 301056}, None),
        MemoryDep('buf749', c0, {c0: 301056}, None)]
op748_op749.unmet_dependencies = 
    [   MemoryDep('buf727', c0, {c0: 301056}, None),
        MemoryDep('buf737', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf747', c0 + 1, {c0: 301056}, None),
        MemoryDep('buf747', c0 + 6, {c0: 301056}, None),
        MemoryDep('buf747', c0 + 7, {c0: 301056}, None),
        MemoryDep('buf747', c0 + 8, {c0: 301056}, None),
        MemoryDep('buf747', c0 - 1, {c0: 301056}, None),
        MemoryDep('buf747', c0 - 6, {c0: 301056}, None),
        MemoryDep('buf747', c0 - 7, {c0: 301056}, None),
        MemoryDep('buf747', c0 - 8, {c0: 301056}, None),
        MemoryDep('buf747', c0, {c0: 301056}, None)]
op748_op749.met_dependencies = 
    [   MemoryDep('arg337_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg338_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg341_1', c1, {c0: 8, c1: 768}, None)]
op748_op749.outputs = [
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf748.users = [NodeUser(node=SchedulerNode(name='op749'), can_inplace=True, is_weak=False)]
    buf749: ComputedBuffer
    buf749.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf749.users = [
        NodeUser(node=SchedulerNode(name='op750'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op761'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op762'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op771'), can_inplace=True, is_weak=False),
    ]
]
op748_op749.snodes[0] =
op748: SchedulerNode(ComputedBuffer)
op748.writes = [MemoryDep('buf748', c0, {c0: 301056}, None)]
op748.unmet_dependencies = 
    [   MemoryDep('buf747', c0 + 1, {c0: 301056}, None),
        MemoryDep('buf747', c0 + 6, {c0: 301056}, None),
        MemoryDep('buf747', c0 + 7, {c0: 301056}, None),
        MemoryDep('buf747', c0 + 8, {c0: 301056}, None),
        MemoryDep('buf747', c0 - 1, {c0: 301056}, None),
        MemoryDep('buf747', c0 - 6, {c0: 301056}, None),
        MemoryDep('buf747', c0 - 7, {c0: 301056}, None),
        MemoryDep('buf747', c0 - 8, {c0: 301056}, None),
        MemoryDep('buf747', c0, {c0: 301056}, None)]
op748.met_dependencies = []
op748.outputs = [
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf748.users = [NodeUser(node=SchedulerNode(name='op749'), can_inplace=True, is_weak=False)]
]
op748.group.device = cuda:0
op748.group.iteration = (301056, 1)
op748.sizes = ([6144, 7, 7], [])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf748_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op748_loop_body:
    var_ranges = {z0: 6144, z1: 7, z2: 7}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 49*z0 + 7*z1 + z2 - 8
    index3 = z2
    index4 = 49*z0 + 7*z1 + z2 - 7
    index5 = z2 + 1
    index6 = 49*z0 + 7*z1 + z2 - 6
    index7 = z1
    index8 = 49*z0 + 7*z1 + z2 - 1
    index9 = 49*z0 + 7*z1 + z2
    index10 = 49*z0 + 7*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 49*z0 + 7*z1 + z2 + 6
    index13 = 49*z0 + 7*z1 + z2 + 7
    index14 = 49*z0 + 7*z1 + z2 + 8
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(7, z2 + 2) - Max(0, z2 - 1)*Min(7, z1 + 2) + Min(7, z1 + 2)*Min(7, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(7, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(7, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(7, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(7, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(7, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(7, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(7, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(7, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(7, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(7, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(7, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(7, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(7, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(7, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(7, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(7, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(7, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(7, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf748', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf747', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf747', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf747', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf747', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf747', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf747', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf747', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf747', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf747', get_index)
        return load
op748_op749.snodes[1] =
op749: SchedulerNode(ComputedBuffer)
op749.writes = [MemoryDep('buf749', c0, {c0: 301056}, None)]
op749.unmet_dependencies = 
    [   MemoryDep('buf727', c0, {c0: 301056}, None),
        MemoryDep('buf737', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf747', c0, {c0: 301056}, None),
        MemoryDep('buf748', c0, {c0: 301056}, None)]
op749.met_dependencies = 
    [   MemoryDep('arg337_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg338_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg341_1', c1, {c0: 8, c1: 768}, None)]
op749.outputs = [
    buf749: ComputedBuffer
    buf749.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf749.users = [
        NodeUser(node=SchedulerNode(name='op750'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op752'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op761'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op762'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op771'), can_inplace=True, is_weak=False),
    ]
]
op749.group.device = cuda:0
op749.group.iteration = (301056, 1)
op749.sizes = ([8, 768, 49], [])
buf727_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf737_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf748_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf747_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op749_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf727', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf737', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg337_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg338_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf748', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf747', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg341_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf749', get_index_7, add_2, None)
        return store


op750_op751_op752: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op750_op751_op752.writes = 
    [   MemoryDep('buf750', c0, {c0: 40}, None),
        MemoryDep('buf751', c0, {c0: 40}, None),
        MemoryDep('buf752', c0, {c0: 40}, None)]
op750_op751_op752.unmet_dependencies = [   MemoryDep('buf749', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op750_op751_op752.met_dependencies = []
op750_op751_op752.outputs = [
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf750.users = [
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False),
    ]
    buf751: ComputedBuffer
    buf751.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf751.users = [
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False),
    ]
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf752.users = [
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False),
    ]
]
op750_op751_op752.snodes[0] =
op750: SchedulerNode(ComputedBuffer)
op750.writes = [MemoryDep('buf750', c0, {c0: 40}, None)]
op750.unmet_dependencies = [   MemoryDep('buf749', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op750.met_dependencies = []
op750.outputs = [
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf750.users = [
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False),
    ]
]
op750.group.device = cuda:0
op750.group.iteration = (40, 7527)
op750.sizes = ([8, 5], [7527])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf750_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op750_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf750', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf749', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op750_op751_op752.snodes[1] =
op751: SchedulerNode(ComputedBuffer)
op751.writes = [MemoryDep('buf751', c0, {c0: 40}, None)]
op751.unmet_dependencies = [   MemoryDep('buf749', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op751.met_dependencies = []
op751.outputs = [
    buf751: ComputedBuffer
    buf751.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf751.users = [
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False),
    ]
]
op751.group.device = cuda:0
op751.group.iteration = (40, 7527)
op751.sizes = ([8, 5], [7527])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf751_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op751_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf751', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf749', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op750_op751_op752.snodes[2] =
op752: SchedulerNode(ComputedBuffer)
op752.writes = [MemoryDep('buf752', c0, {c0: 40}, None)]
op752.unmet_dependencies = [   MemoryDep('buf749', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op752.met_dependencies = []
op752.outputs = [
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf752.users = [
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False),
    ]
]
op752.group.device = cuda:0
op752.group.iteration = (40, 7527)
op752.sizes = ([8, 5], [7527])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op752_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf752', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf749', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op753_op754: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op753_op754.writes = [MemoryDep('buf753', c0, {c0: 8}, None), MemoryDep('buf754', c0, {c0: 8}, None)]
op753_op754.unmet_dependencies = 
    [   MemoryDep('buf750', c0, {c0: 40}, None),
        MemoryDep('buf751', c0, {c0: 40}, None),
        MemoryDep('buf752', c0, {c0: 40}, None)]
op753_op754.met_dependencies = []
op753_op754.outputs = [
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf753.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False)]
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf754.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False)]
]
op753_op754.snodes[0] =
op753: SchedulerNode(ComputedBuffer)
op753.writes = [MemoryDep('buf753', c0, {c0: 8}, None)]
op753.unmet_dependencies = 
    [   MemoryDep('buf750', c0, {c0: 40}, None),
        MemoryDep('buf751', c0, {c0: 40}, None),
        MemoryDep('buf752', c0, {c0: 40}, None)]
op753.met_dependencies = []
op753.outputs = [
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf753.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False)]
]
op753.group.device = cuda:0
op753.group.iteration = (8, 5)
op753.sizes = ([8], [5])
buf750_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf751_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf753_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op753_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf750', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf751', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf752', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf753', get_index_3, getitem)
        return store_reduction
op753_op754.snodes[1] =
op754: SchedulerNode(ComputedBuffer)
op754.writes = [MemoryDep('buf754', c0, {c0: 8}, None)]
op754.unmet_dependencies = 
    [   MemoryDep('buf750', c0, {c0: 40}, None),
        MemoryDep('buf751', c0, {c0: 40}, None),
        MemoryDep('buf752', c0, {c0: 40}, None)]
op754.met_dependencies = []
op754.outputs = [
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf754.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False)]
]
op754.group.device = cuda:0
op754.group.iteration = (8, 5)
op754.sizes = ([8], [5])
buf750_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf751_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf752_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf754_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op754_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf750', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf751', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf752', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf754', get_index_3, getitem_1)
        return store_reduction


op756: SchedulerNode(ComputedBuffer)
op756.writes = [MemoryDep('buf756', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None)]
op756.unmet_dependencies = 
    [   MemoryDep('buf749', c0, {c0: 301056}, None),
        MemoryDep('buf753', c0, {c0: 8}, None),
        MemoryDep('buf754', c0, {c0: 8}, None)]
op756.met_dependencies = 
    [   MemoryDep('arg342_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg343_1', c1, {c0: 8, c1: 768}, None)]
op756.outputs = [
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf756.users = [NodeUser(node=ExternKernelSchedulerNode(name='op757'), can_inplace=False, is_weak=False)]
]
op756.group.device = cuda:0
op756.group.iteration = (301056, 1)
op756.sizes = ([8, 768, 49], [])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf753_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf754_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf756_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op756_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 37632*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf749', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf753', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf754', get_index_2)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg342_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg343_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf756', get_index_5, add_1, None)
        return store


op757: ExternKernelSchedulerNode(ExternKernelAlloc)
op757.writes = [StarDep(name='buf757', mode=None)]
op757.unmet_dependencies = [StarDep(name='buf756', mode=None)]
op757.met_dependencies = [StarDep(name='arg344_1', mode=None)]
op757.outputs = [
    buf757: ExternKernelAlloc
    buf757.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf757.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
]
op757.node.kernel = extern_kernels.convolution


op758: SchedulerNode(ComputedBuffer)
op758.writes = [MemoryDep('buf758', c0, {c0: 1204224}, None)]
op758.unmet_dependencies = [MemoryDep('buf757', c0, {c0: 1204224}, None)]
op758.met_dependencies = [MemoryDep('arg345_1', c1, {c0: 392, c1: 3072}, None)]
op758.outputs = [
    buf758: ComputedBuffer
    buf758.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf758.users = [NodeUser(node=ExternKernelSchedulerNode(name='op759'), can_inplace=False, is_weak=False)]
]
op758.group.device = cuda:0
op758.group.iteration = (1204224, 1)
op758.sizes = ([392, 3072], [])
buf757_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf758_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
class op758_loop_body:
    var_ranges = {z0: 392, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf757', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg345_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf757', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg345_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf758', get_index_4, mul_2, None)
        return store


op759: ExternKernelSchedulerNode(ExternKernelAlloc)
op759.writes = [StarDep(name='buf759', mode=None)]
op759.unmet_dependencies = [StarDep(name='buf758', mode=None)]
op759.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op759.outputs = [
    buf759: ExternKernelAlloc
    buf759.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf759.users = [
        NodeUser(node=SchedulerNode(name='op760'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op761'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op762'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op769'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op771'), can_inplace=False, is_weak=False),
    ]
]
op759.node.kernel = extern_kernels.convolution


op760_op761_op762: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op760_op761_op762.writes = 
    [   MemoryDep('buf760', c0, {c0: 2360}, None),
        MemoryDep('buf761', c0, {c0: 2360}, None),
        MemoryDep('buf762', c0, {c0: 2360}, None)]
op760_op761_op762.unmet_dependencies = 
    [   MemoryDep('buf749', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf759', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op760_op761_op762.met_dependencies = 
    [   MemoryDep('arg347_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg348_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op760_op761_op762.outputs = [
    buf760: ComputedBuffer
    buf760.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf760.users = [
        NodeUser(node=SchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
    ]
    buf761: ComputedBuffer
    buf761.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf761.users = [
        NodeUser(node=SchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
    ]
    buf762: ComputedBuffer
    buf762.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf762.users = [
        NodeUser(node=SchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
    ]
]
op760_op761_op762.snodes[0] =
op760: SchedulerNode(ComputedBuffer)
op760.writes = [MemoryDep('buf760', c0, {c0: 2360}, None)]
op760.unmet_dependencies = 
    [   MemoryDep('buf749', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf759', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op760.met_dependencies = 
    [   MemoryDep('arg347_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg348_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op760.outputs = [
    buf760: ComputedBuffer
    buf760.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf760.users = [
        NodeUser(node=SchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
    ]
]
op760.group.device = cuda:0
op760.group.iteration = (2360, 128)
op760.sizes = ([8, 5, 59], [128])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf760_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op760_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf760', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf749', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf759', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg347_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg348_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op760_op761_op762.snodes[1] =
op761: SchedulerNode(ComputedBuffer)
op761.writes = [MemoryDep('buf761', c0, {c0: 2360}, None)]
op761.unmet_dependencies = 
    [   MemoryDep('buf749', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf759', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op761.met_dependencies = 
    [   MemoryDep('arg347_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg348_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op761.outputs = [
    buf761: ComputedBuffer
    buf761.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf761.users = [
        NodeUser(node=SchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
    ]
]
op761.group.device = cuda:0
op761.group.iteration = (2360, 128)
op761.sizes = ([8, 5, 59], [128])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf761_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op761_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf761', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf749', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf759', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg347_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg348_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op760_op761_op762.snodes[2] =
op762: SchedulerNode(ComputedBuffer)
op762.writes = [MemoryDep('buf762', c0, {c0: 2360}, None)]
op762.unmet_dependencies = 
    [   MemoryDep('buf749', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf759', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op762.met_dependencies = 
    [   MemoryDep('arg347_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg348_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op762.outputs = [
    buf762: ComputedBuffer
    buf762.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf762.users = [
        NodeUser(node=SchedulerNode(name='op763'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op764'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op765'), can_inplace=False, is_weak=False),
    ]
]
op762.group.device = cuda:0
op762.group.iteration = (2360, 128)
op762.sizes = ([8, 5, 59], [128])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf762_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op762_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf762', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf749', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf759', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg347_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg348_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op763_op764_op765: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op763_op764_op765.writes = 
    [   MemoryDep('buf763', c0, {c0: 40}, None),
        MemoryDep('buf764', c0, {c0: 40}, None),
        MemoryDep('buf765', c0, {c0: 40}, None)]
op763_op764_op765.unmet_dependencies = 
    [   MemoryDep('buf760', c0, {c0: 2360}, None),
        MemoryDep('buf761', c0, {c0: 2360}, None),
        MemoryDep('buf762', c0, {c0: 2360}, None)]
op763_op764_op765.met_dependencies = []
op763_op764_op765.outputs = [
    buf763: ComputedBuffer
    buf763.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf763.users = [
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=False, is_weak=False),
    ]
    buf764: ComputedBuffer
    buf764.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf764.users = [
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=False, is_weak=False),
    ]
    buf765: ComputedBuffer
    buf765.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf765.users = [
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=False, is_weak=False),
    ]
]
op763_op764_op765.snodes[0] =
op763: SchedulerNode(ComputedBuffer)
op763.writes = [MemoryDep('buf763', c0, {c0: 40}, None)]
op763.unmet_dependencies = 
    [   MemoryDep('buf760', c0, {c0: 2360}, None),
        MemoryDep('buf761', c0, {c0: 2360}, None),
        MemoryDep('buf762', c0, {c0: 2360}, None)]
op763.met_dependencies = []
op763.outputs = [
    buf763: ComputedBuffer
    buf763.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf763.users = [
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=False, is_weak=False),
    ]
]
op763.group.device = cuda:0
op763.group.iteration = (40, 59)
op763.sizes = ([40], [59])
buf760_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf761_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf762_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf763_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op763_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf760', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf761', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf762', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf763', get_index_3, getitem)
        return store_reduction
op763_op764_op765.snodes[1] =
op764: SchedulerNode(ComputedBuffer)
op764.writes = [MemoryDep('buf764', c0, {c0: 40}, None)]
op764.unmet_dependencies = 
    [   MemoryDep('buf760', c0, {c0: 2360}, None),
        MemoryDep('buf761', c0, {c0: 2360}, None),
        MemoryDep('buf762', c0, {c0: 2360}, None)]
op764.met_dependencies = []
op764.outputs = [
    buf764: ComputedBuffer
    buf764.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf764.users = [
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=False, is_weak=False),
    ]
]
op764.group.device = cuda:0
op764.group.iteration = (40, 59)
op764.sizes = ([40], [59])
buf760_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf761_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf762_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf764_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op764_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf760', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf761', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf762', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf764', get_index_3, getitem_1)
        return store_reduction
op763_op764_op765.snodes[2] =
op765: SchedulerNode(ComputedBuffer)
op765.writes = [MemoryDep('buf765', c0, {c0: 40}, None)]
op765.unmet_dependencies = 
    [   MemoryDep('buf760', c0, {c0: 2360}, None),
        MemoryDep('buf761', c0, {c0: 2360}, None),
        MemoryDep('buf762', c0, {c0: 2360}, None)]
op765.met_dependencies = []
op765.outputs = [
    buf765: ComputedBuffer
    buf765.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf765.users = [
        NodeUser(node=SchedulerNode(name='op766'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op767'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op768'), can_inplace=False, is_weak=False),
    ]
]
op765.group.device = cuda:0
op765.group.iteration = (40, 59)
op765.sizes = ([40], [59])
buf760_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf761_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf762_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf765_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op765_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf760', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf761', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf762', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf765', get_index_3, getitem_2)
        return store_reduction


op766_op767: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op766_op767.writes = [MemoryDep('buf766', c0, {c0: 8}, None), MemoryDep('buf767', c0, {c0: 8}, None)]
op766_op767.unmet_dependencies = 
    [   MemoryDep('buf763', c0, {c0: 40}, None),
        MemoryDep('buf764', c0, {c0: 40}, None),
        MemoryDep('buf765', c0, {c0: 40}, None)]
op766_op767.met_dependencies = []
op766_op767.outputs = [
    buf766: ComputedBuffer
    buf766.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf766.users = [NodeUser(node=SchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
    buf767: ComputedBuffer
    buf767.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf767.users = [NodeUser(node=SchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
]
op766_op767.snodes[0] =
op766: SchedulerNode(ComputedBuffer)
op766.writes = [MemoryDep('buf766', c0, {c0: 8}, None)]
op766.unmet_dependencies = 
    [   MemoryDep('buf763', c0, {c0: 40}, None),
        MemoryDep('buf764', c0, {c0: 40}, None),
        MemoryDep('buf765', c0, {c0: 40}, None)]
op766.met_dependencies = []
op766.outputs = [
    buf766: ComputedBuffer
    buf766.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf766.users = [NodeUser(node=SchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
]
op766.group.device = cuda:0
op766.group.iteration = (8, 5)
op766.sizes = ([8], [5])
buf763_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf764_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf765_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf766_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op766_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf763', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf764', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf765', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf766', get_index_3, getitem)
        return store_reduction
op766_op767.snodes[1] =
op767: SchedulerNode(ComputedBuffer)
op767.writes = [MemoryDep('buf767', c0, {c0: 8}, None)]
op767.unmet_dependencies = 
    [   MemoryDep('buf763', c0, {c0: 40}, None),
        MemoryDep('buf764', c0, {c0: 40}, None),
        MemoryDep('buf765', c0, {c0: 40}, None)]
op767.met_dependencies = []
op767.outputs = [
    buf767: ComputedBuffer
    buf767.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf767.users = [NodeUser(node=SchedulerNode(name='op769'), can_inplace=False, is_weak=False)]
]
op767.group.device = cuda:0
op767.group.iteration = (8, 5)
op767.sizes = ([8], [5])
buf763_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf764_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf765_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf767_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op767_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf763', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf764', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf765', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf767', get_index_3, getitem_1)
        return store_reduction


op769: SchedulerNode(ComputedBuffer)
op769.writes = [MemoryDep('buf769', c0, {c0: 301056}, None)]
op769.unmet_dependencies = 
    [   MemoryDep('buf749', c0, {c0: 301056}, None),
        MemoryDep('buf759', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf766', c0, {c0: 8}, None),
        MemoryDep('buf767', c0, {c0: 8}, None)]
op769.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg348_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg349_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg350_1', c1, {c0: 8, c1: 768}, None)]
op769.outputs = [
    buf769: ComputedBuffer
    buf769.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf769.users = [
        NodeUser(node=SchedulerNode(name='op770'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op771'), can_inplace=True, is_weak=False),
    ]
]
op769.group.device = cuda:0
op769.group.iteration = (301056, 1)
op769.sizes = ([8, 768, 49], [])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf766_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf767_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op769_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf749', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf759', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg347_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg348_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf766', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf767', get_index_5)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg349_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg350_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf769', get_index_8, add_3, None)
        return store


op770_op771: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op770_op771.writes = 
    [   MemoryDep('buf770', c0, {c0: 301056}, None),
        MemoryDep('buf771', c0, {c0: 301056}, None)]
op770_op771.unmet_dependencies = 
    [   MemoryDep('buf749', c0, {c0: 301056}, None),
        MemoryDep('buf759', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf769', c0 + 1, {c0: 301056}, None),
        MemoryDep('buf769', c0 + 6, {c0: 301056}, None),
        MemoryDep('buf769', c0 + 7, {c0: 301056}, None),
        MemoryDep('buf769', c0 + 8, {c0: 301056}, None),
        MemoryDep('buf769', c0 - 1, {c0: 301056}, None),
        MemoryDep('buf769', c0 - 6, {c0: 301056}, None),
        MemoryDep('buf769', c0 - 7, {c0: 301056}, None),
        MemoryDep('buf769', c0 - 8, {c0: 301056}, None),
        MemoryDep('buf769', c0, {c0: 301056}, None)]
op770_op771.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg348_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg351_1', c1, {c0: 8, c1: 768}, None)]
op770_op771.outputs = [
    buf770: ComputedBuffer
    buf770.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf770.users = [NodeUser(node=SchedulerNode(name='op771'), can_inplace=True, is_weak=False)]
    buf771: ComputedBuffer
    buf771.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf771.users = [
        NodeUser(node=SchedulerNode(name='op772'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op773'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op774'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op783'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op784'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op791'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False),
    ]
]
op770_op771.snodes[0] =
op770: SchedulerNode(ComputedBuffer)
op770.writes = [MemoryDep('buf770', c0, {c0: 301056}, None)]
op770.unmet_dependencies = 
    [   MemoryDep('buf769', c0 + 1, {c0: 301056}, None),
        MemoryDep('buf769', c0 + 6, {c0: 301056}, None),
        MemoryDep('buf769', c0 + 7, {c0: 301056}, None),
        MemoryDep('buf769', c0 + 8, {c0: 301056}, None),
        MemoryDep('buf769', c0 - 1, {c0: 301056}, None),
        MemoryDep('buf769', c0 - 6, {c0: 301056}, None),
        MemoryDep('buf769', c0 - 7, {c0: 301056}, None),
        MemoryDep('buf769', c0 - 8, {c0: 301056}, None),
        MemoryDep('buf769', c0, {c0: 301056}, None)]
op770.met_dependencies = []
op770.outputs = [
    buf770: ComputedBuffer
    buf770.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf770.users = [NodeUser(node=SchedulerNode(name='op771'), can_inplace=True, is_weak=False)]
]
op770.group.device = cuda:0
op770.group.iteration = (301056, 1)
op770.sizes = ([6144, 7, 7], [])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf770_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op770_loop_body:
    var_ranges = {z0: 6144, z1: 7, z2: 7}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 49*z0 + 7*z1 + z2 - 8
    index3 = z2
    index4 = 49*z0 + 7*z1 + z2 - 7
    index5 = z2 + 1
    index6 = 49*z0 + 7*z1 + z2 - 6
    index7 = z1
    index8 = 49*z0 + 7*z1 + z2 - 1
    index9 = 49*z0 + 7*z1 + z2
    index10 = 49*z0 + 7*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 49*z0 + 7*z1 + z2 + 6
    index13 = 49*z0 + 7*z1 + z2 + 7
    index14 = 49*z0 + 7*z1 + z2 + 8
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(7, z2 + 2) - Max(0, z2 - 1)*Min(7, z1 + 2) + Min(7, z1 + 2)*Min(7, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(7, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(7, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(7, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(7, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(7, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(7, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(7, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(7, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(7, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(7, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(7, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(7, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(7, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(7, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(7, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(7, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(7, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(7, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf770', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf769', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf769', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf769', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf769', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf769', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf769', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf769', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf769', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf769', get_index)
        return load
op770_op771.snodes[1] =
op771: SchedulerNode(ComputedBuffer)
op771.writes = [MemoryDep('buf771', c0, {c0: 301056}, None)]
op771.unmet_dependencies = 
    [   MemoryDep('buf749', c0, {c0: 301056}, None),
        MemoryDep('buf759', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf769', c0, {c0: 301056}, None),
        MemoryDep('buf770', c0, {c0: 301056}, None)]
op771.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg348_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg351_1', c1, {c0: 8, c1: 768}, None)]
op771.outputs = [
    buf771: ComputedBuffer
    buf771.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf771.users = [
        NodeUser(node=SchedulerNode(name='op772'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op773'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op774'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op783'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op784'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op791'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False),
    ]
]
op771.group.device = cuda:0
op771.group.iteration = (301056, 1)
op771.sizes = ([8, 768, 49], [])
buf749_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf759_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf770_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf769_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
arg351_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op771_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf749', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf759', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg347_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg348_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf770', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf769', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg351_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf771', get_index_7, add_2, None)
        return store


op772_op773_op774: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op772_op773_op774.writes = 
    [   MemoryDep('buf772', c0, {c0: 40}, None),
        MemoryDep('buf773', c0, {c0: 40}, None),
        MemoryDep('buf774', c0, {c0: 40}, None)]
op772_op773_op774.unmet_dependencies = [   MemoryDep('buf771', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op772_op773_op774.met_dependencies = []
op772_op773_op774.outputs = [
    buf772: ComputedBuffer
    buf772.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf772.users = [
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op777'), can_inplace=False, is_weak=False),
    ]
    buf773: ComputedBuffer
    buf773.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf773.users = [
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op777'), can_inplace=False, is_weak=False),
    ]
    buf774: ComputedBuffer
    buf774.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf774.users = [
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op777'), can_inplace=False, is_weak=False),
    ]
]
op772_op773_op774.snodes[0] =
op772: SchedulerNode(ComputedBuffer)
op772.writes = [MemoryDep('buf772', c0, {c0: 40}, None)]
op772.unmet_dependencies = [   MemoryDep('buf771', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op772.met_dependencies = []
op772.outputs = [
    buf772: ComputedBuffer
    buf772.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf772.users = [
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op777'), can_inplace=False, is_weak=False),
    ]
]
op772.group.device = cuda:0
op772.group.iteration = (40, 7527)
op772.sizes = ([8, 5], [7527])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf772_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op772_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf772', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf771', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op772_op773_op774.snodes[1] =
op773: SchedulerNode(ComputedBuffer)
op773.writes = [MemoryDep('buf773', c0, {c0: 40}, None)]
op773.unmet_dependencies = [   MemoryDep('buf771', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op773.met_dependencies = []
op773.outputs = [
    buf773: ComputedBuffer
    buf773.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf773.users = [
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op777'), can_inplace=False, is_weak=False),
    ]
]
op773.group.device = cuda:0
op773.group.iteration = (40, 7527)
op773.sizes = ([8, 5], [7527])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf773_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op773_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf773', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf771', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op772_op773_op774.snodes[2] =
op774: SchedulerNode(ComputedBuffer)
op774.writes = [MemoryDep('buf774', c0, {c0: 40}, None)]
op774.unmet_dependencies = [   MemoryDep('buf771', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op774.met_dependencies = []
op774.outputs = [
    buf774: ComputedBuffer
    buf774.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf774.users = [
        NodeUser(node=SchedulerNode(name='op775'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op776'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op777'), can_inplace=False, is_weak=False),
    ]
]
op774.group.device = cuda:0
op774.group.iteration = (40, 7527)
op774.sizes = ([8, 5], [7527])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf774_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op774_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf774', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf771', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op775_op776: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op775_op776.writes = [MemoryDep('buf775', c0, {c0: 8}, None), MemoryDep('buf776', c0, {c0: 8}, None)]
op775_op776.unmet_dependencies = 
    [   MemoryDep('buf772', c0, {c0: 40}, None),
        MemoryDep('buf773', c0, {c0: 40}, None),
        MemoryDep('buf774', c0, {c0: 40}, None)]
op775_op776.met_dependencies = []
op775_op776.outputs = [
    buf775: ComputedBuffer
    buf775.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf775.users = [NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False)]
    buf776: ComputedBuffer
    buf776.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf776.users = [NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False)]
]
op775_op776.snodes[0] =
op775: SchedulerNode(ComputedBuffer)
op775.writes = [MemoryDep('buf775', c0, {c0: 8}, None)]
op775.unmet_dependencies = 
    [   MemoryDep('buf772', c0, {c0: 40}, None),
        MemoryDep('buf773', c0, {c0: 40}, None),
        MemoryDep('buf774', c0, {c0: 40}, None)]
op775.met_dependencies = []
op775.outputs = [
    buf775: ComputedBuffer
    buf775.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf775.users = [NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False)]
]
op775.group.device = cuda:0
op775.group.iteration = (8, 5)
op775.sizes = ([8], [5])
buf772_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf773_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf774_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf775_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op775_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf772', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf773', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf774', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf775', get_index_3, getitem)
        return store_reduction
op775_op776.snodes[1] =
op776: SchedulerNode(ComputedBuffer)
op776.writes = [MemoryDep('buf776', c0, {c0: 8}, None)]
op776.unmet_dependencies = 
    [   MemoryDep('buf772', c0, {c0: 40}, None),
        MemoryDep('buf773', c0, {c0: 40}, None),
        MemoryDep('buf774', c0, {c0: 40}, None)]
op776.met_dependencies = []
op776.outputs = [
    buf776: ComputedBuffer
    buf776.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf776.users = [NodeUser(node=SchedulerNode(name='op778'), can_inplace=False, is_weak=False)]
]
op776.group.device = cuda:0
op776.group.iteration = (8, 5)
op776.sizes = ([8], [5])
buf772_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf773_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf774_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf776_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op776_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf772', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf773', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf774', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf776', get_index_3, getitem_1)
        return store_reduction


op778: SchedulerNode(ComputedBuffer)
op778.writes = [MemoryDep('buf778', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None)]
op778.unmet_dependencies = 
    [   MemoryDep('buf771', c0, {c0: 301056}, None),
        MemoryDep('buf775', c0, {c0: 8}, None),
        MemoryDep('buf776', c0, {c0: 8}, None)]
op778.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg353_1', c1, {c0: 8, c1: 768}, None)]
op778.outputs = [
    buf778: ComputedBuffer
    buf778.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf778.users = [NodeUser(node=ExternKernelSchedulerNode(name='op779'), can_inplace=False, is_weak=False)]
]
op778.group.device = cuda:0
op778.group.iteration = (301056, 1)
op778.sizes = ([8, 768, 49], [])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf775_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf776_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf778_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op778_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 37632*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf775', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf776', get_index_2)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg352_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg353_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf778', get_index_5, add_1, None)
        return store


op779: ExternKernelSchedulerNode(ExternKernelAlloc)
op779.writes = [StarDep(name='buf779', mode=None)]
op779.unmet_dependencies = [StarDep(name='buf778', mode=None)]
op779.met_dependencies = [StarDep(name='arg354_1', mode=None)]
op779.outputs = [
    buf779: ExternKernelAlloc
    buf779.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf779.users = [NodeUser(node=SchedulerNode(name='op780'), can_inplace=True, is_weak=False)]
]
op779.node.kernel = extern_kernels.convolution


op780: SchedulerNode(ComputedBuffer)
op780.writes = [MemoryDep('buf780', c0, {c0: 1204224}, None)]
op780.unmet_dependencies = [MemoryDep('buf779', c0, {c0: 1204224}, None)]
op780.met_dependencies = [MemoryDep('arg355_1', c1, {c0: 392, c1: 3072}, None)]
op780.outputs = [
    buf780: ComputedBuffer
    buf780.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf780.users = [NodeUser(node=ExternKernelSchedulerNode(name='op781'), can_inplace=False, is_weak=False)]
]
op780.group.device = cuda:0
op780.group.iteration = (1204224, 1)
op780.sizes = ([392, 3072], [])
buf779_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf780_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
class op780_loop_body:
    var_ranges = {z0: 392, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf779', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg355_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf779', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg355_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf780', get_index_4, mul_2, None)
        return store


op781: ExternKernelSchedulerNode(ExternKernelAlloc)
op781.writes = [StarDep(name='buf781', mode=None)]
op781.unmet_dependencies = [StarDep(name='buf780', mode=None)]
op781.met_dependencies = [StarDep(name='arg356_1', mode=None)]
op781.outputs = [
    buf781: ExternKernelAlloc
    buf781.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf781.users = [
        NodeUser(node=SchedulerNode(name='op782'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op783'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op784'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op791'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=False, is_weak=False),
    ]
]
op781.node.kernel = extern_kernels.convolution


op782_op783_op784: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op782_op783_op784.writes = 
    [   MemoryDep('buf782', c0, {c0: 2360}, None),
        MemoryDep('buf783', c0, {c0: 2360}, None),
        MemoryDep('buf784', c0, {c0: 2360}, None)]
op782_op783_op784.unmet_dependencies = 
    [   MemoryDep('buf771', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf781', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op782_op783_op784.met_dependencies = 
    [   MemoryDep('arg357_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg358_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op782_op783_op784.outputs = [
    buf782: ComputedBuffer
    buf782.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf782.users = [
        NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
    ]
    buf783: ComputedBuffer
    buf783.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf783.users = [
        NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
    ]
    buf784: ComputedBuffer
    buf784.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf784.users = [
        NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
    ]
]
op782_op783_op784.snodes[0] =
op782: SchedulerNode(ComputedBuffer)
op782.writes = [MemoryDep('buf782', c0, {c0: 2360}, None)]
op782.unmet_dependencies = 
    [   MemoryDep('buf771', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf781', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op782.met_dependencies = 
    [   MemoryDep('arg357_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg358_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op782.outputs = [
    buf782: ComputedBuffer
    buf782.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf782.users = [
        NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
    ]
]
op782.group.device = cuda:0
op782.group.iteration = (2360, 128)
op782.sizes = ([8, 5, 59], [128])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf781_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf782_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op782_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf782', get_index_3, getitem)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf781', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg357_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg358_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op782_op783_op784.snodes[1] =
op783: SchedulerNode(ComputedBuffer)
op783.writes = [MemoryDep('buf783', c0, {c0: 2360}, None)]
op783.unmet_dependencies = 
    [   MemoryDep('buf771', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf781', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op783.met_dependencies = 
    [   MemoryDep('arg357_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg358_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op783.outputs = [
    buf783: ComputedBuffer
    buf783.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf783.users = [
        NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
    ]
]
op783.group.device = cuda:0
op783.group.iteration = (2360, 128)
op783.sizes = ([8, 5, 59], [128])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf781_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf783_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op783_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf783', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf781', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg357_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg358_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6
op782_op783_op784.snodes[2] =
op784: SchedulerNode(ComputedBuffer)
op784.writes = [MemoryDep('buf784', c0, {c0: 2360}, None)]
op784.unmet_dependencies = 
    [   MemoryDep('buf771', 37632*c0 + ModularIndexing(7527*c1 + c2, 1, 37632), {c0: 8, c1: 5, c2: 7552}, None),
        MemoryDep('buf781', 37632*c0 + 768*ModularIndexing(7527*c1 + 128*c2 + c3, 1, 49) + ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op784.met_dependencies = 
    [   MemoryDep('arg357_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None),
        MemoryDep('arg358_1', ModularIndexing(7527*c1 + 128*c2 + c3, 49, 768), {c0: 8, c1: 5, c2: 59, c3: 128}, None)]
op784.outputs = [
    buf784: ComputedBuffer
    buf784.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
    buf784.users = [
        NodeUser(node=SchedulerNode(name='op785'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op786'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op787'), can_inplace=False, is_weak=False),
    ]
]
op784.group.device = cuda:0
op784.group.iteration = (2360, 128)
op784.sizes = ([8, 5, 59], [128])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf781_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf784_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
class op784_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 59, z3: 128}
    index0 = 128*z2 + z3
    index1 = 7527*z1 + 128*z2 + z3
    index2 = 37632*z0 + ModularIndexing(7527*z1 + 128*z2 + z3, 1, 37632)
    index3 = 37632*z0 + 768*ModularIndexing(7527*z1 + 128*z2 + z3, 1, 49) + ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index4 = ModularIndexing(7527*z1 + 128*z2 + z3, 49, 768)
    index5 = 295*z0 + 59*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(7527, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(7527, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock3 = self.masked_subblock3(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(7527, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock5 = self.masked_subblock5(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock3, masked_subblock5))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf784', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf781', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg357_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg358_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        return add_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0)
        return masked_subblock4
    def masked_subblock6(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
    def masked_subblock5(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock6 = self.masked_subblock6(lt, 0)
        return masked_subblock6


op785_op786_op787: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op785_op786_op787.writes = 
    [   MemoryDep('buf785', c0, {c0: 40}, None),
        MemoryDep('buf786', c0, {c0: 40}, None),
        MemoryDep('buf787', c0, {c0: 40}, None)]
op785_op786_op787.unmet_dependencies = 
    [   MemoryDep('buf782', c0, {c0: 2360}, None),
        MemoryDep('buf783', c0, {c0: 2360}, None),
        MemoryDep('buf784', c0, {c0: 2360}, None)]
op785_op786_op787.met_dependencies = []
op785_op786_op787.outputs = [
    buf785: ComputedBuffer
    buf785.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf785.users = [
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
    buf786: ComputedBuffer
    buf786.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf786.users = [
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
    buf787: ComputedBuffer
    buf787.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf787.users = [
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
]
op785_op786_op787.snodes[0] =
op785: SchedulerNode(ComputedBuffer)
op785.writes = [MemoryDep('buf785', c0, {c0: 40}, None)]
op785.unmet_dependencies = 
    [   MemoryDep('buf782', c0, {c0: 2360}, None),
        MemoryDep('buf783', c0, {c0: 2360}, None),
        MemoryDep('buf784', c0, {c0: 2360}, None)]
op785.met_dependencies = []
op785.outputs = [
    buf785: ComputedBuffer
    buf785.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf785.users = [
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
]
op785.group.device = cuda:0
op785.group.iteration = (40, 59)
op785.sizes = ([40], [59])
buf782_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf783_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf784_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf785_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op785_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf782', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf783', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf784', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf785', get_index_3, getitem)
        return store_reduction
op785_op786_op787.snodes[1] =
op786: SchedulerNode(ComputedBuffer)
op786.writes = [MemoryDep('buf786', c0, {c0: 40}, None)]
op786.unmet_dependencies = 
    [   MemoryDep('buf782', c0, {c0: 2360}, None),
        MemoryDep('buf783', c0, {c0: 2360}, None),
        MemoryDep('buf784', c0, {c0: 2360}, None)]
op786.met_dependencies = []
op786.outputs = [
    buf786: ComputedBuffer
    buf786.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf786.users = [
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
]
op786.group.device = cuda:0
op786.group.iteration = (40, 59)
op786.sizes = ([40], [59])
buf782_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf783_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf784_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf786_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op786_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf782', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf783', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf784', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf786', get_index_3, getitem_1)
        return store_reduction
op785_op786_op787.snodes[2] =
op787: SchedulerNode(ComputedBuffer)
op787.writes = [MemoryDep('buf787', c0, {c0: 40}, None)]
op787.unmet_dependencies = 
    [   MemoryDep('buf782', c0, {c0: 2360}, None),
        MemoryDep('buf783', c0, {c0: 2360}, None),
        MemoryDep('buf784', c0, {c0: 2360}, None)]
op787.met_dependencies = []
op787.outputs = [
    buf787: ComputedBuffer
    buf787.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf787.users = [
        NodeUser(node=SchedulerNode(name='op788'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op789'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op790'), can_inplace=False, is_weak=False),
    ]
]
op787.group.device = cuda:0
op787.group.iteration = (40, 59)
op787.sizes = ([40], [59])
buf782_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf783_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf784_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5, 59], stride=[295, 2368, 2368, 2368, 59, 1])
buf787_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op787_loop_body:
    var_ranges = {z0: 40, z1: 59}
    index0 = 59*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf782', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf783', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf784', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf787', get_index_3, getitem_2)
        return store_reduction


op788_op789: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op788_op789.writes = [MemoryDep('buf788', c0, {c0: 8}, None), MemoryDep('buf789', c0, {c0: 8}, None)]
op788_op789.unmet_dependencies = 
    [   MemoryDep('buf785', c0, {c0: 40}, None),
        MemoryDep('buf786', c0, {c0: 40}, None),
        MemoryDep('buf787', c0, {c0: 40}, None)]
op788_op789.met_dependencies = []
op788_op789.outputs = [
    buf788: ComputedBuffer
    buf788.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf788.users = [NodeUser(node=SchedulerNode(name='op791'), can_inplace=False, is_weak=False)]
    buf789: ComputedBuffer
    buf789.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf789.users = [NodeUser(node=SchedulerNode(name='op791'), can_inplace=False, is_weak=False)]
]
op788_op789.snodes[0] =
op788: SchedulerNode(ComputedBuffer)
op788.writes = [MemoryDep('buf788', c0, {c0: 8}, None)]
op788.unmet_dependencies = 
    [   MemoryDep('buf785', c0, {c0: 40}, None),
        MemoryDep('buf786', c0, {c0: 40}, None),
        MemoryDep('buf787', c0, {c0: 40}, None)]
op788.met_dependencies = []
op788.outputs = [
    buf788: ComputedBuffer
    buf788.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf788.users = [NodeUser(node=SchedulerNode(name='op791'), can_inplace=False, is_weak=False)]
]
op788.group.device = cuda:0
op788.group.iteration = (8, 5)
op788.sizes = ([8], [5])
buf785_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf786_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf787_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf788_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op788_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf785', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf786', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf787', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf788', get_index_3, getitem)
        return store_reduction
op788_op789.snodes[1] =
op789: SchedulerNode(ComputedBuffer)
op789.writes = [MemoryDep('buf789', c0, {c0: 8}, None)]
op789.unmet_dependencies = 
    [   MemoryDep('buf785', c0, {c0: 40}, None),
        MemoryDep('buf786', c0, {c0: 40}, None),
        MemoryDep('buf787', c0, {c0: 40}, None)]
op789.met_dependencies = []
op789.outputs = [
    buf789: ComputedBuffer
    buf789.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf789.users = [NodeUser(node=SchedulerNode(name='op791'), can_inplace=False, is_weak=False)]
]
op789.group.device = cuda:0
op789.group.iteration = (8, 5)
op789.sizes = ([8], [5])
buf785_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf786_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf787_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf789_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op789_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf785', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf786', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf787', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf789', get_index_3, getitem_1)
        return store_reduction


op791: SchedulerNode(ComputedBuffer)
op791.writes = [MemoryDep('buf791', c0, {c0: 301056}, None)]
op791.unmet_dependencies = 
    [   MemoryDep('buf771', c0, {c0: 301056}, None),
        MemoryDep('buf781', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf788', c0, {c0: 8}, None),
        MemoryDep('buf789', c0, {c0: 8}, None)]
op791.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg358_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg359_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg360_1', c1, {c0: 8, c1: 768}, None)]
op791.outputs = [
    buf791: ComputedBuffer
    buf791.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf791.users = [
        NodeUser(node=SchedulerNode(name='op792'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False),
    ]
]
op791.group.device = cuda:0
op791.group.iteration = (301056, 1)
op791.sizes = ([8, 768, 49], [])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf781_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf788_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf789_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op791_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    index3 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf781', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg357_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg358_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf788', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf789', get_index_5)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg359_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index2')
        load_7 = ops.load('arg360_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf791', get_index_8, add_3, None)
        return store


op792_op793: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op792_op793.writes = 
    [   MemoryDep('buf792', c0, {c0: 301056}, None),
        MemoryDep('buf793', c0, {c0: 301056}, None)]
op792_op793.unmet_dependencies = 
    [   MemoryDep('buf771', c0, {c0: 301056}, None),
        MemoryDep('buf781', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf791', c0 + 1, {c0: 301056}, None),
        MemoryDep('buf791', c0 + 6, {c0: 301056}, None),
        MemoryDep('buf791', c0 + 7, {c0: 301056}, None),
        MemoryDep('buf791', c0 + 8, {c0: 301056}, None),
        MemoryDep('buf791', c0 - 1, {c0: 301056}, None),
        MemoryDep('buf791', c0 - 6, {c0: 301056}, None),
        MemoryDep('buf791', c0 - 7, {c0: 301056}, None),
        MemoryDep('buf791', c0 - 8, {c0: 301056}, None),
        MemoryDep('buf791', c0, {c0: 301056}, None)]
op792_op793.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg358_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg361_1', c1, {c0: 8, c1: 768}, None)]
op792_op793.outputs = [
    buf792: ComputedBuffer
    buf792.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf792.users = [NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False)]
    buf793: ComputedBuffer
    buf793.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf793.users = [
        NodeUser(node=SchedulerNode(name='op794'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op804'), can_inplace=False, is_weak=False),
    ]
]
op792_op793.snodes[0] =
op792: SchedulerNode(ComputedBuffer)
op792.writes = [MemoryDep('buf792', c0, {c0: 301056}, None)]
op792.unmet_dependencies = 
    [   MemoryDep('buf791', c0 + 1, {c0: 301056}, None),
        MemoryDep('buf791', c0 + 6, {c0: 301056}, None),
        MemoryDep('buf791', c0 + 7, {c0: 301056}, None),
        MemoryDep('buf791', c0 + 8, {c0: 301056}, None),
        MemoryDep('buf791', c0 - 1, {c0: 301056}, None),
        MemoryDep('buf791', c0 - 6, {c0: 301056}, None),
        MemoryDep('buf791', c0 - 7, {c0: 301056}, None),
        MemoryDep('buf791', c0 - 8, {c0: 301056}, None),
        MemoryDep('buf791', c0, {c0: 301056}, None)]
op792.met_dependencies = []
op792.outputs = [
    buf792: ComputedBuffer
    buf792.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf792.users = [NodeUser(node=SchedulerNode(name='op793'), can_inplace=True, is_weak=False)]
]
op792.group.device = cuda:0
op792.group.iteration = (301056, 1)
op792.sizes = ([6144, 7, 7], [])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf792_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op792_loop_body:
    var_ranges = {z0: 6144, z1: 7, z2: 7}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 49*z0 + 7*z1 + z2 - 8
    index3 = z2
    index4 = 49*z0 + 7*z1 + z2 - 7
    index5 = z2 + 1
    index6 = 49*z0 + 7*z1 + z2 - 6
    index7 = z1
    index8 = 49*z0 + 7*z1 + z2 - 1
    index9 = 49*z0 + 7*z1 + z2
    index10 = 49*z0 + 7*z1 + z2 + 1
    index11 = z1 + 1
    index12 = 49*z0 + 7*z1 + z2 + 6
    index13 = 49*z0 + 7*z1 + z2 + 7
    index14 = 49*z0 + 7*z1 + z2 + 8
    index15 = Max(0, z1 - 1)*Max(0, z2 - 1) - Max(0, z1 - 1)*Min(7, z2 + 2) - Max(0, z2 - 1)*Min(7, z1 + 2) + Min(7, z1 + 2)*Min(7, z2 + 2)
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(7, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(7, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(7, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(7, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(7, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(7, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(7, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(7, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(7, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(7, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(7, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(7, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(7, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(7, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(7, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(7, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(7, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(7, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index9')
        store = ops.store('buf792', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf791', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf791', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf791', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf791', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf791', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf791', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf791', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf791', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf791', get_index)
        return load
op792_op793.snodes[1] =
op793: SchedulerNode(ComputedBuffer)
op793.writes = [MemoryDep('buf793', c0, {c0: 301056}, None)]
op793.unmet_dependencies = 
    [   MemoryDep('buf771', c0, {c0: 301056}, None),
        MemoryDep('buf781', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None),
        MemoryDep('buf791', c0, {c0: 301056}, None),
        MemoryDep('buf792', c0, {c0: 301056}, None)]
op793.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg358_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg361_1', c1, {c0: 8, c1: 768}, None)]
op793.outputs = [
    buf793: ComputedBuffer
    buf793.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
    buf793.users = [
        NodeUser(node=SchedulerNode(name='op794'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op795'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op796'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op804'), can_inplace=False, is_weak=False),
    ]
]
op793.group.device = cuda:0
op793.group.iteration = (301056, 1)
op793.sizes = ([8, 768, 49], [])
buf771_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf781_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf792_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf791_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf793_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
class op793_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf771', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf781', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg357_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg358_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf792', get_index_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf791', get_index_5)
        sub = ops.sub(load_4, load_5)
        get_index_6 = self.get_index('index2')
        load_6 = ops.load('arg361_1', get_index_6)
        mul_1 = ops.mul(sub, load_6)
        add_2 = ops.add(add_1, mul_1)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf793', get_index_7, add_2, None)
        return store


op794_op795_op796: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op794_op795_op796.writes = 
    [   MemoryDep('buf794', c0, {c0: 40}, None),
        MemoryDep('buf795', c0, {c0: 40}, None),
        MemoryDep('buf796', c0, {c0: 40}, None)]
op794_op795_op796.unmet_dependencies = [   MemoryDep('buf793', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op794_op795_op796.met_dependencies = []
op794_op795_op796.outputs = [
    buf794: ComputedBuffer
    buf794.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf794.users = [
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False),
    ]
    buf795: ComputedBuffer
    buf795.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf795.users = [
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False),
    ]
    buf796: ComputedBuffer
    buf796.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf796.users = [
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False),
    ]
]
op794_op795_op796.snodes[0] =
op794: SchedulerNode(ComputedBuffer)
op794.writes = [MemoryDep('buf794', c0, {c0: 40}, None)]
op794.unmet_dependencies = [   MemoryDep('buf793', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op794.met_dependencies = []
op794.outputs = [
    buf794: ComputedBuffer
    buf794.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf794.users = [
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False),
    ]
]
op794.group.device = cuda:0
op794.group.iteration = (40, 7527)
op794.sizes = ([8, 5], [7527])
buf793_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf794_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op794_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf794', get_index_3, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf793', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op794_op795_op796.snodes[1] =
op795: SchedulerNode(ComputedBuffer)
op795.writes = [MemoryDep('buf795', c0, {c0: 40}, None)]
op795.unmet_dependencies = [   MemoryDep('buf793', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op795.met_dependencies = []
op795.outputs = [
    buf795: ComputedBuffer
    buf795.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf795.users = [
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False),
    ]
]
op795.group.device = cuda:0
op795.group.iteration = (40, 7527)
op795.sizes = ([8, 5], [7527])
buf793_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf795_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op795_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf795', get_index_3, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf793', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant
op794_op795_op796.snodes[2] =
op796: SchedulerNode(ComputedBuffer)
op796.writes = [MemoryDep('buf796', c0, {c0: 40}, None)]
op796.unmet_dependencies = [   MemoryDep('buf793', 37632*c0 + ModularIndexing(c1, 1, 37632), {c0: 8, c1: 37635}, None)]
op796.met_dependencies = []
op796.outputs = [
    buf796: ComputedBuffer
    buf796.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
    buf796.users = [
        NodeUser(node=SchedulerNode(name='op797'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op798'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op799'), can_inplace=False, is_weak=False),
    ]
]
op796.group.device = cuda:0
op796.group.iteration = (40, 7527)
op796.sizes = ([8, 5], [7527])
buf793_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf796_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
class op796_loop_body:
    var_ranges = {z0: 8, z1: 5, z2: 7527}
    index0 = 7527*z1 + z2
    index1 = 37632*z0 + ModularIndexing(7527*z1 + z2, 1, 37632)
    index2 = 5*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(37632, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int32)
        constant_1 = ops.constant(37632, torch.int32)
        lt_1 = ops.lt(index_expr_1, constant_1)
        masked_subblock2 = self.masked_subblock2(lt_1, 0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int32)
        constant_2 = ops.constant(37632, torch.int32)
        lt_2 = ops.lt(index_expr_2, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_2, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (masked_subblock1, masked_subblock2, masked_subblock3))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf796', get_index_3, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf793', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
    def masked_subblock3(self, ops):
        constant = ops.constant(1.0, torch.float32)
        return constant


op797_op798: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op797_op798.writes = [MemoryDep('buf797', c0, {c0: 8}, None), MemoryDep('buf798', c0, {c0: 8}, None)]
op797_op798.unmet_dependencies = 
    [   MemoryDep('buf794', c0, {c0: 40}, None),
        MemoryDep('buf795', c0, {c0: 40}, None),
        MemoryDep('buf796', c0, {c0: 40}, None)]
op797_op798.met_dependencies = []
op797_op798.outputs = [
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf797.users = [NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False)]
    buf798: ComputedBuffer
    buf798.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf798.users = [NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False)]
]
op797_op798.snodes[0] =
op797: SchedulerNode(ComputedBuffer)
op797.writes = [MemoryDep('buf797', c0, {c0: 8}, None)]
op797.unmet_dependencies = 
    [   MemoryDep('buf794', c0, {c0: 40}, None),
        MemoryDep('buf795', c0, {c0: 40}, None),
        MemoryDep('buf796', c0, {c0: 40}, None)]
op797.met_dependencies = []
op797.outputs = [
    buf797: ComputedBuffer
    buf797.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf797.users = [NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False)]
]
op797.group.device = cuda:0
op797.group.iteration = (8, 5)
op797.sizes = ([8], [5])
buf794_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf795_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf796_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf797_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op797_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf794', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf795', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf796', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf797', get_index_3, getitem)
        return store_reduction
op797_op798.snodes[1] =
op798: SchedulerNode(ComputedBuffer)
op798.writes = [MemoryDep('buf798', c0, {c0: 8}, None)]
op798.unmet_dependencies = 
    [   MemoryDep('buf794', c0, {c0: 40}, None),
        MemoryDep('buf795', c0, {c0: 40}, None),
        MemoryDep('buf796', c0, {c0: 40}, None)]
op798.met_dependencies = []
op798.outputs = [
    buf798: ComputedBuffer
    buf798.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf798.users = [NodeUser(node=SchedulerNode(name='op800'), can_inplace=False, is_weak=False)]
]
op798.group.device = cuda:0
op798.group.iteration = (8, 5)
op798.sizes = ([8], [5])
buf794_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf795_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf796_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1, 5], stride=[5, 40, 40, 40, 1])
buf798_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op798_loop_body:
    var_ranges = {z0: 8, z1: 5}
    index0 = 5*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf794', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf795', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf796', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf798', get_index_3, getitem_1)
        return store_reduction


op800: SchedulerNode(ComputedBuffer)
op800.writes = [MemoryDep('buf800', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None)]
op800.unmet_dependencies = 
    [   MemoryDep('buf793', c0, {c0: 301056}, None),
        MemoryDep('buf797', c0, {c0: 8}, None),
        MemoryDep('buf798', c0, {c0: 8}, None)]
op800.met_dependencies = 
    [   MemoryDep('arg362_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg363_1', c1, {c0: 8, c1: 768}, None)]
op800.outputs = [
    buf800: ComputedBuffer
    buf800.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf800.users = [NodeUser(node=ExternKernelSchedulerNode(name='op801'), can_inplace=False, is_weak=False)]
]
op800.group.device = cuda:0
op800.group.iteration = (301056, 1)
op800.sizes = ([8, 768, 49], [])
buf793_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf797_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf798_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf800_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
class op800_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = z0
    index2 = z1
    index3 = 37632*z0 + z1 + 768*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf793', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf797', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf798', get_index_2)
        constant = ops.constant(37632.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg362_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg363_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf800', get_index_5, add_1, None)
        return store


op801: ExternKernelSchedulerNode(ExternKernelAlloc)
op801.writes = [StarDep(name='buf801', mode=None)]
op801.unmet_dependencies = [StarDep(name='buf800', mode=None)]
op801.met_dependencies = [StarDep(name='arg364_1', mode=None)]
op801.outputs = [
    buf801: ExternKernelAlloc
    buf801.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf801.users = [NodeUser(node=SchedulerNode(name='op802'), can_inplace=True, is_weak=False)]
]
op801.node.kernel = extern_kernels.convolution


op802: SchedulerNode(ComputedBuffer)
op802.writes = [MemoryDep('buf802', c0, {c0: 1204224}, None)]
op802.unmet_dependencies = [MemoryDep('buf801', c0, {c0: 1204224}, None)]
op802.met_dependencies = [MemoryDep('arg365_1', c1, {c0: 392, c1: 3072}, None)]
op802.outputs = [
    buf802: ComputedBuffer
    buf802.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
    buf802.users = [NodeUser(node=ExternKernelSchedulerNode(name='op803'), can_inplace=False, is_weak=False)]
]
op802.group.device = cuda:0
op802.group.iteration = (1204224, 1)
op802.sizes = ([392, 3072], [])
buf801_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf802_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 7, 7], stride=[150528, 1, 21504, 3072])
class op802_loop_body:
    var_ranges = {z0: 392, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf801', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg365_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf801', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg365_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf802', get_index_4, mul_2, None)
        return store


op803: ExternKernelSchedulerNode(ExternKernelAlloc)
op803.writes = [StarDep(name='buf803', mode=None)]
op803.unmet_dependencies = [StarDep(name='buf802', mode=None)]
op803.met_dependencies = [StarDep(name='arg366_1', mode=None)]
op803.outputs = [
    buf803: ExternKernelAlloc
    buf803.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
    buf803.users = [NodeUser(node=SchedulerNode(name='op804'), can_inplace=False, is_weak=False)]
]
op803.node.kernel = extern_kernels.convolution


op804: SchedulerNode(ComputedBuffer)
op804.writes = [MemoryDep('buf804', c0, {c0: 6144}, None)]
op804.unmet_dependencies = 
    [   MemoryDep('buf793', c0, {c0: 301056}, None),
        MemoryDep('buf803', 37632*c0 + c1 + 768*c2, {c0: 8, c1: 768, c2: 49}, None)]
op804.met_dependencies = 
    [   MemoryDep('arg367_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg368_1', c1, {c0: 8, c1: 768}, None)]
op804.outputs = [
    buf804: ComputedBuffer
    buf804.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 6144, 6144])
    buf804.users = [
        NodeUser(node=SchedulerNode(name='op805'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op806'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op807'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op808'), can_inplace=True, is_weak=False),
    ]
]
op804.group.device = cuda:0
op804.group.iteration = (6144, 49)
op804.sizes = ([8, 768], [49])
buf793_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 49, 7, 1])
buf803_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 7, 7], stride=[37632, 1, 5376, 768])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf804_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 6144, 6144])
class op804_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 49}
    index0 = 37632*z0 + 49*z1 + z2
    index1 = 37632*z0 + z1 + 768*z2
    index2 = z1
    index3 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf793', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf803', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg367_1', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg368_1', get_index_3)
        mul = ops.mul(add, load_3)
        add_1 = ops.add(load, mul)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf804', get_index_4, reduction)
        return store_reduction


op805_op806_op808: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op805_op806_op808.writes = 
    [   MemoryDep('buf805', c0, {c0: 8}, None),
        MemoryDep('buf806', c0, {c0: 8}, None),
        MemoryDep('buf808', c0, {c0: 6144}, None)]
op805_op806_op808.unmet_dependencies = [MemoryDep('buf804', c0, {c0: 6144}, None)]
op805_op806_op808.met_dependencies = 
    [   MemoryDep('arg369_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg370_1', c1, {c0: 8, c1: 768}, None)]
op805_op806_op808.outputs = [
    buf805: ComputedBuffer
    buf805.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf805.users = [NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False)]
    buf806: ComputedBuffer
    buf806.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf806.users = [NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False)]
    buf808: ComputedBuffer
    buf808.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 768], stride=[768, 1, 6144, 1])
    buf808.users = [NodeUser(node=ExternKernelSchedulerNode(name='op809'), can_inplace=False, is_weak=False)]
]
op805_op806_op808.snodes[0] =
op805: SchedulerNode(ComputedBuffer)
op805.writes = [MemoryDep('buf805', c0, {c0: 8}, None)]
op805.unmet_dependencies = [MemoryDep('buf804', c0, {c0: 6144}, None)]
op805.met_dependencies = []
op805.outputs = [
    buf805: ComputedBuffer
    buf805.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf805.users = [NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False)]
]
op805.group.device = cuda:0
op805.group.iteration = (8, 768)
op805.sizes = ([8], [768])
buf804_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 6144, 6144])
buf805_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op805_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf804', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', truediv)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf805', get_index_1, getitem)
        return store_reduction
op805_op806_op808.snodes[1] =
op806: SchedulerNode(ComputedBuffer)
op806.writes = [MemoryDep('buf806', c0, {c0: 8}, None)]
op806.unmet_dependencies = [MemoryDep('buf804', c0, {c0: 6144}, None)]
op806.met_dependencies = []
op806.outputs = [
    buf806: ComputedBuffer
    buf806.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf806.users = [NodeUser(node=SchedulerNode(name='op808'), can_inplace=False, is_weak=False)]
]
op806.group.device = cuda:0
op806.group.iteration = (8, 768)
op806.sizes = ([8], [768])
buf804_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 6144, 6144])
buf806_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op806_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf804', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', truediv)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf806', get_index_1, getitem_1)
        return store_reduction
op805_op806_op808.snodes[2] =
op808: SchedulerNode(ComputedBuffer)
op808.writes = [MemoryDep('buf808', c0, {c0: 6144}, None)]
op808.unmet_dependencies = 
    [   MemoryDep('buf804', c0, {c0: 6144}, None),
        MemoryDep('buf805', c0, {c0: 8}, None),
        MemoryDep('buf806', c0, {c0: 8}, None)]
op808.met_dependencies = 
    [   MemoryDep('arg369_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg370_1', c1, {c0: 8, c1: 768}, None)]
op808.outputs = [
    buf808: ComputedBuffer
    buf808.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 768], stride=[768, 1, 6144, 1])
    buf808.users = [NodeUser(node=ExternKernelSchedulerNode(name='op809'), can_inplace=False, is_weak=False)]
]
op808.group.device = cuda:0
op808.group.iteration = (6144, 1)
op808.sizes = ([8, 768], [])
buf804_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 6144, 6144])
buf805_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf806_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg369_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf808_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 768], stride=[768, 1, 6144, 1])
class op808_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf804', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf805', get_index_1)
        sub = ops.sub(truediv, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf806', get_index_2)
        constant_1 = ops.constant(768.0, torch.float32)
        truediv_1 = ops.truediv(load_2, constant_1)
        constant_2 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv_1, constant_2)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg369_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg370_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf808', get_index_5, add_1, None)
        return store


op809: ExternKernelSchedulerNode(ExternKernelOut)
op809.writes = [StarDep(name='buf809', mode=None)]
op809.unmet_dependencies = [StarDep(name='buf808', mode=None)]
op809.met_dependencies = [StarDep(name='arg371_1', mode=None), StarDep(name='arg372_1', mode=None)]
op809.outputs = [
    buf809: ExternKernelOut
    buf809.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf809.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op809.node.kernel = extern_kernels.addmm



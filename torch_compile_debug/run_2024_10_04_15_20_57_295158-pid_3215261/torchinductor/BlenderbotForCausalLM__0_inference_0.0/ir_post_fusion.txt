op0_op1_op3: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op0_op1_op3.writes = 
    [   MemoryDep('buf0', c0, {c0: 512}, None),
        MemoryDep('buf1', c0, {c0: 512}, None),
        MemoryDep('buf3', c0, {c0: 1310720}, None)]
op0_op1_op3.unmet_dependencies = []
op0_op1_op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}, None),
        MemoryDep('arg1_1', c1 + 2560*tmp0, {c0: 512, c1: 2560}, None),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 327680}, None),
        MemoryDep('arg3_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg4_1', c1, {c0: 512, c1: 2560}, None)]
op0_op1_op3.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op0_op1_op3.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 512}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}, None),
        MemoryDep('arg1_1', c1 + 2560*tmp0, {c0: 512, c1: 2560}, None),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 327680}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf0.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (512, 2560)
op0.sizes = ([4, 128], [2560])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8008, 2560], stride=[2560, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128, 2560], stride=[2560, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op0_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 2560}
    index0 = 128*z0 + z1
    index1 = 2560*indirect0 + z2
    index2 = z1
    index3 = 128
    index4 = 2560*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_5, getitem)
        return store_reduction
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), xmask, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 8008, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert(((0 <= tmp4) & (tmp4 < 8008)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 8008")
            tmp6 = tl.load(in_ptr1 + (r2 + (2560*tmp4)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask & xmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask & xmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask & xmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp12, xmask)
op0_op1_op3.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 512}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}, None),
        MemoryDep('arg1_1', c1 + 2560*tmp0, {c0: 512, c1: 2560}, None),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 327680}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf1.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (512, 2560)
op1.sizes = ([4, 128], [2560])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8008, 2560], stride=[2560, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128, 2560], stride=[2560, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op1_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 2560}
    index0 = 128*z0 + z1
    index1 = 2560*indirect0 + z2
    index2 = z1
    index3 = 128
    index4 = 2560*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem_1)
        return store_reduction
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), xmask, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 8008, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert(((0 <= tmp4) & (tmp4 < 8008)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 8008")
            tmp6 = tl.load(in_ptr1 + (r2 + (2560*tmp4)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask & xmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask & xmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask & xmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        tl.store(out_ptr0 + (x3), tmp13, xmask)
op0_op1_op3.snodes[2] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 1310720}, None)]
op3.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 512}, None), MemoryDep('buf1', c0, {c0: 512}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}, None),
        MemoryDep('arg1_1', c1 + 2560*tmp0, {c0: 512, c1: 2560}, None),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 327680}, None),
        MemoryDep('arg3_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg4_1', c1, {c0: 512, c1: 2560}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (1310720, 1)
op3.sizes = ([4, 128, 2560], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8008, 2560], stride=[2560, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128, 2560], stride=[2560, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf1_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op3_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 2560}
    index0 = 128*z0 + z1
    index1 = 2560*indirect0 + z2
    index2 = z1
    index3 = 128
    index4 = 2560*z1 + z2
    index5 = z2
    index6 = 327680*z0 + 2560*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index0')
        load_3 = ops.load('buf0', get_index_5)
        sub = ops.sub(add, load_3)
        get_index_6 = self.get_index('index0')
        load_4 = ops.load('buf1', get_index_6)
        constant_1 = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant_1)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_2)
        rsqrt = ops.rsqrt(add_1)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index5')
        load_5 = ops.load('arg3_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_5)
        get_index_8 = self.get_index('index5')
        load_6 = ops.load('arg4_1', get_index_8)
        add_2 = ops.add(mul_2, load_6)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf3', get_index_9, add_2, None)
        return store
op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 2560)
        x0 = xindex % 2560
        x4 = xindex % 327680
        x5 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr3 + (x3), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr4 + (x3), None, eviction_policy='evict_last')
        tmp20 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 8008, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 8008), "index out of bounds: 0 <= tmp4 < 8008")
        tmp6 = tl.load(in_ptr1 + (x0 + (2560*tmp4)), None)
        tmp7 = 1.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 - tmp11
        tmp14 = 2560.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-05
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 * tmp20
        tmp23 = tmp21 + tmp22
        tl.store(out_ptr0 + (x5), tmp23, None)
op0_op1_op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), xmask, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp12_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp12_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 8008, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert(((0 <= tmp4) & (tmp4 < 8008)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 8008")
            tmp6 = tl.load(in_ptr1 + (r2 + (2560*tmp4)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
            tmp12_mean_next, tmp12_m2_next, tmp12_weight_next = triton_helpers.welford_reduce(
                tmp11, tmp12_mean, tmp12_m2, tmp12_weight, roffset == 0
            )
            tmp12_mean = tl.where(rmask & xmask, tmp12_mean_next, tmp12_mean)
            tmp12_m2 = tl.where(rmask & xmask, tmp12_m2_next, tmp12_m2)
            tmp12_weight = tl.where(rmask & xmask, tmp12_weight_next, tmp12_weight)
        tmp12_tmp, tmp13_tmp, tmp14_tmp = triton_helpers.welford(
            tmp12_mean, tmp12_m2, tmp12_weight, 1
        )
        tmp12 = tmp12_tmp[:, None]
        tmp13 = tmp13_tmp[:, None]
        tmp14 = tmp14_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp23 = tl.load(in_ptr2 + (r2 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp32 = tl.load(in_ptr3 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp34 = tl.load(in_ptr4 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp15 = tl.full([XBLOCK, RBLOCK], 8008, tl.int32)
            tmp16 = tmp0 + tmp15
            tmp17 = tmp0 < 0
            tmp18 = tl.where(tmp17, tmp16, tmp0)
            tl.device_assert(((0 <= tmp18) & (tmp18 < 8008)) | ~(xmask), "index out of bounds: 0 <= tmp18 < 8008")
            tmp20 = tl.load(in_ptr1 + (r2 + (2560*tmp18)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = 1.0
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tmp25 = tmp24 - tmp12
            tmp26 = 2560.0
            tmp27 = tmp13 / tmp26
            tmp28 = 1e-05
            tmp29 = tmp27 + tmp28
            tmp30 = libdevice.rsqrt(tmp29)
            tmp31 = tmp25 * tmp30
            tmp33 = tmp31 * tmp32
            tmp35 = tmp33 + tmp34
            tl.store(out_ptr2 + (r2 + (2560*x3)), tmp35, rmask & xmask)


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.node.kernel = extern_kernels.mm


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op5.met_dependencies = [StarDep(name='arg7_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.node.kernel = extern_kernels.mm


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 1310720}, None)]
op6.unmet_dependencies = [   MemoryDep('buf5', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op6.met_dependencies = [MemoryDep('arg8_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (1310720, 1)
op6.sizes = ([4, 32, 128, 80], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op6_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf6', get_index_2, add, None)
        return store
op6 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 1310720}, None)]
op7.unmet_dependencies = [   MemoryDep('buf4', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op7.met_dependencies = [MemoryDep('arg6_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (1310720, 1)
op7.sizes = ([4, 32, 128, 80], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op7_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf7', get_index_2, mul, None)
        return store
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.bmm


op9_op10_op13: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op9_op10_op13.writes = 
    [   MemoryDep('buf10', c0, {c0: 16384}, None),
        MemoryDep('buf13', c0, {c0: 2097152}, None),
        MemoryDep('buf9', c0, {c0: 16384}, None)]
op9_op10_op13.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 2097152}, None)]
op9_op10_op13.met_dependencies = []
op9_op10_op13.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op9_op10_op13.snodes[0] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 16384}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 2097152}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf9.users = [
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (16384, 128)
op9.sizes = ([128, 128], [128])
buf8_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op9_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf9', get_index_3, reduction)
        return store_reduction
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op9_op10_op13.snodes[1] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 16384}, None)]
op10.unmet_dependencies = 
    [   MemoryDep('buf8', c0, {c0: 2097152}, None),
        MemoryDep('buf9', c0, {c0: 16384}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf10.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (16384, 128)
op10.sizes = ([128, 128], [128])
buf8_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf10_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op10_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf9', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf10', get_index_4, reduction)
        return store_reduction
op10 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op9_op10_op13.snodes[2] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 2097152}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 16384}, None),
        MemoryDep('buf8', c0, {c0: 2097152}, None),
        MemoryDep('buf9', c0, {c0: 16384}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (2097152, 1)
op13.sizes = ([128, 128, 128], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf10_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf13_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op13_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf9', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf10', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf13', get_index_5, truediv, None)
        return store
op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op9_op10_op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op11: ExternKernelSchedulerNode(ExternKernelOut)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op11.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op11.outputs = [
    buf11: ExternKernelOut
    buf11.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = extern_kernels.mm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 1310720}, None)]
op12.unmet_dependencies = [   MemoryDep('buf11', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op12.met_dependencies = [MemoryDep('arg10_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf12.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (1310720, 1)
op12.sizes = ([4, 32, 128, 80], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op12_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf12', get_index_2, add, None)
        return store
op12 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf12', mode=None), StarDep(name='buf13', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = extern_kernels.bmm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 1310720}, None)]
op15.unmet_dependencies = [   MemoryDep('buf14', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (1310720, 1)
op15.sizes = ([4, 128, 32, 80], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op15_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.mm


op17_op18_op19_op21: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op17_op18_op19_op21.writes = 
    [   MemoryDep('buf17', c0, {c0: 1310720}, None),
        MemoryDep('buf18', c0, {c0: 512}, None),
        MemoryDep('buf19', c0, {c0: 512}, None),
        MemoryDep('buf21', c0, {c0: 1310720}, None)]
op17_op18_op19_op21.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 1310720}, None)]
op17_op18_op19_op21.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}, None),
        MemoryDep('arg12_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg13_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg14_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg1_1', c1 + 2560*tmp0, {c0: 512, c1: 2560}, None),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 327680}, None)]
op17_op18_op19_op21.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op17_op18_op19_op21.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 1310720}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 1310720}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 512}, None),
        MemoryDep('arg12_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg1_1', c1 + 2560*tmp0, {c0: 512, c1: 2560}, None),
        MemoryDep('arg2_1', c1, {c0: 4, c1: 327680}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (1310720, 1)
op17.sizes = ([4, 128, 2560], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[4, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8008, 2560], stride=[2560, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128, 2560], stride=[2560, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op17_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 2560}
    index0 = 128*z0 + z1
    index1 = 2560*indirect0 + z2
    index2 = z1
    index3 = 128
    index4 = 2560*z1 + z2
    index5 = 327680*z0 + 2560*z1 + z2
    index6 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load_1, constant)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('arg2_1', get_index_4)
        add = ops.add(mul, load_2)
        get_index_5 = self.get_index('index5')
        load_3 = ops.load('buf16', get_index_5)
        get_index_6 = self.get_index('index6')
        load_4 = ops.load('arg12_1', get_index_6)
        add_1 = ops.add(load_3, load_4)
        add_2 = ops.add(add, add_1)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf17', get_index_7, add_2, None)
        return store
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 2560)
        x0 = xindex % 2560
        x4 = xindex % 327680
        x5 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp9 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_out_ptr0 + (x5), None)
        tmp12 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 8008, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 8008), "index out of bounds: 0 <= tmp4 < 8008")
        tmp6 = tl.load(in_ptr1 + (x0 + (2560*tmp4)), None)
        tmp7 = 1.0
        tmp8 = tmp6 * tmp7
        tmp10 = tmp8 + tmp9
        tmp13 = tmp11 + tmp12
        tmp14 = tmp10 + tmp13
        tl.store(in_out_ptr0 + (x5), tmp14, None)
op17_op18_op19_op21.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 512}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 1310720}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (512, 2560)
op18.sizes = ([512], [2560])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op18_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, getitem)
        return store_reduction
op18 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op17_op18_op19_op21.snodes[2] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 512}, None)]
op19.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 1310720}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (512, 2560)
op19.sizes = ([512], [2560])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op19_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_1, getitem_1)
        return store_reduction
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op17_op18_op19_op21.snodes[3] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 1310720}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 1310720}, None),
        MemoryDep('buf18', c0, {c0: 512}, None),
        MemoryDep('buf19', c0, {c0: 512}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg13_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg14_1', c1, {c0: 512, c1: 2560}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (1310720, 1)
op21.sizes = ([512, 2560], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf19_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op21_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg13_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg14_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, add_1, None)
        return store
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op17_op18_op19_op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), xmask, eviction_policy='evict_last')
        x0 = xindex % 128
        tmp16_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp16_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp16_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp9 = tl.load(in_ptr2 + (r2 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_out_ptr0 + (r2 + (2560*x3)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tl.load(in_ptr3 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 8008, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert(((0 <= tmp4) & (tmp4 < 8008)) | ~(xmask), "index out of bounds: 0 <= tmp4 < 8008")
            tmp6 = tl.load(in_ptr1 + (r2 + (2560*tmp4)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp7 = 1.0
            tmp8 = tmp6 * tmp7
            tmp10 = tmp8 + tmp9
            tmp13 = tmp11 + tmp12
            tmp14 = tmp10 + tmp13
            tmp15 = tl.broadcast_to(tmp14, [XBLOCK, RBLOCK])
            tmp16_mean_next, tmp16_m2_next, tmp16_weight_next = triton_helpers.welford_reduce(
                tmp15, tmp16_mean, tmp16_m2, tmp16_weight, roffset == 0
            )
            tmp16_mean = tl.where(rmask & xmask, tmp16_mean_next, tmp16_mean)
            tmp16_m2 = tl.where(rmask & xmask, tmp16_m2_next, tmp16_m2)
            tmp16_weight = tl.where(rmask & xmask, tmp16_weight_next, tmp16_weight)
            tl.store(in_out_ptr0 + (r2 + (2560*x3)), tmp14, rmask & xmask)
        tmp16_tmp, tmp17_tmp, tmp18_tmp = triton_helpers.welford(
            tmp16_mean, tmp16_m2, tmp16_weight, 1
        )
        tmp16 = tmp16_tmp[:, None]
        tmp17 = tmp17_tmp[:, None]
        tmp18 = tmp18_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r2 = rindex
            tmp19 = tl.load(in_out_ptr0 + (r2 + (2560*x3)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp27 = tl.load(in_ptr4 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp29 = tl.load(in_ptr5 + (r2), rmask, eviction_policy='evict_last', other=0.0)
            tmp20 = tmp19 - tmp16
            tmp21 = 2560.0
            tmp22 = tmp17 / tmp21
            tmp23 = 1e-05
            tmp24 = tmp22 + tmp23
            tmp25 = libdevice.rsqrt(tmp24)
            tmp26 = tmp20 * tmp25
            tmp28 = tmp26 * tmp27
            tmp30 = tmp28 + tmp29
            tl.store(out_ptr2 + (r2 + (2560*x3)), tmp30, rmask & xmask)


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 5242880}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 5242880}, None)]
op23.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 512, c1: 10240}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (5242880, 1)
op23.sizes = ([512, 10240], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op23_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg16_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf23', get_index_4, mul_2, None)
        return store
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.mm


op25_op26_op28: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op25_op26_op28.writes = 
    [   MemoryDep('buf25', c0, {c0: 512}, None),
        MemoryDep('buf26', c0, {c0: 512}, None),
        MemoryDep('buf28', c0, {c0: 1310720}, None)]
op25_op26_op28.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 1310720}, None),
        MemoryDep('buf24', c0, {c0: 1310720}, None)]
op25_op26_op28.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg19_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg20_1', c1, {c0: 512, c1: 2560}, None)]
op25_op26_op28.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op25_op26_op28.snodes[0] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 512}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 1310720}, None),
        MemoryDep('buf24', c0, {c0: 1310720}, None)]
op25.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 512, c1: 2560}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (512, 2560)
op25.sizes = ([512], [2560])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op25_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem)
        return store_reduction
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op25_op26_op28.snodes[1] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 512}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 1310720}, None),
        MemoryDep('buf24', c0, {c0: 1310720}, None)]
op26.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 512, c1: 2560}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (512, 2560)
op26.sizes = ([512], [2560])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op26_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem_1)
        return store_reduction
op26 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op25_op26_op28.snodes[2] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1310720}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 1310720}, None),
        MemoryDep('buf24', c0, {c0: 1310720}, None),
        MemoryDep('buf25', c0, {c0: 512}, None),
        MemoryDep('buf26', c0, {c0: 512}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg19_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg20_1', c1, {c0: 512, c1: 2560}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf28.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (1310720, 1)
op28.sizes = ([512, 2560], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf26_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op28_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf25', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf26', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg19_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg20_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf28', get_index_7, add_3, None)
        return store
op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op25_op26_op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op30.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 1310720}, None)]
op31.unmet_dependencies = [   MemoryDep('buf30', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op31.met_dependencies = [MemoryDep('arg24_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (1310720, 1)
op31.sizes = ([4, 32, 128, 80], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op31_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf31', get_index_2, add, None)
        return store
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 1310720}, None)]
op32.unmet_dependencies = [   MemoryDep('buf29', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op32.met_dependencies = [MemoryDep('arg22_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (1310720, 1)
op32.sizes = ([4, 32, 128, 80], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op32_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf32', get_index_2, mul, None)
        return store
op32 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf31', mode=None), StarDep(name='buf32', mode=None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op33.node.kernel = extern_kernels.bmm


op34_op35_op38: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op34_op35_op38.writes = 
    [   MemoryDep('buf34', c0, {c0: 16384}, None),
        MemoryDep('buf35', c0, {c0: 16384}, None),
        MemoryDep('buf38', c0, {c0: 2097152}, None)]
op34_op35_op38.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 2097152}, None)]
op34_op35_op38.met_dependencies = []
op34_op35_op38.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf35.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op34_op35_op38.snodes[0] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 16384}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 2097152}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (16384, 128)
op34.sizes = ([128, 128], [128])
buf33_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op34_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf34', get_index_3, reduction)
        return store_reduction
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op34_op35_op38.snodes[1] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 16384}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 2097152}, None),
        MemoryDep('buf34', c0, {c0: 16384}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf35.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (16384, 128)
op35.sizes = ([128, 128], [128])
buf33_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf35_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op35_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf34', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf35', get_index_4, reduction)
        return store_reduction
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op34_op35_op38.snodes[2] =
op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 2097152}, None)]
op38.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 2097152}, None),
        MemoryDep('buf34', c0, {c0: 16384}, None),
        MemoryDep('buf35', c0, {c0: 16384}, None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (2097152, 1)
op38.sizes = ([128, 128, 128], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf35_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf38_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op38_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf34', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf35', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf38', get_index_5, truediv, None)
        return store
op38 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op34_op35_op38 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op36.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.node.kernel = extern_kernels.mm


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 1310720}, None)]
op37.unmet_dependencies = [   MemoryDep('buf36', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op37.met_dependencies = [MemoryDep('arg26_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (1310720, 1)
op37.sizes = ([4, 32, 128, 80], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op37_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf37', get_index_2, add, None)
        return store
op37 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf37', mode=None), StarDep(name='buf38', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = extern_kernels.bmm


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 1310720}, None)]
op40.unmet_dependencies = [   MemoryDep('buf39', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (1310720, 1)
op40.sizes = ([4, 128, 32, 80], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op40_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf40', get_index_1, load, None)
        return store
op40 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.mm


op42_op43_op44_op46: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op42_op43_op44_op46.writes = 
    [   MemoryDep('buf42', c0, {c0: 1310720}, None),
        MemoryDep('buf43', c0, {c0: 512}, None),
        MemoryDep('buf44', c0, {c0: 512}, None),
        MemoryDep('buf46', c0, {c0: 1310720}, None)]
op42_op43_op44_op46.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 1310720}, None),
        MemoryDep('buf24', c0, {c0: 1310720}, None),
        MemoryDep('buf41', c0, {c0: 1310720}, None)]
op42_op43_op44_op46.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg28_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg29_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg30_1', c1, {c0: 512, c1: 2560}, None)]
op42_op43_op44_op46.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op42_op43_op44_op46.snodes[0] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 1310720}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 1310720}, None),
        MemoryDep('buf24', c0, {c0: 1310720}, None),
        MemoryDep('buf41', c0, {c0: 1310720}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg28_1', c1, {c0: 512, c1: 2560}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (1310720, 1)
op42.sizes = ([512, 2560], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op42_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf41', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg28_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf42', get_index_5, add_3, None)
        return store
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op42_op43_op44_op46.snodes[1] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 512}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 1310720}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (512, 2560)
op43.sizes = ([512], [2560])
buf42_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op43_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, getitem)
        return store_reduction
op43 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op42_op43_op44_op46.snodes[2] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 512}, None)]
op44.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 1310720}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (512, 2560)
op44.sizes = ([512], [2560])
buf42_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op44_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf44', get_index_1, getitem_1)
        return store_reduction
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op42_op43_op44_op46.snodes[3] =
op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 1310720}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1310720}, None),
        MemoryDep('buf43', c0, {c0: 512}, None),
        MemoryDep('buf44', c0, {c0: 512}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg30_1', c1, {c0: 512, c1: 2560}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (1310720, 1)
op46.sizes = ([512, 2560], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf44_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op46_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf43', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf44', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf46', get_index_5, add_1, None)
        return store
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op42_op43_op44_op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 5242880}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 5242880}, None)]
op48.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 512, c1: 10240}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (5242880, 1)
op48.sizes = ([512, 10240], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op48_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf47', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg32_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf48', get_index_4, mul_2, None)
        return store
op48 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op49.node.kernel = extern_kernels.mm


op50_op51_op53: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op50_op51_op53.writes = 
    [   MemoryDep('buf50', c0, {c0: 512}, None),
        MemoryDep('buf51', c0, {c0: 512}, None),
        MemoryDep('buf53', c0, {c0: 1310720}, None)]
op50_op51_op53.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1310720}, None),
        MemoryDep('buf49', c0, {c0: 1310720}, None)]
op50_op51_op53.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg35_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg36_1', c1, {c0: 512, c1: 2560}, None)]
op50_op51_op53.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op50_op51_op53.snodes[0] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 512}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1310720}, None),
        MemoryDep('buf49', c0, {c0: 1310720}, None)]
op50.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 512, c1: 2560}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (512, 2560)
op50.sizes = ([512], [2560])
buf42_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op50_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf50', get_index_3, getitem)
        return store_reduction
op50 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op50_op51_op53.snodes[1] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 512}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1310720}, None),
        MemoryDep('buf49', c0, {c0: 1310720}, None)]
op51.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 512, c1: 2560}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (512, 2560)
op51.sizes = ([512], [2560])
buf42_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op51_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_3, getitem_1)
        return store_reduction
op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op50_op51_op53.snodes[2] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 1310720}, None)]
op53.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1310720}, None),
        MemoryDep('buf49', c0, {c0: 1310720}, None),
        MemoryDep('buf50', c0, {c0: 512}, None),
        MemoryDep('buf51', c0, {c0: 512}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg35_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg36_1', c1, {c0: 512, c1: 2560}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf53.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op53.group.device = cuda:0
op53.group.iteration = (1310720, 1)
op53.sizes = ([512, 2560], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf51_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op53_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf50', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf51', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg35_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg36_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf53', get_index_7, add_3, None)
        return store
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op50_op51_op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op55.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 1310720}, None)]
op56.unmet_dependencies = [   MemoryDep('buf55', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op56.met_dependencies = [MemoryDep('arg40_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf56.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (1310720, 1)
op56.sizes = ([4, 32, 128, 80], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op56_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf56', get_index_2, add, None)
        return store
op56 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 1310720}, None)]
op57.unmet_dependencies = [   MemoryDep('buf54', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op57.met_dependencies = [MemoryDep('arg38_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (1310720, 1)
op57.sizes = ([4, 32, 128, 80], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op57_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf57', get_index_2, mul, None)
        return store
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf56', mode=None), StarDep(name='buf57', mode=None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
    ]
]
op58.node.kernel = extern_kernels.bmm


op59_op60_op63: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op59_op60_op63.writes = 
    [   MemoryDep('buf59', c0, {c0: 16384}, None),
        MemoryDep('buf60', c0, {c0: 16384}, None),
        MemoryDep('buf63', c0, {c0: 2097152}, None)]
op59_op60_op63.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 2097152}, None)]
op59_op60_op63.met_dependencies = []
op59_op60_op63.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
    ]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op59_op60_op63.snodes[0] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 16384}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 2097152}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (16384, 128)
op59.sizes = ([128, 128], [128])
buf58_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op59_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf59', get_index_3, reduction)
        return store_reduction
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op59_op60_op63.snodes[1] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 16384}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 2097152}, None),
        MemoryDep('buf59', c0, {c0: 16384}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (16384, 128)
op60.sizes = ([128, 128], [128])
buf58_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf60_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op60_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf59', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf60', get_index_4, reduction)
        return store_reduction
op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op59_op60_op63.snodes[2] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 2097152}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 2097152}, None),
        MemoryDep('buf59', c0, {c0: 16384}, None),
        MemoryDep('buf60', c0, {c0: 16384}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (2097152, 1)
op63.sizes = ([128, 128, 128], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf60_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf63_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op63_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf59', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf60', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf63', get_index_5, truediv, None)
        return store
op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op59_op60_op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op61.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = extern_kernels.mm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1310720}, None)]
op62.unmet_dependencies = [   MemoryDep('buf61', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op62.met_dependencies = [MemoryDep('arg42_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op62.group.device = cuda:0
op62.group.iteration = (1310720, 1)
op62.sizes = ([4, 32, 128, 80], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op62_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf62', get_index_2, add, None)
        return store
op62 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf62', mode=None), StarDep(name='buf63', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.node.kernel = extern_kernels.bmm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 1310720}, None)]
op65.unmet_dependencies = [   MemoryDep('buf64', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (1310720, 1)
op65.sizes = ([4, 128, 32, 80], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op65_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf65', get_index_1, load, None)
        return store
op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67_op68_op69_op71: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op67_op68_op69_op71.writes = 
    [   MemoryDep('buf67', c0, {c0: 1310720}, None),
        MemoryDep('buf68', c0, {c0: 512}, None),
        MemoryDep('buf69', c0, {c0: 512}, None),
        MemoryDep('buf71', c0, {c0: 1310720}, None)]
op67_op68_op69_op71.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1310720}, None),
        MemoryDep('buf49', c0, {c0: 1310720}, None),
        MemoryDep('buf66', c0, {c0: 1310720}, None)]
op67_op68_op69_op71.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg44_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg45_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg46_1', c1, {c0: 512, c1: 2560}, None)]
op67_op68_op69_op71.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op67_op68_op69_op71.snodes[0] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 1310720}, None)]
op67.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 1310720}, None),
        MemoryDep('buf49', c0, {c0: 1310720}, None),
        MemoryDep('buf66', c0, {c0: 1310720}, None)]
op67.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg44_1', c1, {c0: 512, c1: 2560}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (1310720, 1)
op67.sizes = ([512, 2560], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op67_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf49', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg34_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf66', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg44_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf67', get_index_5, add_3, None)
        return store
op67 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op67_op68_op69_op71.snodes[1] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 512}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 1310720}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (512, 2560)
op68.sizes = ([512], [2560])
buf67_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op68_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf68', get_index_1, getitem)
        return store_reduction
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op67_op68_op69_op71.snodes[2] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 512}, None)]
op69.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 1310720}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf69.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (512, 2560)
op69.sizes = ([512], [2560])
buf67_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op69_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, getitem_1)
        return store_reduction
op69 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op67_op68_op69_op71.snodes[3] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 1310720}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 1310720}, None),
        MemoryDep('buf68', c0, {c0: 512}, None),
        MemoryDep('buf69', c0, {c0: 512}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg46_1', c1, {c0: 512, c1: 2560}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (1310720, 1)
op71.sizes = ([512, 2560], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf69_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op71_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf68', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf69', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg45_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg46_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf71', get_index_5, add_1, None)
        return store
op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op67_op68_op69_op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 5242880}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 5242880}, None)]
op73.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 512, c1: 10240}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (5242880, 1)
op73.sizes = ([512, 10240], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op73_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf72', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg48_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf73', get_index_4, mul_2, None)
        return store
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf74.users = [
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op74.node.kernel = extern_kernels.mm


op75_op76_op78: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op75_op76_op78.writes = 
    [   MemoryDep('buf75', c0, {c0: 512}, None),
        MemoryDep('buf76', c0, {c0: 512}, None),
        MemoryDep('buf78', c0, {c0: 1310720}, None)]
op75_op76_op78.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 1310720}, None),
        MemoryDep('buf74', c0, {c0: 1310720}, None)]
op75_op76_op78.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg51_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg52_1', c1, {c0: 512, c1: 2560}, None)]
op75_op76_op78.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf75.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op75_op76_op78.snodes[0] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 512}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 1310720}, None),
        MemoryDep('buf74', c0, {c0: 1310720}, None)]
op75.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 512, c1: 2560}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf75.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (512, 2560)
op75.sizes = ([512], [2560])
buf67_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op75_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_3, getitem)
        return store_reduction
op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op75_op76_op78.snodes[1] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 512}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 1310720}, None),
        MemoryDep('buf74', c0, {c0: 1310720}, None)]
op76.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 512, c1: 2560}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf76.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (512, 2560)
op76.sizes = ([512], [2560])
buf67_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op76_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf76', get_index_3, getitem_1)
        return store_reduction
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op75_op76_op78.snodes[2] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 1310720}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 1310720}, None),
        MemoryDep('buf74', c0, {c0: 1310720}, None),
        MemoryDep('buf75', c0, {c0: 512}, None),
        MemoryDep('buf76', c0, {c0: 512}, None)]
op78.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg51_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg52_1', c1, {c0: 512, c1: 2560}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (1310720, 1)
op78.sizes = ([512, 2560], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf76_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op78_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf75', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf76', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg51_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg52_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf78', get_index_7, add_3, None)
        return store
op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op75_op76_op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = extern_kernels.mm


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op80.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 1310720}, None)]
op81.unmet_dependencies = [   MemoryDep('buf80', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op81.met_dependencies = [MemoryDep('arg56_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf81.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (1310720, 1)
op81.sizes = ([4, 32, 128, 80], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op81_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg56_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf81', get_index_2, add, None)
        return store
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 1310720}, None)]
op82.unmet_dependencies = [   MemoryDep('buf79', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op82.met_dependencies = [MemoryDep('arg54_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (1310720, 1)
op82.sizes = ([4, 32, 128, 80], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op82_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf82', get_index_2, mul, None)
        return store
op82 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf81', mode=None), StarDep(name='buf82', mode=None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
    ]
]
op83.node.kernel = extern_kernels.bmm


op84_op85_op88: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op84_op85_op88.writes = 
    [   MemoryDep('buf84', c0, {c0: 16384}, None),
        MemoryDep('buf85', c0, {c0: 16384}, None),
        MemoryDep('buf88', c0, {c0: 2097152}, None)]
op84_op85_op88.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 2097152}, None)]
op84_op85_op88.met_dependencies = []
op84_op85_op88.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf85.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op84_op85_op88.snodes[0] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 16384}, None)]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 2097152}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (16384, 128)
op84.sizes = ([128, 128], [128])
buf83_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op84_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf84', get_index_3, reduction)
        return store_reduction
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op84_op85_op88.snodes[1] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 16384}, None)]
op85.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 2097152}, None),
        MemoryDep('buf84', c0, {c0: 16384}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf85.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (16384, 128)
op85.sizes = ([128, 128], [128])
buf83_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf85_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op85_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf84', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf85', get_index_4, reduction)
        return store_reduction
op85 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op84_op85_op88.snodes[2] =
op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 2097152}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 2097152}, None),
        MemoryDep('buf84', c0, {c0: 16384}, None),
        MemoryDep('buf85', c0, {c0: 16384}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (2097152, 1)
op88.sizes = ([128, 128, 128], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf85_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf88_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op88_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf84', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf85', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf88', get_index_5, truediv, None)
        return store
op88 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op84_op85_op88 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op86.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.node.kernel = extern_kernels.mm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 1310720}, None)]
op87.unmet_dependencies = [   MemoryDep('buf86', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op87.met_dependencies = [MemoryDep('arg58_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf87.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op87.group.device = cuda:0
op87.group.iteration = (1310720, 1)
op87.sizes = ([4, 32, 128, 80], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op87_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf87', get_index_2, add, None)
        return store
op87 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf87', mode=None), StarDep(name='buf88', mode=None)]
op89.met_dependencies = []
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = extern_kernels.bmm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 1310720}, None)]
op90.unmet_dependencies = [   MemoryDep('buf89', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (1310720, 1)
op90.sizes = ([4, 128, 32, 80], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op90_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92_op93_op94_op96: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op92_op93_op94_op96.writes = 
    [   MemoryDep('buf92', c0, {c0: 1310720}, None),
        MemoryDep('buf93', c0, {c0: 512}, None),
        MemoryDep('buf94', c0, {c0: 512}, None),
        MemoryDep('buf96', c0, {c0: 1310720}, None)]
op92_op93_op94_op96.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 1310720}, None),
        MemoryDep('buf74', c0, {c0: 1310720}, None),
        MemoryDep('buf91', c0, {c0: 1310720}, None)]
op92_op93_op94_op96.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg60_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg61_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg62_1', c1, {c0: 512, c1: 2560}, None)]
op92_op93_op94_op96.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op92_op93_op94_op96.snodes[0] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 1310720}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 1310720}, None),
        MemoryDep('buf74', c0, {c0: 1310720}, None),
        MemoryDep('buf91', c0, {c0: 1310720}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg60_1', c1, {c0: 512, c1: 2560}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (1310720, 1)
op92.sizes = ([512, 2560], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op92_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf74', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf91', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg60_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, add_3, None)
        return store
op92 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op92_op93_op94_op96.snodes[1] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 512}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 1310720}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (512, 2560)
op93.sizes = ([512], [2560])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op93_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
        return store_reduction
op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op92_op93_op94_op96.snodes[2] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 512}, None)]
op94.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 1310720}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (512, 2560)
op94.sizes = ([512], [2560])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op94_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
        return store_reduction
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op92_op93_op94_op96.snodes[3] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1310720}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 1310720}, None),
        MemoryDep('buf93', c0, {c0: 512}, None),
        MemoryDep('buf94', c0, {c0: 512}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg62_1', c1, {c0: 512, c1: 2560}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (1310720, 1)
op96.sizes = ([512, 2560], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf94_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op96_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg61_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg62_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store
op96 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op92_op93_op94_op96 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 5242880}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 5242880}, None)]
op98.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 512, c1: 10240}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (5242880, 1)
op98.sizes = ([512, 10240], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op98_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf98', get_index_4, mul_2, None)
        return store
op98 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100_op101_op103: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op100_op101_op103.writes = 
    [   MemoryDep('buf100', c0, {c0: 512}, None),
        MemoryDep('buf101', c0, {c0: 512}, None),
        MemoryDep('buf103', c0, {c0: 1310720}, None)]
op100_op101_op103.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 1310720}, None),
        MemoryDep('buf99', c0, {c0: 1310720}, None)]
op100_op101_op103.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg67_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg68_1', c1, {c0: 512, c1: 2560}, None)]
op100_op101_op103.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op100_op101_op103.snodes[0] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 512}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 1310720}, None),
        MemoryDep('buf99', c0, {c0: 1310720}, None)]
op100.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 512, c1: 2560}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (512, 2560)
op100.sizes = ([512], [2560])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op100_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, getitem)
        return store_reduction
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op100_op101_op103.snodes[1] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 512}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 1310720}, None),
        MemoryDep('buf99', c0, {c0: 1310720}, None)]
op101.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 512, c1: 2560}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (512, 2560)
op101.sizes = ([512], [2560])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op101_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem_1)
        return store_reduction
op101 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op100_op101_op103.snodes[2] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 1310720}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 512}, None),
        MemoryDep('buf101', c0, {c0: 512}, None),
        MemoryDep('buf92', c0, {c0: 1310720}, None),
        MemoryDep('buf99', c0, {c0: 1310720}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg67_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg68_1', c1, {c0: 512, c1: 2560}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (1310720, 1)
op103.sizes = ([512, 2560], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf101_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op103_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf101', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg67_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg68_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf103', get_index_7, add_3, None)
        return store
op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op100_op101_op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf104.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.mm


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op105.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.node.kernel = extern_kernels.mm


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 1310720}, None)]
op106.unmet_dependencies = [   MemoryDep('buf105', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op106.met_dependencies = [MemoryDep('arg72_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf106.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (1310720, 1)
op106.sizes = ([4, 32, 128, 80], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op106_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf106', get_index_2, add, None)
        return store
op106 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 1310720}, None)]
op107.unmet_dependencies = [   MemoryDep('buf104', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op107.met_dependencies = [MemoryDep('arg70_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (1310720, 1)
op107.sizes = ([4, 32, 128, 80], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op107_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf107', get_index_2, mul, None)
        return store
op107 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf106', mode=None), StarDep(name='buf107', mode=None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op108.node.kernel = extern_kernels.bmm


op109_op110_op113: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op109_op110_op113.writes = 
    [   MemoryDep('buf109', c0, {c0: 16384}, None),
        MemoryDep('buf110', c0, {c0: 16384}, None),
        MemoryDep('buf113', c0, {c0: 2097152}, None)]
op109_op110_op113.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 2097152}, None)]
op109_op110_op113.met_dependencies = []
op109_op110_op113.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
    ]
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf110.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op109_op110_op113.snodes[0] =
op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 16384}, None)]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 2097152}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (16384, 128)
op109.sizes = ([128, 128], [128])
buf108_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op109_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf109', get_index_3, reduction)
        return store_reduction
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op109_op110_op113.snodes[1] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 16384}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 2097152}, None),
        MemoryDep('buf109', c0, {c0: 16384}, None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf110.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (16384, 128)
op110.sizes = ([128, 128], [128])
buf108_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf110_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op110_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf109', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf110', get_index_4, reduction)
        return store_reduction
op110 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op109_op110_op113.snodes[2] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 2097152}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 2097152}, None),
        MemoryDep('buf109', c0, {c0: 16384}, None),
        MemoryDep('buf110', c0, {c0: 16384}, None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (2097152, 1)
op113.sizes = ([128, 128, 128], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf110_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf113_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op113_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf109', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf110', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf113', get_index_5, truediv, None)
        return store
op113 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op109_op110_op113 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op111.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = extern_kernels.mm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 1310720}, None)]
op112.unmet_dependencies = [   MemoryDep('buf111', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op112.met_dependencies = [MemoryDep('arg74_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op112.group.device = cuda:0
op112.group.iteration = (1310720, 1)
op112.sizes = ([4, 32, 128, 80], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op112_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf112', get_index_2, add, None)
        return store
op112 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf112', mode=None), StarDep(name='buf113', mode=None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.node.kernel = extern_kernels.bmm


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 1310720}, None)]
op115.unmet_dependencies = [   MemoryDep('buf114', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (1310720, 1)
op115.sizes = ([4, 128, 32, 80], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op115_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf115', get_index_1, load, None)
        return store
op115 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117_op118_op119_op121: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op117_op118_op119_op121.writes = 
    [   MemoryDep('buf117', c0, {c0: 1310720}, None),
        MemoryDep('buf118', c0, {c0: 512}, None),
        MemoryDep('buf119', c0, {c0: 512}, None),
        MemoryDep('buf121', c0, {c0: 1310720}, None)]
op117_op118_op119_op121.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 1310720}, None),
        MemoryDep('buf92', c0, {c0: 1310720}, None),
        MemoryDep('buf99', c0, {c0: 1310720}, None)]
op117_op118_op119_op121.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg76_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg77_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg78_1', c1, {c0: 512, c1: 2560}, None)]
op117_op118_op119_op121.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op117_op118_op119_op121.snodes[0] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 1310720}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 1310720}, None),
        MemoryDep('buf92', c0, {c0: 1310720}, None),
        MemoryDep('buf99', c0, {c0: 1310720}, None)]
op117.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg76_1', c1, {c0: 512, c1: 2560}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (1310720, 1)
op117.sizes = ([512, 2560], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op117_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf116', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg76_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf117', get_index_5, add_3, None)
        return store
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op117_op118_op119_op121.snodes[1] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 512}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 1310720}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf118.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (512, 2560)
op118.sizes = ([512], [2560])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op118_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_1, getitem)
        return store_reduction
op118 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op117_op118_op119_op121.snodes[2] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 512}, None)]
op119.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 1310720}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (512, 2560)
op119.sizes = ([512], [2560])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op119_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_1, getitem_1)
        return store_reduction
op119 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op117_op118_op119_op121.snodes[3] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 1310720}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1310720}, None),
        MemoryDep('buf118', c0, {c0: 512}, None),
        MemoryDep('buf119', c0, {c0: 512}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg78_1', c1, {c0: 512, c1: 2560}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (1310720, 1)
op121.sizes = ([512, 2560], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf119_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op121_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf118', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf119', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg77_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg78_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, add_1, None)
        return store
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op117_op118_op119_op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.mm


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 5242880}, None)]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 5242880}, None)]
op123.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 512, c1: 10240}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (5242880, 1)
op123.sizes = ([512, 10240], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op123_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg80_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf123', get_index_4, mul_2, None)
        return store
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op124.node.kernel = extern_kernels.mm


op125_op126_op128: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op125_op126_op128.writes = 
    [   MemoryDep('buf125', c0, {c0: 512}, None),
        MemoryDep('buf126', c0, {c0: 512}, None),
        MemoryDep('buf128', c0, {c0: 1310720}, None)]
op125_op126_op128.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1310720}, None),
        MemoryDep('buf124', c0, {c0: 1310720}, None)]
op125_op126_op128.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg83_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg84_1', c1, {c0: 512, c1: 2560}, None)]
op125_op126_op128.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op125_op126_op128.snodes[0] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 512}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1310720}, None),
        MemoryDep('buf124', c0, {c0: 1310720}, None)]
op125.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 512, c1: 2560}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (512, 2560)
op125.sizes = ([512], [2560])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op125_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf125', get_index_3, getitem)
        return store_reduction
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op125_op126_op128.snodes[1] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 512}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1310720}, None),
        MemoryDep('buf124', c0, {c0: 1310720}, None)]
op126.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 512, c1: 2560}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (512, 2560)
op126.sizes = ([512], [2560])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op126_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf126', get_index_3, getitem_1)
        return store_reduction
op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op125_op126_op128.snodes[2] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 1310720}, None)]
op128.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1310720}, None),
        MemoryDep('buf124', c0, {c0: 1310720}, None),
        MemoryDep('buf125', c0, {c0: 512}, None),
        MemoryDep('buf126', c0, {c0: 512}, None)]
op128.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg83_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg84_1', c1, {c0: 512, c1: 2560}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (1310720, 1)
op128.sizes = ([512, 2560], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf126_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op128_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf125', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf126', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg83_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg84_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf128', get_index_7, add_3, None)
        return store
op128 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op125_op126_op128 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op130.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.node.kernel = extern_kernels.mm


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 1310720}, None)]
op131.unmet_dependencies = [   MemoryDep('buf130', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op131.met_dependencies = [MemoryDep('arg88_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf131.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op131.group.device = cuda:0
op131.group.iteration = (1310720, 1)
op131.sizes = ([4, 32, 128, 80], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op131_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf131', get_index_2, add, None)
        return store
op131 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 1310720}, None)]
op132.unmet_dependencies = [   MemoryDep('buf129', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op132.met_dependencies = [MemoryDep('arg86_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (1310720, 1)
op132.sizes = ([4, 32, 128, 80], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op132_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf132', get_index_2, mul, None)
        return store
op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf131', mode=None), StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf133.users = [
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
    ]
]
op133.node.kernel = extern_kernels.bmm


op134_op135_op138: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op134_op135_op138.writes = 
    [   MemoryDep('buf134', c0, {c0: 16384}, None),
        MemoryDep('buf135', c0, {c0: 16384}, None),
        MemoryDep('buf138', c0, {c0: 2097152}, None)]
op134_op135_op138.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 2097152}, None)]
op134_op135_op138.met_dependencies = []
op134_op135_op138.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf135.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op134_op135_op138.snodes[0] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 16384}, None)]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 2097152}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (16384, 128)
op134.sizes = ([128, 128], [128])
buf133_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op134_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf134', get_index_3, reduction)
        return store_reduction
op134 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op134_op135_op138.snodes[1] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 16384}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 2097152}, None),
        MemoryDep('buf134', c0, {c0: 16384}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf135.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (16384, 128)
op135.sizes = ([128, 128], [128])
buf133_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf135_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op135_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf134', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf135', get_index_4, reduction)
        return store_reduction
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op134_op135_op138.snodes[2] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 2097152}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 2097152}, None),
        MemoryDep('buf134', c0, {c0: 16384}, None),
        MemoryDep('buf135', c0, {c0: 16384}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (2097152, 1)
op138.sizes = ([128, 128, 128], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf135_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf138_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op138_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf134', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf135', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf138', get_index_5, truediv, None)
        return store
op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op134_op135_op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op136.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = extern_kernels.mm


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 1310720}, None)]
op137.unmet_dependencies = [   MemoryDep('buf136', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op137.met_dependencies = [MemoryDep('arg90_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf137.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (1310720, 1)
op137.sizes = ([4, 32, 128, 80], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op137_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf137', get_index_2, add, None)
        return store
op137 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None), StarDep(name='buf138', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.node.kernel = extern_kernels.bmm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 1310720}, None)]
op140.unmet_dependencies = [   MemoryDep('buf139', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (1310720, 1)
op140.sizes = ([4, 128, 32, 80], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op140_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf140', get_index_1, load, None)
        return store
op140 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142_op143_op144_op146: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op142_op143_op144_op146.writes = 
    [   MemoryDep('buf142', c0, {c0: 1310720}, None),
        MemoryDep('buf143', c0, {c0: 512}, None),
        MemoryDep('buf144', c0, {c0: 512}, None),
        MemoryDep('buf146', c0, {c0: 1310720}, None)]
op142_op143_op144_op146.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1310720}, None),
        MemoryDep('buf124', c0, {c0: 1310720}, None),
        MemoryDep('buf141', c0, {c0: 1310720}, None)]
op142_op143_op144_op146.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg92_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg93_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg94_1', c1, {c0: 512, c1: 2560}, None)]
op142_op143_op144_op146.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op142_op143_op144_op146.snodes[0] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 1310720}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1310720}, None),
        MemoryDep('buf124', c0, {c0: 1310720}, None),
        MemoryDep('buf141', c0, {c0: 1310720}, None)]
op142.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg92_1', c1, {c0: 512, c1: 2560}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op142.group.device = cuda:0
op142.group.iteration = (1310720, 1)
op142.sizes = ([512, 2560], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op142_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf124', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg82_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf141', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg92_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf142', get_index_5, add_3, None)
        return store
op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op142_op143_op144_op146.snodes[1] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 512}, None)]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 1310720}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf143.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (512, 2560)
op143.sizes = ([512], [2560])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op143_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf143', get_index_1, getitem)
        return store_reduction
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op142_op143_op144_op146.snodes[2] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 512}, None)]
op144.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 1310720}, None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (512, 2560)
op144.sizes = ([512], [2560])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op144_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf144', get_index_1, getitem_1)
        return store_reduction
op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op142_op143_op144_op146.snodes[3] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 1310720}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 1310720}, None),
        MemoryDep('buf143', c0, {c0: 512}, None),
        MemoryDep('buf144', c0, {c0: 512}, None)]
op146.met_dependencies = 
    [   MemoryDep('arg93_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg94_1', c1, {c0: 512, c1: 2560}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (1310720, 1)
op146.sizes = ([512, 2560], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf144_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op146_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf143', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf144', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg93_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg94_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf146', get_index_5, add_1, None)
        return store
op146 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op142_op143_op144_op146 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.mm


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 5242880}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 5242880}, None)]
op148.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 512, c1: 10240}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (5242880, 1)
op148.sizes = ([512, 10240], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op148_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg96_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf148', get_index_4, mul_2, None)
        return store
op148 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op149.node.kernel = extern_kernels.mm


op150_op151_op153: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op150_op151_op153.writes = 
    [   MemoryDep('buf150', c0, {c0: 512}, None),
        MemoryDep('buf151', c0, {c0: 512}, None),
        MemoryDep('buf153', c0, {c0: 1310720}, None)]
op150_op151_op153.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 1310720}, None),
        MemoryDep('buf149', c0, {c0: 1310720}, None)]
op150_op151_op153.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg98_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg99_1', c1, {c0: 512, c1: 2560}, None)]
op150_op151_op153.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op150_op151_op153.snodes[0] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 512}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 1310720}, None),
        MemoryDep('buf149', c0, {c0: 1310720}, None)]
op150.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 512, c1: 2560}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (512, 2560)
op150.sizes = ([512], [2560])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op150_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf150', get_index_3, getitem)
        return store_reduction
op150 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op150_op151_op153.snodes[1] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 512}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 1310720}, None),
        MemoryDep('buf149', c0, {c0: 1310720}, None)]
op151.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 512, c1: 2560}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (512, 2560)
op151.sizes = ([512], [2560])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op151_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf151', get_index_3, getitem_1)
        return store_reduction
op151 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op150_op151_op153.snodes[2] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 1310720}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 1310720}, None),
        MemoryDep('buf149', c0, {c0: 1310720}, None),
        MemoryDep('buf150', c0, {c0: 512}, None),
        MemoryDep('buf151', c0, {c0: 512}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg98_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg99_1', c1, {c0: 512, c1: 2560}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (1310720, 1)
op153.sizes = ([512, 2560], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf151_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op153_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf150', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf151', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg99_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg100_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf153', get_index_7, add_3, None)
        return store
op153 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op150_op151_op153 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op155.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 1310720}, None)]
op156.unmet_dependencies = [   MemoryDep('buf155', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op156.met_dependencies = [MemoryDep('arg104_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf156.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op156.group.device = cuda:0
op156.group.iteration = (1310720, 1)
op156.sizes = ([4, 32, 128, 80], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op156_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf156', get_index_2, add, None)
        return store
op156 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 1310720}, None)]
op157.unmet_dependencies = [   MemoryDep('buf154', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op157.met_dependencies = [MemoryDep('arg102_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (1310720, 1)
op157.sizes = ([4, 32, 128, 80], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op157_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf157', get_index_2, mul, None)
        return store
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf156', mode=None), StarDep(name='buf157', mode=None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
    ]
]
op158.node.kernel = extern_kernels.bmm


op159_op160_op163: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op159_op160_op163.writes = 
    [   MemoryDep('buf159', c0, {c0: 16384}, None),
        MemoryDep('buf160', c0, {c0: 16384}, None),
        MemoryDep('buf163', c0, {c0: 2097152}, None)]
op159_op160_op163.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 2097152}, None)]
op159_op160_op163.met_dependencies = []
op159_op160_op163.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf160.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op159_op160_op163.snodes[0] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 16384}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 2097152}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (16384, 128)
op159.sizes = ([128, 128], [128])
buf158_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op159_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf159', get_index_3, reduction)
        return store_reduction
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op159_op160_op163.snodes[1] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 16384}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 2097152}, None),
        MemoryDep('buf159', c0, {c0: 16384}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf160.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (16384, 128)
op160.sizes = ([128, 128], [128])
buf158_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf160_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op160_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf159', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf160', get_index_4, reduction)
        return store_reduction
op160 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op159_op160_op163.snodes[2] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 2097152}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 2097152}, None),
        MemoryDep('buf159', c0, {c0: 16384}, None),
        MemoryDep('buf160', c0, {c0: 16384}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (2097152, 1)
op163.sizes = ([128, 128, 128], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf160_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf163_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op163_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf159', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf160', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf163', get_index_5, truediv, None)
        return store
op163 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op159_op160_op163 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op161.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.node.kernel = extern_kernels.mm


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 1310720}, None)]
op162.unmet_dependencies = [   MemoryDep('buf161', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op162.met_dependencies = [MemoryDep('arg106_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf162.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (1310720, 1)
op162.sizes = ([4, 32, 128, 80], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op162_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf162', get_index_2, add, None)
        return store
op162 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf162', mode=None), StarDep(name='buf163', mode=None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = extern_kernels.bmm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 1310720}, None)]
op165.unmet_dependencies = [   MemoryDep('buf164', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (1310720, 1)
op165.sizes = ([4, 128, 32, 80], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op165_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf165', get_index_1, load, None)
        return store
op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.mm


op167_op168_op169_op171: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op167_op168_op169_op171.writes = 
    [   MemoryDep('buf167', c0, {c0: 1310720}, None),
        MemoryDep('buf168', c0, {c0: 512}, None),
        MemoryDep('buf169', c0, {c0: 512}, None),
        MemoryDep('buf171', c0, {c0: 1310720}, None)]
op167_op168_op169_op171.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 1310720}, None),
        MemoryDep('buf149', c0, {c0: 1310720}, None),
        MemoryDep('buf166', c0, {c0: 1310720}, None)]
op167_op168_op169_op171.met_dependencies = 
    [   MemoryDep('arg108_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg109_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg110_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg98_1', c1, {c0: 512, c1: 2560}, None)]
op167_op168_op169_op171.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op167_op168_op169_op171.snodes[0] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 1310720}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf142', c0, {c0: 1310720}, None),
        MemoryDep('buf149', c0, {c0: 1310720}, None),
        MemoryDep('buf166', c0, {c0: 1310720}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg108_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg98_1', c1, {c0: 512, c1: 2560}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (1310720, 1)
op167.sizes = ([512, 2560], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op167_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf166', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg108_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf167', get_index_5, add_3, None)
        return store
op167 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op167_op168_op169_op171.snodes[1] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 512}, None)]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 1310720}, None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf168.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (512, 2560)
op168.sizes = ([512], [2560])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op168_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf168', get_index_1, getitem)
        return store_reduction
op168 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op167_op168_op169_op171.snodes[2] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 512}, None)]
op169.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 1310720}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf169.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (512, 2560)
op169.sizes = ([512], [2560])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op169_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_1, getitem_1)
        return store_reduction
op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op167_op168_op169_op171.snodes[3] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 1310720}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 1310720}, None),
        MemoryDep('buf168', c0, {c0: 512}, None),
        MemoryDep('buf169', c0, {c0: 512}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg109_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg110_1', c1, {c0: 512, c1: 2560}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (1310720, 1)
op171.sizes = ([512, 2560], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf169_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op171_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf169', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg109_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg110_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf171', get_index_5, add_1, None)
        return store
op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op167_op168_op169_op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op172: ExternKernelSchedulerNode(ExternKernelOut)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelOut
    buf172.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.mm


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 5242880}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 5242880}, None)]
op173.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 512, c1: 10240}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (5242880, 1)
op173.sizes = ([512, 10240], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op173_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf172', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg112_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf173', get_index_4, mul_2, None)
        return store
op173 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op174: ExternKernelSchedulerNode(ExternKernelOut)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelOut
    buf174.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf174.users = [
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op174.node.kernel = extern_kernels.mm


op175_op176_op178: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op175_op176_op178.writes = 
    [   MemoryDep('buf175', c0, {c0: 512}, None),
        MemoryDep('buf176', c0, {c0: 512}, None),
        MemoryDep('buf178', c0, {c0: 1310720}, None)]
op175_op176_op178.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 1310720}, None),
        MemoryDep('buf174', c0, {c0: 1310720}, None)]
op175_op176_op178.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg115_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg116_1', c1, {c0: 512, c1: 2560}, None)]
op175_op176_op178.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf176.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op175_op176_op178.snodes[0] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 512}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 1310720}, None),
        MemoryDep('buf174', c0, {c0: 1310720}, None)]
op175.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 512, c1: 2560}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf175.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (512, 2560)
op175.sizes = ([512], [2560])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op175_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf175', get_index_3, getitem)
        return store_reduction
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op175_op176_op178.snodes[1] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 512}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 1310720}, None),
        MemoryDep('buf174', c0, {c0: 1310720}, None)]
op176.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 512, c1: 2560}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf176.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (512, 2560)
op176.sizes = ([512], [2560])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op176_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf176', get_index_3, getitem_1)
        return store_reduction
op176 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op175_op176_op178.snodes[2] =
op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 1310720}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 1310720}, None),
        MemoryDep('buf174', c0, {c0: 1310720}, None),
        MemoryDep('buf175', c0, {c0: 512}, None),
        MemoryDep('buf176', c0, {c0: 512}, None)]
op178.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg115_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg116_1', c1, {c0: 512, c1: 2560}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (1310720, 1)
op178.sizes = ([512, 2560], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf176_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op178_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf175', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf176', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg115_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg116_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf178', get_index_7, add_3, None)
        return store
op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op175_op176_op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op180.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.node.kernel = extern_kernels.mm


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 1310720}, None)]
op181.unmet_dependencies = [   MemoryDep('buf180', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op181.met_dependencies = [MemoryDep('arg120_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf181.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (1310720, 1)
op181.sizes = ([4, 32, 128, 80], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op181_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf181', get_index_2, add, None)
        return store
op181 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 1310720}, None)]
op182.unmet_dependencies = [   MemoryDep('buf179', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op182.met_dependencies = [MemoryDep('arg118_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (1310720, 1)
op182.sizes = ([4, 32, 128, 80], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op182_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf182', get_index_2, mul, None)
        return store
op182 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf181', mode=None), StarDep(name='buf182', mode=None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.bmm


op184_op185_op188: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op184_op185_op188.writes = 
    [   MemoryDep('buf184', c0, {c0: 16384}, None),
        MemoryDep('buf185', c0, {c0: 16384}, None),
        MemoryDep('buf188', c0, {c0: 2097152}, None)]
op184_op185_op188.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 2097152}, None)]
op184_op185_op188.met_dependencies = []
op184_op185_op188.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
    ]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf185.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op184_op185_op188.snodes[0] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 16384}, None)]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 2097152}, None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (16384, 128)
op184.sizes = ([128, 128], [128])
buf183_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op184_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf184', get_index_3, reduction)
        return store_reduction
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op184_op185_op188.snodes[1] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 16384}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf184', c0, {c0: 16384}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf185.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (16384, 128)
op185.sizes = ([128, 128], [128])
buf183_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf185_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op185_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf184', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf185', get_index_4, reduction)
        return store_reduction
op185 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op184_op185_op188.snodes[2] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 2097152}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 2097152}, None),
        MemoryDep('buf184', c0, {c0: 16384}, None),
        MemoryDep('buf185', c0, {c0: 16384}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (2097152, 1)
op188.sizes = ([128, 128, 128], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf185_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf188_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op188_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf184', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf185', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf188', get_index_5, truediv, None)
        return store
op188 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op184_op185_op188 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op186.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.mm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 1310720}, None)]
op187.unmet_dependencies = [   MemoryDep('buf186', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op187.met_dependencies = [MemoryDep('arg122_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (1310720, 1)
op187.sizes = ([4, 32, 128, 80], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op187_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf187', get_index_2, add, None)
        return store
op187 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None), StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = extern_kernels.bmm


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 1310720}, None)]
op190.unmet_dependencies = [   MemoryDep('buf189', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (1310720, 1)
op190.sizes = ([4, 128, 32, 80], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op190_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, load, None)
        return store
op190 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op192_op193_op194_op196: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op192_op193_op194_op196.writes = 
    [   MemoryDep('buf192', c0, {c0: 1310720}, None),
        MemoryDep('buf193', c0, {c0: 512}, None),
        MemoryDep('buf194', c0, {c0: 512}, None),
        MemoryDep('buf196', c0, {c0: 1310720}, None)]
op192_op193_op194_op196.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 1310720}, None),
        MemoryDep('buf174', c0, {c0: 1310720}, None),
        MemoryDep('buf191', c0, {c0: 1310720}, None)]
op192_op193_op194_op196.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg124_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg125_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg126_1', c1, {c0: 512, c1: 2560}, None)]
op192_op193_op194_op196.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op192_op193_op194_op196.snodes[0] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 1310720}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 1310720}, None),
        MemoryDep('buf174', c0, {c0: 1310720}, None),
        MemoryDep('buf191', c0, {c0: 1310720}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg124_1', c1, {c0: 512, c1: 2560}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (1310720, 1)
op192.sizes = ([512, 2560], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op192_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf174', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg114_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf191', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg124_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf192', get_index_5, add_3, None)
        return store
op192 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op192_op193_op194_op196.snodes[1] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 512}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 1310720}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (512, 2560)
op193.sizes = ([512], [2560])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op193_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_1, getitem)
        return store_reduction
op193 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op192_op193_op194_op196.snodes[2] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 512}, None)]
op194.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 1310720}, None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (512, 2560)
op194.sizes = ([512], [2560])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op194_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf194', get_index_1, getitem_1)
        return store_reduction
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op192_op193_op194_op196.snodes[3] =
op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 1310720}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1310720}, None),
        MemoryDep('buf193', c0, {c0: 512}, None),
        MemoryDep('buf194', c0, {c0: 512}, None)]
op196.met_dependencies = 
    [   MemoryDep('arg125_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg126_1', c1, {c0: 512, c1: 2560}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (1310720, 1)
op196.sizes = ([512, 2560], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf194_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op196_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf193', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf194', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg125_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg126_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, add_1, None)
        return store
op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op192_op193_op194_op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 5242880}, None)]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 5242880}, None)]
op198.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 512, c1: 10240}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (5242880, 1)
op198.sizes = ([512, 10240], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op198_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf197', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg128_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf198', get_index_4, mul_2, None)
        return store
op198 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.mm


op200_op201_op203: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op200_op201_op203.writes = 
    [   MemoryDep('buf200', c0, {c0: 512}, None),
        MemoryDep('buf201', c0, {c0: 512}, None),
        MemoryDep('buf203', c0, {c0: 1310720}, None)]
op200_op201_op203.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1310720}, None),
        MemoryDep('buf199', c0, {c0: 1310720}, None)]
op200_op201_op203.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg131_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg132_1', c1, {c0: 512, c1: 2560}, None)]
op200_op201_op203.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
    ]
]
op200_op201_op203.snodes[0] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 512}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1310720}, None),
        MemoryDep('buf199', c0, {c0: 1310720}, None)]
op200.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 512, c1: 2560}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (512, 2560)
op200.sizes = ([512], [2560])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op200_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_3, getitem)
        return store_reduction
op200 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op200_op201_op203.snodes[1] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 512}, None)]
op201.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1310720}, None),
        MemoryDep('buf199', c0, {c0: 1310720}, None)]
op201.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 512, c1: 2560}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (512, 2560)
op201.sizes = ([512], [2560])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op201_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_3, getitem_1)
        return store_reduction
op201 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op200_op201_op203.snodes[2] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 1310720}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1310720}, None),
        MemoryDep('buf199', c0, {c0: 1310720}, None),
        MemoryDep('buf200', c0, {c0: 512}, None),
        MemoryDep('buf201', c0, {c0: 512}, None)]
op203.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg131_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg132_1', c1, {c0: 512, c1: 2560}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (1310720, 1)
op203.sizes = ([512, 2560], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf201_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op203_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf200', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf201', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg131_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg132_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf203', get_index_7, add_3, None)
        return store
op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op200_op201_op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op204.node.kernel = extern_kernels.mm


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op205.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.mm


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 1310720}, None)]
op206.unmet_dependencies = [   MemoryDep('buf205', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op206.met_dependencies = [MemoryDep('arg136_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf206.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (1310720, 1)
op206.sizes = ([4, 32, 128, 80], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op206_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf206', get_index_2, add, None)
        return store
op206 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 1310720}, None)]
op207.unmet_dependencies = [   MemoryDep('buf204', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op207.met_dependencies = [MemoryDep('arg134_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (1310720, 1)
op207.sizes = ([4, 32, 128, 80], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op207_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf207', get_index_2, mul, None)
        return store
op207 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
    ]
]
op208.node.kernel = extern_kernels.bmm


op209_op210_op213: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op209_op210_op213.writes = 
    [   MemoryDep('buf209', c0, {c0: 16384}, None),
        MemoryDep('buf210', c0, {c0: 16384}, None),
        MemoryDep('buf213', c0, {c0: 2097152}, None)]
op209_op210_op213.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 2097152}, None)]
op209_op210_op213.met_dependencies = []
op209_op210_op213.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
    ]
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf210.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op209_op210_op213.snodes[0] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 16384}, None)]
op209.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 2097152}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
    ]
]
op209.group.device = cuda:0
op209.group.iteration = (16384, 128)
op209.sizes = ([128, 128], [128])
buf208_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op209_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf209', get_index_3, reduction)
        return store_reduction
op209 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op209_op210_op213.snodes[1] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 16384}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf208', c0, {c0: 2097152}, None),
        MemoryDep('buf209', c0, {c0: 16384}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf210.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (16384, 128)
op210.sizes = ([128, 128], [128])
buf208_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf210_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op210_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf209', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf210', get_index_4, reduction)
        return store_reduction
op210 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op209_op210_op213.snodes[2] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 2097152}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf208', c0, {c0: 2097152}, None),
        MemoryDep('buf209', c0, {c0: 16384}, None),
        MemoryDep('buf210', c0, {c0: 16384}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (2097152, 1)
op213.sizes = ([128, 128, 128], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf210_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf213_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op213_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf209', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf210', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf213', get_index_5, truediv, None)
        return store
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op209_op210_op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op211.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.node.kernel = extern_kernels.mm


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 1310720}, None)]
op212.unmet_dependencies = [   MemoryDep('buf211', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op212.met_dependencies = [MemoryDep('arg138_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf212.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (1310720, 1)
op212.sizes = ([4, 32, 128, 80], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op212_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg138_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf212', get_index_2, add, None)
        return store
op212 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf212', mode=None), StarDep(name='buf213', mode=None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.node.kernel = extern_kernels.bmm


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 1310720}, None)]
op215.unmet_dependencies = [   MemoryDep('buf214', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (1310720, 1)
op215.sizes = ([4, 128, 32, 80], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op215_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf215', get_index_1, load, None)
        return store
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217_op218_op219_op221: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op217_op218_op219_op221.writes = 
    [   MemoryDep('buf217', c0, {c0: 1310720}, None),
        MemoryDep('buf218', c0, {c0: 512}, None),
        MemoryDep('buf219', c0, {c0: 512}, None),
        MemoryDep('buf221', c0, {c0: 1310720}, None)]
op217_op218_op219_op221.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1310720}, None),
        MemoryDep('buf199', c0, {c0: 1310720}, None),
        MemoryDep('buf216', c0, {c0: 1310720}, None)]
op217_op218_op219_op221.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg140_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg141_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg142_1', c1, {c0: 512, c1: 2560}, None)]
op217_op218_op219_op221.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op217_op218_op219_op221.snodes[0] =
op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 1310720}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1310720}, None),
        MemoryDep('buf199', c0, {c0: 1310720}, None),
        MemoryDep('buf216', c0, {c0: 1310720}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg140_1', c1, {c0: 512, c1: 2560}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (1310720, 1)
op217.sizes = ([512, 2560], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op217_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf216', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_3, None)
        return store
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op217_op218_op219_op221.snodes[1] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 512}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 1310720}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (512, 2560)
op218.sizes = ([512], [2560])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op218_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf218', get_index_1, getitem)
        return store_reduction
op218 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op217_op218_op219_op221.snodes[2] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 512}, None)]
op219.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 1310720}, None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (512, 2560)
op219.sizes = ([512], [2560])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op219_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf219', get_index_1, getitem_1)
        return store_reduction
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op217_op218_op219_op221.snodes[3] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 1310720}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 1310720}, None),
        MemoryDep('buf218', c0, {c0: 512}, None),
        MemoryDep('buf219', c0, {c0: 512}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg142_1', c1, {c0: 512, c1: 2560}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (1310720, 1)
op221.sizes = ([512, 2560], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf219_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op221_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf218', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf219', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg141_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg142_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf221', get_index_5, add_1, None)
        return store
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op217_op218_op219_op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 5242880}, None)]
op223.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 5242880}, None)]
op223.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 512, c1: 10240}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (5242880, 1)
op223.sizes = ([512, 10240], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op223_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf222', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf223', get_index_4, mul_2, None)
        return store
op223 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225_op226_op228: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op225_op226_op228.writes = 
    [   MemoryDep('buf225', c0, {c0: 512}, None),
        MemoryDep('buf226', c0, {c0: 512}, None),
        MemoryDep('buf228', c0, {c0: 1310720}, None)]
op225_op226_op228.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 1310720}, None),
        MemoryDep('buf224', c0, {c0: 1310720}, None)]
op225_op226_op228.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg147_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg148_1', c1, {c0: 512, c1: 2560}, None)]
op225_op226_op228.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op225_op226_op228.snodes[0] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 512}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 1310720}, None),
        MemoryDep('buf224', c0, {c0: 1310720}, None)]
op225.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 512, c1: 2560}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (512, 2560)
op225.sizes = ([512], [2560])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op225_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem)
        return store_reduction
op225 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op225_op226_op228.snodes[1] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 512}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 1310720}, None),
        MemoryDep('buf224', c0, {c0: 1310720}, None)]
op226.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 512, c1: 2560}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (512, 2560)
op226.sizes = ([512], [2560])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op226_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem_1)
        return store_reduction
op226 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op225_op226_op228.snodes[2] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 1310720}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 1310720}, None),
        MemoryDep('buf224', c0, {c0: 1310720}, None),
        MemoryDep('buf225', c0, {c0: 512}, None),
        MemoryDep('buf226', c0, {c0: 512}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg147_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg148_1', c1, {c0: 512, c1: 2560}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (1310720, 1)
op228.sizes = ([512, 2560], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf226_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op228_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf225', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf226', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg147_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg148_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf228', get_index_7, add_3, None)
        return store
op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op225_op226_op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op229.node.kernel = extern_kernels.mm


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op230.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 1310720}, None)]
op231.unmet_dependencies = [   MemoryDep('buf230', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op231.met_dependencies = [MemoryDep('arg152_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf231.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (1310720, 1)
op231.sizes = ([4, 32, 128, 80], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op231_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf231', get_index_2, add, None)
        return store
op231 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 1310720}, None)]
op232.unmet_dependencies = [   MemoryDep('buf229', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op232.met_dependencies = [MemoryDep('arg150_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (1310720, 1)
op232.sizes = ([4, 32, 128, 80], [])
buf229_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op232_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg150_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf232', get_index_2, mul, None)
        return store
op232 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf231', mode=None), StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
    ]
]
op233.node.kernel = extern_kernels.bmm


op234_op235_op238: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op234_op235_op238.writes = 
    [   MemoryDep('buf234', c0, {c0: 16384}, None),
        MemoryDep('buf235', c0, {c0: 16384}, None),
        MemoryDep('buf238', c0, {c0: 2097152}, None)]
op234_op235_op238.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 2097152}, None)]
op234_op235_op238.met_dependencies = []
op234_op235_op238.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
    ]
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op234_op235_op238.snodes[0] =
op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 16384}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 2097152}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf234.users = [
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (16384, 128)
op234.sizes = ([128, 128], [128])
buf233_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op234_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf234', get_index_3, reduction)
        return store_reduction
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op234_op235_op238.snodes[1] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 16384}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 2097152}, None),
        MemoryDep('buf234', c0, {c0: 16384}, None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf235.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (16384, 128)
op235.sizes = ([128, 128], [128])
buf233_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf235_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op235_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf234', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf235', get_index_4, reduction)
        return store_reduction
op235 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op234_op235_op238.snodes[2] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 2097152}, None)]
op238.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 2097152}, None),
        MemoryDep('buf234', c0, {c0: 16384}, None),
        MemoryDep('buf235', c0, {c0: 16384}, None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (2097152, 1)
op238.sizes = ([128, 128, 128], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf235_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf238_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op238_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf234', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf235', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf238', get_index_5, truediv, None)
        return store
op238 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op234_op235_op238 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op236: ExternKernelSchedulerNode(ExternKernelOut)
op236.writes = [StarDep(name='buf236', mode=None)]
op236.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op236.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op236.outputs = [
    buf236: ExternKernelOut
    buf236.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.node.kernel = extern_kernels.mm


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 1310720}, None)]
op237.unmet_dependencies = [   MemoryDep('buf236', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op237.met_dependencies = [MemoryDep('arg154_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf237.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op237.group.device = cuda:0
op237.group.iteration = (1310720, 1)
op237.sizes = ([4, 32, 128, 80], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op237_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf237', get_index_2, add, None)
        return store
op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf237', mode=None), StarDep(name='buf238', mode=None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = extern_kernels.bmm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 1310720}, None)]
op240.unmet_dependencies = [   MemoryDep('buf239', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (1310720, 1)
op240.sizes = ([4, 128, 32, 80], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op240_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf240', get_index_1, load, None)
        return store
op240 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242_op243_op244_op246: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op242_op243_op244_op246.writes = 
    [   MemoryDep('buf242', c0, {c0: 1310720}, None),
        MemoryDep('buf243', c0, {c0: 512}, None),
        MemoryDep('buf244', c0, {c0: 512}, None),
        MemoryDep('buf246', c0, {c0: 1310720}, None)]
op242_op243_op244_op246.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 1310720}, None),
        MemoryDep('buf224', c0, {c0: 1310720}, None),
        MemoryDep('buf241', c0, {c0: 1310720}, None)]
op242_op243_op244_op246.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg156_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg157_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg158_1', c1, {c0: 512, c1: 2560}, None)]
op242_op243_op244_op246.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf243.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op242_op243_op244_op246.snodes[0] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 1310720}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 1310720}, None),
        MemoryDep('buf224', c0, {c0: 1310720}, None),
        MemoryDep('buf241', c0, {c0: 1310720}, None)]
op242.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg156_1', c1, {c0: 512, c1: 2560}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (1310720, 1)
op242.sizes = ([512, 2560], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op242_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf224', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf241', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg156_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf242', get_index_5, add_3, None)
        return store
op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op242_op243_op244_op246.snodes[1] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 512}, None)]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 1310720}, None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf243.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (512, 2560)
op243.sizes = ([512], [2560])
buf242_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op243_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf243', get_index_1, getitem)
        return store_reduction
op243 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op242_op243_op244_op246.snodes[2] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 512}, None)]
op244.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 1310720}, None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (512, 2560)
op244.sizes = ([512], [2560])
buf242_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op244_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf244', get_index_1, getitem_1)
        return store_reduction
op244 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op242_op243_op244_op246.snodes[3] =
op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 1310720}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 1310720}, None),
        MemoryDep('buf243', c0, {c0: 512}, None),
        MemoryDep('buf244', c0, {c0: 512}, None)]
op246.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg158_1', c1, {c0: 512, c1: 2560}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (1310720, 1)
op246.sizes = ([512, 2560], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf244_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op246_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf243', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf244', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg157_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg158_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf246', get_index_5, add_1, None)
        return store
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op242_op243_op244_op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op247.node.kernel = extern_kernels.mm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 5242880}, None)]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 5242880}, None)]
op248.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 512, c1: 10240}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (5242880, 1)
op248.sizes = ([512, 10240], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op248_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf247', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg160_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf248', get_index_4, mul_2, None)
        return store
op248 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op249.node.kernel = extern_kernels.mm


op250_op251_op253: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op250_op251_op253.writes = 
    [   MemoryDep('buf250', c0, {c0: 512}, None),
        MemoryDep('buf251', c0, {c0: 512}, None),
        MemoryDep('buf253', c0, {c0: 1310720}, None)]
op250_op251_op253.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 1310720}, None),
        MemoryDep('buf249', c0, {c0: 1310720}, None)]
op250_op251_op253.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg163_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg164_1', c1, {c0: 512, c1: 2560}, None)]
op250_op251_op253.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op250_op251_op253.snodes[0] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 512}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 1310720}, None),
        MemoryDep('buf249', c0, {c0: 1310720}, None)]
op250.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 512, c1: 2560}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (512, 2560)
op250.sizes = ([512], [2560])
buf242_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op250_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf250', get_index_3, getitem)
        return store_reduction
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op250_op251_op253.snodes[1] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 512}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 1310720}, None),
        MemoryDep('buf249', c0, {c0: 1310720}, None)]
op251.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 512, c1: 2560}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (512, 2560)
op251.sizes = ([512], [2560])
buf242_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op251_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf251', get_index_3, getitem_1)
        return store_reduction
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op250_op251_op253.snodes[2] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 1310720}, None)]
op253.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 1310720}, None),
        MemoryDep('buf249', c0, {c0: 1310720}, None),
        MemoryDep('buf250', c0, {c0: 512}, None),
        MemoryDep('buf251', c0, {c0: 512}, None)]
op253.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg163_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg164_1', c1, {c0: 512, c1: 2560}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (1310720, 1)
op253.sizes = ([512, 2560], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf251_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op253_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf250', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf251', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg163_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg164_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf253', get_index_7, add_3, None)
        return store
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op250_op251_op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op255.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.node.kernel = extern_kernels.mm


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 1310720}, None)]
op256.unmet_dependencies = [   MemoryDep('buf255', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op256.met_dependencies = [MemoryDep('arg168_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf256.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op256.group.device = cuda:0
op256.group.iteration = (1310720, 1)
op256.sizes = ([4, 32, 128, 80], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op256_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf256', get_index_2, add, None)
        return store
op256 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 1310720}, None)]
op257.unmet_dependencies = [   MemoryDep('buf254', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op257.met_dependencies = [MemoryDep('arg166_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (1310720, 1)
op257.sizes = ([4, 32, 128, 80], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op257_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf257', get_index_2, mul, None)
        return store
op257 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op258: ExternKernelSchedulerNode(ExternKernelOut)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf256', mode=None), StarDep(name='buf257', mode=None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ExternKernelOut
    buf258.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
    ]
]
op258.node.kernel = extern_kernels.bmm


op259_op260_op263: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op259_op260_op263.writes = 
    [   MemoryDep('buf259', c0, {c0: 16384}, None),
        MemoryDep('buf260', c0, {c0: 16384}, None),
        MemoryDep('buf263', c0, {c0: 2097152}, None)]
op259_op260_op263.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 2097152}, None)]
op259_op260_op263.met_dependencies = []
op259_op260_op263.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
    ]
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op259_op260_op263.snodes[0] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 16384}, None)]
op259.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 2097152}, None)]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (16384, 128)
op259.sizes = ([128, 128], [128])
buf258_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op259_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf259', get_index_3, reduction)
        return store_reduction
op259 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op259_op260_op263.snodes[1] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 16384}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 2097152}, None),
        MemoryDep('buf259', c0, {c0: 16384}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (16384, 128)
op260.sizes = ([128, 128], [128])
buf258_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf260_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op260_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf259', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf260', get_index_4, reduction)
        return store_reduction
op260 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op259_op260_op263.snodes[2] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 2097152}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 2097152}, None),
        MemoryDep('buf259', c0, {c0: 16384}, None),
        MemoryDep('buf260', c0, {c0: 16384}, None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (2097152, 1)
op263.sizes = ([128, 128, 128], [])
buf258_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf260_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf263_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op263_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf259', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf260', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf263', get_index_5, truediv, None)
        return store
op263 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op259_op260_op263 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op261.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op261.node.kernel = extern_kernels.mm


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 1310720}, None)]
op262.unmet_dependencies = [   MemoryDep('buf261', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op262.met_dependencies = [MemoryDep('arg170_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf262.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (1310720, 1)
op262.sizes = ([4, 32, 128, 80], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op262_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf262', get_index_2, add, None)
        return store
op262 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf262', mode=None), StarDep(name='buf263', mode=None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.node.kernel = extern_kernels.bmm


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 1310720}, None)]
op265.unmet_dependencies = [   MemoryDep('buf264', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (1310720, 1)
op265.sizes = ([4, 128, 32, 80], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op265_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf265', get_index_1, load, None)
        return store
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267_op268_op269_op271: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op267_op268_op269_op271.writes = 
    [   MemoryDep('buf267', c0, {c0: 1310720}, None),
        MemoryDep('buf268', c0, {c0: 512}, None),
        MemoryDep('buf269', c0, {c0: 512}, None),
        MemoryDep('buf271', c0, {c0: 1310720}, None)]
op267_op268_op269_op271.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 1310720}, None),
        MemoryDep('buf249', c0, {c0: 1310720}, None),
        MemoryDep('buf266', c0, {c0: 1310720}, None)]
op267_op268_op269_op271.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg172_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg173_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg174_1', c1, {c0: 512, c1: 2560}, None)]
op267_op268_op269_op271.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op267_op268_op269_op271.snodes[0] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 1310720}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 1310720}, None),
        MemoryDep('buf249', c0, {c0: 1310720}, None),
        MemoryDep('buf266', c0, {c0: 1310720}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg172_1', c1, {c0: 512, c1: 2560}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (1310720, 1)
op267.sizes = ([512, 2560], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op267_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf249', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg162_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf266', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg172_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, add_3, None)
        return store
op267 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op267_op268_op269_op271.snodes[1] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 512}, None)]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 1310720}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (512, 2560)
op268.sizes = ([512], [2560])
buf267_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op268_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem)
        return store_reduction
op268 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op267_op268_op269_op271.snodes[2] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 512}, None)]
op269.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 1310720}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (512, 2560)
op269.sizes = ([512], [2560])
buf267_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op269_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem_1)
        return store_reduction
op269 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op267_op268_op269_op271.snodes[3] =
op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 1310720}, None)]
op271.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 1310720}, None),
        MemoryDep('buf268', c0, {c0: 512}, None),
        MemoryDep('buf269', c0, {c0: 512}, None)]
op271.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg174_1', c1, {c0: 512, c1: 2560}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (1310720, 1)
op271.sizes = ([512, 2560], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf269_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op271_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg173_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg174_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_1, None)
        return store
op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op267_op268_op269_op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 5242880}, None)]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 5242880}, None)]
op273.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 512, c1: 10240}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (5242880, 1)
op273.sizes = ([512, 10240], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op273_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf272', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg176_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf273', get_index_4, mul_2, None)
        return store
op273 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op274.node.kernel = extern_kernels.mm


op275_op276_op278: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op275_op276_op278.writes = 
    [   MemoryDep('buf275', c0, {c0: 512}, None),
        MemoryDep('buf276', c0, {c0: 512}, None),
        MemoryDep('buf278', c0, {c0: 1310720}, None)]
op275_op276_op278.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 1310720}, None),
        MemoryDep('buf274', c0, {c0: 1310720}, None)]
op275_op276_op278.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg179_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg180_1', c1, {c0: 512, c1: 2560}, None)]
op275_op276_op278.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op275_op276_op278.snodes[0] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 512}, None)]
op275.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 1310720}, None),
        MemoryDep('buf274', c0, {c0: 1310720}, None)]
op275.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 512, c1: 2560}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf275.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (512, 2560)
op275.sizes = ([512], [2560])
buf267_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op275_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_3, getitem)
        return store_reduction
op275 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op275_op276_op278.snodes[1] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 512}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 1310720}, None),
        MemoryDep('buf274', c0, {c0: 1310720}, None)]
op276.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 512, c1: 2560}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (512, 2560)
op276.sizes = ([512], [2560])
buf267_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op276_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, getitem_1)
        return store_reduction
op276 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op275_op276_op278.snodes[2] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 1310720}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 1310720}, None),
        MemoryDep('buf274', c0, {c0: 1310720}, None),
        MemoryDep('buf275', c0, {c0: 512}, None),
        MemoryDep('buf276', c0, {c0: 512}, None)]
op278.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg179_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg180_1', c1, {c0: 512, c1: 2560}, None)]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf278.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op278.group.device = cuda:0
op278.group.iteration = (1310720, 1)
op278.sizes = ([512, 2560], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf276_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op278_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf275', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf276', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg179_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg180_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf278', get_index_7, add_3, None)
        return store
op278 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op275_op276_op278 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op279.node.kernel = extern_kernels.mm


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op280.met_dependencies = [StarDep(name='arg183_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf280.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.node.kernel = extern_kernels.mm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 1310720}, None)]
op281.unmet_dependencies = [   MemoryDep('buf280', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op281.met_dependencies = [MemoryDep('arg184_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf281.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op281.group.device = cuda:0
op281.group.iteration = (1310720, 1)
op281.sizes = ([4, 32, 128, 80], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op281_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg184_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf281', get_index_2, add, None)
        return store
op281 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 1310720}, None)]
op282.unmet_dependencies = [   MemoryDep('buf279', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op282.met_dependencies = [MemoryDep('arg182_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (1310720, 1)
op282.sizes = ([4, 32, 128, 80], [])
buf279_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op282_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf279', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf282', get_index_2, mul, None)
        return store
op282 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf281', mode=None), StarDep(name='buf282', mode=None)]
op283.met_dependencies = []
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.bmm


op284_op285_op288: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op284_op285_op288.writes = 
    [   MemoryDep('buf284', c0, {c0: 16384}, None),
        MemoryDep('buf285', c0, {c0: 16384}, None),
        MemoryDep('buf288', c0, {c0: 2097152}, None)]
op284_op285_op288.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 2097152}, None)]
op284_op285_op288.met_dependencies = []
op284_op285_op288.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf285.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op284_op285_op288.snodes[0] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 16384}, None)]
op284.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 2097152}, None)]
op284.met_dependencies = []
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (16384, 128)
op284.sizes = ([128, 128], [128])
buf283_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op284_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf284', get_index_3, reduction)
        return store_reduction
op284 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op284_op285_op288.snodes[1] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 16384}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 2097152}, None),
        MemoryDep('buf284', c0, {c0: 16384}, None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf285.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (16384, 128)
op285.sizes = ([128, 128], [128])
buf283_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf285_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op285_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf284', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf285', get_index_4, reduction)
        return store_reduction
op285 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op284_op285_op288.snodes[2] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 2097152}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf283', c0, {c0: 2097152}, None),
        MemoryDep('buf284', c0, {c0: 16384}, None),
        MemoryDep('buf285', c0, {c0: 16384}, None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (2097152, 1)
op288.sizes = ([128, 128, 128], [])
buf283_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf285_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf288_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op288_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf284', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf285', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf288', get_index_5, truediv, None)
        return store
op288 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op284_op285_op288 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op286.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf286.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.node.kernel = extern_kernels.mm


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 1310720}, None)]
op287.unmet_dependencies = [   MemoryDep('buf286', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op287.met_dependencies = [MemoryDep('arg186_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf287.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op287.group.device = cuda:0
op287.group.iteration = (1310720, 1)
op287.sizes = ([4, 32, 128, 80], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op287_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf287', get_index_2, add, None)
        return store
op287 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf287', mode=None), StarDep(name='buf288', mode=None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.node.kernel = extern_kernels.bmm


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 1310720}, None)]
op290.unmet_dependencies = [   MemoryDep('buf289', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (1310720, 1)
op290.sizes = ([4, 128, 32, 80], [])
buf289_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op290_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf290', get_index_1, load, None)
        return store
op290 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False)]
]
op291.node.kernel = extern_kernels.mm


op292_op293_op294_op296: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op292_op293_op294_op296.writes = 
    [   MemoryDep('buf292', c0, {c0: 1310720}, None),
        MemoryDep('buf293', c0, {c0: 512}, None),
        MemoryDep('buf294', c0, {c0: 512}, None),
        MemoryDep('buf296', c0, {c0: 1310720}, None)]
op292_op293_op294_op296.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 1310720}, None),
        MemoryDep('buf274', c0, {c0: 1310720}, None),
        MemoryDep('buf291', c0, {c0: 1310720}, None)]
op292_op293_op294_op296.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg188_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg189_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg190_1', c1, {c0: 512, c1: 2560}, None)]
op292_op293_op294_op296.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op292_op293_op294_op296.snodes[0] =
op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 1310720}, None)]
op292.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 1310720}, None),
        MemoryDep('buf274', c0, {c0: 1310720}, None),
        MemoryDep('buf291', c0, {c0: 1310720}, None)]
op292.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg188_1', c1, {c0: 512, c1: 2560}, None)]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (1310720, 1)
op292.sizes = ([512, 2560], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op292_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf274', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf291', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg188_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf292', get_index_5, add_3, None)
        return store
op292 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op292_op293_op294_op296.snodes[1] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 512}, None)]
op293.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 1310720}, None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf293.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (512, 2560)
op293.sizes = ([512], [2560])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op293_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf293', get_index_1, getitem)
        return store_reduction
op293 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op292_op293_op294_op296.snodes[2] =
op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 512}, None)]
op294.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 1310720}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf294.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (512, 2560)
op294.sizes = ([512], [2560])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op294_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf294', get_index_1, getitem_1)
        return store_reduction
op294 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op292_op293_op294_op296.snodes[3] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 1310720}, None)]
op296.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 1310720}, None),
        MemoryDep('buf293', c0, {c0: 512}, None),
        MemoryDep('buf294', c0, {c0: 512}, None)]
op296.met_dependencies = 
    [   MemoryDep('arg189_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg190_1', c1, {c0: 512, c1: 2560}, None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (1310720, 1)
op296.sizes = ([512, 2560], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf294_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op296_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf293', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf294', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg189_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg190_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf296', get_index_5, add_1, None)
        return store
op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op292_op293_op294_op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op297: ExternKernelSchedulerNode(ExternKernelOut)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelOut
    buf297.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False)]
]
op297.node.kernel = extern_kernels.mm


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 5242880}, None)]
op298.unmet_dependencies = [MemoryDep('buf297', c0, {c0: 5242880}, None)]
op298.met_dependencies = [MemoryDep('arg192_1', c1, {c0: 512, c1: 10240}, None)]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf298.users = [NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (5242880, 1)
op298.sizes = ([512, 10240], [])
buf297_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op298_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf297', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg192_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf298', get_index_4, mul_2, None)
        return store
op298 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op299: ExternKernelSchedulerNode(ExternKernelOut)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op299.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op299.outputs = [
    buf299: ExternKernelOut
    buf299.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
]
op299.node.kernel = extern_kernels.mm


op300_op301_op303: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op300_op301_op303.writes = 
    [   MemoryDep('buf300', c0, {c0: 512}, None),
        MemoryDep('buf301', c0, {c0: 512}, None),
        MemoryDep('buf303', c0, {c0: 1310720}, None)]
op300_op301_op303.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 1310720}, None),
        MemoryDep('buf299', c0, {c0: 1310720}, None)]
op300_op301_op303.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg195_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg196_1', c1, {c0: 512, c1: 2560}, None)]
op300_op301_op303.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf300.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf303.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False),
    ]
]
op300_op301_op303.snodes[0] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 512}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 1310720}, None),
        MemoryDep('buf299', c0, {c0: 1310720}, None)]
op300.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 512, c1: 2560}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf300.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (512, 2560)
op300.sizes = ([512], [2560])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op300_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf300', get_index_3, getitem)
        return store_reduction
op300 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op300_op301_op303.snodes[1] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 512}, None)]
op301.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 1310720}, None),
        MemoryDep('buf299', c0, {c0: 1310720}, None)]
op301.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 512, c1: 2560}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf301.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (512, 2560)
op301.sizes = ([512], [2560])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op301_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf301', get_index_3, getitem_1)
        return store_reduction
op301 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op300_op301_op303.snodes[2] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 1310720}, None)]
op303.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 1310720}, None),
        MemoryDep('buf299', c0, {c0: 1310720}, None),
        MemoryDep('buf300', c0, {c0: 512}, None),
        MemoryDep('buf301', c0, {c0: 512}, None)]
op303.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg195_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg196_1', c1, {c0: 512, c1: 2560}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf303.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False),
    ]
]
op303.group.device = cuda:0
op303.group.iteration = (1310720, 1)
op303.sizes = ([512, 2560], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf301_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op303_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf300', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf301', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg195_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg196_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf303', get_index_7, add_3, None)
        return store
op303 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op300_op301_op303 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op304: ExternKernelSchedulerNode(ExternKernelOut)
op304.writes = [StarDep(name='buf304', mode=None)]
op304.unmet_dependencies = [StarDep(name='buf303', mode=None)]
op304.met_dependencies = [StarDep(name='arg197_1', mode=None)]
op304.outputs = [
    buf304: ExternKernelOut
    buf304.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf304.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op304.node.kernel = extern_kernels.mm


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf303', mode=None)]
op305.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf305.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.node.kernel = extern_kernels.mm


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 1310720}, None)]
op306.unmet_dependencies = [   MemoryDep('buf305', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op306.met_dependencies = [MemoryDep('arg200_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf306.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (1310720, 1)
op306.sizes = ([4, 32, 128, 80], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op306_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg200_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf306', get_index_2, add, None)
        return store
op306 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 1310720}, None)]
op307.unmet_dependencies = [   MemoryDep('buf304', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op307.met_dependencies = [MemoryDep('arg198_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (1310720, 1)
op307.sizes = ([4, 32, 128, 80], [])
buf304_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op307_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg198_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf307', get_index_2, mul, None)
        return store
op307 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op308: ExternKernelSchedulerNode(ExternKernelOut)
op308.writes = [StarDep(name='buf308', mode=None)]
op308.unmet_dependencies = [StarDep(name='buf306', mode=None), StarDep(name='buf307', mode=None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ExternKernelOut
    buf308.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf308.users = [
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False),
    ]
]
op308.node.kernel = extern_kernels.bmm


op309_op310_op313: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op309_op310_op313.writes = 
    [   MemoryDep('buf309', c0, {c0: 16384}, None),
        MemoryDep('buf310', c0, {c0: 16384}, None),
        MemoryDep('buf313', c0, {c0: 2097152}, None)]
op309_op310_op313.unmet_dependencies = [MemoryDep('buf308', c0, {c0: 2097152}, None)]
op309_op310_op313.met_dependencies = []
op309_op310_op313.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
    ]
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf310.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op309_op310_op313.snodes[0] =
op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 16384}, None)]
op309.unmet_dependencies = [MemoryDep('buf308', c0, {c0: 2097152}, None)]
op309.met_dependencies = []
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
    ]
]
op309.group.device = cuda:0
op309.group.iteration = (16384, 128)
op309.sizes = ([128, 128], [128])
buf308_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op309_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf309', get_index_3, reduction)
        return store_reduction
op309 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op309_op310_op313.snodes[1] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 16384}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf308', c0, {c0: 2097152}, None),
        MemoryDep('buf309', c0, {c0: 16384}, None)]
op310.met_dependencies = []
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf310.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (16384, 128)
op310.sizes = ([128, 128], [128])
buf308_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf310_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op310_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf309', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf310', get_index_4, reduction)
        return store_reduction
op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op309_op310_op313.snodes[2] =
op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 2097152}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf308', c0, {c0: 2097152}, None),
        MemoryDep('buf309', c0, {c0: 16384}, None),
        MemoryDep('buf310', c0, {c0: 16384}, None)]
op313.met_dependencies = []
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (2097152, 1)
op313.sizes = ([128, 128, 128], [])
buf308_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf310_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf313_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op313_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf309', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf310', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf313', get_index_5, truediv, None)
        return store
op313 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op309_op310_op313 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf303', mode=None)]
op311.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op311.node.kernel = extern_kernels.mm


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 1310720}, None)]
op312.unmet_dependencies = [   MemoryDep('buf311', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op312.met_dependencies = [MemoryDep('arg202_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf312.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op312.group.device = cuda:0
op312.group.iteration = (1310720, 1)
op312.sizes = ([4, 32, 128, 80], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op312_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf312', get_index_2, add, None)
        return store
op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op314: ExternKernelSchedulerNode(ExternKernelOut)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf312', mode=None), StarDep(name='buf313', mode=None)]
op314.met_dependencies = []
op314.outputs = [
    buf314: ExternKernelOut
    buf314.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf314.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.node.kernel = extern_kernels.bmm


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 1310720}, None)]
op315.unmet_dependencies = [   MemoryDep('buf314', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op315.met_dependencies = []
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (1310720, 1)
op315.sizes = ([4, 128, 32, 80], [])
buf314_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op315_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf315', get_index_1, load, None)
        return store
op315 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op316: ExternKernelSchedulerNode(ExternKernelOut)
op316.writes = [StarDep(name='buf316', mode=None)]
op316.unmet_dependencies = [StarDep(name='buf315', mode=None)]
op316.met_dependencies = [StarDep(name='arg203_1', mode=None)]
op316.outputs = [
    buf316: ExternKernelOut
    buf316.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf316.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False)]
]
op316.node.kernel = extern_kernels.mm


op317_op318_op319_op321: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op317_op318_op319_op321.writes = 
    [   MemoryDep('buf317', c0, {c0: 1310720}, None),
        MemoryDep('buf318', c0, {c0: 512}, None),
        MemoryDep('buf319', c0, {c0: 512}, None),
        MemoryDep('buf321', c0, {c0: 1310720}, None)]
op317_op318_op319_op321.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 1310720}, None),
        MemoryDep('buf299', c0, {c0: 1310720}, None),
        MemoryDep('buf316', c0, {c0: 1310720}, None)]
op317_op318_op319_op321.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg204_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg205_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg206_1', c1, {c0: 512, c1: 2560}, None)]
op317_op318_op319_op321.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf317.users = [
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
    ]
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf318.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf319.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op317_op318_op319_op321.snodes[0] =
op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 1310720}, None)]
op317.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 1310720}, None),
        MemoryDep('buf299', c0, {c0: 1310720}, None),
        MemoryDep('buf316', c0, {c0: 1310720}, None)]
op317.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg204_1', c1, {c0: 512, c1: 2560}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf317.users = [
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
    ]
]
op317.group.device = cuda:0
op317.group.iteration = (1310720, 1)
op317.sizes = ([512, 2560], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op317_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg194_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf316', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg204_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf317', get_index_5, add_3, None)
        return store
op317 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op317_op318_op319_op321.snodes[1] =
op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 512}, None)]
op318.unmet_dependencies = [MemoryDep('buf317', c0, {c0: 1310720}, None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf318.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (512, 2560)
op318.sizes = ([512], [2560])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op318_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf318', get_index_1, getitem)
        return store_reduction
op318 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op317_op318_op319_op321.snodes[2] =
op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 512}, None)]
op319.unmet_dependencies = [MemoryDep('buf317', c0, {c0: 1310720}, None)]
op319.met_dependencies = []
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf319.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (512, 2560)
op319.sizes = ([512], [2560])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op319_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf319', get_index_1, getitem_1)
        return store_reduction
op319 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op317_op318_op319_op321.snodes[3] =
op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 1310720}, None)]
op321.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 1310720}, None),
        MemoryDep('buf318', c0, {c0: 512}, None),
        MemoryDep('buf319', c0, {c0: 512}, None)]
op321.met_dependencies = 
    [   MemoryDep('arg205_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg206_1', c1, {c0: 512, c1: 2560}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (1310720, 1)
op321.sizes = ([512, 2560], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf319_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op321_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf318', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf319', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg205_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg206_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf321', get_index_5, add_1, None)
        return store
op321 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op317_op318_op319_op321 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op322: ExternKernelSchedulerNode(ExternKernelOut)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf321', mode=None)]
op322.met_dependencies = [StarDep(name='arg207_1', mode=None)]
op322.outputs = [
    buf322: ExternKernelOut
    buf322.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf322.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False)]
]
op322.node.kernel = extern_kernels.mm


op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 5242880}, None)]
op323.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 5242880}, None)]
op323.met_dependencies = [MemoryDep('arg208_1', c1, {c0: 512, c1: 10240}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (5242880, 1)
op323.sizes = ([512, 10240], [])
buf322_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op323_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg208_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf322', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg208_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf323', get_index_4, mul_2, None)
        return store
op323 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op324: ExternKernelSchedulerNode(ExternKernelOut)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op324.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op324.outputs = [
    buf324: ExternKernelOut
    buf324.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf324.users = [
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
    ]
]
op324.node.kernel = extern_kernels.mm


op325_op326_op328: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op325_op326_op328.writes = 
    [   MemoryDep('buf325', c0, {c0: 512}, None),
        MemoryDep('buf326', c0, {c0: 512}, None),
        MemoryDep('buf328', c0, {c0: 1310720}, None)]
op325_op326_op328.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 1310720}, None),
        MemoryDep('buf324', c0, {c0: 1310720}, None)]
op325_op326_op328.met_dependencies = 
    [   MemoryDep('arg210_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg211_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg212_1', c1, {c0: 512, c1: 2560}, None)]
op325_op326_op328.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf325.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf326.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf328.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False),
    ]
]
op325_op326_op328.snodes[0] =
op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 512}, None)]
op325.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 1310720}, None),
        MemoryDep('buf324', c0, {c0: 1310720}, None)]
op325.met_dependencies = [MemoryDep('arg210_1', c1, {c0: 512, c1: 2560}, None)]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf325.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (512, 2560)
op325.sizes = ([512], [2560])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op325_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf324', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg210_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf325', get_index_3, getitem)
        return store_reduction
op325 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op325_op326_op328.snodes[1] =
op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 512}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 1310720}, None),
        MemoryDep('buf324', c0, {c0: 1310720}, None)]
op326.met_dependencies = [MemoryDep('arg210_1', c1, {c0: 512, c1: 2560}, None)]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf326.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (512, 2560)
op326.sizes = ([512], [2560])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op326_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf324', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg210_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf326', get_index_3, getitem_1)
        return store_reduction
op326 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op325_op326_op328.snodes[2] =
op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 1310720}, None)]
op328.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 1310720}, None),
        MemoryDep('buf324', c0, {c0: 1310720}, None),
        MemoryDep('buf325', c0, {c0: 512}, None),
        MemoryDep('buf326', c0, {c0: 512}, None)]
op328.met_dependencies = 
    [   MemoryDep('arg210_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg211_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg212_1', c1, {c0: 512, c1: 2560}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf328.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False),
    ]
]
op328.group.device = cuda:0
op328.group.iteration = (1310720, 1)
op328.sizes = ([512, 2560], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf326_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op328_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf324', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg210_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf325', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf326', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg211_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg212_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf328', get_index_7, add_3, None)
        return store
op328 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op325_op326_op328 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op329: ExternKernelSchedulerNode(ExternKernelOut)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf328', mode=None)]
op329.met_dependencies = [StarDep(name='arg213_1', mode=None)]
op329.outputs = [
    buf329: ExternKernelOut
    buf329.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op329.node.kernel = extern_kernels.mm


op330: ExternKernelSchedulerNode(ExternKernelOut)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf328', mode=None)]
op330.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op330.outputs = [
    buf330: ExternKernelOut
    buf330.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf330.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op330.node.kernel = extern_kernels.mm


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 1310720}, None)]
op331.unmet_dependencies = [   MemoryDep('buf330', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op331.met_dependencies = [MemoryDep('arg216_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf331.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op331.group.device = cuda:0
op331.group.iteration = (1310720, 1)
op331.sizes = ([4, 32, 128, 80], [])
buf330_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op331_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf331', get_index_2, add, None)
        return store
op331 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 1310720}, None)]
op332.unmet_dependencies = [   MemoryDep('buf329', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op332.met_dependencies = [MemoryDep('arg214_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf332.users = [NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (1310720, 1)
op332.sizes = ([4, 32, 128, 80], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op332_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg214_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf332', get_index_2, mul, None)
        return store
op332 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op333: ExternKernelSchedulerNode(ExternKernelOut)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf331', mode=None), StarDep(name='buf332', mode=None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ExternKernelOut
    buf333.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf333.users = [
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False),
    ]
]
op333.node.kernel = extern_kernels.bmm


op334_op335_op338: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op334_op335_op338.writes = 
    [   MemoryDep('buf334', c0, {c0: 16384}, None),
        MemoryDep('buf335', c0, {c0: 16384}, None),
        MemoryDep('buf338', c0, {c0: 2097152}, None)]
op334_op335_op338.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 2097152}, None)]
op334_op335_op338.met_dependencies = []
op334_op335_op338.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
    ]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf335.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op334_op335_op338.snodes[0] =
op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 16384}, None)]
op334.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 2097152}, None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
    ]
]
op334.group.device = cuda:0
op334.group.iteration = (16384, 128)
op334.sizes = ([128, 128], [128])
buf333_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op334_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf334', get_index_3, reduction)
        return store_reduction
op334 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op334_op335_op338.snodes[1] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 16384}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf333', c0, {c0: 2097152}, None),
        MemoryDep('buf334', c0, {c0: 16384}, None)]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf335.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (16384, 128)
op335.sizes = ([128, 128], [128])
buf333_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf335_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op335_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf334', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf335', get_index_4, reduction)
        return store_reduction
op335 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op334_op335_op338.snodes[2] =
op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 2097152}, None)]
op338.unmet_dependencies = 
    [   MemoryDep('buf333', c0, {c0: 2097152}, None),
        MemoryDep('buf334', c0, {c0: 16384}, None),
        MemoryDep('buf335', c0, {c0: 16384}, None)]
op338.met_dependencies = []
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (2097152, 1)
op338.sizes = ([128, 128, 128], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf335_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf338_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op338_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf334', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf335', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf338', get_index_5, truediv, None)
        return store
op338 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op334_op335_op338 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op336: ExternKernelSchedulerNode(ExternKernelOut)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf328', mode=None)]
op336.met_dependencies = [StarDep(name='arg217_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelOut
    buf336.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.node.kernel = extern_kernels.mm


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 1310720}, None)]
op337.unmet_dependencies = [   MemoryDep('buf336', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op337.met_dependencies = [MemoryDep('arg218_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf337.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op337.group.device = cuda:0
op337.group.iteration = (1310720, 1)
op337.sizes = ([4, 32, 128, 80], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op337_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg218_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf337', get_index_2, add, None)
        return store
op337 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op339: ExternKernelSchedulerNode(ExternKernelOut)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = [StarDep(name='buf337', mode=None), StarDep(name='buf338', mode=None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: ExternKernelOut
    buf339.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf339.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op339.node.kernel = extern_kernels.bmm


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 1310720}, None)]
op340.unmet_dependencies = [   MemoryDep('buf339', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op340.met_dependencies = []
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf340.users = [NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (1310720, 1)
op340.sizes = ([4, 128, 32, 80], [])
buf339_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op340_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf340', get_index_1, load, None)
        return store
op340 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op341: ExternKernelSchedulerNode(ExternKernelOut)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = [StarDep(name='buf340', mode=None)]
op341.met_dependencies = [StarDep(name='arg219_1', mode=None)]
op341.outputs = [
    buf341: ExternKernelOut
    buf341.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf341.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False)]
]
op341.node.kernel = extern_kernels.mm


op342_op343_op344_op346: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op342_op343_op344_op346.writes = 
    [   MemoryDep('buf342', c0, {c0: 1310720}, None),
        MemoryDep('buf343', c0, {c0: 512}, None),
        MemoryDep('buf344', c0, {c0: 512}, None),
        MemoryDep('buf346', c0, {c0: 1310720}, None)]
op342_op343_op344_op346.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 1310720}, None),
        MemoryDep('buf324', c0, {c0: 1310720}, None),
        MemoryDep('buf341', c0, {c0: 1310720}, None)]
op342_op343_op344_op346.met_dependencies = 
    [   MemoryDep('arg210_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg220_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg221_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg222_1', c1, {c0: 512, c1: 2560}, None)]
op342_op343_op344_op346.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf342.users = [
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
    ]
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf343.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf344.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op342_op343_op344_op346.snodes[0] =
op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 1310720}, None)]
op342.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 1310720}, None),
        MemoryDep('buf324', c0, {c0: 1310720}, None),
        MemoryDep('buf341', c0, {c0: 1310720}, None)]
op342.met_dependencies = 
    [   MemoryDep('arg210_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg220_1', c1, {c0: 512, c1: 2560}, None)]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf342.users = [
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
    ]
]
op342.group.device = cuda:0
op342.group.iteration = (1310720, 1)
op342.sizes = ([512, 2560], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op342_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf324', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg210_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf341', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg220_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf342', get_index_5, add_3, None)
        return store
op342 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op342_op343_op344_op346.snodes[1] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 512}, None)]
op343.unmet_dependencies = [MemoryDep('buf342', c0, {c0: 1310720}, None)]
op343.met_dependencies = []
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf343.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (512, 2560)
op343.sizes = ([512], [2560])
buf342_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op343_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf343', get_index_1, getitem)
        return store_reduction
op343 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op342_op343_op344_op346.snodes[2] =
op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 512}, None)]
op344.unmet_dependencies = [MemoryDep('buf342', c0, {c0: 1310720}, None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf344.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (512, 2560)
op344.sizes = ([512], [2560])
buf342_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op344_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf344', get_index_1, getitem_1)
        return store_reduction
op344 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op342_op343_op344_op346.snodes[3] =
op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 1310720}, None)]
op346.unmet_dependencies = 
    [   MemoryDep('buf342', c0, {c0: 1310720}, None),
        MemoryDep('buf343', c0, {c0: 512}, None),
        MemoryDep('buf344', c0, {c0: 512}, None)]
op346.met_dependencies = 
    [   MemoryDep('arg221_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg222_1', c1, {c0: 512, c1: 2560}, None)]
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (1310720, 1)
op346.sizes = ([512, 2560], [])
buf342_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf344_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op346_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf343', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf344', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg221_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg222_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf346', get_index_5, add_1, None)
        return store
op346 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op342_op343_op344_op346 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf346', mode=None)]
op347.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf347.users = [NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False)]
]
op347.node.kernel = extern_kernels.mm


op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 5242880}, None)]
op348.unmet_dependencies = [MemoryDep('buf347', c0, {c0: 5242880}, None)]
op348.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 512, c1: 10240}, None)]
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf348.users = [NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op348.group.device = cuda:0
op348.group.iteration = (5242880, 1)
op348.sizes = ([512, 10240], [])
buf347_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op348_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf347', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg224_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf348', get_index_4, mul_2, None)
        return store
op348 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op349: ExternKernelSchedulerNode(ExternKernelOut)
op349.writes = [StarDep(name='buf349', mode=None)]
op349.unmet_dependencies = [StarDep(name='buf348', mode=None)]
op349.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op349.outputs = [
    buf349: ExternKernelOut
    buf349.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf349.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
    ]
]
op349.node.kernel = extern_kernels.mm


op350_op351_op353: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op350_op351_op353.writes = 
    [   MemoryDep('buf350', c0, {c0: 512}, None),
        MemoryDep('buf351', c0, {c0: 512}, None),
        MemoryDep('buf353', c0, {c0: 1310720}, None)]
op350_op351_op353.unmet_dependencies = 
    [   MemoryDep('buf342', c0, {c0: 1310720}, None),
        MemoryDep('buf349', c0, {c0: 1310720}, None)]
op350_op351_op353.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg227_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg228_1', c1, {c0: 512, c1: 2560}, None)]
op350_op351_op353.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf350.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf351.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf353.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False),
    ]
]
op350_op351_op353.snodes[0] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 512}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf342', c0, {c0: 1310720}, None),
        MemoryDep('buf349', c0, {c0: 1310720}, None)]
op350.met_dependencies = [MemoryDep('arg226_1', c1, {c0: 512, c1: 2560}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf350.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (512, 2560)
op350.sizes = ([512], [2560])
buf342_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op350_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf349', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg226_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf350', get_index_3, getitem)
        return store_reduction
op350 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op350_op351_op353.snodes[1] =
op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 512}, None)]
op351.unmet_dependencies = 
    [   MemoryDep('buf342', c0, {c0: 1310720}, None),
        MemoryDep('buf349', c0, {c0: 1310720}, None)]
op351.met_dependencies = [MemoryDep('arg226_1', c1, {c0: 512, c1: 2560}, None)]
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf351.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (512, 2560)
op351.sizes = ([512], [2560])
buf342_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op351_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf349', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg226_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf351', get_index_3, getitem_1)
        return store_reduction
op351 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op350_op351_op353.snodes[2] =
op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 1310720}, None)]
op353.unmet_dependencies = 
    [   MemoryDep('buf342', c0, {c0: 1310720}, None),
        MemoryDep('buf349', c0, {c0: 1310720}, None),
        MemoryDep('buf350', c0, {c0: 512}, None),
        MemoryDep('buf351', c0, {c0: 512}, None)]
op353.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg227_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg228_1', c1, {c0: 512, c1: 2560}, None)]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf353.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False),
    ]
]
op353.group.device = cuda:0
op353.group.iteration = (1310720, 1)
op353.sizes = ([512, 2560], [])
buf342_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf351_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op353_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf349', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg226_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf350', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf351', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg227_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg228_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf353', get_index_7, add_3, None)
        return store
op353 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op350_op351_op353 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op354: ExternKernelSchedulerNode(ExternKernelOut)
op354.writes = [StarDep(name='buf354', mode=None)]
op354.unmet_dependencies = [StarDep(name='buf353', mode=None)]
op354.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op354.outputs = [
    buf354: ExternKernelOut
    buf354.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf354.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op354.node.kernel = extern_kernels.mm


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf353', mode=None)]
op355.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf355.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op355.node.kernel = extern_kernels.mm


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 1310720}, None)]
op356.unmet_dependencies = [   MemoryDep('buf355', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op356.met_dependencies = [MemoryDep('arg232_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf356.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (1310720, 1)
op356.sizes = ([4, 32, 128, 80], [])
buf355_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op356_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf356', get_index_2, add, None)
        return store
op356 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 1310720}, None)]
op357.unmet_dependencies = [   MemoryDep('buf354', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op357.met_dependencies = [MemoryDep('arg230_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf357.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (1310720, 1)
op357.sizes = ([4, 32, 128, 80], [])
buf354_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op357_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg230_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf357', get_index_2, mul, None)
        return store
op357 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op358: ExternKernelSchedulerNode(ExternKernelOut)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf356', mode=None), StarDep(name='buf357', mode=None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ExternKernelOut
    buf358.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf358.users = [
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op358.node.kernel = extern_kernels.bmm


op359_op360_op363: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op359_op360_op363.writes = 
    [   MemoryDep('buf359', c0, {c0: 16384}, None),
        MemoryDep('buf360', c0, {c0: 16384}, None),
        MemoryDep('buf363', c0, {c0: 2097152}, None)]
op359_op360_op363.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 2097152}, None)]
op359_op360_op363.met_dependencies = []
op359_op360_op363.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf359.users = [
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
    ]
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf360.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf363.users = [NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op359_op360_op363.snodes[0] =
op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 16384}, None)]
op359.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 2097152}, None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf359.users = [
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
    ]
]
op359.group.device = cuda:0
op359.group.iteration = (16384, 128)
op359.sizes = ([128, 128], [128])
buf358_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op359_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf359', get_index_3, reduction)
        return store_reduction
op359 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op359_op360_op363.snodes[1] =
op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 16384}, None)]
op360.unmet_dependencies = 
    [   MemoryDep('buf358', c0, {c0: 2097152}, None),
        MemoryDep('buf359', c0, {c0: 16384}, None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf360.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (16384, 128)
op360.sizes = ([128, 128], [128])
buf358_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf360_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op360_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf359', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf360', get_index_4, reduction)
        return store_reduction
op360 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op359_op360_op363.snodes[2] =
op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 2097152}, None)]
op363.unmet_dependencies = 
    [   MemoryDep('buf358', c0, {c0: 2097152}, None),
        MemoryDep('buf359', c0, {c0: 16384}, None),
        MemoryDep('buf360', c0, {c0: 16384}, None)]
op363.met_dependencies = []
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf363.users = [NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op363.group.device = cuda:0
op363.group.iteration = (2097152, 1)
op363.sizes = ([128, 128, 128], [])
buf358_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf360_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf363_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op363_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf359', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf360', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf363', get_index_5, truediv, None)
        return store
op363 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op359_op360_op363 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op361: ExternKernelSchedulerNode(ExternKernelOut)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf353', mode=None)]
op361.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op361.outputs = [
    buf361: ExternKernelOut
    buf361.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op361.node.kernel = extern_kernels.mm


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 1310720}, None)]
op362.unmet_dependencies = [   MemoryDep('buf361', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op362.met_dependencies = [MemoryDep('arg234_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf362.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op362.group.device = cuda:0
op362.group.iteration = (1310720, 1)
op362.sizes = ([4, 32, 128, 80], [])
buf361_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op362_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf362', get_index_2, add, None)
        return store
op362 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op364: ExternKernelSchedulerNode(ExternKernelOut)
op364.writes = [StarDep(name='buf364', mode=None)]
op364.unmet_dependencies = [StarDep(name='buf362', mode=None), StarDep(name='buf363', mode=None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: ExternKernelOut
    buf364.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf364.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.node.kernel = extern_kernels.bmm


op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 1310720}, None)]
op365.unmet_dependencies = [   MemoryDep('buf364', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op365.met_dependencies = []
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf365.users = [NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (1310720, 1)
op365.sizes = ([4, 128, 32, 80], [])
buf364_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op365_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf365', get_index_1, load, None)
        return store
op365 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op366: ExternKernelSchedulerNode(ExternKernelOut)
op366.writes = [StarDep(name='buf366', mode=None)]
op366.unmet_dependencies = [StarDep(name='buf365', mode=None)]
op366.met_dependencies = [StarDep(name='arg235_1', mode=None)]
op366.outputs = [
    buf366: ExternKernelOut
    buf366.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf366.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False)]
]
op366.node.kernel = extern_kernels.mm


op367_op368_op369_op371: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op367_op368_op369_op371.writes = 
    [   MemoryDep('buf367', c0, {c0: 1310720}, None),
        MemoryDep('buf368', c0, {c0: 512}, None),
        MemoryDep('buf369', c0, {c0: 512}, None),
        MemoryDep('buf371', c0, {c0: 1310720}, None)]
op367_op368_op369_op371.unmet_dependencies = 
    [   MemoryDep('buf342', c0, {c0: 1310720}, None),
        MemoryDep('buf349', c0, {c0: 1310720}, None),
        MemoryDep('buf366', c0, {c0: 1310720}, None)]
op367_op368_op369_op371.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg236_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg237_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg238_1', c1, {c0: 512, c1: 2560}, None)]
op367_op368_op369_op371.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf367.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
    ]
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf368.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf369.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf371.users = [NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op367_op368_op369_op371.snodes[0] =
op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 1310720}, None)]
op367.unmet_dependencies = 
    [   MemoryDep('buf342', c0, {c0: 1310720}, None),
        MemoryDep('buf349', c0, {c0: 1310720}, None),
        MemoryDep('buf366', c0, {c0: 1310720}, None)]
op367.met_dependencies = 
    [   MemoryDep('arg226_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg236_1', c1, {c0: 512, c1: 2560}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf367.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
    ]
]
op367.group.device = cuda:0
op367.group.iteration = (1310720, 1)
op367.sizes = ([512, 2560], [])
buf342_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op367_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf349', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg226_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf366', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg236_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf367', get_index_5, add_3, None)
        return store
op367 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op367_op368_op369_op371.snodes[1] =
op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 512}, None)]
op368.unmet_dependencies = [MemoryDep('buf367', c0, {c0: 1310720}, None)]
op368.met_dependencies = []
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf368.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (512, 2560)
op368.sizes = ([512], [2560])
buf367_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op368_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf368', get_index_1, getitem)
        return store_reduction
op368 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op367_op368_op369_op371.snodes[2] =
op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 512}, None)]
op369.unmet_dependencies = [MemoryDep('buf367', c0, {c0: 1310720}, None)]
op369.met_dependencies = []
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf369.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (512, 2560)
op369.sizes = ([512], [2560])
buf367_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op369_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf369', get_index_1, getitem_1)
        return store_reduction
op369 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op367_op368_op369_op371.snodes[3] =
op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 1310720}, None)]
op371.unmet_dependencies = 
    [   MemoryDep('buf367', c0, {c0: 1310720}, None),
        MemoryDep('buf368', c0, {c0: 512}, None),
        MemoryDep('buf369', c0, {c0: 512}, None)]
op371.met_dependencies = 
    [   MemoryDep('arg237_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg238_1', c1, {c0: 512, c1: 2560}, None)]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf371.users = [NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (1310720, 1)
op371.sizes = ([512, 2560], [])
buf367_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf369_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op371_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf368', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf369', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg237_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg238_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf371', get_index_5, add_1, None)
        return store
op371 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op367_op368_op369_op371 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op372: ExternKernelSchedulerNode(ExternKernelOut)
op372.writes = [StarDep(name='buf372', mode=None)]
op372.unmet_dependencies = [StarDep(name='buf371', mode=None)]
op372.met_dependencies = [StarDep(name='arg239_1', mode=None)]
op372.outputs = [
    buf372: ExternKernelOut
    buf372.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf372.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False)]
]
op372.node.kernel = extern_kernels.mm


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 5242880}, None)]
op373.unmet_dependencies = [MemoryDep('buf372', c0, {c0: 5242880}, None)]
op373.met_dependencies = [MemoryDep('arg240_1', c1, {c0: 512, c1: 10240}, None)]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (5242880, 1)
op373.sizes = ([512, 10240], [])
buf372_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op373_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf372', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg240_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf373', get_index_4, mul_2, None)
        return store
op373 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op374: ExternKernelSchedulerNode(ExternKernelOut)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf373', mode=None)]
op374.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op374.outputs = [
    buf374: ExternKernelOut
    buf374.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
    ]
]
op374.node.kernel = extern_kernels.mm


op375_op376_op378: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op375_op376_op378.writes = 
    [   MemoryDep('buf375', c0, {c0: 512}, None),
        MemoryDep('buf376', c0, {c0: 512}, None),
        MemoryDep('buf378', c0, {c0: 1310720}, None)]
op375_op376_op378.unmet_dependencies = 
    [   MemoryDep('buf367', c0, {c0: 1310720}, None),
        MemoryDep('buf374', c0, {c0: 1310720}, None)]
op375_op376_op378.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg243_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg244_1', c1, {c0: 512, c1: 2560}, None)]
op375_op376_op378.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf375.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf376.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf378.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False),
    ]
]
op375_op376_op378.snodes[0] =
op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 512}, None)]
op375.unmet_dependencies = 
    [   MemoryDep('buf367', c0, {c0: 1310720}, None),
        MemoryDep('buf374', c0, {c0: 1310720}, None)]
op375.met_dependencies = [MemoryDep('arg242_1', c1, {c0: 512, c1: 2560}, None)]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf375.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (512, 2560)
op375.sizes = ([512], [2560])
buf367_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op375_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf374', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg242_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf375', get_index_3, getitem)
        return store_reduction
op375 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op375_op376_op378.snodes[1] =
op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 512}, None)]
op376.unmet_dependencies = 
    [   MemoryDep('buf367', c0, {c0: 1310720}, None),
        MemoryDep('buf374', c0, {c0: 1310720}, None)]
op376.met_dependencies = [MemoryDep('arg242_1', c1, {c0: 512, c1: 2560}, None)]
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf376.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (512, 2560)
op376.sizes = ([512], [2560])
buf367_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op376_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf374', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg242_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf376', get_index_3, getitem_1)
        return store_reduction
op376 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op375_op376_op378.snodes[2] =
op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 1310720}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf367', c0, {c0: 1310720}, None),
        MemoryDep('buf374', c0, {c0: 1310720}, None),
        MemoryDep('buf375', c0, {c0: 512}, None),
        MemoryDep('buf376', c0, {c0: 512}, None)]
op378.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg243_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg244_1', c1, {c0: 512, c1: 2560}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf378.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False),
    ]
]
op378.group.device = cuda:0
op378.group.iteration = (1310720, 1)
op378.sizes = ([512, 2560], [])
buf367_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf376_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op378_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf374', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg242_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf375', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf376', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg243_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg244_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf378', get_index_7, add_3, None)
        return store
op378 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op375_op376_op378 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op379: ExternKernelSchedulerNode(ExternKernelOut)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op379.met_dependencies = [StarDep(name='arg245_1', mode=None)]
op379.outputs = [
    buf379: ExternKernelOut
    buf379.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf379.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op379.node.kernel = extern_kernels.mm


op380: ExternKernelSchedulerNode(ExternKernelOut)
op380.writes = [StarDep(name='buf380', mode=None)]
op380.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op380.met_dependencies = [StarDep(name='arg247_1', mode=None)]
op380.outputs = [
    buf380: ExternKernelOut
    buf380.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf380.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op380.node.kernel = extern_kernels.mm


op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 1310720}, None)]
op381.unmet_dependencies = [   MemoryDep('buf380', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op381.met_dependencies = [MemoryDep('arg248_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf381.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op381.group.device = cuda:0
op381.group.iteration = (1310720, 1)
op381.sizes = ([4, 32, 128, 80], [])
buf380_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op381_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg248_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf381', get_index_2, add, None)
        return store
op381 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 1310720}, None)]
op382.unmet_dependencies = [   MemoryDep('buf379', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op382.met_dependencies = [MemoryDep('arg246_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf382.users = [NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (1310720, 1)
op382.sizes = ([4, 32, 128, 80], [])
buf379_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op382_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg246_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf382', get_index_2, mul, None)
        return store
op382 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op383: ExternKernelSchedulerNode(ExternKernelOut)
op383.writes = [StarDep(name='buf383', mode=None)]
op383.unmet_dependencies = [StarDep(name='buf381', mode=None), StarDep(name='buf382', mode=None)]
op383.met_dependencies = []
op383.outputs = [
    buf383: ExternKernelOut
    buf383.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf383.users = [
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
    ]
]
op383.node.kernel = extern_kernels.bmm


op384_op385_op388: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op384_op385_op388.writes = 
    [   MemoryDep('buf384', c0, {c0: 16384}, None),
        MemoryDep('buf385', c0, {c0: 16384}, None),
        MemoryDep('buf388', c0, {c0: 2097152}, None)]
op384_op385_op388.unmet_dependencies = [MemoryDep('buf383', c0, {c0: 2097152}, None)]
op384_op385_op388.met_dependencies = []
op384_op385_op388.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
    ]
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf385.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False)]
]
op384_op385_op388.snodes[0] =
op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 16384}, None)]
op384.unmet_dependencies = [MemoryDep('buf383', c0, {c0: 2097152}, None)]
op384.met_dependencies = []
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
    ]
]
op384.group.device = cuda:0
op384.group.iteration = (16384, 128)
op384.sizes = ([128, 128], [128])
buf383_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op384_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf384', get_index_3, reduction)
        return store_reduction
op384 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op384_op385_op388.snodes[1] =
op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 16384}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf383', c0, {c0: 2097152}, None),
        MemoryDep('buf384', c0, {c0: 16384}, None)]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf385.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (16384, 128)
op385.sizes = ([128, 128], [128])
buf383_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf385_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op385_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf384', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf385', get_index_4, reduction)
        return store_reduction
op385 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op384_op385_op388.snodes[2] =
op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 2097152}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf383', c0, {c0: 2097152}, None),
        MemoryDep('buf384', c0, {c0: 16384}, None),
        MemoryDep('buf385', c0, {c0: 16384}, None)]
op388.met_dependencies = []
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (2097152, 1)
op388.sizes = ([128, 128, 128], [])
buf383_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf385_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf388_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op388_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf384', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf385', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf388', get_index_5, truediv, None)
        return store
op388 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op384_op385_op388 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op386: ExternKernelSchedulerNode(ExternKernelOut)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op386.met_dependencies = [StarDep(name='arg249_1', mode=None)]
op386.outputs = [
    buf386: ExternKernelOut
    buf386.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op386.node.kernel = extern_kernels.mm


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 1310720}, None)]
op387.unmet_dependencies = [   MemoryDep('buf386', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op387.met_dependencies = [MemoryDep('arg250_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf387.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (1310720, 1)
op387.sizes = ([4, 32, 128, 80], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op387_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg250_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf387', get_index_2, add, None)
        return store
op387 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op389: ExternKernelSchedulerNode(ExternKernelOut)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf387', mode=None), StarDep(name='buf388', mode=None)]
op389.met_dependencies = []
op389.outputs = [
    buf389: ExternKernelOut
    buf389.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf389.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op389.node.kernel = extern_kernels.bmm


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 1310720}, None)]
op390.unmet_dependencies = [   MemoryDep('buf389', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op390.met_dependencies = []
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf390.users = [NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (1310720, 1)
op390.sizes = ([4, 128, 32, 80], [])
buf389_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op390_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf390', get_index_1, load, None)
        return store
op390 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op391: ExternKernelSchedulerNode(ExternKernelOut)
op391.writes = [StarDep(name='buf391', mode=None)]
op391.unmet_dependencies = [StarDep(name='buf390', mode=None)]
op391.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op391.outputs = [
    buf391: ExternKernelOut
    buf391.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf391.users = [NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False)]
]
op391.node.kernel = extern_kernels.mm


op392_op393_op394_op396: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op392_op393_op394_op396.writes = 
    [   MemoryDep('buf392', c0, {c0: 1310720}, None),
        MemoryDep('buf393', c0, {c0: 512}, None),
        MemoryDep('buf394', c0, {c0: 512}, None),
        MemoryDep('buf396', c0, {c0: 1310720}, None)]
op392_op393_op394_op396.unmet_dependencies = 
    [   MemoryDep('buf367', c0, {c0: 1310720}, None),
        MemoryDep('buf374', c0, {c0: 1310720}, None),
        MemoryDep('buf391', c0, {c0: 1310720}, None)]
op392_op393_op394_op396.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg252_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg253_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg254_1', c1, {c0: 512, c1: 2560}, None)]
op392_op393_op394_op396.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf392.users = [
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
    ]
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf393.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf394.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf396.users = [NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op392_op393_op394_op396.snodes[0] =
op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 1310720}, None)]
op392.unmet_dependencies = 
    [   MemoryDep('buf367', c0, {c0: 1310720}, None),
        MemoryDep('buf374', c0, {c0: 1310720}, None),
        MemoryDep('buf391', c0, {c0: 1310720}, None)]
op392.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg252_1', c1, {c0: 512, c1: 2560}, None)]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf392.users = [
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
    ]
]
op392.group.device = cuda:0
op392.group.iteration = (1310720, 1)
op392.sizes = ([512, 2560], [])
buf367_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op392_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf374', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg242_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf391', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg252_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf392', get_index_5, add_3, None)
        return store
op392 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op392_op393_op394_op396.snodes[1] =
op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 512}, None)]
op393.unmet_dependencies = [MemoryDep('buf392', c0, {c0: 1310720}, None)]
op393.met_dependencies = []
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf393.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (512, 2560)
op393.sizes = ([512], [2560])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op393_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf393', get_index_1, getitem)
        return store_reduction
op393 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op392_op393_op394_op396.snodes[2] =
op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 512}, None)]
op394.unmet_dependencies = [MemoryDep('buf392', c0, {c0: 1310720}, None)]
op394.met_dependencies = []
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf394.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (512, 2560)
op394.sizes = ([512], [2560])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op394_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf394', get_index_1, getitem_1)
        return store_reduction
op394 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op392_op393_op394_op396.snodes[3] =
op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 1310720}, None)]
op396.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 1310720}, None),
        MemoryDep('buf393', c0, {c0: 512}, None),
        MemoryDep('buf394', c0, {c0: 512}, None)]
op396.met_dependencies = 
    [   MemoryDep('arg253_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg254_1', c1, {c0: 512, c1: 2560}, None)]
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf396.users = [NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (1310720, 1)
op396.sizes = ([512, 2560], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf394_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op396_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf393', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf394', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg253_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg254_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf396', get_index_5, add_1, None)
        return store
op396 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op392_op393_op394_op396 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op397: ExternKernelSchedulerNode(ExternKernelOut)
op397.writes = [StarDep(name='buf397', mode=None)]
op397.unmet_dependencies = [StarDep(name='buf396', mode=None)]
op397.met_dependencies = [StarDep(name='arg255_1', mode=None)]
op397.outputs = [
    buf397: ExternKernelOut
    buf397.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf397.users = [NodeUser(node=SchedulerNode(name='op398'), can_inplace=True, is_weak=False)]
]
op397.node.kernel = extern_kernels.mm


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 5242880}, None)]
op398.unmet_dependencies = [MemoryDep('buf397', c0, {c0: 5242880}, None)]
op398.met_dependencies = [MemoryDep('arg256_1', c1, {c0: 512, c1: 10240}, None)]
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (5242880, 1)
op398.sizes = ([512, 10240], [])
buf397_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op398_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf397', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg256_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf398', get_index_4, mul_2, None)
        return store
op398 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op399: ExternKernelSchedulerNode(ExternKernelOut)
op399.writes = [StarDep(name='buf399', mode=None)]
op399.unmet_dependencies = [StarDep(name='buf398', mode=None)]
op399.met_dependencies = [StarDep(name='arg257_1', mode=None)]
op399.outputs = [
    buf399: ExternKernelOut
    buf399.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf399.users = [
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
    ]
]
op399.node.kernel = extern_kernels.mm


op400_op401_op403: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op400_op401_op403.writes = 
    [   MemoryDep('buf400', c0, {c0: 512}, None),
        MemoryDep('buf401', c0, {c0: 512}, None),
        MemoryDep('buf403', c0, {c0: 1310720}, None)]
op400_op401_op403.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 1310720}, None),
        MemoryDep('buf399', c0, {c0: 1310720}, None)]
op400_op401_op403.met_dependencies = 
    [   MemoryDep('arg258_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg259_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg260_1', c1, {c0: 512, c1: 2560}, None)]
op400_op401_op403.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf400.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf401.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf403.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False),
    ]
]
op400_op401_op403.snodes[0] =
op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 512}, None)]
op400.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 1310720}, None),
        MemoryDep('buf399', c0, {c0: 1310720}, None)]
op400.met_dependencies = [MemoryDep('arg258_1', c1, {c0: 512, c1: 2560}, None)]
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf400.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
]
op400.group.device = cuda:0
op400.group.iteration = (512, 2560)
op400.sizes = ([512], [2560])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op400_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf399', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf400', get_index_3, getitem)
        return store_reduction
op400 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op400_op401_op403.snodes[1] =
op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 512}, None)]
op401.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 1310720}, None),
        MemoryDep('buf399', c0, {c0: 1310720}, None)]
op401.met_dependencies = [MemoryDep('arg258_1', c1, {c0: 512, c1: 2560}, None)]
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf401.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (512, 2560)
op401.sizes = ([512], [2560])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op401_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf399', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf401', get_index_3, getitem_1)
        return store_reduction
op401 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op400_op401_op403.snodes[2] =
op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 1310720}, None)]
op403.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 1310720}, None),
        MemoryDep('buf399', c0, {c0: 1310720}, None),
        MemoryDep('buf400', c0, {c0: 512}, None),
        MemoryDep('buf401', c0, {c0: 512}, None)]
op403.met_dependencies = 
    [   MemoryDep('arg258_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg259_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg260_1', c1, {c0: 512, c1: 2560}, None)]
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf403.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False),
    ]
]
op403.group.device = cuda:0
op403.group.iteration = (1310720, 1)
op403.sizes = ([512, 2560], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf401_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op403_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf399', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf400', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf401', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg259_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg260_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf403', get_index_7, add_3, None)
        return store
op403 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op400_op401_op403 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op404: ExternKernelSchedulerNode(ExternKernelOut)
op404.writes = [StarDep(name='buf404', mode=None)]
op404.unmet_dependencies = [StarDep(name='buf403', mode=None)]
op404.met_dependencies = [StarDep(name='arg261_1', mode=None)]
op404.outputs = [
    buf404: ExternKernelOut
    buf404.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf404.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op404.node.kernel = extern_kernels.mm


op405: ExternKernelSchedulerNode(ExternKernelOut)
op405.writes = [StarDep(name='buf405', mode=None)]
op405.unmet_dependencies = [StarDep(name='buf403', mode=None)]
op405.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op405.outputs = [
    buf405: ExternKernelOut
    buf405.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf405.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op405.node.kernel = extern_kernels.mm


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 1310720}, None)]
op406.unmet_dependencies = [   MemoryDep('buf405', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op406.met_dependencies = [MemoryDep('arg264_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf406.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op406.group.device = cuda:0
op406.group.iteration = (1310720, 1)
op406.sizes = ([4, 32, 128, 80], [])
buf405_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op406_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf406', get_index_2, add, None)
        return store
op406 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 1310720}, None)]
op407.unmet_dependencies = [   MemoryDep('buf404', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op407.met_dependencies = [MemoryDep('arg262_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (1310720, 1)
op407.sizes = ([4, 32, 128, 80], [])
buf404_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op407_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf407', get_index_2, mul, None)
        return store
op407 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op408: ExternKernelSchedulerNode(ExternKernelOut)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf406', mode=None), StarDep(name='buf407', mode=None)]
op408.met_dependencies = []
op408.outputs = [
    buf408: ExternKernelOut
    buf408.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf408.users = [
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False),
    ]
]
op408.node.kernel = extern_kernels.bmm


op409_op410_op413: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op409_op410_op413.writes = 
    [   MemoryDep('buf409', c0, {c0: 16384}, None),
        MemoryDep('buf410', c0, {c0: 16384}, None),
        MemoryDep('buf413', c0, {c0: 2097152}, None)]
op409_op410_op413.unmet_dependencies = [MemoryDep('buf408', c0, {c0: 2097152}, None)]
op409_op410_op413.met_dependencies = []
op409_op410_op413.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf409.users = [
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
    ]
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf410.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False)]
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op409_op410_op413.snodes[0] =
op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 16384}, None)]
op409.unmet_dependencies = [MemoryDep('buf408', c0, {c0: 2097152}, None)]
op409.met_dependencies = []
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf409.users = [
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
    ]
]
op409.group.device = cuda:0
op409.group.iteration = (16384, 128)
op409.sizes = ([128, 128], [128])
buf408_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op409_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf409', get_index_3, reduction)
        return store_reduction
op409 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op409_op410_op413.snodes[1] =
op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 16384}, None)]
op410.unmet_dependencies = 
    [   MemoryDep('buf408', c0, {c0: 2097152}, None),
        MemoryDep('buf409', c0, {c0: 16384}, None)]
op410.met_dependencies = []
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf410.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (16384, 128)
op410.sizes = ([128, 128], [128])
buf408_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf410_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op410_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf409', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf410', get_index_4, reduction)
        return store_reduction
op410 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op409_op410_op413.snodes[2] =
op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 2097152}, None)]
op413.unmet_dependencies = 
    [   MemoryDep('buf408', c0, {c0: 2097152}, None),
        MemoryDep('buf409', c0, {c0: 16384}, None),
        MemoryDep('buf410', c0, {c0: 16384}, None)]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (2097152, 1)
op413.sizes = ([128, 128, 128], [])
buf408_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf410_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf413_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op413_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf409', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf410', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf413', get_index_5, truediv, None)
        return store
op413 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op409_op410_op413 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op411: ExternKernelSchedulerNode(ExternKernelOut)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = [StarDep(name='buf403', mode=None)]
op411.met_dependencies = [StarDep(name='arg265_1', mode=None)]
op411.outputs = [
    buf411: ExternKernelOut
    buf411.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf411.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op411.node.kernel = extern_kernels.mm


op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 1310720}, None)]
op412.unmet_dependencies = [   MemoryDep('buf411', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op412.met_dependencies = [MemoryDep('arg266_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf412.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op412.group.device = cuda:0
op412.group.iteration = (1310720, 1)
op412.sizes = ([4, 32, 128, 80], [])
buf411_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op412_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf412', get_index_2, add, None)
        return store
op412 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op414: ExternKernelSchedulerNode(ExternKernelOut)
op414.writes = [StarDep(name='buf414', mode=None)]
op414.unmet_dependencies = [StarDep(name='buf412', mode=None), StarDep(name='buf413', mode=None)]
op414.met_dependencies = []
op414.outputs = [
    buf414: ExternKernelOut
    buf414.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf414.users = [NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
]
op414.node.kernel = extern_kernels.bmm


op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 1310720}, None)]
op415.unmet_dependencies = [   MemoryDep('buf414', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op415.met_dependencies = []
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf415.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (1310720, 1)
op415.sizes = ([4, 128, 32, 80], [])
buf414_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op415_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf414', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf415', get_index_1, load, None)
        return store
op415 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op416: ExternKernelSchedulerNode(ExternKernelOut)
op416.writes = [StarDep(name='buf416', mode=None)]
op416.unmet_dependencies = [StarDep(name='buf415', mode=None)]
op416.met_dependencies = [StarDep(name='arg267_1', mode=None)]
op416.outputs = [
    buf416: ExternKernelOut
    buf416.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf416.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False)]
]
op416.node.kernel = extern_kernels.mm


op417_op418_op419_op421: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op417_op418_op419_op421.writes = 
    [   MemoryDep('buf417', c0, {c0: 1310720}, None),
        MemoryDep('buf418', c0, {c0: 512}, None),
        MemoryDep('buf419', c0, {c0: 512}, None),
        MemoryDep('buf421', c0, {c0: 1310720}, None)]
op417_op418_op419_op421.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 1310720}, None),
        MemoryDep('buf399', c0, {c0: 1310720}, None),
        MemoryDep('buf416', c0, {c0: 1310720}, None)]
op417_op418_op419_op421.met_dependencies = 
    [   MemoryDep('arg258_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg268_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg269_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg270_1', c1, {c0: 512, c1: 2560}, None)]
op417_op418_op419_op421.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf417.users = [
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=True, is_weak=False),
    ]
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf418.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf419.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf421.users = [NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
]
op417_op418_op419_op421.snodes[0] =
op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 1310720}, None)]
op417.unmet_dependencies = 
    [   MemoryDep('buf392', c0, {c0: 1310720}, None),
        MemoryDep('buf399', c0, {c0: 1310720}, None),
        MemoryDep('buf416', c0, {c0: 1310720}, None)]
op417.met_dependencies = 
    [   MemoryDep('arg258_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg268_1', c1, {c0: 512, c1: 2560}, None)]
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf417.users = [
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=True, is_weak=False),
    ]
]
op417.group.device = cuda:0
op417.group.iteration = (1310720, 1)
op417.sizes = ([512, 2560], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op417_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf399', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf416', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg268_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf417', get_index_5, add_3, None)
        return store
op417 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op417_op418_op419_op421.snodes[1] =
op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 512}, None)]
op418.unmet_dependencies = [MemoryDep('buf417', c0, {c0: 1310720}, None)]
op418.met_dependencies = []
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf418.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (512, 2560)
op418.sizes = ([512], [2560])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op418_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf418', get_index_1, getitem)
        return store_reduction
op418 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op417_op418_op419_op421.snodes[2] =
op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 512}, None)]
op419.unmet_dependencies = [MemoryDep('buf417', c0, {c0: 1310720}, None)]
op419.met_dependencies = []
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf419.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op419.group.device = cuda:0
op419.group.iteration = (512, 2560)
op419.sizes = ([512], [2560])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op419_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf419', get_index_1, getitem_1)
        return store_reduction
op419 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op417_op418_op419_op421.snodes[3] =
op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 1310720}, None)]
op421.unmet_dependencies = 
    [   MemoryDep('buf417', c0, {c0: 1310720}, None),
        MemoryDep('buf418', c0, {c0: 512}, None),
        MemoryDep('buf419', c0, {c0: 512}, None)]
op421.met_dependencies = 
    [   MemoryDep('arg269_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg270_1', c1, {c0: 512, c1: 2560}, None)]
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf421.users = [NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
]
op421.group.device = cuda:0
op421.group.iteration = (1310720, 1)
op421.sizes = ([512, 2560], [])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf419_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op421_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf418', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf419', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg269_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg270_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf421', get_index_5, add_1, None)
        return store
op421 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op417_op418_op419_op421 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op422: ExternKernelSchedulerNode(ExternKernelOut)
op422.writes = [StarDep(name='buf422', mode=None)]
op422.unmet_dependencies = [StarDep(name='buf421', mode=None)]
op422.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op422.outputs = [
    buf422: ExternKernelOut
    buf422.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf422.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=True, is_weak=False)]
]
op422.node.kernel = extern_kernels.mm


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 5242880}, None)]
op423.unmet_dependencies = [MemoryDep('buf422', c0, {c0: 5242880}, None)]
op423.met_dependencies = [MemoryDep('arg272_1', c1, {c0: 512, c1: 10240}, None)]
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (5242880, 1)
op423.sizes = ([512, 10240], [])
buf422_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op423_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf422', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg272_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf422', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg272_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf423', get_index_4, mul_2, None)
        return store
op423 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op424: ExternKernelSchedulerNode(ExternKernelOut)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf423', mode=None)]
op424.met_dependencies = [StarDep(name='arg273_1', mode=None)]
op424.outputs = [
    buf424: ExternKernelOut
    buf424.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf424.users = [
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=True, is_weak=False),
    ]
]
op424.node.kernel = extern_kernels.mm


op425_op426_op428: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op425_op426_op428.writes = 
    [   MemoryDep('buf425', c0, {c0: 512}, None),
        MemoryDep('buf426', c0, {c0: 512}, None),
        MemoryDep('buf428', c0, {c0: 1310720}, None)]
op425_op426_op428.unmet_dependencies = 
    [   MemoryDep('buf417', c0, {c0: 1310720}, None),
        MemoryDep('buf424', c0, {c0: 1310720}, None)]
op425_op426_op428.met_dependencies = 
    [   MemoryDep('arg274_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg275_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg276_1', c1, {c0: 512, c1: 2560}, None)]
op425_op426_op428.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf425.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf426.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf428.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False),
    ]
]
op425_op426_op428.snodes[0] =
op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 512}, None)]
op425.unmet_dependencies = 
    [   MemoryDep('buf417', c0, {c0: 1310720}, None),
        MemoryDep('buf424', c0, {c0: 1310720}, None)]
op425.met_dependencies = [MemoryDep('arg274_1', c1, {c0: 512, c1: 2560}, None)]
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf425.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (512, 2560)
op425.sizes = ([512], [2560])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op425_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf424', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg274_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf425', get_index_3, getitem)
        return store_reduction
op425 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op425_op426_op428.snodes[1] =
op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 512}, None)]
op426.unmet_dependencies = 
    [   MemoryDep('buf417', c0, {c0: 1310720}, None),
        MemoryDep('buf424', c0, {c0: 1310720}, None)]
op426.met_dependencies = [MemoryDep('arg274_1', c1, {c0: 512, c1: 2560}, None)]
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf426.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (512, 2560)
op426.sizes = ([512], [2560])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op426_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf424', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg274_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf426', get_index_3, getitem_1)
        return store_reduction
op426 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op425_op426_op428.snodes[2] =
op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 1310720}, None)]
op428.unmet_dependencies = 
    [   MemoryDep('buf417', c0, {c0: 1310720}, None),
        MemoryDep('buf424', c0, {c0: 1310720}, None),
        MemoryDep('buf425', c0, {c0: 512}, None),
        MemoryDep('buf426', c0, {c0: 512}, None)]
op428.met_dependencies = 
    [   MemoryDep('arg274_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg275_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg276_1', c1, {c0: 512, c1: 2560}, None)]
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf428.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False),
    ]
]
op428.group.device = cuda:0
op428.group.iteration = (1310720, 1)
op428.sizes = ([512, 2560], [])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf426_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op428_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf424', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg274_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf425', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf426', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg275_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg276_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf428', get_index_7, add_3, None)
        return store
op428 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op425_op426_op428 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op429: ExternKernelSchedulerNode(ExternKernelOut)
op429.writes = [StarDep(name='buf429', mode=None)]
op429.unmet_dependencies = [StarDep(name='buf428', mode=None)]
op429.met_dependencies = [StarDep(name='arg277_1', mode=None)]
op429.outputs = [
    buf429: ExternKernelOut
    buf429.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf429.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op429.node.kernel = extern_kernels.mm


op430: ExternKernelSchedulerNode(ExternKernelOut)
op430.writes = [StarDep(name='buf430', mode=None)]
op430.unmet_dependencies = [StarDep(name='buf428', mode=None)]
op430.met_dependencies = [StarDep(name='arg279_1', mode=None)]
op430.outputs = [
    buf430: ExternKernelOut
    buf430.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf430.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op430.node.kernel = extern_kernels.mm


op431: SchedulerNode(ComputedBuffer)
op431.writes = [MemoryDep('buf431', c0, {c0: 1310720}, None)]
op431.unmet_dependencies = [   MemoryDep('buf430', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op431.met_dependencies = [MemoryDep('arg280_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op431.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf431.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op431.group.device = cuda:0
op431.group.iteration = (1310720, 1)
op431.sizes = ([4, 32, 128, 80], [])
buf430_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op431_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf430', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg280_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf431', get_index_2, add, None)
        return store
op431 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 1310720}, None)]
op432.unmet_dependencies = [   MemoryDep('buf429', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op432.met_dependencies = [MemoryDep('arg278_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (1310720, 1)
op432.sizes = ([4, 32, 128, 80], [])
buf429_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op432_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf429', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg278_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf432', get_index_2, mul, None)
        return store
op432 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op433: ExternKernelSchedulerNode(ExternKernelOut)
op433.writes = [StarDep(name='buf433', mode=None)]
op433.unmet_dependencies = [StarDep(name='buf431', mode=None), StarDep(name='buf432', mode=None)]
op433.met_dependencies = []
op433.outputs = [
    buf433: ExternKernelOut
    buf433.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf433.users = [
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False),
    ]
]
op433.node.kernel = extern_kernels.bmm


op434_op435_op438: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op434_op435_op438.writes = 
    [   MemoryDep('buf434', c0, {c0: 16384}, None),
        MemoryDep('buf435', c0, {c0: 16384}, None),
        MemoryDep('buf438', c0, {c0: 2097152}, None)]
op434_op435_op438.unmet_dependencies = [MemoryDep('buf433', c0, {c0: 2097152}, None)]
op434_op435_op438.met_dependencies = []
op434_op435_op438.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf434.users = [
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
    ]
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf435.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False)]
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op434_op435_op438.snodes[0] =
op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 16384}, None)]
op434.unmet_dependencies = [MemoryDep('buf433', c0, {c0: 2097152}, None)]
op434.met_dependencies = []
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf434.users = [
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
    ]
]
op434.group.device = cuda:0
op434.group.iteration = (16384, 128)
op434.sizes = ([128, 128], [128])
buf433_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op434_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf434', get_index_3, reduction)
        return store_reduction
op434 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op434_op435_op438.snodes[1] =
op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 16384}, None)]
op435.unmet_dependencies = 
    [   MemoryDep('buf433', c0, {c0: 2097152}, None),
        MemoryDep('buf434', c0, {c0: 16384}, None)]
op435.met_dependencies = []
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf435.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (16384, 128)
op435.sizes = ([128, 128], [128])
buf433_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf435_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op435_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf434', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf435', get_index_4, reduction)
        return store_reduction
op435 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op434_op435_op438.snodes[2] =
op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 2097152}, None)]
op438.unmet_dependencies = 
    [   MemoryDep('buf433', c0, {c0: 2097152}, None),
        MemoryDep('buf434', c0, {c0: 16384}, None),
        MemoryDep('buf435', c0, {c0: 16384}, None)]
op438.met_dependencies = []
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (2097152, 1)
op438.sizes = ([128, 128, 128], [])
buf433_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf435_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf438_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op438_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf434', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf435', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf438', get_index_5, truediv, None)
        return store
op438 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op434_op435_op438 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op436: ExternKernelSchedulerNode(ExternKernelOut)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf428', mode=None)]
op436.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op436.outputs = [
    buf436: ExternKernelOut
    buf436.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf436.users = [NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op436.node.kernel = extern_kernels.mm


op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 1310720}, None)]
op437.unmet_dependencies = [   MemoryDep('buf436', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op437.met_dependencies = [MemoryDep('arg282_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf437.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op437.group.device = cuda:0
op437.group.iteration = (1310720, 1)
op437.sizes = ([4, 32, 128, 80], [])
buf436_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op437_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf436', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf437', get_index_2, add, None)
        return store
op437 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op439: ExternKernelSchedulerNode(ExternKernelOut)
op439.writes = [StarDep(name='buf439', mode=None)]
op439.unmet_dependencies = [StarDep(name='buf437', mode=None), StarDep(name='buf438', mode=None)]
op439.met_dependencies = []
op439.outputs = [
    buf439: ExternKernelOut
    buf439.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf439.users = [NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op439.node.kernel = extern_kernels.bmm


op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 1310720}, None)]
op440.unmet_dependencies = [   MemoryDep('buf439', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op440.met_dependencies = []
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf440.users = [NodeUser(node=ExternKernelSchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
]
op440.group.device = cuda:0
op440.group.iteration = (1310720, 1)
op440.sizes = ([4, 128, 32, 80], [])
buf439_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op440_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf439', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf440', get_index_1, load, None)
        return store
op440 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op441: ExternKernelSchedulerNode(ExternKernelOut)
op441.writes = [StarDep(name='buf441', mode=None)]
op441.unmet_dependencies = [StarDep(name='buf440', mode=None)]
op441.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op441.outputs = [
    buf441: ExternKernelOut
    buf441.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf441.users = [NodeUser(node=SchedulerNode(name='op442'), can_inplace=True, is_weak=False)]
]
op441.node.kernel = extern_kernels.mm


op442_op443_op444_op446: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op442_op443_op444_op446.writes = 
    [   MemoryDep('buf442', c0, {c0: 1310720}, None),
        MemoryDep('buf443', c0, {c0: 512}, None),
        MemoryDep('buf444', c0, {c0: 512}, None),
        MemoryDep('buf446', c0, {c0: 1310720}, None)]
op442_op443_op444_op446.unmet_dependencies = 
    [   MemoryDep('buf417', c0, {c0: 1310720}, None),
        MemoryDep('buf424', c0, {c0: 1310720}, None),
        MemoryDep('buf441', c0, {c0: 1310720}, None)]
op442_op443_op444_op446.met_dependencies = 
    [   MemoryDep('arg274_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg284_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg285_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg286_1', c1, {c0: 512, c1: 2560}, None)]
op442_op443_op444_op446.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf442.users = [
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf443.users = [NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf444.users = [NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf446.users = [NodeUser(node=ExternKernelSchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op442_op443_op444_op446.snodes[0] =
op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 1310720}, None)]
op442.unmet_dependencies = 
    [   MemoryDep('buf417', c0, {c0: 1310720}, None),
        MemoryDep('buf424', c0, {c0: 1310720}, None),
        MemoryDep('buf441', c0, {c0: 1310720}, None)]
op442.met_dependencies = 
    [   MemoryDep('arg274_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg284_1', c1, {c0: 512, c1: 2560}, None)]
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf442.users = [
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
]
op442.group.device = cuda:0
op442.group.iteration = (1310720, 1)
op442.sizes = ([512, 2560], [])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf442_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op442_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf424', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg274_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf441', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg284_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf442', get_index_5, add_3, None)
        return store
op442 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op442_op443_op444_op446.snodes[1] =
op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 512}, None)]
op443.unmet_dependencies = [MemoryDep('buf442', c0, {c0: 1310720}, None)]
op443.met_dependencies = []
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf443.users = [NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op443.group.device = cuda:0
op443.group.iteration = (512, 2560)
op443.sizes = ([512], [2560])
buf442_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op443_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf443', get_index_1, getitem)
        return store_reduction
op443 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op442_op443_op444_op446.snodes[2] =
op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 512}, None)]
op444.unmet_dependencies = [MemoryDep('buf442', c0, {c0: 1310720}, None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf444.users = [NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (512, 2560)
op444.sizes = ([512], [2560])
buf442_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op444_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf444', get_index_1, getitem_1)
        return store_reduction
op444 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op442_op443_op444_op446.snodes[3] =
op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 1310720}, None)]
op446.unmet_dependencies = 
    [   MemoryDep('buf442', c0, {c0: 1310720}, None),
        MemoryDep('buf443', c0, {c0: 512}, None),
        MemoryDep('buf444', c0, {c0: 512}, None)]
op446.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg286_1', c1, {c0: 512, c1: 2560}, None)]
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf446.users = [NodeUser(node=ExternKernelSchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (1310720, 1)
op446.sizes = ([512, 2560], [])
buf442_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf444_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op446_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf443', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf444', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg285_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg286_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf446', get_index_5, add_1, None)
        return store
op446 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op442_op443_op444_op446 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op447: ExternKernelSchedulerNode(ExternKernelOut)
op447.writes = [StarDep(name='buf447', mode=None)]
op447.unmet_dependencies = [StarDep(name='buf446', mode=None)]
op447.met_dependencies = [StarDep(name='arg287_1', mode=None)]
op447.outputs = [
    buf447: ExternKernelOut
    buf447.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf447.users = [NodeUser(node=SchedulerNode(name='op448'), can_inplace=True, is_weak=False)]
]
op447.node.kernel = extern_kernels.mm


op448: SchedulerNode(ComputedBuffer)
op448.writes = [MemoryDep('buf448', c0, {c0: 5242880}, None)]
op448.unmet_dependencies = [MemoryDep('buf447', c0, {c0: 5242880}, None)]
op448.met_dependencies = [MemoryDep('arg288_1', c1, {c0: 512, c1: 10240}, None)]
op448.outputs = [
    buf448: ComputedBuffer
    buf448.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf448.users = [NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op448.group.device = cuda:0
op448.group.iteration = (5242880, 1)
op448.sizes = ([512, 10240], [])
buf447_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op448_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg288_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf447', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg288_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf448', get_index_4, mul_2, None)
        return store
op448 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op449: ExternKernelSchedulerNode(ExternKernelOut)
op449.writes = [StarDep(name='buf449', mode=None)]
op449.unmet_dependencies = [StarDep(name='buf448', mode=None)]
op449.met_dependencies = [StarDep(name='arg289_1', mode=None)]
op449.outputs = [
    buf449: ExternKernelOut
    buf449.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf449.users = [
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
]
op449.node.kernel = extern_kernels.mm


op450_op451_op453: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op450_op451_op453.writes = 
    [   MemoryDep('buf450', c0, {c0: 512}, None),
        MemoryDep('buf451', c0, {c0: 512}, None),
        MemoryDep('buf453', c0, {c0: 1310720}, None)]
op450_op451_op453.unmet_dependencies = 
    [   MemoryDep('buf442', c0, {c0: 1310720}, None),
        MemoryDep('buf449', c0, {c0: 1310720}, None)]
op450_op451_op453.met_dependencies = 
    [   MemoryDep('arg290_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg291_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg292_1', c1, {c0: 512, c1: 2560}, None)]
op450_op451_op453.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf450.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf451.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf453.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False),
    ]
]
op450_op451_op453.snodes[0] =
op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 512}, None)]
op450.unmet_dependencies = 
    [   MemoryDep('buf442', c0, {c0: 1310720}, None),
        MemoryDep('buf449', c0, {c0: 1310720}, None)]
op450.met_dependencies = [MemoryDep('arg290_1', c1, {c0: 512, c1: 2560}, None)]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf450.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (512, 2560)
op450.sizes = ([512], [2560])
buf442_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op450_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf449', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg290_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf450', get_index_3, getitem)
        return store_reduction
op450 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op450_op451_op453.snodes[1] =
op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', c0, {c0: 512}, None)]
op451.unmet_dependencies = 
    [   MemoryDep('buf442', c0, {c0: 1310720}, None),
        MemoryDep('buf449', c0, {c0: 1310720}, None)]
op451.met_dependencies = [MemoryDep('arg290_1', c1, {c0: 512, c1: 2560}, None)]
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf451.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op451.group.device = cuda:0
op451.group.iteration = (512, 2560)
op451.sizes = ([512], [2560])
buf442_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op451_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf449', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg290_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf451', get_index_3, getitem_1)
        return store_reduction
op451 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op450_op451_op453.snodes[2] =
op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 1310720}, None)]
op453.unmet_dependencies = 
    [   MemoryDep('buf442', c0, {c0: 1310720}, None),
        MemoryDep('buf449', c0, {c0: 1310720}, None),
        MemoryDep('buf450', c0, {c0: 512}, None),
        MemoryDep('buf451', c0, {c0: 512}, None)]
op453.met_dependencies = 
    [   MemoryDep('arg290_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg291_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg292_1', c1, {c0: 512, c1: 2560}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf453.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False),
    ]
]
op453.group.device = cuda:0
op453.group.iteration = (1310720, 1)
op453.sizes = ([512, 2560], [])
buf442_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf451_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op453_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf449', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg290_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf450', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf451', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg291_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg292_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf453', get_index_7, add_3, None)
        return store
op453 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op450_op451_op453 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op454: ExternKernelSchedulerNode(ExternKernelOut)
op454.writes = [StarDep(name='buf454', mode=None)]
op454.unmet_dependencies = [StarDep(name='buf453', mode=None)]
op454.met_dependencies = [StarDep(name='arg293_1', mode=None)]
op454.outputs = [
    buf454: ExternKernelOut
    buf454.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf454.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op454.node.kernel = extern_kernels.mm


op455: ExternKernelSchedulerNode(ExternKernelOut)
op455.writes = [StarDep(name='buf455', mode=None)]
op455.unmet_dependencies = [StarDep(name='buf453', mode=None)]
op455.met_dependencies = [StarDep(name='arg295_1', mode=None)]
op455.outputs = [
    buf455: ExternKernelOut
    buf455.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf455.users = [NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False)]
]
op455.node.kernel = extern_kernels.mm


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 1310720}, None)]
op456.unmet_dependencies = [   MemoryDep('buf455', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op456.met_dependencies = [MemoryDep('arg296_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf456.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op456.group.device = cuda:0
op456.group.iteration = (1310720, 1)
op456.sizes = ([4, 32, 128, 80], [])
buf455_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op456_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf455', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg296_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf456', get_index_2, add, None)
        return store
op456 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 1310720}, None)]
op457.unmet_dependencies = [   MemoryDep('buf454', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op457.met_dependencies = [MemoryDep('arg294_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf457.users = [NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op457.group.device = cuda:0
op457.group.iteration = (1310720, 1)
op457.sizes = ([4, 32, 128, 80], [])
buf454_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op457_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf454', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg294_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf457', get_index_2, mul, None)
        return store
op457 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op458: ExternKernelSchedulerNode(ExternKernelOut)
op458.writes = [StarDep(name='buf458', mode=None)]
op458.unmet_dependencies = [StarDep(name='buf456', mode=None), StarDep(name='buf457', mode=None)]
op458.met_dependencies = []
op458.outputs = [
    buf458: ExternKernelOut
    buf458.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf458.users = [
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
    ]
]
op458.node.kernel = extern_kernels.bmm


op459_op460_op463: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op459_op460_op463.writes = 
    [   MemoryDep('buf459', c0, {c0: 16384}, None),
        MemoryDep('buf460', c0, {c0: 16384}, None),
        MemoryDep('buf463', c0, {c0: 2097152}, None)]
op459_op460_op463.unmet_dependencies = [MemoryDep('buf458', c0, {c0: 2097152}, None)]
op459_op460_op463.met_dependencies = []
op459_op460_op463.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf459.users = [
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
    ]
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf460.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op459_op460_op463.snodes[0] =
op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 16384}, None)]
op459.unmet_dependencies = [MemoryDep('buf458', c0, {c0: 2097152}, None)]
op459.met_dependencies = []
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf459.users = [
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
    ]
]
op459.group.device = cuda:0
op459.group.iteration = (16384, 128)
op459.sizes = ([128, 128], [128])
buf458_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op459_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf459', get_index_3, reduction)
        return store_reduction
op459 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op459_op460_op463.snodes[1] =
op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 16384}, None)]
op460.unmet_dependencies = 
    [   MemoryDep('buf458', c0, {c0: 2097152}, None),
        MemoryDep('buf459', c0, {c0: 16384}, None)]
op460.met_dependencies = []
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf460.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (16384, 128)
op460.sizes = ([128, 128], [128])
buf458_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf460_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op460_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf459', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf460', get_index_4, reduction)
        return store_reduction
op460 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op459_op460_op463.snodes[2] =
op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 2097152}, None)]
op463.unmet_dependencies = 
    [   MemoryDep('buf458', c0, {c0: 2097152}, None),
        MemoryDep('buf459', c0, {c0: 16384}, None),
        MemoryDep('buf460', c0, {c0: 16384}, None)]
op463.met_dependencies = []
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (2097152, 1)
op463.sizes = ([128, 128, 128], [])
buf458_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf460_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf463_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op463_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf459', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf460', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf463', get_index_5, truediv, None)
        return store
op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op459_op460_op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op461: ExternKernelSchedulerNode(ExternKernelOut)
op461.writes = [StarDep(name='buf461', mode=None)]
op461.unmet_dependencies = [StarDep(name='buf453', mode=None)]
op461.met_dependencies = [StarDep(name='arg297_1', mode=None)]
op461.outputs = [
    buf461: ExternKernelOut
    buf461.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf461.users = [NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
]
op461.node.kernel = extern_kernels.mm


op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', c0, {c0: 1310720}, None)]
op462.unmet_dependencies = [   MemoryDep('buf461', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op462.met_dependencies = [MemoryDep('arg298_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf462.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op462.group.device = cuda:0
op462.group.iteration = (1310720, 1)
op462.sizes = ([4, 32, 128, 80], [])
buf461_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op462_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg298_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf462', get_index_2, add, None)
        return store
op462 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op464: ExternKernelSchedulerNode(ExternKernelOut)
op464.writes = [StarDep(name='buf464', mode=None)]
op464.unmet_dependencies = [StarDep(name='buf462', mode=None), StarDep(name='buf463', mode=None)]
op464.met_dependencies = []
op464.outputs = [
    buf464: ExternKernelOut
    buf464.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf464.users = [NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False)]
]
op464.node.kernel = extern_kernels.bmm


op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 1310720}, None)]
op465.unmet_dependencies = [   MemoryDep('buf464', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op465.met_dependencies = []
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf465.users = [NodeUser(node=ExternKernelSchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op465.group.device = cuda:0
op465.group.iteration = (1310720, 1)
op465.sizes = ([4, 128, 32, 80], [])
buf464_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op465_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf465', get_index_1, load, None)
        return store
op465 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op466: ExternKernelSchedulerNode(ExternKernelOut)
op466.writes = [StarDep(name='buf466', mode=None)]
op466.unmet_dependencies = [StarDep(name='buf465', mode=None)]
op466.met_dependencies = [StarDep(name='arg299_1', mode=None)]
op466.outputs = [
    buf466: ExternKernelOut
    buf466.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf466.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False)]
]
op466.node.kernel = extern_kernels.mm


op467_op468_op469_op471: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op467_op468_op469_op471.writes = 
    [   MemoryDep('buf467', c0, {c0: 1310720}, None),
        MemoryDep('buf468', c0, {c0: 512}, None),
        MemoryDep('buf469', c0, {c0: 512}, None),
        MemoryDep('buf471', c0, {c0: 1310720}, None)]
op467_op468_op469_op471.unmet_dependencies = 
    [   MemoryDep('buf442', c0, {c0: 1310720}, None),
        MemoryDep('buf449', c0, {c0: 1310720}, None),
        MemoryDep('buf466', c0, {c0: 1310720}, None)]
op467_op468_op469_op471.met_dependencies = 
    [   MemoryDep('arg290_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg300_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg301_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg302_1', c1, {c0: 512, c1: 2560}, None)]
op467_op468_op469_op471.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf467.users = [
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=True, is_weak=False),
    ]
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf468.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf469.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op467_op468_op469_op471.snodes[0] =
op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 1310720}, None)]
op467.unmet_dependencies = 
    [   MemoryDep('buf442', c0, {c0: 1310720}, None),
        MemoryDep('buf449', c0, {c0: 1310720}, None),
        MemoryDep('buf466', c0, {c0: 1310720}, None)]
op467.met_dependencies = 
    [   MemoryDep('arg290_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg300_1', c1, {c0: 512, c1: 2560}, None)]
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf467.users = [
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=True, is_weak=False),
    ]
]
op467.group.device = cuda:0
op467.group.iteration = (1310720, 1)
op467.sizes = ([512, 2560], [])
buf442_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op467_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf449', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg290_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf466', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg300_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf467', get_index_5, add_3, None)
        return store
op467 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op467_op468_op469_op471.snodes[1] =
op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', c0, {c0: 512}, None)]
op468.unmet_dependencies = [MemoryDep('buf467', c0, {c0: 1310720}, None)]
op468.met_dependencies = []
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf468.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op468.group.device = cuda:0
op468.group.iteration = (512, 2560)
op468.sizes = ([512], [2560])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf468_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op468_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf468', get_index_1, getitem)
        return store_reduction
op468 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op467_op468_op469_op471.snodes[2] =
op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 512}, None)]
op469.unmet_dependencies = [MemoryDep('buf467', c0, {c0: 1310720}, None)]
op469.met_dependencies = []
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf469.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (512, 2560)
op469.sizes = ([512], [2560])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op469_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf469', get_index_1, getitem_1)
        return store_reduction
op469 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op467_op468_op469_op471.snodes[3] =
op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 1310720}, None)]
op471.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 1310720}, None),
        MemoryDep('buf468', c0, {c0: 512}, None),
        MemoryDep('buf469', c0, {c0: 512}, None)]
op471.met_dependencies = 
    [   MemoryDep('arg301_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg302_1', c1, {c0: 512, c1: 2560}, None)]
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op471.group.device = cuda:0
op471.group.iteration = (1310720, 1)
op471.sizes = ([512, 2560], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf468_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf469_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op471_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf468', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf469', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg301_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg302_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf471', get_index_5, add_1, None)
        return store
op471 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op467_op468_op469_op471 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op472: ExternKernelSchedulerNode(ExternKernelOut)
op472.writes = [StarDep(name='buf472', mode=None)]
op472.unmet_dependencies = [StarDep(name='buf471', mode=None)]
op472.met_dependencies = [StarDep(name='arg303_1', mode=None)]
op472.outputs = [
    buf472: ExternKernelOut
    buf472.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf472.users = [NodeUser(node=SchedulerNode(name='op473'), can_inplace=True, is_weak=False)]
]
op472.node.kernel = extern_kernels.mm


op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', c0, {c0: 5242880}, None)]
op473.unmet_dependencies = [MemoryDep('buf472', c0, {c0: 5242880}, None)]
op473.met_dependencies = [MemoryDep('arg304_1', c1, {c0: 512, c1: 10240}, None)]
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf473.users = [NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False)]
]
op473.group.device = cuda:0
op473.group.iteration = (5242880, 1)
op473.sizes = ([512, 10240], [])
buf472_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op473_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg304_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf472', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg304_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf473', get_index_4, mul_2, None)
        return store
op473 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op474: ExternKernelSchedulerNode(ExternKernelOut)
op474.writes = [StarDep(name='buf474', mode=None)]
op474.unmet_dependencies = [StarDep(name='buf473', mode=None)]
op474.met_dependencies = [StarDep(name='arg305_1', mode=None)]
op474.outputs = [
    buf474: ExternKernelOut
    buf474.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf474.users = [
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=True, is_weak=False),
    ]
]
op474.node.kernel = extern_kernels.mm


op475_op476_op478: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op475_op476_op478.writes = 
    [   MemoryDep('buf475', c0, {c0: 512}, None),
        MemoryDep('buf476', c0, {c0: 512}, None),
        MemoryDep('buf478', c0, {c0: 1310720}, None)]
op475_op476_op478.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 1310720}, None),
        MemoryDep('buf474', c0, {c0: 1310720}, None)]
op475_op476_op478.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg307_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg308_1', c1, {c0: 512, c1: 2560}, None)]
op475_op476_op478.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf475.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False)]
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf476.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False)]
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf478.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op486'), can_inplace=False, is_weak=False),
    ]
]
op475_op476_op478.snodes[0] =
op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 512}, None)]
op475.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 1310720}, None),
        MemoryDep('buf474', c0, {c0: 1310720}, None)]
op475.met_dependencies = [MemoryDep('arg306_1', c1, {c0: 512, c1: 2560}, None)]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf475.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False)]
]
op475.group.device = cuda:0
op475.group.iteration = (512, 2560)
op475.sizes = ([512], [2560])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op475_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf474', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg306_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf475', get_index_3, getitem)
        return store_reduction
op475 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op475_op476_op478.snodes[1] =
op476: SchedulerNode(ComputedBuffer)
op476.writes = [MemoryDep('buf476', c0, {c0: 512}, None)]
op476.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 1310720}, None),
        MemoryDep('buf474', c0, {c0: 1310720}, None)]
op476.met_dependencies = [MemoryDep('arg306_1', c1, {c0: 512, c1: 2560}, None)]
op476.outputs = [
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf476.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False)]
]
op476.group.device = cuda:0
op476.group.iteration = (512, 2560)
op476.sizes = ([512], [2560])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op476_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf474', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg306_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf476', get_index_3, getitem_1)
        return store_reduction
op476 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op475_op476_op478.snodes[2] =
op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 1310720}, None)]
op478.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 1310720}, None),
        MemoryDep('buf474', c0, {c0: 1310720}, None),
        MemoryDep('buf475', c0, {c0: 512}, None),
        MemoryDep('buf476', c0, {c0: 512}, None)]
op478.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg307_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg308_1', c1, {c0: 512, c1: 2560}, None)]
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf478.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op486'), can_inplace=False, is_weak=False),
    ]
]
op478.group.device = cuda:0
op478.group.iteration = (1310720, 1)
op478.sizes = ([512, 2560], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf476_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op478_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf474', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg306_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf475', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf476', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg307_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg308_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf478', get_index_7, add_3, None)
        return store
op478 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op475_op476_op478 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op479: ExternKernelSchedulerNode(ExternKernelOut)
op479.writes = [StarDep(name='buf479', mode=None)]
op479.unmet_dependencies = [StarDep(name='buf478', mode=None)]
op479.met_dependencies = [StarDep(name='arg309_1', mode=None)]
op479.outputs = [
    buf479: ExternKernelOut
    buf479.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf479.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
]
op479.node.kernel = extern_kernels.mm


op480: ExternKernelSchedulerNode(ExternKernelOut)
op480.writes = [StarDep(name='buf480', mode=None)]
op480.unmet_dependencies = [StarDep(name='buf478', mode=None)]
op480.met_dependencies = [StarDep(name='arg311_1', mode=None)]
op480.outputs = [
    buf480: ExternKernelOut
    buf480.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf480.users = [NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False)]
]
op480.node.kernel = extern_kernels.mm


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 1310720}, None)]
op481.unmet_dependencies = [   MemoryDep('buf480', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op481.met_dependencies = [MemoryDep('arg312_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf481.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op481.group.device = cuda:0
op481.group.iteration = (1310720, 1)
op481.sizes = ([4, 32, 128, 80], [])
buf480_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op481_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf480', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf481', get_index_2, add, None)
        return store
op481 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', c0, {c0: 1310720}, None)]
op482.unmet_dependencies = [   MemoryDep('buf479', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op482.met_dependencies = [MemoryDep('arg310_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf482.users = [NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op482.group.device = cuda:0
op482.group.iteration = (1310720, 1)
op482.sizes = ([4, 32, 128, 80], [])
buf479_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf482_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op482_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg310_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf482', get_index_2, mul, None)
        return store
op482 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op483: ExternKernelSchedulerNode(ExternKernelOut)
op483.writes = [StarDep(name='buf483', mode=None)]
op483.unmet_dependencies = [StarDep(name='buf481', mode=None), StarDep(name='buf482', mode=None)]
op483.met_dependencies = []
op483.outputs = [
    buf483: ExternKernelOut
    buf483.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False),
    ]
]
op483.node.kernel = extern_kernels.bmm


op484_op485_op488: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op484_op485_op488.writes = 
    [   MemoryDep('buf484', c0, {c0: 16384}, None),
        MemoryDep('buf485', c0, {c0: 16384}, None),
        MemoryDep('buf488', c0, {c0: 2097152}, None)]
op484_op485_op488.unmet_dependencies = [MemoryDep('buf483', c0, {c0: 2097152}, None)]
op484_op485_op488.met_dependencies = []
op484_op485_op488.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf484.users = [
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
    ]
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf485.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op484_op485_op488.snodes[0] =
op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 16384}, None)]
op484.unmet_dependencies = [MemoryDep('buf483', c0, {c0: 2097152}, None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf484.users = [
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
    ]
]
op484.group.device = cuda:0
op484.group.iteration = (16384, 128)
op484.sizes = ([128, 128], [128])
buf483_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op484_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf484', get_index_3, reduction)
        return store_reduction
op484 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op484_op485_op488.snodes[1] =
op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 16384}, None)]
op485.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 2097152}, None),
        MemoryDep('buf484', c0, {c0: 16384}, None)]
op485.met_dependencies = []
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf485.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op485.group.device = cuda:0
op485.group.iteration = (16384, 128)
op485.sizes = ([128, 128], [128])
buf483_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf485_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op485_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf484', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf485', get_index_4, reduction)
        return store_reduction
op485 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op484_op485_op488.snodes[2] =
op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 2097152}, None)]
op488.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 2097152}, None),
        MemoryDep('buf484', c0, {c0: 16384}, None),
        MemoryDep('buf485', c0, {c0: 16384}, None)]
op488.met_dependencies = []
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (2097152, 1)
op488.sizes = ([128, 128, 128], [])
buf483_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf485_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf488_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op488_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf484', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf485', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf488', get_index_5, truediv, None)
        return store
op488 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op484_op485_op488 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op486: ExternKernelSchedulerNode(ExternKernelOut)
op486.writes = [StarDep(name='buf486', mode=None)]
op486.unmet_dependencies = [StarDep(name='buf478', mode=None)]
op486.met_dependencies = [StarDep(name='arg313_1', mode=None)]
op486.outputs = [
    buf486: ExternKernelOut
    buf486.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf486.users = [NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op486.node.kernel = extern_kernels.mm


op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 1310720}, None)]
op487.unmet_dependencies = [   MemoryDep('buf486', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op487.met_dependencies = [MemoryDep('arg314_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf487.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op487.group.device = cuda:0
op487.group.iteration = (1310720, 1)
op487.sizes = ([4, 32, 128, 80], [])
buf486_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op487_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf486', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg314_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf487', get_index_2, add, None)
        return store
op487 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op489: ExternKernelSchedulerNode(ExternKernelOut)
op489.writes = [StarDep(name='buf489', mode=None)]
op489.unmet_dependencies = [StarDep(name='buf487', mode=None), StarDep(name='buf488', mode=None)]
op489.met_dependencies = []
op489.outputs = [
    buf489: ExternKernelOut
    buf489.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf489.users = [NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
]
op489.node.kernel = extern_kernels.bmm


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 1310720}, None)]
op490.unmet_dependencies = [   MemoryDep('buf489', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op490.met_dependencies = []
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf490.users = [NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op490.group.device = cuda:0
op490.group.iteration = (1310720, 1)
op490.sizes = ([4, 128, 32, 80], [])
buf489_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op490_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf489', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf490', get_index_1, load, None)
        return store
op490 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op491: ExternKernelSchedulerNode(ExternKernelOut)
op491.writes = [StarDep(name='buf491', mode=None)]
op491.unmet_dependencies = [StarDep(name='buf490', mode=None)]
op491.met_dependencies = [StarDep(name='arg315_1', mode=None)]
op491.outputs = [
    buf491: ExternKernelOut
    buf491.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf491.users = [NodeUser(node=SchedulerNode(name='op492'), can_inplace=True, is_weak=False)]
]
op491.node.kernel = extern_kernels.mm


op492_op493_op494_op496: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op492_op493_op494_op496.writes = 
    [   MemoryDep('buf492', c0, {c0: 1310720}, None),
        MemoryDep('buf493', c0, {c0: 512}, None),
        MemoryDep('buf494', c0, {c0: 512}, None),
        MemoryDep('buf496', c0, {c0: 1310720}, None)]
op492_op493_op494_op496.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 1310720}, None),
        MemoryDep('buf474', c0, {c0: 1310720}, None),
        MemoryDep('buf491', c0, {c0: 1310720}, None)]
op492_op493_op494_op496.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg316_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg317_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg318_1', c1, {c0: 512, c1: 2560}, None)]
op492_op493_op494_op496.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf492.users = [
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=True, is_weak=False),
    ]
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf493.users = [NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False)]
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf494.users = [NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False)]
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf496.users = [NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False)]
]
op492_op493_op494_op496.snodes[0] =
op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', c0, {c0: 1310720}, None)]
op492.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 1310720}, None),
        MemoryDep('buf474', c0, {c0: 1310720}, None),
        MemoryDep('buf491', c0, {c0: 1310720}, None)]
op492.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg316_1', c1, {c0: 512, c1: 2560}, None)]
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf492.users = [
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=True, is_weak=False),
    ]
]
op492.group.device = cuda:0
op492.group.iteration = (1310720, 1)
op492.sizes = ([512, 2560], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op492_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf474', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg306_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf491', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg316_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf492', get_index_5, add_3, None)
        return store
op492 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op492_op493_op494_op496.snodes[1] =
op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', c0, {c0: 512}, None)]
op493.unmet_dependencies = [MemoryDep('buf492', c0, {c0: 1310720}, None)]
op493.met_dependencies = []
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf493.users = [NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False)]
]
op493.group.device = cuda:0
op493.group.iteration = (512, 2560)
op493.sizes = ([512], [2560])
buf492_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op493_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf493', get_index_1, getitem)
        return store_reduction
op493 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op492_op493_op494_op496.snodes[2] =
op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', c0, {c0: 512}, None)]
op494.unmet_dependencies = [MemoryDep('buf492', c0, {c0: 1310720}, None)]
op494.met_dependencies = []
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf494.users = [NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False)]
]
op494.group.device = cuda:0
op494.group.iteration = (512, 2560)
op494.sizes = ([512], [2560])
buf492_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op494_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf494', get_index_1, getitem_1)
        return store_reduction
op494 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op492_op493_op494_op496.snodes[3] =
op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 1310720}, None)]
op496.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 1310720}, None),
        MemoryDep('buf493', c0, {c0: 512}, None),
        MemoryDep('buf494', c0, {c0: 512}, None)]
op496.met_dependencies = 
    [   MemoryDep('arg317_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg318_1', c1, {c0: 512, c1: 2560}, None)]
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf496.users = [NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (1310720, 1)
op496.sizes = ([512, 2560], [])
buf492_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf494_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op496_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf493', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf494', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg317_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg318_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf496', get_index_5, add_1, None)
        return store
op496 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op492_op493_op494_op496 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op497: ExternKernelSchedulerNode(ExternKernelOut)
op497.writes = [StarDep(name='buf497', mode=None)]
op497.unmet_dependencies = [StarDep(name='buf496', mode=None)]
op497.met_dependencies = [StarDep(name='arg319_1', mode=None)]
op497.outputs = [
    buf497: ExternKernelOut
    buf497.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf497.users = [NodeUser(node=SchedulerNode(name='op498'), can_inplace=True, is_weak=False)]
]
op497.node.kernel = extern_kernels.mm


op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 5242880}, None)]
op498.unmet_dependencies = [MemoryDep('buf497', c0, {c0: 5242880}, None)]
op498.met_dependencies = [MemoryDep('arg320_1', c1, {c0: 512, c1: 10240}, None)]
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf498.users = [NodeUser(node=ExternKernelSchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
]
op498.group.device = cuda:0
op498.group.iteration = (5242880, 1)
op498.sizes = ([512, 10240], [])
buf497_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op498_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg320_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf497', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg320_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf498', get_index_4, mul_2, None)
        return store
op498 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op499: ExternKernelSchedulerNode(ExternKernelOut)
op499.writes = [StarDep(name='buf499', mode=None)]
op499.unmet_dependencies = [StarDep(name='buf498', mode=None)]
op499.met_dependencies = [StarDep(name='arg321_1', mode=None)]
op499.outputs = [
    buf499: ExternKernelOut
    buf499.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf499.users = [
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=True, is_weak=False),
    ]
]
op499.node.kernel = extern_kernels.mm


op500_op501_op503: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op500_op501_op503.writes = 
    [   MemoryDep('buf500', c0, {c0: 512}, None),
        MemoryDep('buf501', c0, {c0: 512}, None),
        MemoryDep('buf503', c0, {c0: 1310720}, None)]
op500_op501_op503.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 1310720}, None),
        MemoryDep('buf499', c0, {c0: 1310720}, None)]
op500_op501_op503.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg323_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg324_1', c1, {c0: 512, c1: 2560}, None)]
op500_op501_op503.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf500.users = [NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf501.users = [NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf503.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op511'), can_inplace=False, is_weak=False),
    ]
]
op500_op501_op503.snodes[0] =
op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', c0, {c0: 512}, None)]
op500.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 1310720}, None),
        MemoryDep('buf499', c0, {c0: 1310720}, None)]
op500.met_dependencies = [MemoryDep('arg322_1', c1, {c0: 512, c1: 2560}, None)]
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf500.users = [NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op500.group.device = cuda:0
op500.group.iteration = (512, 2560)
op500.sizes = ([512], [2560])
buf492_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op500_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg322_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf500', get_index_3, getitem)
        return store_reduction
op500 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op500_op501_op503.snodes[1] =
op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 512}, None)]
op501.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 1310720}, None),
        MemoryDep('buf499', c0, {c0: 1310720}, None)]
op501.met_dependencies = [MemoryDep('arg322_1', c1, {c0: 512, c1: 2560}, None)]
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf501.users = [NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op501.group.device = cuda:0
op501.group.iteration = (512, 2560)
op501.sizes = ([512], [2560])
buf492_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op501_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg322_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf501', get_index_3, getitem_1)
        return store_reduction
op501 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op500_op501_op503.snodes[2] =
op503: SchedulerNode(ComputedBuffer)
op503.writes = [MemoryDep('buf503', c0, {c0: 1310720}, None)]
op503.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 1310720}, None),
        MemoryDep('buf499', c0, {c0: 1310720}, None),
        MemoryDep('buf500', c0, {c0: 512}, None),
        MemoryDep('buf501', c0, {c0: 512}, None)]
op503.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg323_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg324_1', c1, {c0: 512, c1: 2560}, None)]
op503.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf503.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op511'), can_inplace=False, is_weak=False),
    ]
]
op503.group.device = cuda:0
op503.group.iteration = (1310720, 1)
op503.sizes = ([512, 2560], [])
buf492_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf501_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op503_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg322_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf500', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf501', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg323_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg324_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf503', get_index_7, add_3, None)
        return store
op503 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op500_op501_op503 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op504: ExternKernelSchedulerNode(ExternKernelOut)
op504.writes = [StarDep(name='buf504', mode=None)]
op504.unmet_dependencies = [StarDep(name='buf503', mode=None)]
op504.met_dependencies = [StarDep(name='arg325_1', mode=None)]
op504.outputs = [
    buf504: ExternKernelOut
    buf504.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf504.users = [NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False)]
]
op504.node.kernel = extern_kernels.mm


op505: ExternKernelSchedulerNode(ExternKernelOut)
op505.writes = [StarDep(name='buf505', mode=None)]
op505.unmet_dependencies = [StarDep(name='buf503', mode=None)]
op505.met_dependencies = [StarDep(name='arg327_1', mode=None)]
op505.outputs = [
    buf505: ExternKernelOut
    buf505.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf505.users = [NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op505.node.kernel = extern_kernels.mm


op506: SchedulerNode(ComputedBuffer)
op506.writes = [MemoryDep('buf506', c0, {c0: 1310720}, None)]
op506.unmet_dependencies = [   MemoryDep('buf505', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op506.met_dependencies = [MemoryDep('arg328_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op506.outputs = [
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf506.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op506.group.device = cuda:0
op506.group.iteration = (1310720, 1)
op506.sizes = ([4, 32, 128, 80], [])
buf505_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf506_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op506_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg328_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf506', get_index_2, add, None)
        return store
op506 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 1310720}, None)]
op507.unmet_dependencies = [   MemoryDep('buf504', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op507.met_dependencies = [MemoryDep('arg326_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf507.users = [NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False)]
]
op507.group.device = cuda:0
op507.group.iteration = (1310720, 1)
op507.sizes = ([4, 32, 128, 80], [])
buf504_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op507_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg326_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf507', get_index_2, mul, None)
        return store
op507 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op508: ExternKernelSchedulerNode(ExternKernelOut)
op508.writes = [StarDep(name='buf508', mode=None)]
op508.unmet_dependencies = [StarDep(name='buf506', mode=None), StarDep(name='buf507', mode=None)]
op508.met_dependencies = []
op508.outputs = [
    buf508: ExternKernelOut
    buf508.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf508.users = [
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=True, is_weak=False),
    ]
]
op508.node.kernel = extern_kernels.bmm


op509_op510_op513: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op509_op510_op513.writes = 
    [   MemoryDep('buf509', c0, {c0: 16384}, None),
        MemoryDep('buf510', c0, {c0: 16384}, None),
        MemoryDep('buf513', c0, {c0: 2097152}, None)]
op509_op510_op513.unmet_dependencies = [MemoryDep('buf508', c0, {c0: 2097152}, None)]
op509_op510_op513.met_dependencies = []
op509_op510_op513.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf509.users = [
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False),
    ]
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf510.users = [NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False)]
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf513.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op509_op510_op513.snodes[0] =
op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 16384}, None)]
op509.unmet_dependencies = [MemoryDep('buf508', c0, {c0: 2097152}, None)]
op509.met_dependencies = []
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf509.users = [
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False),
    ]
]
op509.group.device = cuda:0
op509.group.iteration = (16384, 128)
op509.sizes = ([128, 128], [128])
buf508_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op509_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf508', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf509', get_index_3, reduction)
        return store_reduction
op509 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op509_op510_op513.snodes[1] =
op510: SchedulerNode(ComputedBuffer)
op510.writes = [MemoryDep('buf510', c0, {c0: 16384}, None)]
op510.unmet_dependencies = 
    [   MemoryDep('buf508', c0, {c0: 2097152}, None),
        MemoryDep('buf509', c0, {c0: 16384}, None)]
op510.met_dependencies = []
op510.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf510.users = [NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False)]
]
op510.group.device = cuda:0
op510.group.iteration = (16384, 128)
op510.sizes = ([128, 128], [128])
buf508_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf510_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op510_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf508', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf509', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf510', get_index_4, reduction)
        return store_reduction
op510 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op509_op510_op513.snodes[2] =
op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 2097152}, None)]
op513.unmet_dependencies = 
    [   MemoryDep('buf508', c0, {c0: 2097152}, None),
        MemoryDep('buf509', c0, {c0: 16384}, None),
        MemoryDep('buf510', c0, {c0: 16384}, None)]
op513.met_dependencies = []
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf513.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op513.group.device = cuda:0
op513.group.iteration = (2097152, 1)
op513.sizes = ([128, 128, 128], [])
buf508_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf510_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf513_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op513_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf508', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf509', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf510', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf513', get_index_5, truediv, None)
        return store
op513 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op509_op510_op513 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op511: ExternKernelSchedulerNode(ExternKernelOut)
op511.writes = [StarDep(name='buf511', mode=None)]
op511.unmet_dependencies = [StarDep(name='buf503', mode=None)]
op511.met_dependencies = [StarDep(name='arg329_1', mode=None)]
op511.outputs = [
    buf511: ExternKernelOut
    buf511.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf511.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op511.node.kernel = extern_kernels.mm


op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 1310720}, None)]
op512.unmet_dependencies = [   MemoryDep('buf511', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op512.met_dependencies = [MemoryDep('arg330_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf512.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op512.group.device = cuda:0
op512.group.iteration = (1310720, 1)
op512.sizes = ([4, 32, 128, 80], [])
buf511_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op512_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg330_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf512', get_index_2, add, None)
        return store
op512 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op514: ExternKernelSchedulerNode(ExternKernelOut)
op514.writes = [StarDep(name='buf514', mode=None)]
op514.unmet_dependencies = [StarDep(name='buf512', mode=None), StarDep(name='buf513', mode=None)]
op514.met_dependencies = []
op514.outputs = [
    buf514: ExternKernelOut
    buf514.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf514.users = [NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op514.node.kernel = extern_kernels.bmm


op515: SchedulerNode(ComputedBuffer)
op515.writes = [MemoryDep('buf515', c0, {c0: 1310720}, None)]
op515.unmet_dependencies = [   MemoryDep('buf514', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op515.met_dependencies = []
op515.outputs = [
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf515.users = [NodeUser(node=ExternKernelSchedulerNode(name='op516'), can_inplace=False, is_weak=False)]
]
op515.group.device = cuda:0
op515.group.iteration = (1310720, 1)
op515.sizes = ([4, 128, 32, 80], [])
buf514_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf515_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op515_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf514', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf515', get_index_1, load, None)
        return store
op515 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op516: ExternKernelSchedulerNode(ExternKernelOut)
op516.writes = [StarDep(name='buf516', mode=None)]
op516.unmet_dependencies = [StarDep(name='buf515', mode=None)]
op516.met_dependencies = [StarDep(name='arg331_1', mode=None)]
op516.outputs = [
    buf516: ExternKernelOut
    buf516.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf516.users = [NodeUser(node=SchedulerNode(name='op517'), can_inplace=True, is_weak=False)]
]
op516.node.kernel = extern_kernels.mm


op517_op518_op519_op521: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op517_op518_op519_op521.writes = 
    [   MemoryDep('buf517', c0, {c0: 1310720}, None),
        MemoryDep('buf518', c0, {c0: 512}, None),
        MemoryDep('buf519', c0, {c0: 512}, None),
        MemoryDep('buf521', c0, {c0: 1310720}, None)]
op517_op518_op519_op521.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 1310720}, None),
        MemoryDep('buf499', c0, {c0: 1310720}, None),
        MemoryDep('buf516', c0, {c0: 1310720}, None)]
op517_op518_op519_op521.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg332_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg333_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg334_1', c1, {c0: 512, c1: 2560}, None)]
op517_op518_op519_op521.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf517.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False),
    ]
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf518.users = [NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf519.users = [NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf521.users = [NodeUser(node=ExternKernelSchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
]
op517_op518_op519_op521.snodes[0] =
op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 1310720}, None)]
op517.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 1310720}, None),
        MemoryDep('buf499', c0, {c0: 1310720}, None),
        MemoryDep('buf516', c0, {c0: 1310720}, None)]
op517.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg332_1', c1, {c0: 512, c1: 2560}, None)]
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf517.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False),
    ]
]
op517.group.device = cuda:0
op517.group.iteration = (1310720, 1)
op517.sizes = ([512, 2560], [])
buf492_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op517_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg322_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf516', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg332_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf517', get_index_5, add_3, None)
        return store
op517 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op517_op518_op519_op521.snodes[1] =
op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 512}, None)]
op518.unmet_dependencies = [MemoryDep('buf517', c0, {c0: 1310720}, None)]
op518.met_dependencies = []
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf518.users = [NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
]
op518.group.device = cuda:0
op518.group.iteration = (512, 2560)
op518.sizes = ([512], [2560])
buf517_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op518_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf517', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf518', get_index_1, getitem)
        return store_reduction
op518 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op517_op518_op519_op521.snodes[2] =
op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', c0, {c0: 512}, None)]
op519.unmet_dependencies = [MemoryDep('buf517', c0, {c0: 1310720}, None)]
op519.met_dependencies = []
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf519.users = [NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
]
op519.group.device = cuda:0
op519.group.iteration = (512, 2560)
op519.sizes = ([512], [2560])
buf517_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op519_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf517', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf519', get_index_1, getitem_1)
        return store_reduction
op519 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op517_op518_op519_op521.snodes[3] =
op521: SchedulerNode(ComputedBuffer)
op521.writes = [MemoryDep('buf521', c0, {c0: 1310720}, None)]
op521.unmet_dependencies = 
    [   MemoryDep('buf517', c0, {c0: 1310720}, None),
        MemoryDep('buf518', c0, {c0: 512}, None),
        MemoryDep('buf519', c0, {c0: 512}, None)]
op521.met_dependencies = 
    [   MemoryDep('arg333_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg334_1', c1, {c0: 512, c1: 2560}, None)]
op521.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf521.users = [NodeUser(node=ExternKernelSchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
]
op521.group.device = cuda:0
op521.group.iteration = (1310720, 1)
op521.sizes = ([512, 2560], [])
buf517_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf519_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf521_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op521_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf517', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf518', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf519', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg333_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg334_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf521', get_index_5, add_1, None)
        return store
op521 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op517_op518_op519_op521 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op522: ExternKernelSchedulerNode(ExternKernelOut)
op522.writes = [StarDep(name='buf522', mode=None)]
op522.unmet_dependencies = [StarDep(name='buf521', mode=None)]
op522.met_dependencies = [StarDep(name='arg335_1', mode=None)]
op522.outputs = [
    buf522: ExternKernelOut
    buf522.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf522.users = [NodeUser(node=SchedulerNode(name='op523'), can_inplace=True, is_weak=False)]
]
op522.node.kernel = extern_kernels.mm


op523: SchedulerNode(ComputedBuffer)
op523.writes = [MemoryDep('buf523', c0, {c0: 5242880}, None)]
op523.unmet_dependencies = [MemoryDep('buf522', c0, {c0: 5242880}, None)]
op523.met_dependencies = [MemoryDep('arg336_1', c1, {c0: 512, c1: 10240}, None)]
op523.outputs = [
    buf523: ComputedBuffer
    buf523.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf523.users = [NodeUser(node=ExternKernelSchedulerNode(name='op524'), can_inplace=False, is_weak=False)]
]
op523.group.device = cuda:0
op523.group.iteration = (5242880, 1)
op523.sizes = ([512, 10240], [])
buf522_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op523_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf522', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg336_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf522', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg336_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf523', get_index_4, mul_2, None)
        return store
op523 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op524: ExternKernelSchedulerNode(ExternKernelOut)
op524.writes = [StarDep(name='buf524', mode=None)]
op524.unmet_dependencies = [StarDep(name='buf523', mode=None)]
op524.met_dependencies = [StarDep(name='arg337_1', mode=None)]
op524.outputs = [
    buf524: ExternKernelOut
    buf524.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf524.users = [
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False),
    ]
]
op524.node.kernel = extern_kernels.mm


op525_op526_op528: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op525_op526_op528.writes = 
    [   MemoryDep('buf525', c0, {c0: 512}, None),
        MemoryDep('buf526', c0, {c0: 512}, None),
        MemoryDep('buf528', c0, {c0: 1310720}, None)]
op525_op526_op528.unmet_dependencies = 
    [   MemoryDep('buf517', c0, {c0: 1310720}, None),
        MemoryDep('buf524', c0, {c0: 1310720}, None)]
op525_op526_op528.met_dependencies = 
    [   MemoryDep('arg338_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg339_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg340_1', c1, {c0: 512, c1: 2560}, None)]
op525_op526_op528.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf525.users = [NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf526.users = [NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf528.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False),
    ]
]
op525_op526_op528.snodes[0] =
op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 512}, None)]
op525.unmet_dependencies = 
    [   MemoryDep('buf517', c0, {c0: 1310720}, None),
        MemoryDep('buf524', c0, {c0: 1310720}, None)]
op525.met_dependencies = [MemoryDep('arg338_1', c1, {c0: 512, c1: 2560}, None)]
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf525.users = [NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
]
op525.group.device = cuda:0
op525.group.iteration = (512, 2560)
op525.sizes = ([512], [2560])
buf517_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op525_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf517', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf524', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf525', get_index_3, getitem)
        return store_reduction
op525 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op525_op526_op528.snodes[1] =
op526: SchedulerNode(ComputedBuffer)
op526.writes = [MemoryDep('buf526', c0, {c0: 512}, None)]
op526.unmet_dependencies = 
    [   MemoryDep('buf517', c0, {c0: 1310720}, None),
        MemoryDep('buf524', c0, {c0: 1310720}, None)]
op526.met_dependencies = [MemoryDep('arg338_1', c1, {c0: 512, c1: 2560}, None)]
op526.outputs = [
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf526.users = [NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
]
op526.group.device = cuda:0
op526.group.iteration = (512, 2560)
op526.sizes = ([512], [2560])
buf517_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf526_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op526_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf517', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf524', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf526', get_index_3, getitem_1)
        return store_reduction
op526 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op525_op526_op528.snodes[2] =
op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', c0, {c0: 1310720}, None)]
op528.unmet_dependencies = 
    [   MemoryDep('buf517', c0, {c0: 1310720}, None),
        MemoryDep('buf524', c0, {c0: 1310720}, None),
        MemoryDep('buf525', c0, {c0: 512}, None),
        MemoryDep('buf526', c0, {c0: 512}, None)]
op528.met_dependencies = 
    [   MemoryDep('arg338_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg339_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg340_1', c1, {c0: 512, c1: 2560}, None)]
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf528.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False),
    ]
]
op528.group.device = cuda:0
op528.group.iteration = (1310720, 1)
op528.sizes = ([512, 2560], [])
buf517_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf526_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf528_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op528_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf517', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf524', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf525', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf526', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg339_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg340_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf528', get_index_7, add_3, None)
        return store
op528 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op525_op526_op528 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op529: ExternKernelSchedulerNode(ExternKernelOut)
op529.writes = [StarDep(name='buf529', mode=None)]
op529.unmet_dependencies = [StarDep(name='buf528', mode=None)]
op529.met_dependencies = [StarDep(name='arg341_1', mode=None)]
op529.outputs = [
    buf529: ExternKernelOut
    buf529.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf529.users = [NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False)]
]
op529.node.kernel = extern_kernels.mm


op530: ExternKernelSchedulerNode(ExternKernelOut)
op530.writes = [StarDep(name='buf530', mode=None)]
op530.unmet_dependencies = [StarDep(name='buf528', mode=None)]
op530.met_dependencies = [StarDep(name='arg343_1', mode=None)]
op530.outputs = [
    buf530: ExternKernelOut
    buf530.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf530.users = [NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False)]
]
op530.node.kernel = extern_kernels.mm


op531: SchedulerNode(ComputedBuffer)
op531.writes = [MemoryDep('buf531', c0, {c0: 1310720}, None)]
op531.unmet_dependencies = [   MemoryDep('buf530', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op531.met_dependencies = [MemoryDep('arg344_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op531.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf531.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op531.group.device = cuda:0
op531.group.iteration = (1310720, 1)
op531.sizes = ([4, 32, 128, 80], [])
buf530_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op531_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf530', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg344_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf531', get_index_2, add, None)
        return store
op531 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op532: SchedulerNode(ComputedBuffer)
op532.writes = [MemoryDep('buf532', c0, {c0: 1310720}, None)]
op532.unmet_dependencies = [   MemoryDep('buf529', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op532.met_dependencies = [MemoryDep('arg342_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op532.outputs = [
    buf532: ComputedBuffer
    buf532.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf532.users = [NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False)]
]
op532.group.device = cuda:0
op532.group.iteration = (1310720, 1)
op532.sizes = ([4, 32, 128, 80], [])
buf529_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf532_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op532_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf529', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg342_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf532', get_index_2, mul, None)
        return store
op532 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op533: ExternKernelSchedulerNode(ExternKernelOut)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf531', mode=None), StarDep(name='buf532', mode=None)]
op533.met_dependencies = []
op533.outputs = [
    buf533: ExternKernelOut
    buf533.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf533.users = [
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=True, is_weak=False),
    ]
]
op533.node.kernel = extern_kernels.bmm


op534_op535_op538: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op534_op535_op538.writes = 
    [   MemoryDep('buf534', c0, {c0: 16384}, None),
        MemoryDep('buf535', c0, {c0: 16384}, None),
        MemoryDep('buf538', c0, {c0: 2097152}, None)]
op534_op535_op538.unmet_dependencies = [MemoryDep('buf533', c0, {c0: 2097152}, None)]
op534_op535_op538.met_dependencies = []
op534_op535_op538.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf534.users = [
        NodeUser(node=SchedulerNode(name='op535'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
    ]
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf535.users = [NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False)]
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf538.users = [NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False)]
]
op534_op535_op538.snodes[0] =
op534: SchedulerNode(ComputedBuffer)
op534.writes = [MemoryDep('buf534', c0, {c0: 16384}, None)]
op534.unmet_dependencies = [MemoryDep('buf533', c0, {c0: 2097152}, None)]
op534.met_dependencies = []
op534.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf534.users = [
        NodeUser(node=SchedulerNode(name='op535'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
    ]
]
op534.group.device = cuda:0
op534.group.iteration = (16384, 128)
op534.sizes = ([128, 128], [128])
buf533_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf534_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op534_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf534', get_index_3, reduction)
        return store_reduction
op534 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op534_op535_op538.snodes[1] =
op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', c0, {c0: 16384}, None)]
op535.unmet_dependencies = 
    [   MemoryDep('buf533', c0, {c0: 2097152}, None),
        MemoryDep('buf534', c0, {c0: 16384}, None)]
op535.met_dependencies = []
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf535.users = [NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False)]
]
op535.group.device = cuda:0
op535.group.iteration = (16384, 128)
op535.sizes = ([128, 128], [128])
buf533_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf534_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf535_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op535_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf534', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf535', get_index_4, reduction)
        return store_reduction
op535 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op534_op535_op538.snodes[2] =
op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 2097152}, None)]
op538.unmet_dependencies = 
    [   MemoryDep('buf533', c0, {c0: 2097152}, None),
        MemoryDep('buf534', c0, {c0: 16384}, None),
        MemoryDep('buf535', c0, {c0: 16384}, None)]
op538.met_dependencies = []
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf538.users = [NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False)]
]
op538.group.device = cuda:0
op538.group.iteration = (2097152, 1)
op538.sizes = ([128, 128, 128], [])
buf533_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf534_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf535_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf538_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op538_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf534', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf535', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf538', get_index_5, truediv, None)
        return store
op538 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op534_op535_op538 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op536: ExternKernelSchedulerNode(ExternKernelOut)
op536.writes = [StarDep(name='buf536', mode=None)]
op536.unmet_dependencies = [StarDep(name='buf528', mode=None)]
op536.met_dependencies = [StarDep(name='arg345_1', mode=None)]
op536.outputs = [
    buf536: ExternKernelOut
    buf536.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf536.users = [NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False)]
]
op536.node.kernel = extern_kernels.mm


op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 1310720}, None)]
op537.unmet_dependencies = [   MemoryDep('buf536', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op537.met_dependencies = [MemoryDep('arg346_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf537.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op537.group.device = cuda:0
op537.group.iteration = (1310720, 1)
op537.sizes = ([4, 32, 128, 80], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op537_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg346_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf537', get_index_2, add, None)
        return store
op537 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op539: ExternKernelSchedulerNode(ExternKernelOut)
op539.writes = [StarDep(name='buf539', mode=None)]
op539.unmet_dependencies = [StarDep(name='buf537', mode=None), StarDep(name='buf538', mode=None)]
op539.met_dependencies = []
op539.outputs = [
    buf539: ExternKernelOut
    buf539.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf539.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op539.node.kernel = extern_kernels.bmm


op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', c0, {c0: 1310720}, None)]
op540.unmet_dependencies = [   MemoryDep('buf539', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op540.met_dependencies = []
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op540.group.device = cuda:0
op540.group.iteration = (1310720, 1)
op540.sizes = ([4, 128, 32, 80], [])
buf539_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf540_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op540_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf540', get_index_1, load, None)
        return store
op540 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op541: ExternKernelSchedulerNode(ExternKernelOut)
op541.writes = [StarDep(name='buf541', mode=None)]
op541.unmet_dependencies = [StarDep(name='buf540', mode=None)]
op541.met_dependencies = [StarDep(name='arg347_1', mode=None)]
op541.outputs = [
    buf541: ExternKernelOut
    buf541.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf541.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False)]
]
op541.node.kernel = extern_kernels.mm


op542_op543_op544_op546: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op542_op543_op544_op546.writes = 
    [   MemoryDep('buf542', c0, {c0: 1310720}, None),
        MemoryDep('buf543', c0, {c0: 512}, None),
        MemoryDep('buf544', c0, {c0: 512}, None),
        MemoryDep('buf546', c0, {c0: 1310720}, None)]
op542_op543_op544_op546.unmet_dependencies = 
    [   MemoryDep('buf517', c0, {c0: 1310720}, None),
        MemoryDep('buf524', c0, {c0: 1310720}, None),
        MemoryDep('buf541', c0, {c0: 1310720}, None)]
op542_op543_op544_op546.met_dependencies = 
    [   MemoryDep('arg338_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg348_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg349_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg350_1', c1, {c0: 512, c1: 2560}, None)]
op542_op543_op544_op546.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf542.users = [
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=True, is_weak=False),
    ]
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf543.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf544.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf546.users = [NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op542_op543_op544_op546.snodes[0] =
op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 1310720}, None)]
op542.unmet_dependencies = 
    [   MemoryDep('buf517', c0, {c0: 1310720}, None),
        MemoryDep('buf524', c0, {c0: 1310720}, None),
        MemoryDep('buf541', c0, {c0: 1310720}, None)]
op542.met_dependencies = 
    [   MemoryDep('arg338_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg348_1', c1, {c0: 512, c1: 2560}, None)]
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf542.users = [
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=True, is_weak=False),
    ]
]
op542.group.device = cuda:0
op542.group.iteration = (1310720, 1)
op542.sizes = ([512, 2560], [])
buf517_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op542_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf517', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf524', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf541', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg348_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf542', get_index_5, add_3, None)
        return store
op542 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op542_op543_op544_op546.snodes[1] =
op543: SchedulerNode(ComputedBuffer)
op543.writes = [MemoryDep('buf543', c0, {c0: 512}, None)]
op543.unmet_dependencies = [MemoryDep('buf542', c0, {c0: 1310720}, None)]
op543.met_dependencies = []
op543.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf543.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
]
op543.group.device = cuda:0
op543.group.iteration = (512, 2560)
op543.sizes = ([512], [2560])
buf542_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op543_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf543', get_index_1, getitem)
        return store_reduction
op543 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op542_op543_op544_op546.snodes[2] =
op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 512}, None)]
op544.unmet_dependencies = [MemoryDep('buf542', c0, {c0: 1310720}, None)]
op544.met_dependencies = []
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf544.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
]
op544.group.device = cuda:0
op544.group.iteration = (512, 2560)
op544.sizes = ([512], [2560])
buf542_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op544_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf544', get_index_1, getitem_1)
        return store_reduction
op544 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op542_op543_op544_op546.snodes[3] =
op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 1310720}, None)]
op546.unmet_dependencies = 
    [   MemoryDep('buf542', c0, {c0: 1310720}, None),
        MemoryDep('buf543', c0, {c0: 512}, None),
        MemoryDep('buf544', c0, {c0: 512}, None)]
op546.met_dependencies = 
    [   MemoryDep('arg349_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg350_1', c1, {c0: 512, c1: 2560}, None)]
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf546.users = [NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op546.group.device = cuda:0
op546.group.iteration = (1310720, 1)
op546.sizes = ([512, 2560], [])
buf542_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf544_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op546_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf543', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf544', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg349_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg350_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf546', get_index_5, add_1, None)
        return store
op546 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op542_op543_op544_op546 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op547: ExternKernelSchedulerNode(ExternKernelOut)
op547.writes = [StarDep(name='buf547', mode=None)]
op547.unmet_dependencies = [StarDep(name='buf546', mode=None)]
op547.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op547.outputs = [
    buf547: ExternKernelOut
    buf547.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf547.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False)]
]
op547.node.kernel = extern_kernels.mm


op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 5242880}, None)]
op548.unmet_dependencies = [MemoryDep('buf547', c0, {c0: 5242880}, None)]
op548.met_dependencies = [MemoryDep('arg352_1', c1, {c0: 512, c1: 10240}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf548.users = [NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False)]
]
op548.group.device = cuda:0
op548.group.iteration = (5242880, 1)
op548.sizes = ([512, 10240], [])
buf547_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op548_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf547', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf547', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg352_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf548', get_index_4, mul_2, None)
        return store
op548 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op549: ExternKernelSchedulerNode(ExternKernelOut)
op549.writes = [StarDep(name='buf549', mode=None)]
op549.unmet_dependencies = [StarDep(name='buf548', mode=None)]
op549.met_dependencies = [StarDep(name='arg353_1', mode=None)]
op549.outputs = [
    buf549: ExternKernelOut
    buf549.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf549.users = [
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=True, is_weak=False),
    ]
]
op549.node.kernel = extern_kernels.mm


op550_op551_op553: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op550_op551_op553.writes = 
    [   MemoryDep('buf550', c0, {c0: 512}, None),
        MemoryDep('buf551', c0, {c0: 512}, None),
        MemoryDep('buf553', c0, {c0: 1310720}, None)]
op550_op551_op553.unmet_dependencies = 
    [   MemoryDep('buf542', c0, {c0: 1310720}, None),
        MemoryDep('buf549', c0, {c0: 1310720}, None)]
op550_op551_op553.met_dependencies = 
    [   MemoryDep('arg354_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg355_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg356_1', c1, {c0: 512, c1: 2560}, None)]
op550_op551_op553.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf550.users = [NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf551.users = [NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf553.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op554'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False),
    ]
]
op550_op551_op553.snodes[0] =
op550: SchedulerNode(ComputedBuffer)
op550.writes = [MemoryDep('buf550', c0, {c0: 512}, None)]
op550.unmet_dependencies = 
    [   MemoryDep('buf542', c0, {c0: 1310720}, None),
        MemoryDep('buf549', c0, {c0: 1310720}, None)]
op550.met_dependencies = [MemoryDep('arg354_1', c1, {c0: 512, c1: 2560}, None)]
op550.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf550.users = [NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
]
op550.group.device = cuda:0
op550.group.iteration = (512, 2560)
op550.sizes = ([512], [2560])
buf542_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op550_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf549', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg354_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf550', get_index_3, getitem)
        return store_reduction
op550 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op550_op551_op553.snodes[1] =
op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 512}, None)]
op551.unmet_dependencies = 
    [   MemoryDep('buf542', c0, {c0: 1310720}, None),
        MemoryDep('buf549', c0, {c0: 1310720}, None)]
op551.met_dependencies = [MemoryDep('arg354_1', c1, {c0: 512, c1: 2560}, None)]
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf551.users = [NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
]
op551.group.device = cuda:0
op551.group.iteration = (512, 2560)
op551.sizes = ([512], [2560])
buf542_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op551_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf549', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg354_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf551', get_index_3, getitem_1)
        return store_reduction
op551 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op550_op551_op553.snodes[2] =
op553: SchedulerNode(ComputedBuffer)
op553.writes = [MemoryDep('buf553', c0, {c0: 1310720}, None)]
op553.unmet_dependencies = 
    [   MemoryDep('buf542', c0, {c0: 1310720}, None),
        MemoryDep('buf549', c0, {c0: 1310720}, None),
        MemoryDep('buf550', c0, {c0: 512}, None),
        MemoryDep('buf551', c0, {c0: 512}, None)]
op553.met_dependencies = 
    [   MemoryDep('arg354_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg355_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg356_1', c1, {c0: 512, c1: 2560}, None)]
op553.outputs = [
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf553.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op554'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False),
    ]
]
op553.group.device = cuda:0
op553.group.iteration = (1310720, 1)
op553.sizes = ([512, 2560], [])
buf542_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf551_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf553_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op553_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf549', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg354_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf550', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf551', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg355_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg356_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf553', get_index_7, add_3, None)
        return store
op553 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op550_op551_op553 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op554: ExternKernelSchedulerNode(ExternKernelOut)
op554.writes = [StarDep(name='buf554', mode=None)]
op554.unmet_dependencies = [StarDep(name='buf553', mode=None)]
op554.met_dependencies = [StarDep(name='arg357_1', mode=None)]
op554.outputs = [
    buf554: ExternKernelOut
    buf554.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf554.users = [NodeUser(node=SchedulerNode(name='op557'), can_inplace=False, is_weak=False)]
]
op554.node.kernel = extern_kernels.mm


op555: ExternKernelSchedulerNode(ExternKernelOut)
op555.writes = [StarDep(name='buf555', mode=None)]
op555.unmet_dependencies = [StarDep(name='buf553', mode=None)]
op555.met_dependencies = [StarDep(name='arg359_1', mode=None)]
op555.outputs = [
    buf555: ExternKernelOut
    buf555.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf555.users = [NodeUser(node=SchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
]
op555.node.kernel = extern_kernels.mm


op556: SchedulerNode(ComputedBuffer)
op556.writes = [MemoryDep('buf556', c0, {c0: 1310720}, None)]
op556.unmet_dependencies = [   MemoryDep('buf555', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op556.met_dependencies = [MemoryDep('arg360_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op556.outputs = [
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf556.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op556.group.device = cuda:0
op556.group.iteration = (1310720, 1)
op556.sizes = ([4, 32, 128, 80], [])
buf555_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf556_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op556_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg360_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf556', get_index_2, add, None)
        return store
op556 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op557: SchedulerNode(ComputedBuffer)
op557.writes = [MemoryDep('buf557', c0, {c0: 1310720}, None)]
op557.unmet_dependencies = [   MemoryDep('buf554', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op557.met_dependencies = [MemoryDep('arg358_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op557.outputs = [
    buf557: ComputedBuffer
    buf557.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf557.users = [NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op557.group.device = cuda:0
op557.group.iteration = (1310720, 1)
op557.sizes = ([4, 32, 128, 80], [])
buf554_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf557_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op557_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf554', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg358_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf557', get_index_2, mul, None)
        return store
op557 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op558: ExternKernelSchedulerNode(ExternKernelOut)
op558.writes = [StarDep(name='buf558', mode=None)]
op558.unmet_dependencies = [StarDep(name='buf556', mode=None), StarDep(name='buf557', mode=None)]
op558.met_dependencies = []
op558.outputs = [
    buf558: ExternKernelOut
    buf558.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf558.users = [
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=True, is_weak=False),
    ]
]
op558.node.kernel = extern_kernels.bmm


op559_op560_op563: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op559_op560_op563.writes = 
    [   MemoryDep('buf559', c0, {c0: 16384}, None),
        MemoryDep('buf560', c0, {c0: 16384}, None),
        MemoryDep('buf563', c0, {c0: 2097152}, None)]
op559_op560_op563.unmet_dependencies = [MemoryDep('buf558', c0, {c0: 2097152}, None)]
op559_op560_op563.met_dependencies = []
op559_op560_op563.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf559.users = [
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
    ]
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf560.users = [NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False)]
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf563.users = [NodeUser(node=ExternKernelSchedulerNode(name='op564'), can_inplace=False, is_weak=False)]
]
op559_op560_op563.snodes[0] =
op559: SchedulerNode(ComputedBuffer)
op559.writes = [MemoryDep('buf559', c0, {c0: 16384}, None)]
op559.unmet_dependencies = [MemoryDep('buf558', c0, {c0: 2097152}, None)]
op559.met_dependencies = []
op559.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf559.users = [
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
    ]
]
op559.group.device = cuda:0
op559.group.iteration = (16384, 128)
op559.sizes = ([128, 128], [128])
buf558_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op559_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf558', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf559', get_index_3, reduction)
        return store_reduction
op559 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op559_op560_op563.snodes[1] =
op560: SchedulerNode(ComputedBuffer)
op560.writes = [MemoryDep('buf560', c0, {c0: 16384}, None)]
op560.unmet_dependencies = 
    [   MemoryDep('buf558', c0, {c0: 2097152}, None),
        MemoryDep('buf559', c0, {c0: 16384}, None)]
op560.met_dependencies = []
op560.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf560.users = [NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False)]
]
op560.group.device = cuda:0
op560.group.iteration = (16384, 128)
op560.sizes = ([128, 128], [128])
buf558_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf560_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op560_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf558', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf559', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf560', get_index_4, reduction)
        return store_reduction
op560 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op559_op560_op563.snodes[2] =
op563: SchedulerNode(ComputedBuffer)
op563.writes = [MemoryDep('buf563', c0, {c0: 2097152}, None)]
op563.unmet_dependencies = 
    [   MemoryDep('buf558', c0, {c0: 2097152}, None),
        MemoryDep('buf559', c0, {c0: 16384}, None),
        MemoryDep('buf560', c0, {c0: 16384}, None)]
op563.met_dependencies = []
op563.outputs = [
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf563.users = [NodeUser(node=ExternKernelSchedulerNode(name='op564'), can_inplace=False, is_weak=False)]
]
op563.group.device = cuda:0
op563.group.iteration = (2097152, 1)
op563.sizes = ([128, 128, 128], [])
buf558_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf560_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf563_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op563_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf558', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf559', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf560', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf563', get_index_5, truediv, None)
        return store
op563 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op559_op560_op563 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op561: ExternKernelSchedulerNode(ExternKernelOut)
op561.writes = [StarDep(name='buf561', mode=None)]
op561.unmet_dependencies = [StarDep(name='buf553', mode=None)]
op561.met_dependencies = [StarDep(name='arg361_1', mode=None)]
op561.outputs = [
    buf561: ExternKernelOut
    buf561.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf561.users = [NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op561.node.kernel = extern_kernels.mm


op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 1310720}, None)]
op562.unmet_dependencies = [   MemoryDep('buf561', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op562.met_dependencies = [MemoryDep('arg362_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf562.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op562.group.device = cuda:0
op562.group.iteration = (1310720, 1)
op562.sizes = ([4, 32, 128, 80], [])
buf561_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op562_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf561', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg362_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf562', get_index_2, add, None)
        return store
op562 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op564: ExternKernelSchedulerNode(ExternKernelOut)
op564.writes = [StarDep(name='buf564', mode=None)]
op564.unmet_dependencies = [StarDep(name='buf562', mode=None), StarDep(name='buf563', mode=None)]
op564.met_dependencies = []
op564.outputs = [
    buf564: ExternKernelOut
    buf564.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf564.users = [NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False)]
]
op564.node.kernel = extern_kernels.bmm


op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 1310720}, None)]
op565.unmet_dependencies = [   MemoryDep('buf564', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op565.met_dependencies = []
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf565.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op565.group.device = cuda:0
op565.group.iteration = (1310720, 1)
op565.sizes = ([4, 128, 32, 80], [])
buf564_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op565_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf565', get_index_1, load, None)
        return store
op565 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op566: ExternKernelSchedulerNode(ExternKernelOut)
op566.writes = [StarDep(name='buf566', mode=None)]
op566.unmet_dependencies = [StarDep(name='buf565', mode=None)]
op566.met_dependencies = [StarDep(name='arg363_1', mode=None)]
op566.outputs = [
    buf566: ExternKernelOut
    buf566.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf566.users = [NodeUser(node=SchedulerNode(name='op567'), can_inplace=True, is_weak=False)]
]
op566.node.kernel = extern_kernels.mm


op567_op568_op569_op571: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op567_op568_op569_op571.writes = 
    [   MemoryDep('buf567', c0, {c0: 1310720}, None),
        MemoryDep('buf568', c0, {c0: 512}, None),
        MemoryDep('buf569', c0, {c0: 512}, None),
        MemoryDep('buf571', c0, {c0: 1310720}, None)]
op567_op568_op569_op571.unmet_dependencies = 
    [   MemoryDep('buf542', c0, {c0: 1310720}, None),
        MemoryDep('buf549', c0, {c0: 1310720}, None),
        MemoryDep('buf566', c0, {c0: 1310720}, None)]
op567_op568_op569_op571.met_dependencies = 
    [   MemoryDep('arg354_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg364_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg365_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg366_1', c1, {c0: 512, c1: 2560}, None)]
op567_op568_op569_op571.outputs = [
    buf567: ComputedBuffer
    buf567.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf567.users = [
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False),
    ]
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf568.users = [NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf569.users = [NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf571.users = [NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op567_op568_op569_op571.snodes[0] =
op567: SchedulerNode(ComputedBuffer)
op567.writes = [MemoryDep('buf567', c0, {c0: 1310720}, None)]
op567.unmet_dependencies = 
    [   MemoryDep('buf542', c0, {c0: 1310720}, None),
        MemoryDep('buf549', c0, {c0: 1310720}, None),
        MemoryDep('buf566', c0, {c0: 1310720}, None)]
op567.met_dependencies = 
    [   MemoryDep('arg354_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg364_1', c1, {c0: 512, c1: 2560}, None)]
op567.outputs = [
    buf567: ComputedBuffer
    buf567.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf567.users = [
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False),
    ]
]
op567.group.device = cuda:0
op567.group.iteration = (1310720, 1)
op567.sizes = ([512, 2560], [])
buf542_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf566_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf567_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op567_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf549', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg354_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf566', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg364_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf567', get_index_5, add_3, None)
        return store
op567 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op567_op568_op569_op571.snodes[1] =
op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 512}, None)]
op568.unmet_dependencies = [MemoryDep('buf567', c0, {c0: 1310720}, None)]
op568.met_dependencies = []
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf568.users = [NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op568.group.device = cuda:0
op568.group.iteration = (512, 2560)
op568.sizes = ([512], [2560])
buf567_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op568_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf568', get_index_1, getitem)
        return store_reduction
op568 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op567_op568_op569_op571.snodes[2] =
op569: SchedulerNode(ComputedBuffer)
op569.writes = [MemoryDep('buf569', c0, {c0: 512}, None)]
op569.unmet_dependencies = [MemoryDep('buf567', c0, {c0: 1310720}, None)]
op569.met_dependencies = []
op569.outputs = [
    buf569: ComputedBuffer
    buf569.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf569.users = [NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op569.group.device = cuda:0
op569.group.iteration = (512, 2560)
op569.sizes = ([512], [2560])
buf567_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op569_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf569', get_index_1, getitem_1)
        return store_reduction
op569 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op567_op568_op569_op571.snodes[3] =
op571: SchedulerNode(ComputedBuffer)
op571.writes = [MemoryDep('buf571', c0, {c0: 1310720}, None)]
op571.unmet_dependencies = 
    [   MemoryDep('buf567', c0, {c0: 1310720}, None),
        MemoryDep('buf568', c0, {c0: 512}, None),
        MemoryDep('buf569', c0, {c0: 512}, None)]
op571.met_dependencies = 
    [   MemoryDep('arg365_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg366_1', c1, {c0: 512, c1: 2560}, None)]
op571.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf571.users = [NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False)]
]
op571.group.device = cuda:0
op571.group.iteration = (1310720, 1)
op571.sizes = ([512, 2560], [])
buf567_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf569_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op571_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf568', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf569', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg365_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg366_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf571', get_index_5, add_1, None)
        return store
op571 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op567_op568_op569_op571 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op572: ExternKernelSchedulerNode(ExternKernelOut)
op572.writes = [StarDep(name='buf572', mode=None)]
op572.unmet_dependencies = [StarDep(name='buf571', mode=None)]
op572.met_dependencies = [StarDep(name='arg367_1', mode=None)]
op572.outputs = [
    buf572: ExternKernelOut
    buf572.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf572.users = [NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False)]
]
op572.node.kernel = extern_kernels.mm


op573: SchedulerNode(ComputedBuffer)
op573.writes = [MemoryDep('buf573', c0, {c0: 5242880}, None)]
op573.unmet_dependencies = [MemoryDep('buf572', c0, {c0: 5242880}, None)]
op573.met_dependencies = [MemoryDep('arg368_1', c1, {c0: 512, c1: 10240}, None)]
op573.outputs = [
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf573.users = [NodeUser(node=ExternKernelSchedulerNode(name='op574'), can_inplace=False, is_weak=False)]
]
op573.group.device = cuda:0
op573.group.iteration = (5242880, 1)
op573.sizes = ([512, 10240], [])
buf572_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf573_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op573_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf572', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg368_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf572', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg368_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf573', get_index_4, mul_2, None)
        return store
op573 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op574: ExternKernelSchedulerNode(ExternKernelOut)
op574.writes = [StarDep(name='buf574', mode=None)]
op574.unmet_dependencies = [StarDep(name='buf573', mode=None)]
op574.met_dependencies = [StarDep(name='arg369_1', mode=None)]
op574.outputs = [
    buf574: ExternKernelOut
    buf574.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf574.users = [
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False),
    ]
]
op574.node.kernel = extern_kernels.mm


op575_op576_op578: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op575_op576_op578.writes = 
    [   MemoryDep('buf575', c0, {c0: 512}, None),
        MemoryDep('buf576', c0, {c0: 512}, None),
        MemoryDep('buf578', c0, {c0: 1310720}, None)]
op575_op576_op578.unmet_dependencies = 
    [   MemoryDep('buf567', c0, {c0: 1310720}, None),
        MemoryDep('buf574', c0, {c0: 1310720}, None)]
op575_op576_op578.met_dependencies = 
    [   MemoryDep('arg370_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg371_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg372_1', c1, {c0: 512, c1: 2560}, None)]
op575_op576_op578.outputs = [
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf575.users = [NodeUser(node=SchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf576.users = [NodeUser(node=SchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
    buf578: ComputedBuffer
    buf578.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf578.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op579'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op586'), can_inplace=False, is_weak=False),
    ]
]
op575_op576_op578.snodes[0] =
op575: SchedulerNode(ComputedBuffer)
op575.writes = [MemoryDep('buf575', c0, {c0: 512}, None)]
op575.unmet_dependencies = 
    [   MemoryDep('buf567', c0, {c0: 1310720}, None),
        MemoryDep('buf574', c0, {c0: 1310720}, None)]
op575.met_dependencies = [MemoryDep('arg370_1', c1, {c0: 512, c1: 2560}, None)]
op575.outputs = [
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf575.users = [NodeUser(node=SchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
]
op575.group.device = cuda:0
op575.group.iteration = (512, 2560)
op575.sizes = ([512], [2560])
buf567_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf575_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op575_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf574', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg370_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf575', get_index_3, getitem)
        return store_reduction
op575 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op575_op576_op578.snodes[1] =
op576: SchedulerNode(ComputedBuffer)
op576.writes = [MemoryDep('buf576', c0, {c0: 512}, None)]
op576.unmet_dependencies = 
    [   MemoryDep('buf567', c0, {c0: 1310720}, None),
        MemoryDep('buf574', c0, {c0: 1310720}, None)]
op576.met_dependencies = [MemoryDep('arg370_1', c1, {c0: 512, c1: 2560}, None)]
op576.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf576.users = [NodeUser(node=SchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
]
op576.group.device = cuda:0
op576.group.iteration = (512, 2560)
op576.sizes = ([512], [2560])
buf567_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op576_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf574', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg370_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf576', get_index_3, getitem_1)
        return store_reduction
op576 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op575_op576_op578.snodes[2] =
op578: SchedulerNode(ComputedBuffer)
op578.writes = [MemoryDep('buf578', c0, {c0: 1310720}, None)]
op578.unmet_dependencies = 
    [   MemoryDep('buf567', c0, {c0: 1310720}, None),
        MemoryDep('buf574', c0, {c0: 1310720}, None),
        MemoryDep('buf575', c0, {c0: 512}, None),
        MemoryDep('buf576', c0, {c0: 512}, None)]
op578.met_dependencies = 
    [   MemoryDep('arg370_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg371_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg372_1', c1, {c0: 512, c1: 2560}, None)]
op578.outputs = [
    buf578: ComputedBuffer
    buf578.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf578.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op579'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op586'), can_inplace=False, is_weak=False),
    ]
]
op578.group.device = cuda:0
op578.group.iteration = (1310720, 1)
op578.sizes = ([512, 2560], [])
buf567_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf575_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf576_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf578_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op578_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf574', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg370_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf575', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf576', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg371_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg372_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf578', get_index_7, add_3, None)
        return store
op578 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op575_op576_op578 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op579: ExternKernelSchedulerNode(ExternKernelOut)
op579.writes = [StarDep(name='buf579', mode=None)]
op579.unmet_dependencies = [StarDep(name='buf578', mode=None)]
op579.met_dependencies = [StarDep(name='arg373_1', mode=None)]
op579.outputs = [
    buf579: ExternKernelOut
    buf579.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf579.users = [NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False)]
]
op579.node.kernel = extern_kernels.mm


op580: ExternKernelSchedulerNode(ExternKernelOut)
op580.writes = [StarDep(name='buf580', mode=None)]
op580.unmet_dependencies = [StarDep(name='buf578', mode=None)]
op580.met_dependencies = [StarDep(name='arg375_1', mode=None)]
op580.outputs = [
    buf580: ExternKernelOut
    buf580.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf580.users = [NodeUser(node=SchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
]
op580.node.kernel = extern_kernels.mm


op581: SchedulerNode(ComputedBuffer)
op581.writes = [MemoryDep('buf581', c0, {c0: 1310720}, None)]
op581.unmet_dependencies = [   MemoryDep('buf580', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op581.met_dependencies = [MemoryDep('arg376_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op581.outputs = [
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf581.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op581.group.device = cuda:0
op581.group.iteration = (1310720, 1)
op581.sizes = ([4, 32, 128, 80], [])
buf580_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg376_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op581_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf580', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg376_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf581', get_index_2, add, None)
        return store
op581 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op582: SchedulerNode(ComputedBuffer)
op582.writes = [MemoryDep('buf582', c0, {c0: 1310720}, None)]
op582.unmet_dependencies = [   MemoryDep('buf579', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op582.met_dependencies = [MemoryDep('arg374_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op582.outputs = [
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf582.users = [NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
]
op582.group.device = cuda:0
op582.group.iteration = (1310720, 1)
op582.sizes = ([4, 32, 128, 80], [])
buf579_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op582_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg374_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.11180339887498948, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf582', get_index_2, mul, None)
        return store
op582 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.11180339887498948
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x4), tmp4, None)


op583: ExternKernelSchedulerNode(ExternKernelOut)
op583.writes = [StarDep(name='buf583', mode=None)]
op583.unmet_dependencies = [StarDep(name='buf581', mode=None), StarDep(name='buf582', mode=None)]
op583.met_dependencies = []
op583.outputs = [
    buf583: ExternKernelOut
    buf583.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf583.users = [
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
    ]
]
op583.node.kernel = extern_kernels.bmm


op584_op585_op588: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op584_op585_op588.writes = 
    [   MemoryDep('buf584', c0, {c0: 16384}, None),
        MemoryDep('buf585', c0, {c0: 16384}, None),
        MemoryDep('buf588', c0, {c0: 2097152}, None)]
op584_op585_op588.unmet_dependencies = [MemoryDep('buf583', c0, {c0: 2097152}, None)]
op584_op585_op588.met_dependencies = []
op584_op585_op588.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf584.users = [
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
    ]
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf585.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf588.users = [NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op584_op585_op588.snodes[0] =
op584: SchedulerNode(ComputedBuffer)
op584.writes = [MemoryDep('buf584', c0, {c0: 16384}, None)]
op584.unmet_dependencies = [MemoryDep('buf583', c0, {c0: 2097152}, None)]
op584.met_dependencies = []
op584.outputs = [
    buf584: ComputedBuffer
    buf584.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf584.users = [
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
    ]
]
op584.group.device = cuda:0
op584.group.iteration = (16384, 128)
op584.sizes = ([128, 128], [128])
buf583_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op584_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf583', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf584', get_index_3, reduction)
        return store_reduction
op584 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp10, None)
op584_op585_op588.snodes[1] =
op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 16384}, None)]
op585.unmet_dependencies = 
    [   MemoryDep('buf583', c0, {c0: 2097152}, None),
        MemoryDep('buf584', c0, {c0: 16384}, None)]
op585.met_dependencies = []
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
    buf585.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
]
op585.group.device = cuda:0
op585.group.iteration = (16384, 128)
op585.sizes = ([128, 128], [128])
buf583_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf585_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
class op585_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf583', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf584', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf585', get_index_4, reduction)
        return store_reduction
op585 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp8 = tl.load(in_ptr1 + (x3), None, eviction_policy='evict_last')
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp11 = tl.broadcast_to(tmp10, [XBLOCK, RBLOCK])
        tmp13 = tl.sum(tmp11, 1)[:, None]
        tl.store(out_ptr0 + (x3), tmp13, None)
op584_op585_op588.snodes[2] =
op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', c0, {c0: 2097152}, None)]
op588.unmet_dependencies = 
    [   MemoryDep('buf583', c0, {c0: 2097152}, None),
        MemoryDep('buf584', c0, {c0: 16384}, None),
        MemoryDep('buf585', c0, {c0: 16384}, None)]
op588.met_dependencies = []
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf588.users = [NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op588.group.device = cuda:0
op588.group.iteration = (2097152, 1)
op588.sizes = ([128, 128, 128], [])
buf583_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf585_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1], stride=[128, 1, 16384])
buf588_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op588_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 128}
    index0 = 16384*z0 + 128*z1 + z2
    index1 = z2
    index2 = z1 + 1
    index3 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf583', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        lt = ops.lt(index_expr, index_expr_1)
        constant = ops.constant(0.0, torch.float32)
        constant_1 = ops.constant(-3.4028234663852886e+38, torch.float32)
        where = ops.where(lt, constant, constant_1)
        add = ops.add(load, where)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf584', get_index_3)
        sub = ops.sub(add, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index3')
        load_2 = ops.load('buf585', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf588', get_index_5, truediv, None)
        return store
op588 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x4 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp8 = tl.load(in_ptr1 + (x4), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        tmp1 = x0
        tmp2 = 1 + x1
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp9 = tmp7 - tmp8
        tmp10 = tl_math.exp(tmp9)
        tmp12 = tmp10 / tmp11
        tl.store(out_ptr0 + (x3), tmp12, None)
op584_op585_op588 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r2 = rindex
        x3 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_ptr0 + (r2 + (128*x3)), None)
        tmp1 = r2
        tmp2 = 1 + x0
        tmp3 = tmp1 < tmp2
        tmp4 = 0.0
        tmp5 = -3.4028234663852886e+38
        tmp6 = tl.where(tmp3, tmp4, tmp5)
        tmp7 = tmp0 + tmp6
        tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
        tmp10 = triton_helpers.max2(tmp8, 1)[:, None]
        tmp11 = tmp7 - tmp10
        tmp12 = tl_math.exp(tmp11)
        tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
        tmp15 = tl.sum(tmp13, 1)[:, None]
        tmp16 = tmp12 / tmp15
        tl.store(out_ptr2 + (r2 + (128*x3)), tmp16, None)


op586: ExternKernelSchedulerNode(ExternKernelOut)
op586.writes = [StarDep(name='buf586', mode=None)]
op586.unmet_dependencies = [StarDep(name='buf578', mode=None)]
op586.met_dependencies = [StarDep(name='arg377_1', mode=None)]
op586.outputs = [
    buf586: ExternKernelOut
    buf586.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf586.users = [NodeUser(node=SchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op586.node.kernel = extern_kernels.mm


op587: SchedulerNode(ComputedBuffer)
op587.writes = [MemoryDep('buf587', c0, {c0: 1310720}, None)]
op587.unmet_dependencies = [   MemoryDep('buf586', 327680*c0 + 80*c1 + 2560*c2 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op587.met_dependencies = [MemoryDep('arg378_1', 80*c1 + c3, {c0: 4, c1: 32, c2: 128, c3: 80}, None)]
op587.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
    buf587.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op587.group.device = cuda:0
op587.group.iteration = (1310720, 1)
op587.sizes = ([4, 32, 128, 80], [])
buf586_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[4, 32, 128, 80], stride=[327680, 10240, 80, 1])
class op587_loop_body:
    var_ranges = {z0: 4, z1: 32, z2: 128, z3: 80}
    index0 = 327680*z0 + 80*z1 + 2560*z2 + z3
    index1 = 80*z1 + z3
    index2 = 327680*z0 + 10240*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf586', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg378_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf587', get_index_2, add, None)
        return store
op587 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 128
        x2 = (xindex // 10240) % 32
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (2560*x1) + (327680*x3)), None)
        tmp1 = tl.load(in_ptr1 + (x0 + (80*x2)), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x4), tmp2, None)


op589: ExternKernelSchedulerNode(ExternKernelOut)
op589.writes = [StarDep(name='buf589', mode=None)]
op589.unmet_dependencies = [StarDep(name='buf587', mode=None), StarDep(name='buf588', mode=None)]
op589.met_dependencies = []
op589.outputs = [
    buf589: ExternKernelOut
    buf589.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
    buf589.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op589.node.kernel = extern_kernels.bmm


op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 1310720}, None)]
op590.unmet_dependencies = [   MemoryDep('buf589', 327680*c0 + 80*c1 + 10240*c2 + c3, {c0: 4, c1: 128, c2: 32, c3: 80}, None)]
op590.met_dependencies = []
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
    buf590.users = [NodeUser(node=ExternKernelSchedulerNode(name='op591'), can_inplace=False, is_weak=False)]
]
op590.group.device = cuda:0
op590.group.iteration = (1310720, 1)
op590.sizes = ([4, 128, 32, 80], [])
buf589_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 80], stride=[10240, 80, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 32, 80], stride=[327680, 2560, 80, 1])
class op590_loop_body:
    var_ranges = {z0: 4, z1: 128, z2: 32, z3: 80}
    index0 = 327680*z0 + 80*z1 + 10240*z2 + z3
    index1 = 327680*z0 + 2560*z1 + 80*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf589', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf590', get_index_1, load, None)
        return store
op590 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 80
        x1 = (xindex // 80) % 32
        x2 = (xindex // 2560) % 128
        x3 = (xindex // 327680)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (80*x2) + (10240*x1) + (327680*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op591: ExternKernelSchedulerNode(ExternKernelOut)
op591.writes = [StarDep(name='buf591', mode=None)]
op591.unmet_dependencies = [StarDep(name='buf590', mode=None)]
op591.met_dependencies = [StarDep(name='arg379_1', mode=None)]
op591.outputs = [
    buf591: ExternKernelOut
    buf591.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf591.users = [NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False)]
]
op591.node.kernel = extern_kernels.mm


op592_op593_op594_op596: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op592_op593_op594_op596.writes = 
    [   MemoryDep('buf592', c0, {c0: 1310720}, None),
        MemoryDep('buf593', c0, {c0: 512}, None),
        MemoryDep('buf594', c0, {c0: 512}, None),
        MemoryDep('buf596', c0, {c0: 1310720}, None)]
op592_op593_op594_op596.unmet_dependencies = 
    [   MemoryDep('buf567', c0, {c0: 1310720}, None),
        MemoryDep('buf574', c0, {c0: 1310720}, None),
        MemoryDep('buf591', c0, {c0: 1310720}, None)]
op592_op593_op594_op596.met_dependencies = 
    [   MemoryDep('arg370_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg380_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg381_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg382_1', c1, {c0: 512, c1: 2560}, None)]
op592_op593_op594_op596.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf592.users = [
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf593.users = [NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False)]
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf594.users = [NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False)]
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf596.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op592_op593_op594_op596.snodes[0] =
op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 1310720}, None)]
op592.unmet_dependencies = 
    [   MemoryDep('buf567', c0, {c0: 1310720}, None),
        MemoryDep('buf574', c0, {c0: 1310720}, None),
        MemoryDep('buf591', c0, {c0: 1310720}, None)]
op592.met_dependencies = 
    [   MemoryDep('arg370_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg380_1', c1, {c0: 512, c1: 2560}, None)]
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf592.users = [
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
]
op592.group.device = cuda:0
op592.group.iteration = (1310720, 1)
op592.sizes = ([512, 2560], [])
buf567_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op592_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf574', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg370_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf591', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg380_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf592', get_index_5, add_3, None)
        return store
op592 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_out_ptr0 + (x2), None)
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp7 = tmp5 + tmp6
        tmp8 = tmp4 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)
op592_op593_op594_op596.snodes[1] =
op593: SchedulerNode(ComputedBuffer)
op593.writes = [MemoryDep('buf593', c0, {c0: 512}, None)]
op593.unmet_dependencies = [MemoryDep('buf592', c0, {c0: 1310720}, None)]
op593.met_dependencies = []
op593.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf593.users = [NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False)]
]
op593.group.device = cuda:0
op593.group.iteration = (512, 2560)
op593.sizes = ([512], [2560])
buf592_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op593_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf593', get_index_1, getitem)
        return store_reduction
op593 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op592_op593_op594_op596.snodes[2] =
op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', c0, {c0: 512}, None)]
op594.unmet_dependencies = [MemoryDep('buf592', c0, {c0: 1310720}, None)]
op594.met_dependencies = []
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf594.users = [NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False)]
]
op594.group.device = cuda:0
op594.group.iteration = (512, 2560)
op594.sizes = ([512], [2560])
buf592_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op594_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf594', get_index_1, getitem_1)
        return store_reduction
op594 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp2_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp2_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp2_mean_next, tmp2_m2_next, tmp2_weight_next = triton_helpers.welford_reduce(
                tmp1, tmp2_mean, tmp2_m2, tmp2_weight, roffset == 0
            )
            tmp2_mean = tl.where(rmask & xmask, tmp2_mean_next, tmp2_mean)
            tmp2_m2 = tl.where(rmask & xmask, tmp2_m2_next, tmp2_m2)
            tmp2_weight = tl.where(rmask & xmask, tmp2_weight_next, tmp2_weight)
        tmp2_tmp, tmp3_tmp, tmp4_tmp = triton_helpers.welford(
            tmp2_mean, tmp2_m2, tmp2_weight, 1
        )
        tmp2 = tmp2_tmp[:, None]
        tmp3 = tmp3_tmp[:, None]
        tmp4 = tmp4_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp3, xmask)
op592_op593_op594_op596.snodes[3] =
op596: SchedulerNode(ComputedBuffer)
op596.writes = [MemoryDep('buf596', c0, {c0: 1310720}, None)]
op596.unmet_dependencies = 
    [   MemoryDep('buf592', c0, {c0: 1310720}, None),
        MemoryDep('buf593', c0, {c0: 512}, None),
        MemoryDep('buf594', c0, {c0: 512}, None)]
op596.met_dependencies = 
    [   MemoryDep('arg381_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg382_1', c1, {c0: 512, c1: 2560}, None)]
op596.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf596.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op596.group.device = cuda:0
op596.group.iteration = (1310720, 1)
op596.sizes = ([512, 2560], [])
buf592_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf594_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op596_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf593', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf594', get_index_2)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg381_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg382_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf596', get_index_5, add_1, None)
        return store
op596 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 2560)
        x0 = xindex % 2560
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 2560.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-05
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op592_op593_op594_op596 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32', 9: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp10_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp10_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp6 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp7 = tmp5 + tmp6
            tmp8 = tmp4 + tmp7
            tmp9 = tl.broadcast_to(tmp8, [XBLOCK, RBLOCK])
            tmp10_mean_next, tmp10_m2_next, tmp10_weight_next = triton_helpers.welford_reduce(
                tmp9, tmp10_mean, tmp10_m2, tmp10_weight, roffset == 0
            )
            tmp10_mean = tl.where(rmask & xmask, tmp10_mean_next, tmp10_mean)
            tmp10_m2 = tl.where(rmask & xmask, tmp10_m2_next, tmp10_m2)
            tmp10_weight = tl.where(rmask & xmask, tmp10_weight_next, tmp10_weight)
            tl.store(in_out_ptr0 + (r1 + (2560*x0)), tmp8, rmask & xmask)
        tmp10_tmp, tmp11_tmp, tmp12_tmp = triton_helpers.welford(
            tmp10_mean, tmp10_m2, tmp10_weight, 1
        )
        tmp10 = tmp10_tmp[:, None]
        tmp11 = tmp11_tmp[:, None]
        tmp12 = tmp12_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp13 = tl.load(in_out_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr5 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp14 = tmp13 - tmp10
            tmp15 = 2560.0
            tmp16 = tmp11 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op597: ExternKernelSchedulerNode(ExternKernelOut)
op597.writes = [StarDep(name='buf597', mode=None)]
op597.unmet_dependencies = [StarDep(name='buf596', mode=None)]
op597.met_dependencies = [StarDep(name='arg383_1', mode=None)]
op597.outputs = [
    buf597: ExternKernelOut
    buf597.layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
    buf597.users = [NodeUser(node=SchedulerNode(name='op598'), can_inplace=True, is_weak=False)]
]
op597.node.kernel = extern_kernels.mm


op598: SchedulerNode(ComputedBuffer)
op598.writes = [MemoryDep('buf598', c0, {c0: 5242880}, None)]
op598.unmet_dependencies = [MemoryDep('buf597', c0, {c0: 5242880}, None)]
op598.met_dependencies = [MemoryDep('arg384_1', c1, {c0: 512, c1: 10240}, None)]
op598.outputs = [
    buf598: ComputedBuffer
    buf598.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
    buf598.users = [NodeUser(node=ExternKernelSchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op598.group.device = cuda:0
op598.group.iteration = (5242880, 1)
op598.sizes = ([512, 10240], [])
buf597_layout = FixedLayout('cuda', torch.float32, size=[512, 10240], stride=[10240, 1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[10240], stride=[1])
buf598_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 10240], stride=[1310720, 10240, 1])
class op598_loop_body:
    var_ranges = {z0: 512, z1: 10240}
    index0 = 10240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf597', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg384_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf597', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg384_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf598', get_index_4, mul_2, None)
        return store
op598 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 5242880
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 10240
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op599: ExternKernelSchedulerNode(ExternKernelOut)
op599.writes = [StarDep(name='buf599', mode=None)]
op599.unmet_dependencies = [StarDep(name='buf598', mode=None)]
op599.met_dependencies = [StarDep(name='arg385_1', mode=None)]
op599.outputs = [
    buf599: ExternKernelOut
    buf599.layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
    buf599.users = [
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
]
op599.node.kernel = extern_kernels.mm


op600_op601_op603: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op600_op601_op603.writes = 
    [   MemoryDep('buf600', c0, {c0: 512}, None),
        MemoryDep('buf601', c0, {c0: 512}, None),
        MemoryDep('buf603', c0, {c0: 1310720}, None)]
op600_op601_op603.unmet_dependencies = 
    [   MemoryDep('buf592', c0, {c0: 1310720}, None),
        MemoryDep('buf599', c0, {c0: 1310720}, None)]
op600_op601_op603.met_dependencies = 
    [   MemoryDep('arg386_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg387_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg388_1', c1, {c0: 512, c1: 2560}, None)]
op600_op601_op603.outputs = [
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf600.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False)]
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf601.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False)]
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf603.users = [NodeUser(node=ExternKernelSchedulerNode(name='op604'), can_inplace=False, is_weak=False)]
]
op600_op601_op603.snodes[0] =
op600: SchedulerNode(ComputedBuffer)
op600.writes = [MemoryDep('buf600', c0, {c0: 512}, None)]
op600.unmet_dependencies = 
    [   MemoryDep('buf592', c0, {c0: 1310720}, None),
        MemoryDep('buf599', c0, {c0: 1310720}, None)]
op600.met_dependencies = [MemoryDep('arg386_1', c1, {c0: 512, c1: 2560}, None)]
op600.outputs = [
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf600.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False)]
]
op600.group.device = cuda:0
op600.group.iteration = (512, 2560)
op600.sizes = ([512], [2560])
buf592_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op600_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf599', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg386_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf600', get_index_3, getitem)
        return store_reduction
op600 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp6, xmask)
op600_op601_op603.snodes[1] =
op601: SchedulerNode(ComputedBuffer)
op601.writes = [MemoryDep('buf601', c0, {c0: 512}, None)]
op601.unmet_dependencies = 
    [   MemoryDep('buf592', c0, {c0: 1310720}, None),
        MemoryDep('buf599', c0, {c0: 1310720}, None)]
op601.met_dependencies = [MemoryDep('arg386_1', c1, {c0: 512, c1: 2560}, None)]
op601.outputs = [
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
    buf601.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False)]
]
op601.group.device = cuda:0
op601.group.iteration = (512, 2560)
op601.sizes = ([512], [2560])
buf592_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf601_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
class op601_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf599', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg386_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf601', get_index_3, getitem_1)
        return store_reduction
op601 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op600_op601_op603.snodes[2] =
op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 1310720}, None)]
op603.unmet_dependencies = 
    [   MemoryDep('buf592', c0, {c0: 1310720}, None),
        MemoryDep('buf599', c0, {c0: 1310720}, None),
        MemoryDep('buf600', c0, {c0: 512}, None),
        MemoryDep('buf601', c0, {c0: 512}, None)]
op603.met_dependencies = 
    [   MemoryDep('arg386_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg387_1', c1, {c0: 512, c1: 2560}, None),
        MemoryDep('arg388_1', c1, {c0: 512, c1: 2560}, None)]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
    buf603.users = [NodeUser(node=ExternKernelSchedulerNode(name='op604'), can_inplace=False, is_weak=False)]
]
op603.group.device = cuda:0
op603.group.iteration = (1310720, 1)
op603.sizes = ([512, 2560], [])
buf592_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[512, 2560], stride=[2560, 1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
buf601_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 1], stride=[128, 1, 512])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[2560], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[4, 128, 2560], stride=[327680, 2560, 1])
class op603_loop_body:
    var_ranges = {z0: 512, z1: 2560}
    index0 = 2560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf599', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg386_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf600', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf601', get_index_4)
        constant = ops.constant(2560.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg387_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg388_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf603', get_index_7, add_3, None)
        return store
op603 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1310720
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 2560
        x1 = (xindex // 2560)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp4 = tmp0 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 2560.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-05
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op600_op601_op603 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 2560
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp6_mean = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_m2 = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        tmp6_weight = tl.zeros([XBLOCK, RBLOCK], tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp1 + tmp2
            tmp4 = tmp0 + tmp3
            tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
            tmp6_mean_next, tmp6_m2_next, tmp6_weight_next = triton_helpers.welford_reduce(
                tmp5, tmp6_mean, tmp6_m2, tmp6_weight, roffset == 0
            )
            tmp6_mean = tl.where(rmask & xmask, tmp6_mean_next, tmp6_mean)
            tmp6_m2 = tl.where(rmask & xmask, tmp6_m2_next, tmp6_m2)
            tmp6_weight = tl.where(rmask & xmask, tmp6_weight_next, tmp6_weight)
        tmp6_tmp, tmp7_tmp, tmp8_tmp = triton_helpers.welford(
            tmp6_mean, tmp6_m2, tmp6_weight, 1
        )
        tmp6 = tmp6_tmp[:, None]
        tmp7 = tmp7_tmp[:, None]
        tmp8 = tmp8_tmp[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp9 = tl.load(in_ptr0 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp10 = tl.load(in_ptr1 + (r1 + (2560*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp21 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp23 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 + tmp11
            tmp13 = tmp9 + tmp12
            tmp14 = tmp13 - tmp6
            tmp15 = 2560.0
            tmp16 = tmp7 / tmp15
            tmp17 = 1e-05
            tmp18 = tmp16 + tmp17
            tmp19 = libdevice.rsqrt(tmp18)
            tmp20 = tmp14 * tmp19
            tmp22 = tmp20 * tmp21
            tmp24 = tmp22 + tmp23
            tl.store(out_ptr2 + (r1 + (2560*x0)), tmp24, rmask & xmask)


op604: ExternKernelSchedulerNode(ExternKernelOut)
op604.writes = [StarDep(name='buf604', mode=None)]
op604.unmet_dependencies = [StarDep(name='buf603', mode=None)]
op604.met_dependencies = [StarDep(name='arg1_1', mode=None)]
op604.outputs = [
    buf604: ExternKernelOut
    buf604.layout = FixedLayout('cuda', torch.float32, size=[512, 8008], stride=[8032, 1])
    buf604.users = [
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op604.node.kernel = extern_kernels.mm


op605_op606: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op605_op606.writes = 
    [   MemoryDep('buf605', c0, {c0: 512}, None),
        MemoryDep('buf606', c0, {c0: 512}, None)]
op605_op606.unmet_dependencies = [MemoryDep('buf604', 8032*c0 + c1, {c0: 512, c1: 8008}, None)]
op605_op606.met_dependencies = []
op605_op606.outputs = [
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 512])
    buf605.users = [
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
    ]
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 512])
    buf606.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op605_op606.snodes[0] =
op605: SchedulerNode(ComputedBuffer)
op605.writes = [MemoryDep('buf605', c0, {c0: 512}, None)]
op605.unmet_dependencies = [MemoryDep('buf604', 8032*c0 + c1, {c0: 512, c1: 8008}, None)]
op605.met_dependencies = []
op605.outputs = [
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 512])
    buf605.users = [
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
    ]
]
op605.group.device = cuda:0
op605.group.iteration = (512, 8008)
op605.sizes = ([512], [8008])
buf604_layout = FixedLayout('cuda', torch.float32, size=[512, 8008], stride=[8032, 1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 512])
class op605_loop_body:
    var_ranges = {z0: 512, z1: 8008}
    index0 = 8032*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf605', get_index_1, reduction)
        return store_reduction
op605 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 8008
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (8032*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask & xmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
op605_op606.snodes[1] =
op606: SchedulerNode(ComputedBuffer)
op606.writes = [MemoryDep('buf606', c0, {c0: 512}, None)]
op606.unmet_dependencies = 
    [   MemoryDep('buf604', 8032*c0 + c1, {c0: 512, c1: 8008}, None),
        MemoryDep('buf605', c0, {c0: 512}, None)]
op606.met_dependencies = []
op606.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 512])
    buf606.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op606.group.device = cuda:0
op606.group.iteration = (512, 8008)
op606.sizes = ([512], [8008])
buf604_layout = FixedLayout('cuda', torch.float32, size=[512, 8008], stride=[8032, 1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 512])
buf606_layout = FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 512])
class op606_loop_body:
    var_ranges = {z0: 512, z1: 8008}
    index0 = 8032*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf605', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf606', get_index_2, reduction)
        return store_reduction
op606 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 8008
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (8032*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask & xmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, xmask)
op605_op606 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[512, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 512
        rnumel = 8008
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (8032*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask & xmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, xmask)
        _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp4 = tl.load(in_ptr0 + (r1 + (8032*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tmp4 - tmp2
            tmp6 = tl_math.exp(tmp5)
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = _tmp8 + tmp7
            _tmp8 = tl.where(rmask & xmask, tmp9, _tmp8)
        tmp8 = tl.sum(_tmp8, 1)[:, None]
        tl.store(out_ptr1 + (x0), tmp8, xmask)


op607_op608_op609: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op607_op608_op609.writes = 
    [   MemoryDep('buf607', 0, {}, None),
        MemoryDep('buf608', 0, {}, None),
        MemoryDep('buf609', 0, {}, None)]
op607_op608_op609.unmet_dependencies = 
    [   MemoryDep('buf604', 8032*c0 + tmp8, {c0: 512}, None),
        MemoryDep('buf605', c0, {c0: 512}, None),
        MemoryDep('buf606', c0, {c0: 512}, None)]
op607_op608_op609.met_dependencies = [MemoryDep('arg389_1', c0, {c0: 512}, None)]
op607_op608_op609.outputs = [
    buf607: ComputedBuffer
    buf607.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf607.users = [NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False)]
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf608.users = [NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False)]
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf609.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op607_op608_op609.snodes[0] =
op607: SchedulerNode(ComputedBuffer)
op607.writes = [MemoryDep('buf607', 0, {}, None)]
op607.unmet_dependencies = 
    [   MemoryDep('buf604', 8032*c0 + tmp8, {c0: 512}, None),
        MemoryDep('buf605', c0, {c0: 512}, None),
        MemoryDep('buf606', c0, {c0: 512}, None)]
op607.met_dependencies = [MemoryDep('arg389_1', c0, {c0: 512}, None)]
op607.outputs = [
    buf607: ComputedBuffer
    buf607.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf607.users = [NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False)]
]
op607.group.device = cuda:0
op607.group.iteration = (1, 512)
op607.sizes = ([], [512])
arg389_1_layout = FixedLayout('cuda', torch.int64, size=[4, 128], stride=[128, 1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[512, 8008], stride=[8032, 1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 512])
buf606_layout = FixedLayout('cuda', torch.float32, size=[512, 1], stride=[1, 512])
buf607_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op607_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = indirect0 + 8032*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg389_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg389_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg389_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf604', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf605', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf606', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf607', get_index_6, reduction)
        return store_reduction
op607 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 1
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp11 = tl.load(in_ptr2 + (r0), None)
        tmp13 = tl.load(in_ptr3 + (r0), None)
        tmp1 = tl.full([1], -100, tl.int64)
        tmp2 = tmp0 != tmp1
        tmp3 = tl.full([1], 0, tl.int64)
        tmp4 = tl.where(tmp2, tmp0, tmp3)
        tmp5 = tl.full([RBLOCK], 8008, tl.int32)
        tmp6 = tmp4 + tmp5
        tmp7 = tmp4 < 0
        tmp8 = tl.where(tmp7, tmp6, tmp4)
        tl.device_assert((0 <= tmp8) & (tmp8 < 8008), "index out of bounds: 0 <= tmp8 < 8008")
        tmp10 = tl.load(in_ptr1 + (tmp8 + (8032*r0)), None, eviction_policy='evict_last')
        tmp12 = tmp10 - tmp11
        tmp14 = tl_math.log(tmp13)
        tmp15 = tmp12 - tmp14
        tmp16 = -tmp15
        tmp17 = 0.0
        tmp18 = tl.where(tmp2, tmp16, tmp17)
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (tl.full([1], 0, tl.int32)), tmp21, None)
op607_op608_op609.snodes[1] =
op608: SchedulerNode(ComputedBuffer)
op608.writes = [MemoryDep('buf608', 0, {}, None)]
op608.unmet_dependencies = []
op608.met_dependencies = [MemoryDep('arg389_1', c0, {c0: 512}, None)]
op608.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf608.users = [NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False)]
]
op608.group.device = cuda:0
op608.group.iteration = (1, 512)
op608.sizes = ([], [512])
arg389_1_layout = FixedLayout('cuda', torch.int64, size=[4, 128], stride=[128, 1])
buf608_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op608_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg389_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf608', get_index_1, reduction)
        return store_reduction
op608 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 1
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.full([1], -100, tl.int64)
        tmp2 = tmp0 != tmp1
        tmp3 = tmp2.to(tl.int64)
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (tl.full([1], 0, tl.int32)), tmp6, None)
op607_op608_op609.snodes[2] =
op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', 0, {}, None)]
op609.unmet_dependencies = [MemoryDep('buf607', 0, {}, None), MemoryDep('buf608', 0, {}, None)]
op609.met_dependencies = []
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf609.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op609.group.device = cuda:0
op609.group.iteration = (1, 1)
op609.sizes = ([], [])
buf607_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf608_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf609_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op609_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf608', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf609', get_index_2, truediv, None)
        return store
op609 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)
op607_op608_op609 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel):
        xnumel = 1
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp11 = tl.load(in_ptr2 + (r0), None)
        tmp13 = tl.load(in_ptr3 + (r0), None)
        tmp1 = tl.full([1], -100, tl.int64)
        tmp2 = tmp0 != tmp1
        tmp3 = tl.full([1], 0, tl.int64)
        tmp4 = tl.where(tmp2, tmp0, tmp3)
        tmp5 = tl.full([RBLOCK], 8008, tl.int32)
        tmp6 = tmp4 + tmp5
        tmp7 = tmp4 < 0
        tmp8 = tl.where(tmp7, tmp6, tmp4)
        tl.device_assert((0 <= tmp8) & (tmp8 < 8008), "index out of bounds: 0 <= tmp8 < 8008")
        tmp10 = tl.load(in_ptr1 + (tmp8 + (8032*r0)), None, eviction_policy='evict_last')
        tmp12 = tmp10 - tmp11
        tmp14 = tl_math.log(tmp13)
        tmp15 = tmp12 - tmp14
        tmp16 = -tmp15
        tmp17 = 0.0
        tmp18 = tl.where(tmp2, tmp16, tmp17)
        tmp19 = tl.broadcast_to(tmp18, [RBLOCK])
        tmp21 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tmp22 = tmp2.to(tl.int64)
        tmp23 = tl.broadcast_to(tmp22, [RBLOCK])
        tmp25 = triton_helpers.promote_to_tensor(tl.sum(tmp23, 0))
        tmp26 = tmp25.to(tl.float32)
        tmp27 = tmp21 / tmp26
        tl.debug_barrier()
        tl.store(in_out_ptr0 + (tl.full([1], 0, tl.int32)), tmp27, None)



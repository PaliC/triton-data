op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 147*c0 + c1 + 3*c2, {c0: 16, c1: 3, c2: 49}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 2352}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 3, 7, 7], stride=[147, 1, 21, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (2352, 1)
op1.sizes = ([16, 3, 49], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 7, 7], stride=[147, 49, 7, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 7, 7], stride=[147, 1, 21, 3])
class op1_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 49}
    index0 = 147*z0 + 49*z1 + z2
    index1 = 147*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 224, 224], stride=[802816, 1, 3584, 16])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 6422528}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 6422528}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 401408, c1: 16}, None),
        MemoryDep('arg3_1', c1, {c0: 401408, c1: 16}, None),
        MemoryDep('arg4_1', c1, {c0: 401408, c1: 16}, None),
        MemoryDep('arg5_1', c1, {c0: 401408, c1: 16}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 224, 224], stride=[802816, 1, 3584, 16])
    buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (6422528, 1)
op3.sizes = ([401408, 16], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 224, 224], stride=[802816, 1, 3584, 16])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 224, 224], stride=[802816, 1, 3584, 16])
class op3_loop_body:
    var_ranges = {z0: 401408, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, relu, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', 144*c0 + c1 + 16*c2, {c0: 16, c1: 16, c2: 9}, None)]
op4.unmet_dependencies = []
op4.met_dependencies = [MemoryDep('arg6_1', c0, {c0: 2304}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[16, 16, 3, 3], stride=[144, 1, 48, 16])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (2304, 1)
op4.sizes = ([16, 16, 9], [])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 3, 3], stride=[144, 9, 3, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[16, 16, 3, 3], stride=[144, 1, 48, 16])
class op4_loop_body:
    var_ranges = {z0: 16, z1: 16, z2: 9}
    index0 = 144*z0 + 9*z1 + z2
    index1 = 144*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg6_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf4', get_index_1, load, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None), StarDep(name='buf4', mode=None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 224, 224], stride=[802816, 1, 3584, 16])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 6422528}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 6422528}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 401408, c1: 16}, None),
        MemoryDep('arg7_1', c1, {c0: 401408, c1: 16}, None),
        MemoryDep('arg8_1', c1, {c0: 401408, c1: 16}, None),
        MemoryDep('arg9_1', c1, {c0: 401408, c1: 16}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 224, 224], stride=[802816, 1, 3584, 16])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (6422528, 1)
op6.sizes = ([401408, 16], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 224, 224], stride=[802816, 1, 3584, 16])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 224, 224], stride=[802816, 1, 3584, 16])
class op6_loop_body:
    var_ranges = {z0: 401408, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, relu, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 144*c0 + c1 + 16*c2, {c0: 32, c1: 16, c2: 9}, None)]
op7.unmet_dependencies = []
op7.met_dependencies = [MemoryDep('arg11_1', c0, {c0: 4608}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 3, 3], stride=[144, 1, 48, 16])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (4608, 1)
op7.sizes = ([32, 16, 9], [])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 3, 3], stride=[144, 9, 3, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 3, 3], stride=[144, 1, 48, 16])
class op7_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 9}
    index0 = 144*z0 + 9*z1 + z2
    index1 = 144*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg11_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, load, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelAlloc)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelAlloc
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
]
op8.node.kernel = extern_kernels.convolution


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 3211264}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 3211264}, None)]
op9.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg13_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg14_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg15_1', c1, {c0: 100352, c1: 32}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (3211264, 1)
op9.sizes = ([100352, 32], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op9_loop_body:
    var_ranges = {z0: 100352, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf9', get_index_5, relu, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 6422528}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 6422528}, None)]
op11.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg23_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg24_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg25_1', c1, {c0: 100352, c1: 64}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (6422528, 1)
op11.sizes = ([100352, 64], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
class op11_loop_body:
    var_ranges = {z0: 100352, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf11', get_index_5, relu, None)
        return store


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op12.unmet_dependencies = []
op12.met_dependencies = [MemoryDep('arg26_1', c0, {c0: 36864}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (36864, 1)
op12.sizes = ([64, 64, 9], [])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op12_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg26_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, load, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf12', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 1605632}, None)]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 1605632}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg28_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg29_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg30_1', c1, {c0: 25088, c1: 64}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (1605632, 1)
op14.sizes = ([25088, 64], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op14_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf14', get_index_5, relu, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelAlloc)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelAlloc
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf15.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op15.node.kernel = extern_kernels.convolution


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 802816}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf9', 7168*c0 + 64*c1 + c2 + 32, {c0: 448, c1: 56, c2: 32}, None),
        MemoryDep('buf9', 7168*c0 + 64*c1 + c2 + 3584, {c0: 448, c1: 56, c2: 32}, None),
        MemoryDep('buf9', 7168*c0 + 64*c1 + c2 + 3616, {c0: 448, c1: 56, c2: 32}, None),
        MemoryDep('buf9', 7168*c0 + 64*c1 + c2, {c0: 448, c1: 56, c2: 32}, None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (802816, 1)
op16.sizes = ([448, 56, 32], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
class op16_loop_body:
    var_ranges = {z0: 448, z1: 56, z2: 32}
    index0 = 7168*z0 + 64*z1 + z2
    index1 = 7168*z0 + 64*z1 + z2 + 32
    index2 = 7168*z0 + 64*z1 + z2 + 3584
    index3 = 7168*z0 + 64*z1 + z2 + 3616
    index4 = 1792*z0 + 32*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf9', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf9', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf9', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf16', get_index_4, maximum_2, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelAlloc)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op17.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelAlloc
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.node.kernel = extern_kernels.convolution


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 3211264}, None)]
op18.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 3211264}, None),
        MemoryDep('buf17', c0, {c0: 3211264}, None)]
op18.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg18_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg19_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg20_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg32_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg33_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg34_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg35_1', c1, {c0: 25088, c1: 128}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (3211264, 1)
op18.sizes = ([25088, 128], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
class op18_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg33_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf17', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg17_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg18_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg19_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg20_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf18', get_index_10, add_4, None)
        return store


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 3211264}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 3211264}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (3211264, 1)
op19.sizes = ([3211264], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
class op19_loop_body:
    var_ranges = {z0: 3211264}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf19', get_index_1, relu, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelAlloc)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelAlloc
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.node.kernel = extern_kernels.convolution


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 1605632}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 1605632}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg39_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg40_1', c1, {c0: 25088, c1: 64}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (1605632, 1)
op21.sizes = ([25088, 64], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op21_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, relu, None)
        return store


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op22.unmet_dependencies = []
op22.met_dependencies = [MemoryDep('arg41_1', c0, {c0: 36864}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (36864, 1)
op22.sizes = ([64, 64, 9], [])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op22_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg41_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf22', get_index_1, load, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelAlloc)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf21', mode=None), StarDep(name='buf22', mode=None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ExternKernelAlloc
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.convolution


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 1605632}, None)]
op24.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 1605632}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg44_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg45_1', c1, {c0: 25088, c1: 64}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (1605632, 1)
op24.sizes = ([25088, 64], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op24_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf24', get_index_5, relu, None)
        return store


op25: ExternKernelSchedulerNode(ExternKernelAlloc)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelAlloc
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.node.kernel = extern_kernels.convolution


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', 256*c0 + c1, {c0: 25088, c1: 128}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 3211264}, None),
        MemoryDep('buf25', c0, {c0: 3211264}, None)]
op26.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg48_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg49_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg50_1', c1, {c0: 25088, c1: 128}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = NonOwningLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[802816, 1, 14336, 256])
    buf26.aliases = ['buf28']
    buf26.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (3211264, 1)
op26.sizes = ([25088, 128], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf26_layout = NonOwningLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[802816, 1, 14336, 256])
class op26_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf19', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf26', get_index_6, relu, None)
        return store


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', 256*c0 + c1, {c0: 25088, c1: 128}, None)]
op27.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 3211264}, None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = NonOwningLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[802816, 1, 14336, 256])
    buf27.aliases = ['buf28']
    buf27.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (3211264, 1)
op27.sizes = ([25088, 128], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf27_layout = NonOwningLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[802816, 1, 14336, 256])
class op27_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf27', get_index_1, load, None)
        return store


op28: NopKernelSchedulerNode(ConcatKernel)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf26', mode=None), StarDep(name='buf27', mode=None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ConcatKernel
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=(802816, 1, 14336, 256))
    buf28.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]


op29: ExternKernelSchedulerNode(ExternKernelAlloc)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelAlloc
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.node.kernel = extern_kernels.convolution


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 3211264}, None)]
op30.unmet_dependencies = 
    [   MemoryDep('buf26', 256*c0 + c1, {c0: 25088, c1: 128}, None),
        MemoryDep('buf29', c0, {c0: 3211264}, None)]
op30.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg53_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg54_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg55_1', c1, {c0: 25088, c1: 128}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf30.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
    ]
]
op30.group.device = cuda:0
op30.group.iteration = (3211264, 1)
op30.sizes = ([25088, 128], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf26_layout = NonOwningLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[802816, 1, 14336, 256])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
class op30_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf26', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf30', get_index_6, relu, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelAlloc)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelAlloc
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False)]
]
op31.node.kernel = extern_kernels.convolution


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 3211264}, None)]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 3211264}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg63_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg64_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg65_1', c1, {c0: 25088, c1: 128}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (3211264, 1)
op32.sizes = ([25088, 128], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
class op32_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf32', get_index_5, relu, None)
        return store


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op33.unmet_dependencies = []
op33.met_dependencies = [MemoryDep('arg66_1', c0, {c0: 147456}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (147456, 1)
op33.sizes = ([128, 128, 9], [])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op33_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg66_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf33', get_index_1, load, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelAlloc)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf32', mode=None), StarDep(name='buf33', mode=None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ExternKernelAlloc
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op34.node.kernel = extern_kernels.convolution


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 802816}, None)]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 802816}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg68_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg69_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg70_1', c1, {c0: 6272, c1: 128}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (802816, 1)
op35.sizes = ([6272, 128], [])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op35_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg70_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf35', get_index_5, relu, None)
        return store


op36: ExternKernelSchedulerNode(ExternKernelAlloc)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelAlloc
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf36.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op36.node.kernel = extern_kernels.convolution


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 802816}, None)]
op37.unmet_dependencies = 
    [   MemoryDep('buf30', 14336*c0 + 256*c1 + c2 + 128, {c0: 224, c1: 28, c2: 128}, None),
        MemoryDep('buf30', 14336*c0 + 256*c1 + c2 + 7168, {c0: 224, c1: 28, c2: 128}, None),
        MemoryDep('buf30', 14336*c0 + 256*c1 + c2 + 7296, {c0: 224, c1: 28, c2: 128}, None),
        MemoryDep('buf30', 14336*c0 + 256*c1 + c2, {c0: 224, c1: 28, c2: 128}, None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (802816, 1)
op37.sizes = ([224, 28, 128], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op37_loop_body:
    var_ranges = {z0: 224, z1: 28, z2: 128}
    index0 = 14336*z0 + 256*z1 + z2
    index1 = 14336*z0 + 256*z1 + z2 + 128
    index2 = 14336*z0 + 256*z1 + z2 + 7168
    index3 = 14336*z0 + 256*z1 + z2 + 7296
    index4 = 3584*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf30', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf30', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf30', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf37', get_index_4, maximum_2, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelAlloc)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelAlloc
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.convolution


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 1605632}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 1605632}, None),
        MemoryDep('buf38', c0, {c0: 1605632}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg58_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg59_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg60_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg72_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg73_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg74_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg75_1', c1, {c0: 6272, c1: 256}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (1605632, 1)
op39.sizes = ([6272, 256], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op39_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf38', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg57_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg58_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg59_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg60_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf39', get_index_10, add_4, None)
        return store


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 1605632}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 1605632}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf40.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
    ]
]
op40.group.device = cuda:0
op40.group.iteration = (1605632, 1)
op40.sizes = ([1605632], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op40_loop_body:
    var_ranges = {z0: 1605632}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf40', get_index_1, relu, None)
        return store


op41: ExternKernelSchedulerNode(ExternKernelAlloc)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelAlloc
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False)]
]
op41.node.kernel = extern_kernels.convolution


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 802816}, None)]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 802816}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg78_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg79_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg80_1', c1, {c0: 6272, c1: 128}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (802816, 1)
op42.sizes = ([6272, 128], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op42_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg78_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf42', get_index_5, relu, None)
        return store


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op43.unmet_dependencies = []
op43.met_dependencies = [MemoryDep('arg81_1', c0, {c0: 147456}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (147456, 1)
op43.sizes = ([128, 128, 9], [])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op43_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg81_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf43', get_index_1, load, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelAlloc)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf42', mode=None), StarDep(name='buf43', mode=None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ExternKernelAlloc
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.convolution


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 802816}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 802816}, None)]
op45.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg83_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg84_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg85_1', c1, {c0: 6272, c1: 128}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (802816, 1)
op45.sizes = ([6272, 128], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op45_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf45', get_index_5, relu, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.node.kernel = extern_kernels.convolution


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', 512*c0 + c1, {c0: 6272, c1: 256}, None)]
op47.unmet_dependencies = 
    [   MemoryDep('buf40', c0, {c0: 1605632}, None),
        MemoryDep('buf46', c0, {c0: 1605632}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg88_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg89_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg90_1', c1, {c0: 6272, c1: 256}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[401408, 1, 14336, 512])
    buf47.aliases = ['buf49']
    buf47.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (1605632, 1)
op47.sizes = ([6272, 256], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf47_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[401408, 1, 14336, 512])
class op47_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg88_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf40', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf47', get_index_6, relu, None)
        return store


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', 512*c0 + c1, {c0: 6272, c1: 256}, None)]
op48.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 1605632}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[401408, 1, 14336, 512])
    buf48.aliases = ['buf49']
    buf48.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (1605632, 1)
op48.sizes = ([6272, 256], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf48_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[401408, 1, 14336, 512])
class op48_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf48', get_index_1, load, None)
        return store


op49: NopKernelSchedulerNode(ConcatKernel)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf47', mode=None), StarDep(name='buf48', mode=None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ConcatKernel
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=(401408, 1, 14336, 512))
    buf49.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
]


op50: ExternKernelSchedulerNode(ExternKernelAlloc)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelAlloc
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.node.kernel = extern_kernels.convolution


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 1605632}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf47', 512*c0 + c1, {c0: 6272, c1: 256}, None),
        MemoryDep('buf50', c0, {c0: 1605632}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg93_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg94_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg95_1', c1, {c0: 6272, c1: 256}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf51.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (1605632, 1)
op51.sizes = ([6272, 256], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf47_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[401408, 1, 14336, 512])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op51_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf47', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf51', get_index_6, relu, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelAlloc)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op52.outputs = [
    buf52: ExternKernelAlloc
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf52.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False)]
]
op52.node.kernel = extern_kernels.convolution


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 802816}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 802816}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg97_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg98_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg99_1', c1, {c0: 6272, c1: 128}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (802816, 1)
op53.sizes = ([6272, 128], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op53_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf53', get_index_5, relu, None)
        return store


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op54.unmet_dependencies = []
op54.met_dependencies = [MemoryDep('arg101_1', c0, {c0: 147456}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (147456, 1)
op54.sizes = ([128, 128, 9], [])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op54_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg101_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf54', get_index_1, load, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelAlloc)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None), StarDep(name='buf54', mode=None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ExternKernelAlloc
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.node.kernel = extern_kernels.convolution


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 802816}, None)]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 802816}, None)]
op56.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg103_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg104_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg105_1', c1, {c0: 6272, c1: 128}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (802816, 1)
op56.sizes = ([6272, 128], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op56_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg105_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf56', get_index_5, relu, None)
        return store


op57: ExternKernelSchedulerNode(ExternKernelAlloc)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelAlloc
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.node.kernel = extern_kernels.convolution


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 1605632}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 1605632}, None),
        MemoryDep('buf57', c0, {c0: 1605632}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg108_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg109_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg110_1', c1, {c0: 6272, c1: 256}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf58.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (1605632, 1)
op58.sizes = ([6272, 256], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op58_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf51', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf58', get_index_6, relu, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelAlloc)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelAlloc
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.convolution


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 802816}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 802816}, None)]
op60.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg113_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg114_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg115_1', c1, {c0: 6272, c1: 128}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (802816, 1)
op60.sizes = ([6272, 128], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op60_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg113_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf60', get_index_5, relu, None)
        return store


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op61.unmet_dependencies = []
op61.met_dependencies = [MemoryDep('arg116_1', c0, {c0: 147456}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (147456, 1)
op61.sizes = ([128, 128, 9], [])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op61_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg116_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf61', get_index_1, load, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelAlloc)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf60', mode=None), StarDep(name='buf61', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ExternKernelAlloc
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.node.kernel = extern_kernels.convolution


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 802816}, None)]
op63.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 802816}, None)]
op63.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg118_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg119_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg120_1', c1, {c0: 6272, c1: 128}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (802816, 1)
op63.sizes = ([6272, 128], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op63_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg118_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg119_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg120_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf63', get_index_5, relu, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelAlloc)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelAlloc
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.node.kernel = extern_kernels.convolution


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', 768*c0 + c1, {c0: 6272, c1: 256}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 1605632}, None),
        MemoryDep('buf64', c0, {c0: 1605632}, None)]
op65.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg123_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg124_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg125_1', c1, {c0: 6272, c1: 256}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[602112, 1, 21504, 768])
    buf65.aliases = ['buf68']
    buf65.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
    ]
]
op65.group.device = cuda:0
op65.group.iteration = (1605632, 1)
op65.sizes = ([6272, 256], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf65_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[602112, 1, 21504, 768])
class op65_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg123_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf58', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf65', get_index_6, relu, None)
        return store


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', 768*c0 + c1, {c0: 6272, c1: 256}, None)]
op66.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 1605632}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[602112, 1, 21504, 768])
    buf66.aliases = ['buf68']
    buf66.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (1605632, 1)
op66.sizes = ([6272, 256], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf66_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[602112, 1, 21504, 768])
class op66_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf66', get_index_1, load, None)
        return store


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', 768*c0 + c1, {c0: 6272, c1: 256}, None)]
op67.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 1605632}, None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[602112, 1, 21504, 768])
    buf67.aliases = ['buf68']
    buf67.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
    ]
]
op67.group.device = cuda:0
op67.group.iteration = (1605632, 1)
op67.sizes = ([6272, 256], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf67_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[602112, 1, 21504, 768])
class op67_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf67', get_index_1, load, None)
        return store


op68: NopKernelSchedulerNode(ConcatKernel)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = 
    [   StarDep(name='buf65', mode=None),
        StarDep(name='buf66', mode=None),
        StarDep(name='buf67', mode=None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ConcatKernel
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 28, 28], stride=(602112, 1, 21504, 768))
    buf68.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
    ]
]


op69: ExternKernelSchedulerNode(ExternKernelAlloc)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelAlloc
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.node.kernel = extern_kernels.convolution


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 1605632}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf65', 768*c0 + c1, {c0: 6272, c1: 256}, None),
        MemoryDep('buf69', c0, {c0: 1605632}, None)]
op70.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg128_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg129_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg130_1', c1, {c0: 6272, c1: 256}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf70.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (1605632, 1)
op70.sizes = ([6272, 256], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf65_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[602112, 1, 21504, 768])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op70_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg130_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf65', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf70', get_index_6, relu, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.convolution


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 802816}, None)]
op72.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 802816}, None)]
op72.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg133_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg134_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg135_1', c1, {c0: 6272, c1: 128}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (802816, 1)
op72.sizes = ([6272, 128], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op72_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg133_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf72', get_index_5, relu, None)
        return store


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op73.unmet_dependencies = []
op73.met_dependencies = [MemoryDep('arg136_1', c0, {c0: 147456}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (147456, 1)
op73.sizes = ([128, 128, 9], [])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op73_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg136_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf73', get_index_1, load, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelAlloc)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf72', mode=None), StarDep(name='buf73', mode=None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ExternKernelAlloc
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.convolution


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 802816}, None)]
op75.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 802816}, None)]
op75.met_dependencies = 
    [   MemoryDep('arg137_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg138_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg139_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg140_1', c1, {c0: 6272, c1: 128}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (802816, 1)
op75.sizes = ([6272, 128], [])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op75_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf75', get_index_5, relu, None)
        return store


op76: ExternKernelSchedulerNode(ExternKernelAlloc)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op76.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelAlloc
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.node.kernel = extern_kernels.convolution


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 1605632}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 1605632}, None),
        MemoryDep('buf76', c0, {c0: 1605632}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg143_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg144_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg145_1', c1, {c0: 6272, c1: 256}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (1605632, 1)
op77.sizes = ([6272, 256], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op77_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg145_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf70', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf77', get_index_6, relu, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelAlloc)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelAlloc
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.convolution


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 802816}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 802816}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg148_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg149_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg150_1', c1, {c0: 6272, c1: 128}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (802816, 1)
op79.sizes = ([6272, 128], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op79_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg149_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg150_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf79', get_index_5, relu, None)
        return store


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op80.unmet_dependencies = []
op80.met_dependencies = [MemoryDep('arg151_1', c0, {c0: 147456}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf80.users = [NodeUser(node=ExternKernelSchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (147456, 1)
op80.sizes = ([128, 128, 9], [])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op80_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg151_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf80', get_index_1, load, None)
        return store


op81: ExternKernelSchedulerNode(ExternKernelAlloc)
op81.writes = [StarDep(name='buf81', mode=None)]
op81.unmet_dependencies = [StarDep(name='buf79', mode=None), StarDep(name='buf80', mode=None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ExternKernelAlloc
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False)]
]
op81.node.kernel = extern_kernels.convolution


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 802816}, None)]
op82.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 802816}, None)]
op82.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg153_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg154_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg155_1', c1, {c0: 6272, c1: 128}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (802816, 1)
op82.sizes = ([6272, 128], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op82_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg153_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg155_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf82', get_index_5, relu, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelAlloc)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelAlloc
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.node.kernel = extern_kernels.convolution


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', 512*c0 + c1, {c0: 6272, c1: 256}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1605632}, None),
        MemoryDep('buf83', c0, {c0: 1605632}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg158_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg159_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg160_1', c1, {c0: 6272, c1: 256}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[401408, 1, 14336, 512])
    buf84.aliases = ['buf86']
    buf84.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
]
op84.group.device = cuda:0
op84.group.iteration = (1605632, 1)
op84.sizes = ([6272, 256], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf84_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[401408, 1, 14336, 512])
class op84_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg158_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg159_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg160_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf77', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf84', get_index_6, relu, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', 512*c0 + c1, {c0: 6272, c1: 256}, None)]
op85.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 1605632}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[401408, 1, 14336, 512])
    buf85.aliases = ['buf86']
    buf85.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
]
op85.group.device = cuda:0
op85.group.iteration = (1605632, 1)
op85.sizes = ([6272, 256], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf85_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[401408, 1, 14336, 512])
class op85_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf85', get_index_1, load, None)
        return store


op86: NopKernelSchedulerNode(ConcatKernel)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf84', mode=None), StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ConcatKernel
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=(401408, 1, 14336, 512))
    buf86.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
    ]
]


op87: ExternKernelSchedulerNode(ExternKernelAlloc)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op87.outputs = [
    buf87: ExternKernelAlloc
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op87.node.kernel = extern_kernels.convolution


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 1605632}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf84', 512*c0 + c1, {c0: 6272, c1: 256}, None),
        MemoryDep('buf87', c0, {c0: 1605632}, None)]
op88.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg163_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg164_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg165_1', c1, {c0: 6272, c1: 256}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf88.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
    ]
]
op88.group.device = cuda:0
op88.group.iteration = (1605632, 1)
op88.sizes = ([6272, 256], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf84_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[401408, 1, 14336, 512])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op88_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg164_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf84', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf88', get_index_6, relu, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelAlloc)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelAlloc
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False)]
]
op89.node.kernel = extern_kernels.convolution


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 802816}, None)]
op90.unmet_dependencies = [MemoryDep('buf89', c0, {c0: 802816}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg167_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg168_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg169_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg170_1', c1, {c0: 6272, c1: 128}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (802816, 1)
op90.sizes = ([6272, 128], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op90_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg168_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg169_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg170_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf90', get_index_5, relu, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op91.unmet_dependencies = []
op91.met_dependencies = [MemoryDep('arg171_1', c0, {c0: 147456}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (147456, 1)
op91.sizes = ([128, 128, 9], [])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op91_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg171_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf91', get_index_1, load, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelAlloc)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf90', mode=None), StarDep(name='buf91', mode=None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ExternKernelAlloc
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.convolution


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 802816}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 802816}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg173_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg174_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg175_1', c1, {c0: 6272, c1: 128}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (802816, 1)
op93.sizes = ([6272, 128], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op93_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg174_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg175_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf93', get_index_5, relu, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelAlloc)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelAlloc
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False)]
]
op94.node.kernel = extern_kernels.convolution


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 1605632}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf88', c0, {c0: 1605632}, None),
        MemoryDep('buf94', c0, {c0: 1605632}, None)]
op95.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg178_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg179_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg180_1', c1, {c0: 6272, c1: 256}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf95.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (1605632, 1)
op95.sizes = ([6272, 256], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op95_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg180_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf88', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf95', get_index_6, relu, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelAlloc)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelAlloc
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False)]
]
op96.node.kernel = extern_kernels.convolution


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 802816}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 802816}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg183_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg184_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg185_1', c1, {c0: 6272, c1: 128}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (802816, 1)
op97.sizes = ([6272, 128], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op97_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg183_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg184_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg185_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf97', get_index_5, relu, None)
        return store


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', 1152*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 9}, None)]
op98.unmet_dependencies = []
op98.met_dependencies = [MemoryDep('arg186_1', c0, {c0: 147456}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (147456, 1)
op98.sizes = ([128, 128, 9], [])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 1, 384, 128])
class op98_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg186_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf98', get_index_1, load, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelAlloc)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf97', mode=None), StarDep(name='buf98', mode=None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ExternKernelAlloc
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False)]
]
op99.node.kernel = extern_kernels.convolution


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 802816}, None)]
op100.unmet_dependencies = [MemoryDep('buf99', c0, {c0: 802816}, None)]
op100.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg188_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg189_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg190_1', c1, {c0: 6272, c1: 128}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (802816, 1)
op100.sizes = ([6272, 128], [])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op100_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg190_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf100', get_index_5, relu, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelAlloc)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op101.outputs = [
    buf101: ExternKernelAlloc
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.node.kernel = extern_kernels.convolution


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', 1152*c0 + c1, {c0: 6272, c1: 256}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 1605632}, None),
        MemoryDep('buf95', c0, {c0: 1605632}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg193_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg194_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg195_1', c1, {c0: 6272, c1: 256}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[903168, 1, 32256, 1152])
    buf102.aliases = ['buf107']
    buf102.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
    ]
]
op102.group.device = cuda:0
op102.group.iteration = (1605632, 1)
op102.sizes = ([6272, 256], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf102_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[903168, 1, 32256, 1152])
class op102_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = 1152*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg194_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg195_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf95', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf102', get_index_6, relu, None)
        return store


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', 1152*c0 + c1, {c0: 6272, c1: 256}, None)]
op103.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 1605632}, None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[903168, 1, 32256, 1152])
    buf103.aliases = ['buf107']
    buf103.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (1605632, 1)
op103.sizes = ([6272, 256], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf103_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[903168, 1, 32256, 1152])
class op103_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = 1152*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf103', get_index_1, load, None)
        return store


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', 1152*c0 + c1, {c0: 6272, c1: 128}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf30', 14336*c0 + 256*c1 + c2 + 128, {c0: 224, c1: 28, c2: 128}, None),
        MemoryDep('buf30', 14336*c0 + 256*c1 + c2 + 7168, {c0: 224, c1: 28, c2: 128}, None),
        MemoryDep('buf30', 14336*c0 + 256*c1 + c2 + 7296, {c0: 224, c1: 28, c2: 128}, None),
        MemoryDep('buf30', 14336*c0 + 256*c1 + c2, {c0: 224, c1: 28, c2: 128}, None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = NonOwningLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[903168, 1, 32256, 1152])
    buf104.aliases = ['buf107']
    buf104.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (802816, 1)
op104.sizes = ([224, 28, 128], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
buf104_layout = NonOwningLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[903168, 1, 32256, 1152])
class op104_loop_body:
    var_ranges = {z0: 224, z1: 28, z2: 128}
    index0 = 14336*z0 + 256*z1 + z2
    index1 = 14336*z0 + 256*z1 + z2 + 128
    index2 = 14336*z0 + 256*z1 + z2 + 7168
    index3 = 14336*z0 + 256*z1 + z2 + 7296
    index4 = 32256*z0 + 1152*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf30', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf30', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf30', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf104', get_index_4, maximum_2, None)
        return store


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', 1152*c0 + c1, {c0: 6272, c1: 256}, None)]
op105.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 1605632}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[903168, 1, 32256, 1152])
    buf105.aliases = ['buf107']
    buf105.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (1605632, 1)
op105.sizes = ([6272, 256], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf105_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[903168, 1, 32256, 1152])
class op105_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = 1152*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf105', get_index_1, load, None)
        return store


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', 1152*c0 + c1, {c0: 6272, c1: 256}, None)]
op106.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 1605632}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[903168, 1, 32256, 1152])
    buf106.aliases = ['buf107']
    buf106.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (1605632, 1)
op106.sizes = ([6272, 256], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf106_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[903168, 1, 32256, 1152])
class op106_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = 1152*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf106', get_index_1, load, None)
        return store


op107: NopKernelSchedulerNode(ConcatKernel)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = 
    [   StarDep(name='buf102', mode=None),
        StarDep(name='buf103', mode=None),
        StarDep(name='buf104', mode=None),
        StarDep(name='buf105', mode=None),
        StarDep(name='buf106', mode=None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ConcatKernel
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 28, 28], stride=(903168, 1, 32256, 1152))
    buf107.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
    ]
]


op108: ExternKernelSchedulerNode(ExternKernelAlloc)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op108.outputs = [
    buf108: ExternKernelAlloc
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
]
op108.node.kernel = extern_kernels.convolution


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 1605632}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf102', 1152*c0 + c1, {c0: 6272, c1: 256}, None),
        MemoryDep('buf108', c0, {c0: 1605632}, None)]
op109.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg198_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg199_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg200_1', c1, {c0: 6272, c1: 256}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf109.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (1605632, 1)
op109.sizes = ([6272, 256], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf102_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[903168, 1, 32256, 1152])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op109_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = 1152*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf102', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf109', get_index_6, relu, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg206_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.node.kernel = extern_kernels.convolution


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 1605632}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 1605632}, None)]
op111.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg208_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg209_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg210_1', c1, {c0: 6272, c1: 256}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (1605632, 1)
op111.sizes = ([6272, 256], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op111_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg207_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg209_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg210_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf111', get_index_5, relu, None)
        return store


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op112.unmet_dependencies = []
op112.met_dependencies = [MemoryDep('arg211_1', c0, {c0: 589824}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (589824, 1)
op112.sizes = ([256, 256, 9], [])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op112_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg211_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf112', get_index_1, load, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelAlloc)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf111', mode=None), StarDep(name='buf112', mode=None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ExternKernelAlloc
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.node.kernel = extern_kernels.convolution


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 401408}, None)]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 401408}, None)]
op114.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg213_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg214_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg215_1', c1, {c0: 1568, c1: 256}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (401408, 1)
op114.sizes = ([1568, 256], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op114_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg213_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg214_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg215_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf114', get_index_5, relu, None)
        return store


op115: ExternKernelSchedulerNode(ExternKernelAlloc)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelAlloc
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf115.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op115.node.kernel = extern_kernels.convolution


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 401408}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf109', 14336*c0 + 512*c1 + c2 + 256, {c0: 112, c1: 14, c2: 256}, None),
        MemoryDep('buf109', 14336*c0 + 512*c1 + c2 + 7168, {c0: 112, c1: 14, c2: 256}, None),
        MemoryDep('buf109', 14336*c0 + 512*c1 + c2 + 7424, {c0: 112, c1: 14, c2: 256}, None),
        MemoryDep('buf109', 14336*c0 + 512*c1 + c2, {c0: 112, c1: 14, c2: 256}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (401408, 1)
op116.sizes = ([112, 14, 256], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op116_loop_body:
    var_ranges = {z0: 112, z1: 14, z2: 256}
    index0 = 14336*z0 + 512*z1 + z2
    index1 = 14336*z0 + 512*z1 + z2 + 256
    index2 = 14336*z0 + 512*z1 + z2 + 7168
    index3 = 14336*z0 + 512*z1 + z2 + 7424
    index4 = 3584*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf109', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf109', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf109', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf116', get_index_4, maximum_2, None)
        return store


op117: ExternKernelSchedulerNode(ExternKernelAlloc)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelAlloc
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.convolution


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 802816}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 802816}, None),
        MemoryDep('buf117', c0, {c0: 802816}, None)]
op118.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg203_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg204_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg205_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg217_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg218_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg219_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg220_1', c1, {c0: 1568, c1: 512}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (802816, 1)
op118.sizes = ([1568, 512], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op118_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg218_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg220_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf117', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg202_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg203_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg204_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg205_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf118', get_index_10, add_4, None)
        return store


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 802816}, None)]
op119.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 802816}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf119.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
    ]
]
op119.group.device = cuda:0
op119.group.iteration = (802816, 1)
op119.sizes = ([802816], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op119_loop_body:
    var_ranges = {z0: 802816}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf119', get_index_1, relu, None)
        return store


op120: ExternKernelSchedulerNode(ExternKernelAlloc)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg221_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelAlloc
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op120.node.kernel = extern_kernels.convolution


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 401408}, None)]
op121.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 401408}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg222_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg223_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg224_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg225_1', c1, {c0: 1568, c1: 256}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (401408, 1)
op121.sizes = ([1568, 256], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op121_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg223_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg224_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg225_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, relu, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op122.unmet_dependencies = []
op122.met_dependencies = [MemoryDep('arg226_1', c0, {c0: 589824}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (589824, 1)
op122.sizes = ([256, 256, 9], [])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op122_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg226_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf122', get_index_1, load, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelAlloc)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf121', mode=None), StarDep(name='buf122', mode=None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ExternKernelAlloc
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.convolution


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 401408}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 401408}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg227_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg228_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg229_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg230_1', c1, {c0: 1568, c1: 256}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (401408, 1)
op124.sizes = ([1568, 256], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op124_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg229_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg230_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf124', get_index_5, relu, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelAlloc)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelAlloc
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.node.kernel = extern_kernels.convolution


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', 1024*c0 + c1, {c0: 1568, c1: 512}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf119', c0, {c0: 802816}, None),
        MemoryDep('buf125', c0, {c0: 802816}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg233_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg234_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg235_1', c1, {c0: 1568, c1: 512}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
    buf126.aliases = ['buf128']
    buf126.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (802816, 1)
op126.sizes = ([1568, 512], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf126_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
class op126_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg233_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg234_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg235_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf119', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf126', get_index_6, relu, None)
        return store


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', 1024*c0 + c1, {c0: 1568, c1: 512}, None)]
op127.unmet_dependencies = [MemoryDep('buf119', c0, {c0: 802816}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
    buf127.aliases = ['buf128']
    buf127.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (802816, 1)
op127.sizes = ([1568, 512], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf127_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
class op127_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf127', get_index_1, load, None)
        return store


op128: NopKernelSchedulerNode(ConcatKernel)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf126', mode=None), StarDep(name='buf127', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ConcatKernel
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=(200704, 1, 14336, 1024))
    buf128.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]


op129: ExternKernelSchedulerNode(ExternKernelAlloc)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg236_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelAlloc
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
]
op129.node.kernel = extern_kernels.convolution


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 802816}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf126', 1024*c0 + c1, {c0: 1568, c1: 512}, None),
        MemoryDep('buf129', c0, {c0: 802816}, None)]
op130.met_dependencies = 
    [   MemoryDep('arg237_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg238_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg239_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg240_1', c1, {c0: 1568, c1: 512}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf130.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op130.group.device = cuda:0
op130.group.iteration = (802816, 1)
op130.sizes = ([1568, 512], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf126_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op130_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg238_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg239_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg240_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf126', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf130', get_index_6, relu, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelAlloc)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelAlloc
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.node.kernel = extern_kernels.convolution


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 401408}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 401408}, None)]
op132.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg243_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg244_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg245_1', c1, {c0: 1568, c1: 256}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (401408, 1)
op132.sizes = ([1568, 256], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op132_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg243_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg244_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg245_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf132', get_index_5, relu, None)
        return store


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op133.unmet_dependencies = []
op133.met_dependencies = [MemoryDep('arg246_1', c0, {c0: 589824}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (589824, 1)
op133.sizes = ([256, 256, 9], [])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op133_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg246_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf133', get_index_1, load, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelAlloc)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf132', mode=None), StarDep(name='buf133', mode=None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ExternKernelAlloc
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.convolution


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 401408}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 401408}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg248_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg249_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg250_1', c1, {c0: 1568, c1: 256}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (401408, 1)
op135.sizes = ([1568, 256], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op135_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg249_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg250_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf135', get_index_5, relu, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False)]
]
op136.node.kernel = extern_kernels.convolution


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 802816}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf130', c0, {c0: 802816}, None),
        MemoryDep('buf136', c0, {c0: 802816}, None)]
op137.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg253_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg254_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg255_1', c1, {c0: 1568, c1: 512}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf137.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (802816, 1)
op137.sizes = ([1568, 512], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op137_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg253_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg254_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg255_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf130', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf137', get_index_6, relu, None)
        return store


op138: ExternKernelSchedulerNode(ExternKernelAlloc)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op138.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op138.outputs = [
    buf138: ExternKernelAlloc
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf138.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False)]
]
op138.node.kernel = extern_kernels.convolution


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 401408}, None)]
op139.unmet_dependencies = [MemoryDep('buf138', c0, {c0: 401408}, None)]
op139.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg258_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg259_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg260_1', c1, {c0: 1568, c1: 256}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (401408, 1)
op139.sizes = ([1568, 256], [])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op139_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg259_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg260_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf139', get_index_5, relu, None)
        return store


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op140.unmet_dependencies = []
op140.met_dependencies = [MemoryDep('arg261_1', c0, {c0: 589824}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (589824, 1)
op140.sizes = ([256, 256, 9], [])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op140_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg261_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf140', get_index_1, load, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelAlloc)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf139', mode=None), StarDep(name='buf140', mode=None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ExternKernelAlloc
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.convolution


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 401408}, None)]
op142.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 401408}, None)]
op142.met_dependencies = 
    [   MemoryDep('arg262_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg263_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg264_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg265_1', c1, {c0: 1568, c1: 256}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (401408, 1)
op142.sizes = ([1568, 256], [])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op142_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg263_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg264_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg265_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf142', get_index_5, relu, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelAlloc)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg266_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelAlloc
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.node.kernel = extern_kernels.convolution


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', 1536*c0 + c1, {c0: 1568, c1: 512}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 802816}, None),
        MemoryDep('buf143', c0, {c0: 802816}, None)]
op144.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg268_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg269_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg270_1', c1, {c0: 1568, c1: 512}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
    buf144.aliases = ['buf147']
    buf144.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
]
op144.group.device = cuda:0
op144.group.iteration = (802816, 1)
op144.sizes = ([1568, 512], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf144_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
class op144_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg268_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg269_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg270_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf137', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf144', get_index_6, relu, None)
        return store


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', 1536*c0 + c1, {c0: 1568, c1: 512}, None)]
op145.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 802816}, None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
    buf145.aliases = ['buf147']
    buf145.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
]
op145.group.device = cuda:0
op145.group.iteration = (802816, 1)
op145.sizes = ([1568, 512], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf145_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
class op145_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf145', get_index_1, load, None)
        return store


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', 1536*c0 + c1, {c0: 1568, c1: 512}, None)]
op146.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 802816}, None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
    buf146.aliases = ['buf147']
    buf146.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (802816, 1)
op146.sizes = ([1568, 512], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf146_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
class op146_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf146', get_index_1, load, None)
        return store


op147: NopKernelSchedulerNode(ConcatKernel)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = 
    [   StarDep(name='buf144', mode=None),
        StarDep(name='buf145', mode=None),
        StarDep(name='buf146', mode=None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ConcatKernel
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=(301056, 1, 21504, 1536))
    buf147.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
    ]
]


op148: ExternKernelSchedulerNode(ExternKernelAlloc)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelAlloc
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False)]
]
op148.node.kernel = extern_kernels.convolution


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 802816}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf144', 1536*c0 + c1, {c0: 1568, c1: 512}, None),
        MemoryDep('buf148', c0, {c0: 802816}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg273_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg274_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg275_1', c1, {c0: 1568, c1: 512}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (802816, 1)
op149.sizes = ([1568, 512], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf144_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op149_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg272_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg273_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg274_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg275_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf144', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf149', get_index_6, relu, None)
        return store


op150: ExternKernelSchedulerNode(ExternKernelAlloc)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg276_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelAlloc
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False)]
]
op150.node.kernel = extern_kernels.convolution


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 401408}, None)]
op151.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 401408}, None)]
op151.met_dependencies = 
    [   MemoryDep('arg277_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg278_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg279_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg280_1', c1, {c0: 1568, c1: 256}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (401408, 1)
op151.sizes = ([1568, 256], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op151_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg277_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg278_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg279_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg280_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf151', get_index_5, relu, None)
        return store


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op152.unmet_dependencies = []
op152.met_dependencies = [MemoryDep('arg281_1', c0, {c0: 589824}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (589824, 1)
op152.sizes = ([256, 256, 9], [])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op152_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg281_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf152', get_index_1, load, None)
        return store


op153: ExternKernelSchedulerNode(ExternKernelAlloc)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf151', mode=None), StarDep(name='buf152', mode=None)]
op153.met_dependencies = []
op153.outputs = [
    buf153: ExternKernelAlloc
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
]
op153.node.kernel = extern_kernels.convolution


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 401408}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 401408}, None)]
op154.met_dependencies = 
    [   MemoryDep('arg282_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg283_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg284_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg285_1', c1, {c0: 1568, c1: 256}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (401408, 1)
op154.sizes = ([1568, 256], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op154_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg284_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg285_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf154', get_index_5, relu, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelAlloc)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg286_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelAlloc
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False)]
]
op155.node.kernel = extern_kernels.convolution


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 802816}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 802816}, None),
        MemoryDep('buf155', c0, {c0: 802816}, None)]
op156.met_dependencies = 
    [   MemoryDep('arg287_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg288_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg289_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg290_1', c1, {c0: 1568, c1: 512}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf156.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op156.group.device = cuda:0
op156.group.iteration = (802816, 1)
op156.sizes = ([1568, 512], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op156_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg287_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg288_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg289_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg290_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf149', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf156', get_index_6, relu, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelAlloc)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='arg291_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelAlloc
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False)]
]
op157.node.kernel = extern_kernels.convolution


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 401408}, None)]
op158.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 401408}, None)]
op158.met_dependencies = 
    [   MemoryDep('arg292_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg293_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg294_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg295_1', c1, {c0: 1568, c1: 256}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (401408, 1)
op158.sizes = ([1568, 256], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op158_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg292_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg293_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg294_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg295_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf158', get_index_5, relu, None)
        return store


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op159.unmet_dependencies = []
op159.met_dependencies = [MemoryDep('arg296_1', c0, {c0: 589824}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (589824, 1)
op159.sizes = ([256, 256, 9], [])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op159_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg296_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf159', get_index_1, load, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelAlloc)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf158', mode=None), StarDep(name='buf159', mode=None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ExternKernelAlloc
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.convolution


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 401408}, None)]
op161.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 401408}, None)]
op161.met_dependencies = 
    [   MemoryDep('arg297_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg298_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg299_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg300_1', c1, {c0: 1568, c1: 256}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (401408, 1)
op161.sizes = ([1568, 256], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op161_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg297_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg298_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg299_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg300_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf161', get_index_5, relu, None)
        return store


op162: ExternKernelSchedulerNode(ExternKernelAlloc)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg301_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelAlloc
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf162.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.node.kernel = extern_kernels.convolution


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', 1024*c0 + c1, {c0: 1568, c1: 512}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 802816}, None),
        MemoryDep('buf162', c0, {c0: 802816}, None)]
op163.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg303_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg304_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg305_1', c1, {c0: 1568, c1: 512}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
    buf163.aliases = ['buf165']
    buf163.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]
op163.group.device = cuda:0
op163.group.iteration = (802816, 1)
op163.sizes = ([1568, 512], [])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf163_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
class op163_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg302_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg304_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg305_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf156', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf163', get_index_6, relu, None)
        return store


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', 1024*c0 + c1, {c0: 1568, c1: 512}, None)]
op164.unmet_dependencies = [MemoryDep('buf156', c0, {c0: 802816}, None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
    buf164.aliases = ['buf165']
    buf164.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]
op164.group.device = cuda:0
op164.group.iteration = (802816, 1)
op164.sizes = ([1568, 512], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf164_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
class op164_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf164', get_index_1, load, None)
        return store


op165: NopKernelSchedulerNode(ConcatKernel)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf163', mode=None), StarDep(name='buf164', mode=None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ConcatKernel
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=(200704, 1, 14336, 1024))
    buf165.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]


op166: ExternKernelSchedulerNode(ExternKernelAlloc)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg306_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelAlloc
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.convolution


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 802816}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf163', 1024*c0 + c1, {c0: 1568, c1: 512}, None),
        MemoryDep('buf166', c0, {c0: 802816}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg307_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg308_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg309_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg310_1', c1, {c0: 1568, c1: 512}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf167.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (802816, 1)
op167.sizes = ([1568, 512], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf163_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op167_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg307_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg308_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg309_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg310_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf163', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf167', get_index_6, relu, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelAlloc)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg311_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelAlloc
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False)]
]
op168.node.kernel = extern_kernels.convolution


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 401408}, None)]
op169.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 401408}, None)]
op169.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg313_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg314_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg315_1', c1, {c0: 1568, c1: 256}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (401408, 1)
op169.sizes = ([1568, 256], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op169_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg313_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg314_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg315_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf169', get_index_5, relu, None)
        return store


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op170.unmet_dependencies = []
op170.met_dependencies = [MemoryDep('arg316_1', c0, {c0: 589824}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (589824, 1)
op170.sizes = ([256, 256, 9], [])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op170_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg316_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf170', get_index_1, load, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelAlloc)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf169', mode=None), StarDep(name='buf170', mode=None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ExternKernelAlloc
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf171.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False)]
]
op171.node.kernel = extern_kernels.convolution


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 401408}, None)]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 401408}, None)]
op172.met_dependencies = 
    [   MemoryDep('arg317_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg318_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg319_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg320_1', c1, {c0: 1568, c1: 256}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (401408, 1)
op172.sizes = ([1568, 256], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op172_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg317_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg318_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg319_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg320_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf172', get_index_5, relu, None)
        return store


op173: ExternKernelSchedulerNode(ExternKernelAlloc)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op173.met_dependencies = [StarDep(name='arg321_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelAlloc
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.convolution


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 802816}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 802816}, None),
        MemoryDep('buf173', c0, {c0: 802816}, None)]
op174.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg323_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg324_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg325_1', c1, {c0: 1568, c1: 512}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf174.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (802816, 1)
op174.sizes = ([1568, 512], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op174_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg322_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg323_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg324_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg325_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf167', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf174', get_index_6, relu, None)
        return store


op175: ExternKernelSchedulerNode(ExternKernelAlloc)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = [StarDep(name='arg326_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelAlloc
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False)]
]
op175.node.kernel = extern_kernels.convolution


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 401408}, None)]
op176.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 401408}, None)]
op176.met_dependencies = 
    [   MemoryDep('arg327_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg328_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg329_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg330_1', c1, {c0: 1568, c1: 256}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (401408, 1)
op176.sizes = ([1568, 256], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op176_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg327_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg328_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg329_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg330_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf176', get_index_5, relu, None)
        return store


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op177.unmet_dependencies = []
op177.met_dependencies = [MemoryDep('arg331_1', c0, {c0: 589824}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (589824, 1)
op177.sizes = ([256, 256, 9], [])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op177_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg331_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf177', get_index_1, load, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelAlloc)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf176', mode=None), StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ExternKernelAlloc
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False)]
]
op178.node.kernel = extern_kernels.convolution


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 401408}, None)]
op179.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 401408}, None)]
op179.met_dependencies = 
    [   MemoryDep('arg332_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg333_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg334_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg335_1', c1, {c0: 1568, c1: 256}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (401408, 1)
op179.sizes = ([1568, 256], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op179_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg332_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg333_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg334_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg335_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf179', get_index_5, relu, None)
        return store


op180: ExternKernelSchedulerNode(ExternKernelAlloc)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg336_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelAlloc
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.node.kernel = extern_kernels.convolution


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', 2048*c0 + c1, {c0: 1568, c1: 512}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf174', c0, {c0: 802816}, None),
        MemoryDep('buf180', c0, {c0: 802816}, None)]
op181.met_dependencies = 
    [   MemoryDep('arg337_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg338_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg339_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg340_1', c1, {c0: 1568, c1: 512}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[401408, 1, 28672, 2048])
    buf181.aliases = ['buf185']
    buf181.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (802816, 1)
op181.sizes = ([1568, 512], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf181_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[401408, 1, 28672, 2048])
class op181_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 2048*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg337_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg339_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg340_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf174', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf181', get_index_6, relu, None)
        return store


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', 2048*c0 + c1, {c0: 1568, c1: 512}, None)]
op182.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 802816}, None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[401408, 1, 28672, 2048])
    buf182.aliases = ['buf185']
    buf182.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op182.group.device = cuda:0
op182.group.iteration = (802816, 1)
op182.sizes = ([1568, 512], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf182_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[401408, 1, 28672, 2048])
class op182_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 2048*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf182', get_index_1, load, None)
        return store


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', 2048*c0 + c1, {c0: 1568, c1: 512}, None)]
op183.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 802816}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[401408, 1, 28672, 2048])
    buf183.aliases = ['buf185']
    buf183.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (802816, 1)
op183.sizes = ([1568, 512], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf183_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[401408, 1, 28672, 2048])
class op183_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 2048*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf183', get_index_1, load, None)
        return store


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', 2048*c0 + c1, {c0: 1568, c1: 512}, None)]
op184.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 802816}, None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[401408, 1, 28672, 2048])
    buf184.aliases = ['buf185']
    buf184.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (802816, 1)
op184.sizes = ([1568, 512], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf184_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[401408, 1, 28672, 2048])
class op184_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 2048*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf184', get_index_1, load, None)
        return store


op185: NopKernelSchedulerNode(ConcatKernel)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = 
    [   StarDep(name='buf181', mode=None),
        StarDep(name='buf182', mode=None),
        StarDep(name='buf183', mode=None),
        StarDep(name='buf184', mode=None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ConcatKernel
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 14, 14], stride=(401408, 1, 28672, 2048))
    buf185.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]


op186: ExternKernelSchedulerNode(ExternKernelAlloc)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg341_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelAlloc
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.node.kernel = extern_kernels.convolution


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 802816}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf181', 2048*c0 + c1, {c0: 1568, c1: 512}, None),
        MemoryDep('buf186', c0, {c0: 802816}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg342_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg343_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg344_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg345_1', c1, {c0: 1568, c1: 512}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (802816, 1)
op187.sizes = ([1568, 512], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf181_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[401408, 1, 28672, 2048])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op187_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 2048*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg342_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg343_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg344_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg345_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf181', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf187', get_index_6, relu, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelAlloc)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelAlloc
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.convolution


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 401408}, None)]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 401408}, None)]
op189.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg348_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg349_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg350_1', c1, {c0: 1568, c1: 256}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (401408, 1)
op189.sizes = ([1568, 256], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op189_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg349_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg350_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf189', get_index_5, relu, None)
        return store


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op190.unmet_dependencies = []
op190.met_dependencies = [MemoryDep('arg351_1', c0, {c0: 589824}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (589824, 1)
op190.sizes = ([256, 256, 9], [])
arg351_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op190_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg351_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, load, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelAlloc)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf189', mode=None), StarDep(name='buf190', mode=None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ExternKernelAlloc
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.convolution


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 401408}, None)]
op192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 401408}, None)]
op192.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg353_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg354_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg355_1', c1, {c0: 1568, c1: 256}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (401408, 1)
op192.sizes = ([1568, 256], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op192_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg353_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg354_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg355_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf192', get_index_5, relu, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelAlloc)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg356_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelAlloc
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False)]
]
op193.node.kernel = extern_kernels.convolution


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 802816}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 802816}, None),
        MemoryDep('buf193', c0, {c0: 802816}, None)]
op194.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg358_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg359_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg360_1', c1, {c0: 1568, c1: 512}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf194.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (802816, 1)
op194.sizes = ([1568, 512], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op194_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg358_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg359_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg360_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf187', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf194', get_index_6, relu, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelAlloc)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg361_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelAlloc
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
]
op195.node.kernel = extern_kernels.convolution


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 401408}, None)]
op196.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 401408}, None)]
op196.met_dependencies = 
    [   MemoryDep('arg362_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg363_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg364_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg365_1', c1, {c0: 1568, c1: 256}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (401408, 1)
op196.sizes = ([1568, 256], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op196_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg362_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg363_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg364_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg365_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, relu, None)
        return store


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op197.unmet_dependencies = []
op197.met_dependencies = [MemoryDep('arg366_1', c0, {c0: 589824}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (589824, 1)
op197.sizes = ([256, 256, 9], [])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op197_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg366_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf197', get_index_1, load, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelAlloc)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf196', mode=None), StarDep(name='buf197', mode=None)]
op198.met_dependencies = []
op198.outputs = [
    buf198: ExternKernelAlloc
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
]
op198.node.kernel = extern_kernels.convolution


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 401408}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 401408}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg367_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg368_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg369_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg370_1', c1, {c0: 1568, c1: 256}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (401408, 1)
op199.sizes = ([1568, 256], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg369_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op199_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg367_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg368_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg369_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg370_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf199', get_index_5, relu, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelAlloc)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg371_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelAlloc
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.node.kernel = extern_kernels.convolution


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', 1024*c0 + c1, {c0: 1568, c1: 512}, None)]
op201.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 802816}, None),
        MemoryDep('buf200', c0, {c0: 802816}, None)]
op201.met_dependencies = 
    [   MemoryDep('arg372_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg373_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg374_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg375_1', c1, {c0: 1568, c1: 512}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
    buf201.aliases = ['buf203']
    buf201.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (802816, 1)
op201.sizes = ([1568, 512], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf201_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
class op201_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg372_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg373_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg374_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg375_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf194', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf201', get_index_6, relu, None)
        return store


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', 1024*c0 + c1, {c0: 1568, c1: 512}, None)]
op202.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 802816}, None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
    buf202.aliases = ['buf203']
    buf202.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (802816, 1)
op202.sizes = ([1568, 512], [])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf202_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
class op202_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf202', get_index_1, load, None)
        return store


op203: NopKernelSchedulerNode(ConcatKernel)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf201', mode=None), StarDep(name='buf202', mode=None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ConcatKernel
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=(200704, 1, 14336, 1024))
    buf203.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
    ]
]


op204: ExternKernelSchedulerNode(ExternKernelAlloc)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg376_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelAlloc
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False)]
]
op204.node.kernel = extern_kernels.convolution


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 802816}, None)]
op205.unmet_dependencies = 
    [   MemoryDep('buf201', 1024*c0 + c1, {c0: 1568, c1: 512}, None),
        MemoryDep('buf204', c0, {c0: 802816}, None)]
op205.met_dependencies = 
    [   MemoryDep('arg377_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg378_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg379_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg380_1', c1, {c0: 1568, c1: 512}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf205.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (802816, 1)
op205.sizes = ([1568, 512], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg377_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf201_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op205_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg377_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg378_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg379_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg380_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf201', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf205', get_index_6, relu, None)
        return store


op206: ExternKernelSchedulerNode(ExternKernelAlloc)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = [StarDep(name='arg381_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelAlloc
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf206.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=True, is_weak=False)]
]
op206.node.kernel = extern_kernels.convolution


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 401408}, None)]
op207.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 401408}, None)]
op207.met_dependencies = 
    [   MemoryDep('arg382_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg383_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg384_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg385_1', c1, {c0: 1568, c1: 256}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (401408, 1)
op207.sizes = ([1568, 256], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op207_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg382_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg383_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg384_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg385_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf207', get_index_5, relu, None)
        return store


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op208.unmet_dependencies = []
op208.met_dependencies = [MemoryDep('arg386_1', c0, {c0: 589824}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (589824, 1)
op208.sizes = ([256, 256, 9], [])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op208_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg386_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf208', get_index_1, load, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelAlloc)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf207', mode=None), StarDep(name='buf208', mode=None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ExternKernelAlloc
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False)]
]
op209.node.kernel = extern_kernels.convolution


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 401408}, None)]
op210.unmet_dependencies = [MemoryDep('buf209', c0, {c0: 401408}, None)]
op210.met_dependencies = 
    [   MemoryDep('arg387_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg388_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg389_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg390_1', c1, {c0: 1568, c1: 256}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (401408, 1)
op210.sizes = ([1568, 256], [])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg389_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op210_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg387_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg388_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg389_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg390_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf210', get_index_5, relu, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelAlloc)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg391_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelAlloc
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.convolution


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 802816}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf205', c0, {c0: 802816}, None),
        MemoryDep('buf211', c0, {c0: 802816}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg392_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg393_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg394_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg395_1', c1, {c0: 1568, c1: 512}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf212.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (802816, 1)
op212.sizes = ([1568, 512], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op212_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg392_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg393_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg394_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg395_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf205', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf212', get_index_6, relu, None)
        return store


op213: ExternKernelSchedulerNode(ExternKernelAlloc)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf212', mode=None)]
op213.met_dependencies = [StarDep(name='arg396_1', mode=None)]
op213.outputs = [
    buf213: ExternKernelAlloc
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False)]
]
op213.node.kernel = extern_kernels.convolution


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 401408}, None)]
op214.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 401408}, None)]
op214.met_dependencies = 
    [   MemoryDep('arg397_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg398_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg399_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg400_1', c1, {c0: 1568, c1: 256}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (401408, 1)
op214.sizes = ([1568, 256], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg399_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op214_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg397_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg398_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg399_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg400_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf214', get_index_5, relu, None)
        return store


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op215.unmet_dependencies = []
op215.met_dependencies = [MemoryDep('arg401_1', c0, {c0: 589824}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (589824, 1)
op215.sizes = ([256, 256, 9], [])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op215_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg401_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf215', get_index_1, load, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelAlloc)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf214', mode=None), StarDep(name='buf215', mode=None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ExternKernelAlloc
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.convolution


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 401408}, None)]
op217.unmet_dependencies = [MemoryDep('buf216', c0, {c0: 401408}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg402_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg403_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg404_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg405_1', c1, {c0: 1568, c1: 256}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (401408, 1)
op217.sizes = ([1568, 256], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg405_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op217_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg402_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg403_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg404_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg405_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, relu, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelAlloc)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg406_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelAlloc
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = extern_kernels.convolution


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', 1536*c0 + c1, {c0: 1568, c1: 512}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 802816}, None),
        MemoryDep('buf218', c0, {c0: 802816}, None)]
op219.met_dependencies = 
    [   MemoryDep('arg407_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg408_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg409_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg410_1', c1, {c0: 1568, c1: 512}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
    buf219.aliases = ['buf222']
    buf219.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (802816, 1)
op219.sizes = ([1568, 512], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg409_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf219_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
class op219_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg407_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg408_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg409_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg410_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf212', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf219', get_index_6, relu, None)
        return store


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', 1536*c0 + c1, {c0: 1568, c1: 512}, None)]
op220.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 802816}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
    buf220.aliases = ['buf222']
    buf220.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op220.group.device = cuda:0
op220.group.iteration = (802816, 1)
op220.sizes = ([1568, 512], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf220_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
class op220_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf220', get_index_1, load, None)
        return store


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', 1536*c0 + c1, {c0: 1568, c1: 512}, None)]
op221.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 802816}, None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
    buf221.aliases = ['buf222']
    buf221.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (802816, 1)
op221.sizes = ([1568, 512], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf221_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
class op221_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf221', get_index_1, load, None)
        return store


op222: NopKernelSchedulerNode(ConcatKernel)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = 
    [   StarDep(name='buf219', mode=None),
        StarDep(name='buf220', mode=None),
        StarDep(name='buf221', mode=None)]
op222.met_dependencies = []
op222.outputs = [
    buf222: ConcatKernel
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 14, 14], stride=(301056, 1, 21504, 1536))
    buf222.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]


op223: ExternKernelSchedulerNode(ExternKernelAlloc)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op223.met_dependencies = [StarDep(name='arg411_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelAlloc
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf223.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False)]
]
op223.node.kernel = extern_kernels.convolution


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 802816}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf219', 1536*c0 + c1, {c0: 1568, c1: 512}, None),
        MemoryDep('buf223', c0, {c0: 802816}, None)]
op224.met_dependencies = 
    [   MemoryDep('arg412_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg413_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg414_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg415_1', c1, {c0: 1568, c1: 512}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf224.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op224.group.device = cuda:0
op224.group.iteration = (802816, 1)
op224.sizes = ([1568, 512], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg413_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg415_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf219_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[301056, 1, 21504, 1536])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op224_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg412_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg413_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg414_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg415_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf219', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf224', get_index_6, relu, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelAlloc)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = [StarDep(name='arg416_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelAlloc
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf225.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False)]
]
op225.node.kernel = extern_kernels.convolution


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 401408}, None)]
op226.unmet_dependencies = [MemoryDep('buf225', c0, {c0: 401408}, None)]
op226.met_dependencies = 
    [   MemoryDep('arg417_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg418_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg419_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg420_1', c1, {c0: 1568, c1: 256}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (401408, 1)
op226.sizes = ([1568, 256], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op226_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg417_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg418_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg419_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg420_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf226', get_index_5, relu, None)
        return store


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op227.unmet_dependencies = []
op227.met_dependencies = [MemoryDep('arg421_1', c0, {c0: 589824}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (589824, 1)
op227.sizes = ([256, 256, 9], [])
arg421_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op227_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg421_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf227', get_index_1, load, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelAlloc)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf226', mode=None), StarDep(name='buf227', mode=None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ExternKernelAlloc
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False)]
]
op228.node.kernel = extern_kernels.convolution


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 401408}, None)]
op229.unmet_dependencies = [MemoryDep('buf228', c0, {c0: 401408}, None)]
op229.met_dependencies = 
    [   MemoryDep('arg422_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg423_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg424_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg425_1', c1, {c0: 1568, c1: 256}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (401408, 1)
op229.sizes = ([1568, 256], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg423_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg425_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op229_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg422_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg423_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg424_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg425_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf229', get_index_5, relu, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelAlloc)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg426_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelAlloc
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False)]
]
op230.node.kernel = extern_kernels.convolution


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 802816}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf224', c0, {c0: 802816}, None),
        MemoryDep('buf230', c0, {c0: 802816}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg427_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg428_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg429_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg430_1', c1, {c0: 1568, c1: 512}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf231.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (802816, 1)
op231.sizes = ([1568, 512], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg427_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op231_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg427_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg428_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg429_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg430_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf224', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf231', get_index_6, relu, None)
        return store


op232: ExternKernelSchedulerNode(ExternKernelAlloc)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op232.met_dependencies = [StarDep(name='arg431_1', mode=None)]
op232.outputs = [
    buf232: ExternKernelAlloc
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf232.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False)]
]
op232.node.kernel = extern_kernels.convolution


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 401408}, None)]
op233.unmet_dependencies = [MemoryDep('buf232', c0, {c0: 401408}, None)]
op233.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg433_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg434_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg435_1', c1, {c0: 1568, c1: 256}, None)]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (401408, 1)
op233.sizes = ([1568, 256], [])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op233_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg432_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg433_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg434_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg435_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf233', get_index_5, relu, None)
        return store


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op234.unmet_dependencies = []
op234.met_dependencies = [MemoryDep('arg436_1', c0, {c0: 589824}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (589824, 1)
op234.sizes = ([256, 256, 9], [])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op234_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg436_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf234', get_index_1, load, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelAlloc)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf233', mode=None), StarDep(name='buf234', mode=None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ExternKernelAlloc
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False)]
]
op235.node.kernel = extern_kernels.convolution


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 401408}, None)]
op236.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 401408}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg437_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg438_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg439_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg440_1', c1, {c0: 1568, c1: 256}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (401408, 1)
op236.sizes = ([1568, 256], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg437_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg439_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op236_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg437_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg438_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg439_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg440_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf236', get_index_5, relu, None)
        return store


op237: ExternKernelSchedulerNode(ExternKernelAlloc)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg441_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelAlloc
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf237.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.node.kernel = extern_kernels.convolution


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', 1024*c0 + c1, {c0: 1568, c1: 512}, None)]
op238.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 802816}, None),
        MemoryDep('buf237', c0, {c0: 802816}, None)]
op238.met_dependencies = 
    [   MemoryDep('arg442_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg443_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg444_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg445_1', c1, {c0: 1568, c1: 512}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
    buf238.aliases = ['buf240']
    buf238.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
    ]
]
op238.group.device = cuda:0
op238.group.iteration = (802816, 1)
op238.sizes = ([1568, 512], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg443_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg445_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf238_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
class op238_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg442_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg443_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg444_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg445_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf231', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf238', get_index_6, relu, None)
        return store


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', 1024*c0 + c1, {c0: 1568, c1: 512}, None)]
op239.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 802816}, None)]
op239.met_dependencies = []
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
    buf239.aliases = ['buf240']
    buf239.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (802816, 1)
op239.sizes = ([1568, 512], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf239_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
class op239_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf239', get_index_1, load, None)
        return store


op240: NopKernelSchedulerNode(ConcatKernel)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf238', mode=None), StarDep(name='buf239', mode=None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ConcatKernel
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=(200704, 1, 14336, 1024))
    buf240.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
    ]
]


op241: ExternKernelSchedulerNode(ExternKernelAlloc)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg446_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelAlloc
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.convolution


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 802816}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf238', 1024*c0 + c1, {c0: 1568, c1: 512}, None),
        MemoryDep('buf241', c0, {c0: 802816}, None)]
op242.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg448_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg449_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg450_1', c1, {c0: 1568, c1: 512}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf242.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (802816, 1)
op242.sizes = ([1568, 512], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg449_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf238_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[200704, 1, 14336, 1024])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op242_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg447_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg448_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg449_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg450_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf238', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf242', get_index_6, relu, None)
        return store


op243: ExternKernelSchedulerNode(ExternKernelAlloc)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = [StarDep(name='arg451_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelAlloc
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf243.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False)]
]
op243.node.kernel = extern_kernels.convolution


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 401408}, None)]
op244.unmet_dependencies = [MemoryDep('buf243', c0, {c0: 401408}, None)]
op244.met_dependencies = 
    [   MemoryDep('arg452_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg453_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg454_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg455_1', c1, {c0: 1568, c1: 256}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (401408, 1)
op244.sizes = ([1568, 256], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg455_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op244_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg452_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg453_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg454_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg455_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf244', get_index_5, relu, None)
        return store


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op245.unmet_dependencies = []
op245.met_dependencies = [MemoryDep('arg456_1', c0, {c0: 589824}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (589824, 1)
op245.sizes = ([256, 256, 9], [])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op245_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg456_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf245', get_index_1, load, None)
        return store


op246: ExternKernelSchedulerNode(ExternKernelAlloc)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf244', mode=None), StarDep(name='buf245', mode=None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ExternKernelAlloc
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf246.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False)]
]
op246.node.kernel = extern_kernels.convolution


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 401408}, None)]
op247.unmet_dependencies = [MemoryDep('buf246', c0, {c0: 401408}, None)]
op247.met_dependencies = 
    [   MemoryDep('arg457_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg458_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg459_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg460_1', c1, {c0: 1568, c1: 256}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (401408, 1)
op247.sizes = ([1568, 256], [])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg457_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg459_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op247_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg457_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg458_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg459_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg460_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf247', get_index_5, relu, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelAlloc)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op248.met_dependencies = [StarDep(name='arg461_1', mode=None)]
op248.outputs = [
    buf248: ExternKernelAlloc
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf248.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False)]
]
op248.node.kernel = extern_kernels.convolution


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 802816}, None)]
op249.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 802816}, None),
        MemoryDep('buf248', c0, {c0: 802816}, None)]
op249.met_dependencies = 
    [   MemoryDep('arg462_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg463_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg464_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg465_1', c1, {c0: 1568, c1: 512}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf249.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
    ]
]
op249.group.device = cuda:0
op249.group.iteration = (802816, 1)
op249.sizes = ([1568, 512], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg463_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op249_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg462_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg463_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg464_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg465_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf242', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf249', get_index_6, relu, None)
        return store


op250: ExternKernelSchedulerNode(ExternKernelAlloc)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = [StarDep(name='arg466_1', mode=None)]
op250.outputs = [
    buf250: ExternKernelAlloc
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf250.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False)]
]
op250.node.kernel = extern_kernels.convolution


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 401408}, None)]
op251.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 401408}, None)]
op251.met_dependencies = 
    [   MemoryDep('arg467_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg468_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg469_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg470_1', c1, {c0: 1568, c1: 256}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (401408, 1)
op251.sizes = ([1568, 256], [])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg467_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg469_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op251_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg467_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg468_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg469_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg470_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf251', get_index_5, relu, None)
        return store


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', 2304*c0 + c1 + 256*c2, {c0: 256, c1: 256, c2: 9}, None)]
op252.unmet_dependencies = []
op252.met_dependencies = [MemoryDep('arg471_1', c0, {c0: 589824}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (589824, 1)
op252.sizes = ([256, 256, 9], [])
arg471_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 9, 3, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 3, 3], stride=[2304, 1, 768, 256])
class op252_loop_body:
    var_ranges = {z0: 256, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg471_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf252', get_index_1, load, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelAlloc)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf251', mode=None), StarDep(name='buf252', mode=None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ExternKernelAlloc
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf253.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False)]
]
op253.node.kernel = extern_kernels.convolution


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 401408}, None)]
op254.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 401408}, None)]
op254.met_dependencies = 
    [   MemoryDep('arg472_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg473_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg474_1', c1, {c0: 1568, c1: 256}, None),
        MemoryDep('arg475_1', c1, {c0: 1568, c1: 256}, None)]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (401408, 1)
op254.sizes = ([1568, 256], [])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg473_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg475_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[50176, 1, 3584, 256])
class op254_loop_body:
    var_ranges = {z0: 1568, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg472_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg473_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg474_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg475_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf254', get_index_5, relu, None)
        return store


op255: ExternKernelSchedulerNode(ExternKernelAlloc)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op255.met_dependencies = [StarDep(name='arg476_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelAlloc
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.node.kernel = extern_kernels.convolution


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', 2816*c0 + c1, {c0: 1568, c1: 512}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf249', c0, {c0: 802816}, None),
        MemoryDep('buf255', c0, {c0: 802816}, None)]
op256.met_dependencies = 
    [   MemoryDep('arg477_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg478_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg479_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg480_1', c1, {c0: 1568, c1: 512}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
    buf256.aliases = ['buf262']
    buf256.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op256.group.device = cuda:0
op256.group.iteration = (802816, 1)
op256.sizes = ([1568, 512], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg477_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg479_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf256_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
class op256_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 2816*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg477_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg478_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg479_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg480_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf249', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf256', get_index_6, relu, None)
        return store


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', 2816*c0 + c1, {c0: 1568, c1: 512}, None)]
op257.unmet_dependencies = [MemoryDep('buf249', c0, {c0: 802816}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
    buf257.aliases = ['buf262']
    buf257.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op257.group.device = cuda:0
op257.group.iteration = (802816, 1)
op257.sizes = ([1568, 512], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf257_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
class op257_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 2816*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf257', get_index_1, load, None)
        return store


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', 2816*c0 + c1, {c0: 1568, c1: 256}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf109', 14336*c0 + 512*c1 + c2 + 256, {c0: 112, c1: 14, c2: 256}, None),
        MemoryDep('buf109', 14336*c0 + 512*c1 + c2 + 7168, {c0: 112, c1: 14, c2: 256}, None),
        MemoryDep('buf109', 14336*c0 + 512*c1 + c2 + 7424, {c0: 112, c1: 14, c2: 256}, None),
        MemoryDep('buf109', 14336*c0 + 512*c1 + c2, {c0: 112, c1: 14, c2: 256}, None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[551936, 1, 39424, 2816])
    buf258.aliases = ['buf262']
    buf258.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op258.group.device = cuda:0
op258.group.iteration = (401408, 1)
op258.sizes = ([112, 14, 256], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
buf258_layout = NonOwningLayout('cuda', torch.float32, size=[8, 256, 14, 14], stride=[551936, 1, 39424, 2816])
class op258_loop_body:
    var_ranges = {z0: 112, z1: 14, z2: 256}
    index0 = 14336*z0 + 512*z1 + z2
    index1 = 14336*z0 + 512*z1 + z2 + 256
    index2 = 14336*z0 + 512*z1 + z2 + 7168
    index3 = 14336*z0 + 512*z1 + z2 + 7424
    index4 = 39424*z0 + 2816*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf109', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf109', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf109', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf258', get_index_4, maximum_2, None)
        return store


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', 2816*c0 + c1, {c0: 1568, c1: 512}, None)]
op259.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 802816}, None)]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
    buf259.aliases = ['buf262']
    buf259.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op259.group.device = cuda:0
op259.group.iteration = (802816, 1)
op259.sizes = ([1568, 512], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf259_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
class op259_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 2816*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf259', get_index_1, load, None)
        return store


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', 2816*c0 + c1, {c0: 1568, c1: 512}, None)]
op260.unmet_dependencies = [MemoryDep('buf224', c0, {c0: 802816}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
    buf260.aliases = ['buf262']
    buf260.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op260.group.device = cuda:0
op260.group.iteration = (802816, 1)
op260.sizes = ([1568, 512], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf260_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
class op260_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 2816*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf260', get_index_1, load, None)
        return store


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', 2816*c0 + c1, {c0: 1568, c1: 512}, None)]
op261.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 802816}, None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
    buf261.aliases = ['buf262']
    buf261.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]
op261.group.device = cuda:0
op261.group.iteration = (802816, 1)
op261.sizes = ([1568, 512], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf261_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
class op261_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = 2816*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf261', get_index_1, load, None)
        return store


op262: NopKernelSchedulerNode(ConcatKernel)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = 
    [   StarDep(name='buf256', mode=None),
        StarDep(name='buf257', mode=None),
        StarDep(name='buf258', mode=None),
        StarDep(name='buf259', mode=None),
        StarDep(name='buf260', mode=None),
        StarDep(name='buf261', mode=None)]
op262.met_dependencies = []
op262.outputs = [
    buf262: ConcatKernel
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 2816, 14, 14], stride=(551936, 1, 39424, 2816))
    buf262.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
    ]
]


op263: ExternKernelSchedulerNode(ExternKernelAlloc)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op263.met_dependencies = [StarDep(name='arg481_1', mode=None)]
op263.outputs = [
    buf263: ExternKernelAlloc
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf263.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=True, is_weak=False)]
]
op263.node.kernel = extern_kernels.convolution


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 802816}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf256', 2816*c0 + c1, {c0: 1568, c1: 512}, None),
        MemoryDep('buf263', c0, {c0: 802816}, None)]
op264.met_dependencies = 
    [   MemoryDep('arg482_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg483_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg484_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg485_1', c1, {c0: 1568, c1: 512}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf264.users = [
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False),
    ]
]
op264.group.device = cuda:0
op264.group.iteration = (802816, 1)
op264.sizes = ([1568, 512], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf256_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[551936, 1, 39424, 2816])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op264_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = 2816*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg482_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg483_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg484_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg485_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf256', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf264', get_index_6, relu, None)
        return store


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 200704}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf264', 14336*c0 + 1024*c1 + c2 + 512, {c0: 56, c1: 7, c2: 512}, None),
        MemoryDep('buf264', 14336*c0 + 1024*c1 + c2 + 7168, {c0: 56, c1: 7, c2: 512}, None),
        MemoryDep('buf264', 14336*c0 + 1024*c1 + c2 + 7680, {c0: 56, c1: 7, c2: 512}, None),
        MemoryDep('buf264', 14336*c0 + 1024*c1 + c2, {c0: 56, c1: 7, c2: 512}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf265.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
    ]
]
op265.group.device = cuda:0
op265.group.iteration = (200704, 1)
op265.sizes = ([56, 7, 512], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
class op265_loop_body:
    var_ranges = {z0: 56, z1: 7, z2: 512}
    index0 = 14336*z0 + 1024*z1 + z2
    index1 = 14336*z0 + 1024*z1 + z2 + 512
    index2 = 14336*z0 + 1024*z1 + z2 + 7168
    index3 = 14336*z0 + 1024*z1 + z2 + 7680
    index4 = 3584*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf264', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf264', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf264', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf265', get_index_4, maximum_2, None)
        return store


op266: ExternKernelSchedulerNode(ExternKernelAlloc)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op266.met_dependencies = [StarDep(name='arg491_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelAlloc
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.convolution


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 802816}, None)]
op267.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 802816}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg492_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg493_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg494_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg495_1', c1, {c0: 1568, c1: 512}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (802816, 1)
op267.sizes = ([1568, 512], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
arg492_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg493_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg495_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 1, 7168, 512])
class op267_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg492_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg493_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg494_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg495_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, relu, None)
        return store


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9}, None)]
op268.unmet_dependencies = []
op268.met_dependencies = [MemoryDep('arg496_1', c0, {c0: 2359296}, None)]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (2359296, 1)
op268.sizes = ([512, 512, 9], [])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op268_loop_body:
    var_ranges = {z0: 512, z1: 512, z2: 9}
    index0 = 4608*z0 + 9*z1 + z2
    index1 = 4608*z0 + z1 + 512*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg496_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf268', get_index_1, load, None)
        return store


op269: ExternKernelSchedulerNode(ExternKernelAlloc)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf267', mode=None), StarDep(name='buf268', mode=None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ExternKernelAlloc
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False)]
]
op269.node.kernel = extern_kernels.convolution


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 200704}, None)]
op270.unmet_dependencies = [MemoryDep('buf269', c0, {c0: 200704}, None)]
op270.met_dependencies = 
    [   MemoryDep('arg497_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg498_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg499_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg500_1', c1, {c0: 392, c1: 512}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (200704, 1)
op270.sizes = ([392, 512], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg497_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg498_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg499_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
class op270_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg497_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg498_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg499_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg500_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf270', get_index_5, relu, None)
        return store


op271: ExternKernelSchedulerNode(ExternKernelAlloc)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='arg501_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelAlloc
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf271.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op271.node.kernel = extern_kernels.convolution


op272: ExternKernelSchedulerNode(ExternKernelAlloc)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op272.met_dependencies = [StarDep(name='arg486_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelAlloc
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = extern_kernels.convolution


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 401408}, None)]
op273.unmet_dependencies = 
    [   MemoryDep('buf271', c0, {c0: 401408}, None),
        MemoryDep('buf272', c0, {c0: 401408}, None)]
op273.met_dependencies = 
    [   MemoryDep('arg487_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg488_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg489_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg490_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg502_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg503_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg504_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg505_1', c1, {c0: 392, c1: 1024}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf273.users = [NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (401408, 1)
op273.sizes = ([392, 1024], [])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg503_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg505_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
arg487_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
class op273_loop_body:
    var_ranges = {z0: 392, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg502_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg503_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg504_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg505_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf272', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg487_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg488_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg489_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg490_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf273', get_index_10, add_4, None)
        return store


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 401408}, None)]
op274.unmet_dependencies = [MemoryDep('buf273', c0, {c0: 401408}, None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf274.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
    ]
]
op274.group.device = cuda:0
op274.group.iteration = (401408, 1)
op274.sizes = ([401408], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
class op274_loop_body:
    var_ranges = {z0: 401408}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf274', get_index_1, relu, None)
        return store


op275: ExternKernelSchedulerNode(ExternKernelAlloc)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf274', mode=None)]
op275.met_dependencies = [StarDep(name='arg506_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelAlloc
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf275.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False)]
]
op275.node.kernel = extern_kernels.convolution


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 200704}, None)]
op276.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 200704}, None)]
op276.met_dependencies = 
    [   MemoryDep('arg507_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg508_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg509_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg510_1', c1, {c0: 392, c1: 512}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (200704, 1)
op276.sizes = ([392, 512], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg509_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
class op276_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg507_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg508_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg509_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg510_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf276', get_index_5, relu, None)
        return store


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', 4608*c0 + c1 + 512*c2, {c0: 512, c1: 512, c2: 9}, None)]
op277.unmet_dependencies = []
op277.met_dependencies = [MemoryDep('arg511_1', c0, {c0: 2359296}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (2359296, 1)
op277.sizes = ([512, 512, 9], [])
arg511_1_layout = FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 9, 3, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[512, 512, 3, 3], stride=[4608, 1, 1536, 512])
class op277_loop_body:
    var_ranges = {z0: 512, z1: 512, z2: 9}
    index0 = 4608*z0 + 9*z1 + z2
    index1 = 4608*z0 + z1 + 512*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg511_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf277', get_index_1, load, None)
        return store


op278: ExternKernelSchedulerNode(ExternKernelAlloc)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf276', mode=None), StarDep(name='buf277', mode=None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ExternKernelAlloc
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False)]
]
op278.node.kernel = extern_kernels.convolution


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 200704}, None)]
op279.unmet_dependencies = [MemoryDep('buf278', c0, {c0: 200704}, None)]
op279.met_dependencies = 
    [   MemoryDep('arg512_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg513_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg514_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg515_1', c1, {c0: 392, c1: 512}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (200704, 1)
op279.sizes = ([392, 512], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg513_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg514_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg515_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
class op279_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg512_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg513_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg514_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg515_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf279', get_index_5, relu, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelAlloc)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='arg516_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelAlloc
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf280.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.node.kernel = extern_kernels.convolution


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', 2560*c0 + c1, {c0: 392, c1: 1024}, None)]
op281.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 401408}, None),
        MemoryDep('buf280', c0, {c0: 401408}, None)]
op281.met_dependencies = 
    [   MemoryDep('arg517_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg518_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg519_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg520_1', c1, {c0: 392, c1: 1024}, None)]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = NonOwningLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[125440, 1, 17920, 2560])
    buf281.aliases = ['buf284']
    buf281.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op281.group.device = cuda:0
op281.group.iteration = (401408, 1)
op281.sizes = ([392, 1024], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
arg517_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg518_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg519_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg520_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
buf281_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[125440, 1, 17920, 2560])
class op281_loop_body:
    var_ranges = {z0: 392, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = 2560*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg517_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg518_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg519_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg520_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf274', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf281', get_index_6, relu, None)
        return store


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', 2560*c0 + c1, {c0: 392, c1: 1024}, None)]
op282.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 401408}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = NonOwningLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[125440, 1, 17920, 2560])
    buf282.aliases = ['buf284']
    buf282.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op282.group.device = cuda:0
op282.group.iteration = (401408, 1)
op282.sizes = ([392, 1024], [])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
buf282_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[125440, 1, 17920, 2560])
class op282_loop_body:
    var_ranges = {z0: 392, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = 2560*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf282', get_index_1, load, None)
        return store


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', 2560*c0 + c1, {c0: 392, c1: 512}, None)]
op283.unmet_dependencies = [MemoryDep('buf265', c0, {c0: 200704}, None)]
op283.met_dependencies = []
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[125440, 1, 17920, 2560])
    buf283.aliases = ['buf284']
    buf283.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]
op283.group.device = cuda:0
op283.group.iteration = (200704, 1)
op283.sizes = ([392, 512], [])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
buf283_layout = NonOwningLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[125440, 1, 17920, 2560])
class op283_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = 2560*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf283', get_index_1, load, None)
        return store


op284: NopKernelSchedulerNode(ConcatKernel)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = 
    [   StarDep(name='buf281', mode=None),
        StarDep(name='buf282', mode=None),
        StarDep(name='buf283', mode=None)]
op284.met_dependencies = []
op284.outputs = [
    buf284: ConcatKernel
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 2560, 7, 7], stride=(125440, 1, 17920, 2560))
    buf284.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
    ]
]


op285: ExternKernelSchedulerNode(ExternKernelAlloc)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf284', mode=None)]
op285.met_dependencies = [StarDep(name='arg521_1', mode=None)]
op285.outputs = [
    buf285: ExternKernelAlloc
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf285.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.node.kernel = extern_kernels.convolution


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 8192}, None)]
op286.unmet_dependencies = 
    [   MemoryDep('buf281', 125440*c0 + c1 + 2560*c2, {c0: 8, c1: 1024, c2: 49}, None),
        MemoryDep('buf285', 50176*c0 + c1 + 1024*c2, {c0: 8, c1: 1024, c2: 49}, None)]
op286.met_dependencies = 
    [   MemoryDep('arg522_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg523_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg524_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg525_1', c1, {c0: 8, c1: 1024}, None)]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
    buf286.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (8192, 49)
op286.sizes = ([8, 1024], [49])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
arg522_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg523_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg524_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg525_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf281_layout = NonOwningLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[125440, 1, 17920, 2560])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
class op286_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 49}
    index0 = 50176*z0 + z1 + 1024*z2
    index1 = z1
    index2 = 125440*z0 + z1 + 2560*z2
    index3 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg522_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg523_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg524_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg525_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf281', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', relu)
        get_index_6 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf286', get_index_6, reduction)
        return store_reduction


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 8192}, None)]
op287.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 8192}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (8192, 1)
op287.sizes = ([8192], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
class op287_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf287', get_index_1, truediv, None)
        return store


op288: ExternKernelSchedulerNode(ExternKernelAlloc)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = [StarDep(name='arg526_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelAlloc
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 1000, 1, 1], stride=[1000, 1, 1, 1])
    buf288.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False)]
]
op288.node.kernel = extern_kernels.convolution


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 8000}, None)]
op289.unmet_dependencies = [MemoryDep('buf288', c0, {c0: 8000}, None)]
op289.met_dependencies = [MemoryDep('arg527_1', c1, {c0: 8, c1: 1000}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 1000, 1, 1], stride=[1000, 1, 8000, 8000])
    buf289.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (8000, 1)
op289.sizes = ([8, 1000], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 1000, 1, 1], stride=[1000, 1, 1, 1])
arg527_1_layout = FixedLayout('cuda', torch.float32, size=[1000], stride=[1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 1000, 1, 1], stride=[1000, 1, 8000, 8000])
class op289_loop_body:
    var_ranges = {z0: 8, z1: 1000}
    index0 = 1000*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg527_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf289', get_index_2, add, None)
        return store



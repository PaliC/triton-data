op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 16, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 432}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (432, 1)
op1.sizes = ([16, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 1605632}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 1605632}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg3_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg4_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg5_1', c1, {c0: 100352, c1: 16}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf3.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (1605632, 1)
op3.sizes = ([100352, 16], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op3_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, relu, None)
        return store


op4: ExternKernelSchedulerNode(ExternKernelAlloc)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf3', mode=None)]
op4.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op4.outputs = [
    buf4: ExternKernelAlloc
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
    buf4.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False)]
]
op4.node.kernel = extern_kernels.convolution


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 802816}, None)]
op5.unmet_dependencies = [MemoryDep('buf4', c0, {c0: 802816}, None)]
op5.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 100352, c1: 8}, None),
        MemoryDep('arg7_1', c1, {c0: 100352, c1: 8}, None),
        MemoryDep('arg8_1', c1, {c0: 100352, c1: 8}, None),
        MemoryDep('arg9_1', c1, {c0: 100352, c1: 8}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
    buf5.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
    ]
]
op5.group.device = cuda:0
op5.group.iteration = (802816, 1)
op5.sizes = ([100352, 8], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
class op5_loop_body:
    var_ranges = {z0: 100352, z1: 8}
    index0 = 8*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, relu, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelAlloc)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelAlloc
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.convolution


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 1605632}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf5', 8*c0 + I, {c0: 100352, c1: 16}, None),
        MemoryDep('buf6', 8*c0 + I, {c0: 100352, c1: 16}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg12_1', I, {c0: 100352, c1: 16}, None),
        MemoryDep('arg13_1', I, {c0: 100352, c1: 16}, None),
        MemoryDep('arg14_1', I, {c0: 100352, c1: 16}, None),
        MemoryDep('arg15_1', I, {c0: 100352, c1: 16}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (1605632, 1)
op7.sizes = ([100352, 16], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op7_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = z1
    index1 = 8*z0 + I
    index2 = 8*z0 + I
    index3 = I
    index4 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(8, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(16, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf7', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf5', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op8: ExternKernelSchedulerNode(ExternKernelAlloc)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelAlloc
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
]
op8.node.kernel = extern_kernels.convolution


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 802816}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 802816}, None)]
op9.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 100352, c1: 8}, None),
        MemoryDep('arg18_1', c1, {c0: 100352, c1: 8}, None),
        MemoryDep('arg19_1', c1, {c0: 100352, c1: 8}, None),
        MemoryDep('arg20_1', c1, {c0: 100352, c1: 8}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (802816, 1)
op9.sizes = ([100352, 8], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
class op9_loop_body:
    var_ranges = {z0: 100352, z1: 8}
    index0 = 8*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf9', get_index_5, add_1, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 1605632}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf10', 8*c0 + I, {c0: 100352, c1: 16}, None),
        MemoryDep('buf3', c0, {c0: 1605632}, None),
        MemoryDep('buf9', 8*c0 + I, {c0: 100352, c1: 16}, None)]
op11.met_dependencies = 
    [   MemoryDep('arg22_1', I, {c0: 100352, c1: 16}, None),
        MemoryDep('arg23_1', I, {c0: 100352, c1: 16}, None),
        MemoryDep('arg24_1', I, {c0: 100352, c1: 16}, None),
        MemoryDep('arg25_1', I, {c0: 100352, c1: 16}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf11.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cuda:0
op11.group.iteration = (1605632, 1)
op11.sizes = ([100352, 16], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 112, 112], stride=[100352, 1, 896, 8])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op11_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = z1
    index1 = 8*z0 + I
    index2 = 8*z0 + I
    index3 = I
    index4 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(8, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(16, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf3', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf11', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf9', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op12: ExternKernelSchedulerNode(ExternKernelAlloc)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op12.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op12.outputs = [
    buf12: ExternKernelAlloc
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 112, 112], stride=[301056, 1, 2688, 24])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op12.node.kernel = extern_kernels.convolution


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 2408448}, None)]
op13.unmet_dependencies = [MemoryDep('buf12', c0, {c0: 2408448}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 100352, c1: 24}, None),
        MemoryDep('arg28_1', c1, {c0: 100352, c1: 24}, None),
        MemoryDep('arg29_1', c1, {c0: 100352, c1: 24}, None),
        MemoryDep('arg30_1', c1, {c0: 100352, c1: 24}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 112, 112], stride=[301056, 1, 2688, 24])
    buf13.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (2408448, 1)
op13.sizes = ([100352, 24], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 112, 112], stride=[301056, 1, 2688, 24])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 112, 112], stride=[301056, 1, 2688, 24])
class op13_loop_body:
    var_ranges = {z0: 100352, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf13', get_index_5, relu, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelAlloc)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op14.outputs = [
    buf14: ExternKernelAlloc
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 112, 112], stride=[301056, 1, 2688, 24])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = extern_kernels.convolution


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 4816896}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf13', 24*c0 + I, {c0: 100352, c1: 48}, None),
        MemoryDep('buf14', 24*c0 + I, {c0: 100352, c1: 48}, None)]
op15.met_dependencies = 
    [   MemoryDep('arg32_1', I, {c0: 100352, c1: 48}, None),
        MemoryDep('arg33_1', I, {c0: 100352, c1: 48}, None),
        MemoryDep('arg34_1', I, {c0: 100352, c1: 48}, None),
        MemoryDep('arg35_1', I, {c0: 100352, c1: 48}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 112, 112], stride=[602112, 1, 5376, 48])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (4816896, 1)
op15.sizes = ([100352, 48], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 112, 112], stride=[301056, 1, 2688, 24])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 112, 112], stride=[301056, 1, 2688, 24])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 112, 112], stride=[602112, 1, 5376, 48])
class op15_loop_body:
    var_ranges = {z0: 100352, z1: 48}
    index0 = z1
    index1 = 24*z0 + I
    index2 = 24*z0 + I
    index3 = I
    index4 = 48*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(24, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(24, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(48, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf15', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf13', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg32_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg33_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 56, 56], stride=[150528, 1, 2688, 48])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.convolution


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 1204224}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 1204224}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 25088, c1: 48}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 48}, None),
        MemoryDep('arg39_1', c1, {c0: 25088, c1: 48}, None),
        MemoryDep('arg40_1', c1, {c0: 25088, c1: 48}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 56, 56], stride=[150528, 1, 2688, 48])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (1204224, 1)
op17.sizes = ([25088, 48], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 56, 56], stride=[150528, 1, 2688, 48])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 56, 56], stride=[150528, 1, 2688, 48])
class op17_loop_body:
    var_ranges = {z0: 25088, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf17', get_index_5, add_1, None)
        return store


op18: ExternKernelSchedulerNode(ExternKernelAlloc)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelAlloc
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False)]
]
op18.node.kernel = extern_kernels.convolution


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 301056}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 301056}, None)]
op19.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 12}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 12}, None),
        MemoryDep('arg44_1', c1, {c0: 25088, c1: 12}, None),
        MemoryDep('arg45_1', c1, {c0: 25088, c1: 12}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (301056, 1)
op19.sizes = ([25088, 12], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
class op19_loop_body:
    var_ranges = {z0: 25088, z1: 12}
    index0 = 12*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf19', get_index_5, add_1, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelAlloc)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelAlloc
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
    buf20.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op20.node.kernel = extern_kernels.convolution


op21: ExternKernelSchedulerNode(ExternKernelAlloc)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op21.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelAlloc
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 56, 56], stride=[50176, 1, 896, 16])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.convolution


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 401408}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 401408}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 25088, c1: 16}, None),
        MemoryDep('arg53_1', c1, {c0: 25088, c1: 16}, None),
        MemoryDep('arg54_1', c1, {c0: 25088, c1: 16}, None),
        MemoryDep('arg55_1', c1, {c0: 25088, c1: 16}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 56, 56], stride=[50176, 1, 896, 16])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (401408, 1)
op22.sizes = ([25088, 16], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 56, 56], stride=[50176, 1, 896, 16])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 56, 56], stride=[50176, 1, 896, 16])
class op22_loop_body:
    var_ranges = {z0: 25088, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf22', get_index_5, add_1, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelAlloc)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelAlloc
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.convolution


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 602112}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf19', 12*c0 + I, {c0: 25088, c1: 24}, None),
        MemoryDep('buf20', 12*c0 + I, {c0: 25088, c1: 24}, None),
        MemoryDep('buf23', c0, {c0: 602112}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg47_1', I, {c0: 25088, c1: 24}, None),
        MemoryDep('arg48_1', I, {c0: 25088, c1: 24}, None),
        MemoryDep('arg49_1', I, {c0: 25088, c1: 24}, None),
        MemoryDep('arg50_1', I, {c0: 25088, c1: 24}, None),
        MemoryDep('arg57_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg58_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg59_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg60_1', c1, {c0: 25088, c1: 24}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf24.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (602112, 1)
op24.sizes = ([25088, 24], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
class op24_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = z1
    index1 = 12*z0 + I
    index2 = 12*z0 + I
    index3 = I
    index4 = 24*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(12, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(12, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(24, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf23', get_index_4)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg57_1', get_index_5)
        sub = ops.sub(load, load_1)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg58_1', get_index_6)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg59_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_8 = self.get_index('index0')
        load_4 = ops.load('arg60_1', get_index_8)
        add_1 = ops.add(mul_2, load_4)
        add_2 = ops.add(where, add_1)
        get_index_9 = self.get_index('index4')
        store = ops.store('buf24', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf19', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op25: ExternKernelSchedulerNode(ExternKernelAlloc)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelAlloc
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.node.kernel = extern_kernels.convolution


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 903168}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 903168}, None)]
op26.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 25088, c1: 36}, None),
        MemoryDep('arg63_1', c1, {c0: 25088, c1: 36}, None),
        MemoryDep('arg64_1', c1, {c0: 25088, c1: 36}, None),
        MemoryDep('arg65_1', c1, {c0: 25088, c1: 36}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
    buf26.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (903168, 1)
op26.sizes = ([25088, 36], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
class op26_loop_body:
    var_ranges = {z0: 25088, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf26', get_index_5, relu, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelAlloc)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelAlloc
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.node.kernel = extern_kernels.convolution


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1806336}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf26', 36*c0 + I, {c0: 25088, c1: 72}, None),
        MemoryDep('buf27', 36*c0 + I, {c0: 25088, c1: 72}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg67_1', I, {c0: 25088, c1: 72}, None),
        MemoryDep('arg68_1', I, {c0: 25088, c1: 72}, None),
        MemoryDep('arg69_1', I, {c0: 25088, c1: 72}, None),
        MemoryDep('arg70_1', I, {c0: 25088, c1: 72}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (1806336, 1)
op28.sizes = ([25088, 72], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
class op28_loop_body:
    var_ranges = {z0: 25088, z1: 72}
    index0 = z1
    index1 = 36*z0 + I
    index2 = 36*z0 + I
    index3 = I
    index4 = 72*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(36, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(36, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(72, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf28', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf26', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg67_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg68_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg70_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op29: ExternKernelSchedulerNode(ExternKernelAlloc)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelAlloc
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.node.kernel = extern_kernels.convolution


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 301056}, None)]
op30.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 301056}, None)]
op30.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 25088, c1: 12}, None),
        MemoryDep('arg73_1', c1, {c0: 25088, c1: 12}, None),
        MemoryDep('arg74_1', c1, {c0: 25088, c1: 12}, None),
        MemoryDep('arg75_1', c1, {c0: 25088, c1: 12}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
    buf30.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op30.group.device = cuda:0
op30.group.iteration = (301056, 1)
op30.sizes = ([25088, 12], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
class op30_loop_body:
    var_ranges = {z0: 25088, z1: 12}
    index0 = 12*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf30', get_index_5, add_1, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelAlloc)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelAlloc
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.node.kernel = extern_kernels.convolution


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 602112}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 602112}, None),
        MemoryDep('buf30', 12*c0 + I, {c0: 25088, c1: 24}, None),
        MemoryDep('buf31', 12*c0 + I, {c0: 25088, c1: 24}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg77_1', I, {c0: 25088, c1: 24}, None),
        MemoryDep('arg78_1', I, {c0: 25088, c1: 24}, None),
        MemoryDep('arg79_1', I, {c0: 25088, c1: 24}, None),
        MemoryDep('arg80_1', I, {c0: 25088, c1: 24}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf32.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (602112, 1)
op32.sizes = ([25088, 24], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 12, 56, 56], stride=[37632, 1, 672, 12])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[12], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
class op32_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = z1
    index1 = 12*z0 + I
    index2 = 12*z0 + I
    index3 = I
    index4 = 24*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(12, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(12, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(24, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf24', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf32', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf30', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg77_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg78_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op33: ExternKernelSchedulerNode(ExternKernelAlloc)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelAlloc
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.node.kernel = extern_kernels.convolution


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 903168}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 903168}, None)]
op34.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 25088, c1: 36}, None),
        MemoryDep('arg83_1', c1, {c0: 25088, c1: 36}, None),
        MemoryDep('arg84_1', c1, {c0: 25088, c1: 36}, None),
        MemoryDep('arg85_1', c1, {c0: 25088, c1: 36}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
    buf34.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (903168, 1)
op34.sizes = ([25088, 36], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
class op34_loop_body:
    var_ranges = {z0: 25088, z1: 36}
    index0 = 36*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf34', get_index_5, relu, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelAlloc)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelAlloc
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.node.kernel = extern_kernels.convolution


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 1806336}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf34', 36*c0 + I, {c0: 25088, c1: 72}, None),
        MemoryDep('buf35', 36*c0 + I, {c0: 25088, c1: 72}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg87_1', I, {c0: 25088, c1: 72}, None),
        MemoryDep('arg88_1', I, {c0: 25088, c1: 72}, None),
        MemoryDep('arg89_1', I, {c0: 25088, c1: 72}, None),
        MemoryDep('arg90_1', I, {c0: 25088, c1: 72}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (1806336, 1)
op36.sizes = ([25088, 72], [])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 56, 56], stride=[112896, 1, 2016, 36])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[36], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 56, 56], stride=[225792, 1, 4032, 72])
class op36_loop_body:
    var_ranges = {z0: 25088, z1: 72}
    index0 = z1
    index1 = 36*z0 + I
    index2 = 36*z0 + I
    index3 = I
    index4 = 72*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(36, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(36, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(72, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf36', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf34', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg87_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg88_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op37: ExternKernelSchedulerNode(ExternKernelAlloc)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelAlloc
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False)]
]
op37.node.kernel = extern_kernels.convolution


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 451584}, None)]
op38.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 451584}, None)]
op38.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg93_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg94_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg95_1', c1, {c0: 6272, c1: 72}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf38.users = [
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
    ]
]
op38.group.device = cuda:0
op38.group.iteration = (451584, 1)
op38.sizes = ([6272, 72], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
class op38_loop_body:
    var_ranges = {z0: 6272, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf38', get_index_5, add_1, None)
        return store


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 4032}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', 8064*c0 + c1 + 72*c2, {c0: 56, c1: 72, c2: 112}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1, 7], stride=[504, 1, 4032, 4032, 72])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (4032, 112)
op39.sizes = ([56, 72], [112])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1, 7], stride=[504, 1, 4032, 4032, 72])
class op39_loop_body:
    var_ranges = {z0: 56, z1: 72, z2: 112}
    index0 = 8064*z0 + z1 + 72*z2
    index1 = 72*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf39', get_index_1, reduction)
        return store_reduction


op40_op41: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op40_op41.writes = 
    [   MemoryDep('buf40', c0, {c0: 576}, None),
        MemoryDep('buf41', c0, {c0: 576}, None)]
op40_op41.unmet_dependencies = [MemoryDep('buf39', 504*c0 + c1 + 72*c2, {c0: 8, c1: 72, c2: 7}, None)]
op40_op41.met_dependencies = []
op40_op41.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 576, 576])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 1, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op40_op41.snodes[0] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 576}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', 504*c0 + c1 + 72*c2, {c0: 8, c1: 72, c2: 7}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 576, 576])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (576, 7)
op40.sizes = ([8, 72], [7])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1, 7], stride=[504, 1, 4032, 4032, 72])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 576, 576])
class op40_loop_body:
    var_ranges = {z0: 8, z1: 72, z2: 7}
    index0 = 504*z0 + z1 + 72*z2
    index1 = 72*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf40', get_index_1, reduction)
        return store_reduction
op40_op41.snodes[1] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 576}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 576}, None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 1, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (576, 1)
op41.sizes = ([576], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 576, 576])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 1, 1])
class op41_loop_body:
    var_ranges = {z0: 576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf41', get_index_1, truediv, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelAlloc)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelAlloc
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.node.kernel = extern_kernels.convolution


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 160}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 160}, None)]
op43.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 8, c1: 20}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (160, 1)
op43.sizes = ([8, 20], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
class op43_loop_body:
    var_ranges = {z0: 8, z1: 20}
    index0 = 20*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf43', get_index_2, relu, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelAlloc)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelAlloc
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 1, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.node.kernel = extern_kernels.convolution


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 451584}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf38', c0, {c0: 451584}, None),
        MemoryDep('buf44', 72*c0 + c2, {c0: 8, c1: 784, c2: 72}, None)]
op45.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 6272, c1: 72}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (451584, 1)
op45.sizes = ([8, 784, 72], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 1, 1], stride=[72, 1, 1, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
class op45_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 72}
    index0 = 56448*z0 + 72*z1 + z2
    index1 = 72*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf44', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg99_1', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(3.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul = ops.mul(minimum, constant_3)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf45', get_index_3, mul_1, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.convolution


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 125440}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 125440}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 6272, c1: 20}, None),
        MemoryDep('arg102_1', c1, {c0: 6272, c1: 20}, None),
        MemoryDep('arg103_1', c1, {c0: 6272, c1: 20}, None),
        MemoryDep('arg104_1', c1, {c0: 6272, c1: 20}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
    buf47.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (125440, 1)
op47.sizes = ([6272, 20], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
class op47_loop_body:
    var_ranges = {z0: 6272, z1: 20}
    index0 = 20*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg102_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg103_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg104_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf47', get_index_5, add_1, None)
        return store


op48: ExternKernelSchedulerNode(ExternKernelAlloc)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelAlloc
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
    buf48.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op48.node.kernel = extern_kernels.convolution


op49: ExternKernelSchedulerNode(ExternKernelAlloc)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op49.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelAlloc
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 28, 28], stride=[18816, 1, 672, 24])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.node.kernel = extern_kernels.convolution


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 150528}, None)]
op50.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 150528}, None)]
op50.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 6272, c1: 24}, None),
        MemoryDep('arg112_1', c1, {c0: 6272, c1: 24}, None),
        MemoryDep('arg113_1', c1, {c0: 6272, c1: 24}, None),
        MemoryDep('arg114_1', c1, {c0: 6272, c1: 24}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 28, 28], stride=[18816, 1, 672, 24])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (150528, 1)
op50.sizes = ([6272, 24], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 28, 28], stride=[18816, 1, 672, 24])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 28, 28], stride=[18816, 1, 672, 24])
class op50_loop_body:
    var_ranges = {z0: 6272, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg113_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg114_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf50', get_index_5, add_1, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelAlloc)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelAlloc
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False)]
]
op51.node.kernel = extern_kernels.convolution


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 250880}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf47', 20*c0 + I, {c0: 6272, c1: 40}, None),
        MemoryDep('buf48', 20*c0 + I, {c0: 6272, c1: 40}, None),
        MemoryDep('buf51', c0, {c0: 250880}, None)]
op52.met_dependencies = 
    [   MemoryDep('arg106_1', I, {c0: 6272, c1: 40}, None),
        MemoryDep('arg107_1', I, {c0: 6272, c1: 40}, None),
        MemoryDep('arg108_1', I, {c0: 6272, c1: 40}, None),
        MemoryDep('arg109_1', I, {c0: 6272, c1: 40}, None),
        MemoryDep('arg116_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg117_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg118_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg119_1', c1, {c0: 6272, c1: 40}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf52.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (250880, 1)
op52.sizes = ([6272, 40], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
class op52_loop_body:
    var_ranges = {z0: 6272, z1: 40}
    index0 = z1
    index1 = 20*z0 + I
    index2 = 20*z0 + I
    index3 = I
    index4 = 40*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(20, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(20, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(40, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf51', get_index_4)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg116_1', get_index_5)
        sub = ops.sub(load, load_1)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg117_1', get_index_6)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg118_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_8 = self.get_index('index0')
        load_4 = ops.load('arg119_1', get_index_8)
        add_1 = ops.add(mul_2, load_4)
        add_2 = ops.add(where, add_1)
        get_index_9 = self.get_index('index4')
        store = ops.store('buf52', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf47', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg106_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg107_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg108_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg109_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op53: ExternKernelSchedulerNode(ExternKernelAlloc)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelAlloc
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.convolution


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 376320}, None)]
op54.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 376320}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg121_1', c1, {c0: 6272, c1: 60}, None),
        MemoryDep('arg122_1', c1, {c0: 6272, c1: 60}, None),
        MemoryDep('arg123_1', c1, {c0: 6272, c1: 60}, None),
        MemoryDep('arg124_1', c1, {c0: 6272, c1: 60}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
    buf54.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (376320, 1)
op54.sizes = ([6272, 60], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[60], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[60], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[60], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[60], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
class op54_loop_body:
    var_ranges = {z0: 6272, z1: 60}
    index0 = 60*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg122_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg123_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg124_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf54', get_index_5, relu, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelAlloc)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelAlloc
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.convolution


op56_op57_op58: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op56_op57_op58.writes = 
    [   MemoryDep('buf56', c0, {c0: 752640}, None),
        MemoryDep('buf57', c0, {c0: 960}, None),
        MemoryDep('buf58', c0, {c0: 960}, None)]
op56_op57_op58.unmet_dependencies = 
    [   MemoryDep('buf54', 47040*c0 + 60*c2 + I, {c0: 8, c1: 120, c2: 784}, None),
        MemoryDep('buf55', 47040*c0 + 60*c2 + I, {c0: 8, c1: 120, c2: 784}, None)]
op56_op57_op58.met_dependencies = 
    [   MemoryDep('arg126_1', I, {c0: 8, c1: 120}, None),
        MemoryDep('arg127_1', I, {c0: 8, c1: 120}, None),
        MemoryDep('arg128_1', I, {c0: 8, c1: 120}, None),
        MemoryDep('arg129_1', I, {c0: 8, c1: 120}, None)]
op56_op57_op58.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 784, 28, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op56_op57_op58.snodes[0] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 752640}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf54', 47040*c0 + 60*c2 + I, {c0: 8, c1: 120, c2: 784}, None),
        MemoryDep('buf55', 47040*c0 + 60*c2 + I, {c0: 8, c1: 120, c2: 784}, None)]
op56.met_dependencies = 
    [   MemoryDep('arg126_1', I, {c0: 8, c1: 120}, None),
        MemoryDep('arg127_1', I, {c0: 8, c1: 120}, None),
        MemoryDep('arg128_1', I, {c0: 8, c1: 120}, None),
        MemoryDep('arg129_1', I, {c0: 8, c1: 120}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 784, 28, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (752640, 1)
op56.sizes = ([8, 120, 784], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 60, 28, 28], stride=[47040, 1, 1680, 60])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[60], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[60], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[60], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[60], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 784, 28, 1])
class op56_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 784}
    index0 = z1
    index1 = 47040*z0 + 60*z2 + I
    index2 = 47040*z0 + 60*z2 + I
    index3 = I
    index4 = 94080*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(60, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(60, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(120, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf56', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf54', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg126_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg127_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg128_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg129_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu
op56_op57_op58.snodes[1] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 960}, None)]
op57.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 752640}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (960, 784)
op57.sizes = ([960], [784])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 784, 28, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
class op57_loop_body:
    var_ranges = {z0: 960, z1: 784}
    index0 = 784*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf57', get_index_1, reduction)
        return store_reduction
op56_op57_op58.snodes[2] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 960}, None)]
op58.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 960}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (960, 1)
op58.sizes = ([960], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
class op58_loop_body:
    var_ranges = {z0: 960}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf58', get_index_1, truediv, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelAlloc)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelAlloc
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.convolution


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 256}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 256}, None)]
op60.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 8, c1: 32}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (256, 1)
op60.sizes = ([8, 32], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op60_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf60', get_index_2, relu, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelAlloc)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelAlloc
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.node.kernel = extern_kernels.convolution


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', 94080*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 784}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 752640}, None),
        MemoryDep('buf61', c0, {c0: 960}, None)]
op62.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 8, c1: 120}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (752640, 1)
op62.sizes = ([8, 120, 784], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 784, 28, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
class op62_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 784}
    index0 = 94080*z0 + 784*z1 + z2
    index1 = 120*z0 + z1
    index2 = z1
    index3 = 94080*z0 + z1 + 120*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg133_1', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(3.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul = ops.mul(minimum, constant_3)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index3')
        store = ops.store('buf62', get_index_3, mul_1, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelAlloc)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelAlloc
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
]
op63.node.kernel = extern_kernels.convolution


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 125440}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 125440}, None)]
op64.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 6272, c1: 20}, None),
        MemoryDep('arg136_1', c1, {c0: 6272, c1: 20}, None),
        MemoryDep('arg137_1', c1, {c0: 6272, c1: 20}, None),
        MemoryDep('arg138_1', c1, {c0: 6272, c1: 20}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
    buf64.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (125440, 1)
op64.sizes = ([6272, 20], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
class op64_loop_body:
    var_ranges = {z0: 6272, z1: 20}
    index0 = 20*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg136_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg137_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg138_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf64', get_index_5, add_1, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelAlloc)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelAlloc
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.node.kernel = extern_kernels.convolution


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 250880}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 250880}, None),
        MemoryDep('buf64', 20*c0 + I, {c0: 6272, c1: 40}, None),
        MemoryDep('buf65', 20*c0 + I, {c0: 6272, c1: 40}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg140_1', I, {c0: 6272, c1: 40}, None),
        MemoryDep('arg141_1', I, {c0: 6272, c1: 40}, None),
        MemoryDep('arg142_1', I, {c0: 6272, c1: 40}, None),
        MemoryDep('arg143_1', I, {c0: 6272, c1: 40}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (250880, 1)
op66.sizes = ([6272, 40], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 28, 28], stride=[15680, 1, 560, 20])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
class op66_loop_body:
    var_ranges = {z0: 6272, z1: 40}
    index0 = z1
    index1 = 20*z0 + I
    index2 = 20*z0 + I
    index3 = I
    index4 = 40*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(20, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(20, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(40, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf52', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf66', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf64', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg140_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg141_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg142_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg143_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op67: ExternKernelSchedulerNode(ExternKernelAlloc)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelAlloc
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.convolution


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 752640}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 752640}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg145_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg146_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg147_1', c1, {c0: 6272, c1: 120}, None),
        MemoryDep('arg148_1', c1, {c0: 6272, c1: 120}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf68.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (752640, 1)
op68.sizes = ([6272, 120], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
class op68_loop_body:
    var_ranges = {z0: 6272, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg145_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg146_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg148_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf68', get_index_5, relu, None)
        return store


op69: ExternKernelSchedulerNode(ExternKernelAlloc)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelAlloc
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.node.kernel = extern_kernels.convolution


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 1505280}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf68', 120*c0 + I, {c0: 6272, c1: 240}, None),
        MemoryDep('buf69', 120*c0 + I, {c0: 6272, c1: 240}, None)]
op70.met_dependencies = 
    [   MemoryDep('arg150_1', I, {c0: 6272, c1: 240}, None),
        MemoryDep('arg151_1', I, {c0: 6272, c1: 240}, None),
        MemoryDep('arg152_1', I, {c0: 6272, c1: 240}, None),
        MemoryDep('arg153_1', I, {c0: 6272, c1: 240}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (1505280, 1)
op70.sizes = ([6272, 240], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 28, 28], stride=[94080, 1, 3360, 120])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
class op70_loop_body:
    var_ranges = {z0: 6272, z1: 240}
    index0 = z1
    index1 = 120*z0 + I
    index2 = 120*z0 + I
    index3 = I
    index4 = 240*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(120, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(120, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(240, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf70', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf68', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg150_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg151_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg152_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg153_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.convolution


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 376320}, None)]
op72.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 376320}, None)]
op72.met_dependencies = 
    [   MemoryDep('arg155_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg156_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg157_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg158_1', c1, {c0: 1568, c1: 240}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (376320, 1)
op72.sizes = ([1568, 240], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op72_loop_body:
    var_ranges = {z0: 1568, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg157_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg158_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf72', get_index_5, add_1, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelAlloc)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelAlloc
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False)]
]
op73.node.kernel = extern_kernels.convolution


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 62720}, None)]
op74.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 62720}, None)]
op74.met_dependencies = 
    [   MemoryDep('arg160_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg161_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg162_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg163_1', c1, {c0: 1568, c1: 40}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (62720, 1)
op74.sizes = ([1568, 40], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
class op74_loop_body:
    var_ranges = {z0: 1568, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg161_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg162_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg163_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf74', get_index_5, add_1, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf75.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = extern_kernels.convolution


op76: ExternKernelSchedulerNode(ExternKernelAlloc)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op76.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelAlloc
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.node.kernel = extern_kernels.convolution


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 62720}, None)]
op77.unmet_dependencies = [MemoryDep('buf76', c0, {c0: 62720}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg170_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg171_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg172_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg173_1', c1, {c0: 1568, c1: 40}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (62720, 1)
op77.sizes = ([1568, 40], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
class op77_loop_body:
    var_ranges = {z0: 1568, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg170_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg171_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg172_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg173_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf77', get_index_5, add_1, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelAlloc)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelAlloc
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.convolution


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 125440}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf74', 40*c0 + I, {c0: 1568, c1: 80}, None),
        MemoryDep('buf75', 40*c0 + I, {c0: 1568, c1: 80}, None),
        MemoryDep('buf78', c0, {c0: 125440}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg165_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg166_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg167_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg168_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg175_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg176_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg177_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg178_1', c1, {c0: 1568, c1: 80}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf79.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
    ]
]
op79.group.device = cuda:0
op79.group.iteration = (125440, 1)
op79.sizes = ([1568, 80], [])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op79_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = z1
    index1 = 40*z0 + I
    index2 = 40*z0 + I
    index3 = I
    index4 = 80*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(40, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(40, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(80, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf78', get_index_4)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg175_1', get_index_5)
        sub = ops.sub(load, load_1)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg176_1', get_index_6)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg177_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_8 = self.get_index('index0')
        load_4 = ops.load('arg178_1', get_index_8)
        add_1 = ops.add(mul_2, load_4)
        add_2 = ops.add(where, add_1)
        get_index_9 = self.get_index('index4')
        store = ops.store('buf79', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf74', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg165_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg166_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg167_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg168_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 100, 14, 14], stride=[19600, 1, 1400, 100])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 156800}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 156800}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 1568, c1: 100}, None),
        MemoryDep('arg181_1', c1, {c0: 1568, c1: 100}, None),
        MemoryDep('arg182_1', c1, {c0: 1568, c1: 100}, None),
        MemoryDep('arg183_1', c1, {c0: 1568, c1: 100}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 100, 14, 14], stride=[19600, 1, 1400, 100])
    buf81.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (156800, 1)
op81.sizes = ([1568, 100], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 100, 14, 14], stride=[19600, 1, 1400, 100])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 100, 14, 14], stride=[19600, 1, 1400, 100])
class op81_loop_body:
    var_ranges = {z0: 1568, z1: 100}
    index0 = 100*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg181_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg182_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg183_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, relu, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelAlloc)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelAlloc
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 100, 14, 14], stride=[19600, 1, 1400, 100])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.node.kernel = extern_kernels.convolution


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 313600}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf81', 100*c0 + I, {c0: 1568, c1: 200}, None),
        MemoryDep('buf82', 100*c0 + I, {c0: 1568, c1: 200}, None)]
op83.met_dependencies = 
    [   MemoryDep('arg185_1', I, {c0: 1568, c1: 200}, None),
        MemoryDep('arg186_1', I, {c0: 1568, c1: 200}, None),
        MemoryDep('arg187_1', I, {c0: 1568, c1: 200}, None),
        MemoryDep('arg188_1', I, {c0: 1568, c1: 200}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (313600, 1)
op83.sizes = ([1568, 200], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 100, 14, 14], stride=[19600, 1, 1400, 100])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 100, 14, 14], stride=[19600, 1, 1400, 100])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[100], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 14, 14], stride=[39200, 1, 2800, 200])
class op83_loop_body:
    var_ranges = {z0: 1568, z1: 200}
    index0 = z1
    index1 = 100*z0 + I
    index2 = 100*z0 + I
    index3 = I
    index4 = 200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(100, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(100, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(200, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf83', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf81', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg185_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg186_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg187_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg188_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op84: ExternKernelSchedulerNode(ExternKernelAlloc)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg189_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelAlloc
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.convolution


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 62720}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 62720}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg190_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg191_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg192_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg193_1', c1, {c0: 1568, c1: 40}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf85.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
    ]
]
op85.group.device = cuda:0
op85.group.iteration = (62720, 1)
op85.sizes = ([1568, 40], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
class op85_loop_body:
    var_ranges = {z0: 1568, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg190_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg192_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg193_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf85', get_index_5, add_1, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelAlloc)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelAlloc
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.node.kernel = extern_kernels.convolution


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 125440}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 125440}, None),
        MemoryDep('buf85', 40*c0 + I, {c0: 1568, c1: 80}, None),
        MemoryDep('buf86', 40*c0 + I, {c0: 1568, c1: 80}, None)]
op87.met_dependencies = 
    [   MemoryDep('arg195_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg196_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg197_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg198_1', I, {c0: 1568, c1: 80}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf87.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
    ]
]
op87.group.device = cuda:0
op87.group.iteration = (125440, 1)
op87.sizes = ([1568, 80], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op87_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = z1
    index1 = 40*z0 + I
    index2 = 40*z0 + I
    index3 = I
    index4 = 80*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(40, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(40, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(80, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf79', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf87', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf85', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg195_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg196_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg197_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg198_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op88: ExternKernelSchedulerNode(ExternKernelAlloc)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelAlloc
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.node.kernel = extern_kernels.convolution


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 144256}, None)]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 144256}, None)]
op89.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 1568, c1: 92}, None),
        MemoryDep('arg201_1', c1, {c0: 1568, c1: 92}, None),
        MemoryDep('arg202_1', c1, {c0: 1568, c1: 92}, None),
        MemoryDep('arg203_1', c1, {c0: 1568, c1: 92}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
    buf89.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
    ]
]
op89.group.device = cuda:0
op89.group.iteration = (144256, 1)
op89.sizes = ([1568, 92], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
class op89_loop_body:
    var_ranges = {z0: 1568, z1: 92}
    index0 = 92*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg200_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg201_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg202_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg203_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf89', get_index_5, relu, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelAlloc)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg204_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelAlloc
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.node.kernel = extern_kernels.convolution


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 288512}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf89', 92*c0 + I, {c0: 1568, c1: 184}, None),
        MemoryDep('buf90', 92*c0 + I, {c0: 1568, c1: 184}, None)]
op91.met_dependencies = 
    [   MemoryDep('arg205_1', I, {c0: 1568, c1: 184}, None),
        MemoryDep('arg206_1', I, {c0: 1568, c1: 184}, None),
        MemoryDep('arg207_1', I, {c0: 1568, c1: 184}, None),
        MemoryDep('arg208_1', I, {c0: 1568, c1: 184}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (288512, 1)
op91.sizes = ([1568, 184], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
class op91_loop_body:
    var_ranges = {z0: 1568, z1: 184}
    index0 = z1
    index1 = 92*z0 + I
    index2 = 92*z0 + I
    index3 = I
    index4 = 184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(92, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(92, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(184, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf91', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf89', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg205_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg206_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg207_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg208_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op92: ExternKernelSchedulerNode(ExternKernelAlloc)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelAlloc
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.convolution


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 62720}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 62720}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg210_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg211_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg212_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg213_1', c1, {c0: 1568, c1: 40}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf93.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (62720, 1)
op93.sizes = ([1568, 40], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
class op93_loop_body:
    var_ranges = {z0: 1568, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg210_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg211_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg212_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg213_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf93', get_index_5, add_1, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelAlloc)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg214_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelAlloc
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.node.kernel = extern_kernels.convolution


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 125440}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf87', c0, {c0: 125440}, None),
        MemoryDep('buf93', 40*c0 + I, {c0: 1568, c1: 80}, None),
        MemoryDep('buf94', 40*c0 + I, {c0: 1568, c1: 80}, None)]
op95.met_dependencies = 
    [   MemoryDep('arg215_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg216_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg217_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg218_1', I, {c0: 1568, c1: 80}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf95.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (125440, 1)
op95.sizes = ([1568, 80], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op95_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = z1
    index1 = 40*z0 + I
    index2 = 40*z0 + I
    index3 = I
    index4 = 80*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(40, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(40, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(80, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf87', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf95', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf93', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg215_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg216_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg217_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg218_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op96: ExternKernelSchedulerNode(ExternKernelAlloc)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg219_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelAlloc
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False)]
]
op96.node.kernel = extern_kernels.convolution


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 144256}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 144256}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg220_1', c1, {c0: 1568, c1: 92}, None),
        MemoryDep('arg221_1', c1, {c0: 1568, c1: 92}, None),
        MemoryDep('arg222_1', c1, {c0: 1568, c1: 92}, None),
        MemoryDep('arg223_1', c1, {c0: 1568, c1: 92}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
    buf97.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op97.group.device = cuda:0
op97.group.iteration = (144256, 1)
op97.sizes = ([1568, 92], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
class op97_loop_body:
    var_ranges = {z0: 1568, z1: 92}
    index0 = 92*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg220_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg221_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg222_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg223_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf97', get_index_5, relu, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelAlloc)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg224_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelAlloc
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.node.kernel = extern_kernels.convolution


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 288512}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf97', 92*c0 + I, {c0: 1568, c1: 184}, None),
        MemoryDep('buf98', 92*c0 + I, {c0: 1568, c1: 184}, None)]
op99.met_dependencies = 
    [   MemoryDep('arg225_1', I, {c0: 1568, c1: 184}, None),
        MemoryDep('arg226_1', I, {c0: 1568, c1: 184}, None),
        MemoryDep('arg227_1', I, {c0: 1568, c1: 184}, None),
        MemoryDep('arg228_1', I, {c0: 1568, c1: 184}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (288512, 1)
op99.sizes = ([1568, 184], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 92, 14, 14], stride=[18032, 1, 1288, 92])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[92], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 14, 14], stride=[36064, 1, 2576, 184])
class op99_loop_body:
    var_ranges = {z0: 1568, z1: 184}
    index0 = z1
    index1 = 92*z0 + I
    index2 = 92*z0 + I
    index3 = I
    index4 = 184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(92, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(92, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(184, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf99', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf97', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg225_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg226_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg227_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg228_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 62720}, None)]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 62720}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg231_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg232_1', c1, {c0: 1568, c1: 40}, None),
        MemoryDep('arg233_1', c1, {c0: 1568, c1: 40}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
    ]
]
op101.group.device = cuda:0
op101.group.iteration = (62720, 1)
op101.sizes = ([1568, 40], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
class op101_loop_body:
    var_ranges = {z0: 1568, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg230_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg231_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg232_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg233_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf101', get_index_5, add_1, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelAlloc)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg234_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelAlloc
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = extern_kernels.convolution


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 125440}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf101', 40*c0 + I, {c0: 1568, c1: 80}, None),
        MemoryDep('buf102', 40*c0 + I, {c0: 1568, c1: 80}, None),
        MemoryDep('buf95', c0, {c0: 125440}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg235_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg236_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg237_1', I, {c0: 1568, c1: 80}, None),
        MemoryDep('arg238_1', I, {c0: 1568, c1: 80}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf103.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
    ]
]
op103.group.device = cuda:0
op103.group.iteration = (125440, 1)
op103.sizes = ([1568, 80], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 14, 14], stride=[7840, 1, 560, 40])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op103_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = z1
    index1 = 40*z0 + I
    index2 = 40*z0 + I
    index3 = I
    index4 = 80*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(40, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(40, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(80, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf95', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf103', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf101', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg235_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg236_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg237_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg238_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op104: ExternKernelSchedulerNode(ExternKernelAlloc)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg239_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelAlloc
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.convolution


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 376320}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 376320}, None)]
op105.met_dependencies = 
    [   MemoryDep('arg240_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg241_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg242_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg243_1', c1, {c0: 1568, c1: 240}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf105.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (376320, 1)
op105.sizes = ([1568, 240], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op105_loop_body:
    var_ranges = {z0: 1568, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg241_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg242_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg243_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf105', get_index_5, relu, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg244_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.convolution


op107_op108_op109: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op107_op108_op109.writes = 
    [   MemoryDep('buf107', c0, {c0: 752640}, None),
        MemoryDep('buf108', c0, {c0: 3840}, None),
        MemoryDep('buf109', c0, {c0: 3840}, None)]
op107_op108_op109.unmet_dependencies = 
    [   MemoryDep('buf105', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf106', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op107_op108_op109.met_dependencies = 
    [   MemoryDep('arg245_1', I, {c0: 8, c1: 480}, None),
        MemoryDep('arg246_1', I, {c0: 8, c1: 480}, None),
        MemoryDep('arg247_1', I, {c0: 8, c1: 480}, None),
        MemoryDep('arg248_1', I, {c0: 8, c1: 480}, None)]
op107_op108_op109.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
    ]
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op107_op108_op109.snodes[0] =
op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 752640}, None)]
op107.unmet_dependencies = 
    [   MemoryDep('buf105', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None),
        MemoryDep('buf106', 47040*c0 + 240*c2 + I, {c0: 8, c1: 480, c2: 196}, None)]
op107.met_dependencies = 
    [   MemoryDep('arg245_1', I, {c0: 8, c1: 480}, None),
        MemoryDep('arg246_1', I, {c0: 8, c1: 480}, None),
        MemoryDep('arg247_1', I, {c0: 8, c1: 480}, None),
        MemoryDep('arg248_1', I, {c0: 8, c1: 480}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
    ]
]
op107.group.device = cuda:0
op107.group.iteration = (752640, 1)
op107.sizes = ([8, 480, 196], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
class op107_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = z1
    index1 = 47040*z0 + 240*z2 + I
    index2 = 47040*z0 + 240*z2 + I
    index3 = I
    index4 = 94080*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(240, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(240, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(480, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf107', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf105', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg245_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg246_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg247_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg248_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu
op107_op108_op109.snodes[1] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 3840}, None)]
op108.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 752640}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (3840, 196)
op108.sizes = ([3840], [196])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
class op108_loop_body:
    var_ranges = {z0: 3840, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf108', get_index_1, reduction)
        return store_reduction
op107_op108_op109.snodes[2] =
op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 3840}, None)]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 3840}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (3840, 1)
op109.sizes = ([3840], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
class op109_loop_body:
    var_ranges = {z0: 3840}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf109', get_index_1, truediv, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg249_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.node.kernel = extern_kernels.convolution


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 960}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 960}, None)]
op111.met_dependencies = [MemoryDep('arg250_1', c1, {c0: 8, c1: 120}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (960, 1)
op111.sizes = ([8, 120], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
class op111_loop_body:
    var_ranges = {z0: 8, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg250_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf111', get_index_2, relu, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.node.kernel = extern_kernels.convolution


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', 94080*c0 + c1 + 480*c2, {c0: 8, c1: 480, c2: 196}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 752640}, None),
        MemoryDep('buf112', c0, {c0: 3840}, None)]
op113.met_dependencies = [MemoryDep('arg252_1', c1, {c0: 8, c1: 480}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (752640, 1)
op113.sizes = ([8, 480, 196], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 196, 14, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op113_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 196}
    index0 = 94080*z0 + 196*z1 + z2
    index1 = 480*z0 + z1
    index2 = z1
    index3 = 94080*z0 + z1 + 480*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf112', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg252_1', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(3.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul = ops.mul(minimum, constant_3)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index3')
        store = ops.store('buf113', get_index_3, mul_1, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelAlloc)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelAlloc
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op114.node.kernel = extern_kernels.convolution


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 87808}, None)]
op115.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 87808}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 1568, c1: 56}, None),
        MemoryDep('arg255_1', c1, {c0: 1568, c1: 56}, None),
        MemoryDep('arg256_1', c1, {c0: 1568, c1: 56}, None),
        MemoryDep('arg257_1', c1, {c0: 1568, c1: 56}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf115.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op115.group.device = cuda:0
op115.group.iteration = (87808, 1)
op115.sizes = ([1568, 56], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op115_loop_body:
    var_ranges = {z0: 1568, z1: 56}
    index0 = 56*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg254_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg255_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg256_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg257_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf115', get_index_5, add_1, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelAlloc)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelAlloc
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf116.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op116.node.kernel = extern_kernels.convolution


op117: ExternKernelSchedulerNode(ExternKernelAlloc)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op117.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelAlloc
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.convolution


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 125440}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 125440}, None)]
op118.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg265_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg266_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg267_1', c1, {c0: 1568, c1: 80}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (125440, 1)
op118.sizes = ([1568, 80], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op118_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg264_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg265_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg266_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg267_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf118', get_index_5, add_1, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelAlloc)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = [StarDep(name='arg268_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelAlloc
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False)]
]
op119.node.kernel = extern_kernels.convolution


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 175616}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf115', 56*c0 + I, {c0: 1568, c1: 112}, None),
        MemoryDep('buf116', 56*c0 + I, {c0: 1568, c1: 112}, None),
        MemoryDep('buf119', c0, {c0: 175616}, None)]
op120.met_dependencies = 
    [   MemoryDep('arg259_1', I, {c0: 1568, c1: 112}, None),
        MemoryDep('arg260_1', I, {c0: 1568, c1: 112}, None),
        MemoryDep('arg261_1', I, {c0: 1568, c1: 112}, None),
        MemoryDep('arg262_1', I, {c0: 1568, c1: 112}, None),
        MemoryDep('arg269_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg270_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg271_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg272_1', c1, {c0: 1568, c1: 112}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf120.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
    ]
]
op120.group.device = cuda:0
op120.group.iteration = (175616, 1)
op120.sizes = ([1568, 112], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
class op120_loop_body:
    var_ranges = {z0: 1568, z1: 112}
    index0 = z1
    index1 = 56*z0 + I
    index2 = 56*z0 + I
    index3 = I
    index4 = 112*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(56, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(112, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf119', get_index_4)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg269_1', get_index_5)
        sub = ops.sub(load, load_1)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg270_1', get_index_6)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg271_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_8 = self.get_index('index0')
        load_4 = ops.load('arg272_1', get_index_8)
        add_1 = ops.add(mul_2, load_4)
        add_2 = ops.add(where, add_1)
        get_index_9 = self.get_index('index4')
        store = ops.store('buf120', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf115', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg259_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg260_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg261_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg262_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op121: ExternKernelSchedulerNode(ExternKernelAlloc)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='arg273_1', mode=None)]
op121.outputs = [
    buf121: ExternKernelAlloc
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False)]
]
op121.node.kernel = extern_kernels.convolution


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 526848}, None)]
op122.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 526848}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg274_1', c1, {c0: 1568, c1: 336}, None),
        MemoryDep('arg275_1', c1, {c0: 1568, c1: 336}, None),
        MemoryDep('arg276_1', c1, {c0: 1568, c1: 336}, None),
        MemoryDep('arg277_1', c1, {c0: 1568, c1: 336}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
    buf122.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (526848, 1)
op122.sizes = ([1568, 336], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
class op122_loop_body:
    var_ranges = {z0: 1568, z1: 336}
    index0 = 336*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg274_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg276_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg277_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf122', get_index_5, relu, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelAlloc)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg278_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelAlloc
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = extern_kernels.convolution


op124_op125_op126: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op124_op125_op126.writes = 
    [   MemoryDep('buf124', c0, {c0: 1053696}, None),
        MemoryDep('buf125', c0, {c0: 5376}, None),
        MemoryDep('buf126', c0, {c0: 5376}, None)]
op124_op125_op126.unmet_dependencies = 
    [   MemoryDep('buf122', 65856*c0 + 336*c2 + I, {c0: 8, c1: 672, c2: 196}, None),
        MemoryDep('buf123', 65856*c0 + 336*c2 + I, {c0: 8, c1: 672, c2: 196}, None)]
op124_op125_op126.met_dependencies = 
    [   MemoryDep('arg279_1', I, {c0: 8, c1: 672}, None),
        MemoryDep('arg280_1', I, {c0: 8, c1: 672}, None),
        MemoryDep('arg281_1', I, {c0: 8, c1: 672}, None),
        MemoryDep('arg282_1', I, {c0: 8, c1: 672}, None)]
op124_op125_op126.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 196, 14, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op124_op125_op126.snodes[0] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 1053696}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf122', 65856*c0 + 336*c2 + I, {c0: 8, c1: 672, c2: 196}, None),
        MemoryDep('buf123', 65856*c0 + 336*c2 + I, {c0: 8, c1: 672, c2: 196}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg279_1', I, {c0: 8, c1: 672}, None),
        MemoryDep('arg280_1', I, {c0: 8, c1: 672}, None),
        MemoryDep('arg281_1', I, {c0: 8, c1: 672}, None),
        MemoryDep('arg282_1', I, {c0: 8, c1: 672}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 196, 14, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (1053696, 1)
op124.sizes = ([8, 672, 196], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 196, 14, 1])
class op124_loop_body:
    var_ranges = {z0: 8, z1: 672, z2: 196}
    index0 = z1
    index1 = 65856*z0 + 336*z2 + I
    index2 = 65856*z0 + 336*z2 + I
    index3 = I
    index4 = 131712*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(336, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(336, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(672, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf124', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf122', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg279_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg280_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg281_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg282_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu
op124_op125_op126.snodes[1] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 5376}, None)]
op125.unmet_dependencies = [MemoryDep('buf124', c0, {c0: 1053696}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (5376, 196)
op125.sizes = ([5376], [196])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 196, 14, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
class op125_loop_body:
    var_ranges = {z0: 5376, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf125', get_index_1, reduction)
        return store_reduction
op124_op125_op126.snodes[2] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 5376}, None)]
op126.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 5376}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (5376, 1)
op126.sizes = ([5376], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
class op126_loop_body:
    var_ranges = {z0: 5376}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf126', get_index_1, truediv, None)
        return store


op127: ExternKernelSchedulerNode(ExternKernelAlloc)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelAlloc
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False)]
]
op127.node.kernel = extern_kernels.convolution


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 1344}, None)]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 1344}, None)]
op128.met_dependencies = [MemoryDep('arg284_1', c1, {c0: 8, c1: 168}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (1344, 1)
op128.sizes = ([8, 168], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[168], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
class op128_loop_body:
    var_ranges = {z0: 8, z1: 168}
    index0 = 168*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg284_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf128', get_index_2, relu, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelAlloc)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg285_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelAlloc
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.convolution


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', 131712*c0 + c1 + 672*c2, {c0: 8, c1: 672, c2: 196}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 1053696}, None),
        MemoryDep('buf129', c0, {c0: 5376}, None)]
op130.met_dependencies = [MemoryDep('arg286_1', c1, {c0: 8, c1: 672}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (1053696, 1)
op130.sizes = ([8, 672, 196], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 196, 14, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op130_loop_body:
    var_ranges = {z0: 8, z1: 672, z2: 196}
    index0 = 131712*z0 + 196*z1 + z2
    index1 = 672*z0 + z1
    index2 = z1
    index3 = 131712*z0 + z1 + 672*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf129', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg286_1', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(3.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul = ops.mul(minimum, constant_3)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index3')
        store = ops.store('buf130', get_index_3, mul_1, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelAlloc)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg287_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelAlloc
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.node.kernel = extern_kernels.convolution


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 87808}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 87808}, None)]
op132.met_dependencies = 
    [   MemoryDep('arg288_1', c1, {c0: 1568, c1: 56}, None),
        MemoryDep('arg289_1', c1, {c0: 1568, c1: 56}, None),
        MemoryDep('arg290_1', c1, {c0: 1568, c1: 56}, None),
        MemoryDep('arg291_1', c1, {c0: 1568, c1: 56}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (87808, 1)
op132.sizes = ([1568, 56], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op132_loop_body:
    var_ranges = {z0: 1568, z1: 56}
    index0 = 56*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg288_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg289_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg290_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg291_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf132', get_index_5, add_1, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelAlloc)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='arg292_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelAlloc
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = extern_kernels.convolution


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 175616}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf120', c0, {c0: 175616}, None),
        MemoryDep('buf132', 56*c0 + I, {c0: 1568, c1: 112}, None),
        MemoryDep('buf133', 56*c0 + I, {c0: 1568, c1: 112}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg293_1', I, {c0: 1568, c1: 112}, None),
        MemoryDep('arg294_1', I, {c0: 1568, c1: 112}, None),
        MemoryDep('arg295_1', I, {c0: 1568, c1: 112}, None),
        MemoryDep('arg296_1', I, {c0: 1568, c1: 112}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf134.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (175616, 1)
op134.sizes = ([1568, 112], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
class op134_loop_body:
    var_ranges = {z0: 1568, z1: 112}
    index0 = z1
    index1 = 56*z0 + I
    index2 = 56*z0 + I
    index3 = I
    index4 = 112*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(56, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(112, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf120', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf134', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf132', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg293_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg294_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg295_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg296_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op135: ExternKernelSchedulerNode(ExternKernelAlloc)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op135.met_dependencies = [StarDep(name='arg297_1', mode=None)]
op135.outputs = [
    buf135: ExternKernelAlloc
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
    buf135.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False)]
]
op135.node.kernel = extern_kernels.convolution


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 526848}, None)]
op136.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 526848}, None)]
op136.met_dependencies = 
    [   MemoryDep('arg298_1', c1, {c0: 1568, c1: 336}, None),
        MemoryDep('arg299_1', c1, {c0: 1568, c1: 336}, None),
        MemoryDep('arg300_1', c1, {c0: 1568, c1: 336}, None),
        MemoryDep('arg301_1', c1, {c0: 1568, c1: 336}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
    buf136.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op136.group.device = cuda:0
op136.group.iteration = (526848, 1)
op136.sizes = ([1568, 336], [])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
class op136_loop_body:
    var_ranges = {z0: 1568, z1: 336}
    index0 = 336*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg298_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg299_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg300_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg301_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf136', get_index_5, relu, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelAlloc)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='arg302_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelAlloc
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op137.node.kernel = extern_kernels.convolution


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 1053696}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf136', 336*c0 + I, {c0: 1568, c1: 672}, None),
        MemoryDep('buf137', 336*c0 + I, {c0: 1568, c1: 672}, None)]
op138.met_dependencies = 
    [   MemoryDep('arg303_1', I, {c0: 1568, c1: 672}, None),
        MemoryDep('arg304_1', I, {c0: 1568, c1: 672}, None),
        MemoryDep('arg305_1', I, {c0: 1568, c1: 672}, None),
        MemoryDep('arg306_1', I, {c0: 1568, c1: 672}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (1053696, 1)
op138.sizes = ([1568, 672], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 336, 14, 14], stride=[65856, 1, 4704, 336])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[336], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op138_loop_body:
    var_ranges = {z0: 1568, z1: 672}
    index0 = z1
    index1 = 336*z0 + I
    index2 = 336*z0 + I
    index3 = I
    index4 = 672*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(336, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(336, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(672, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf138', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf136', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg303_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg304_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg305_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg306_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op139: ExternKernelSchedulerNode(ExternKernelAlloc)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg307_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelAlloc
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False)]
]
op139.node.kernel = extern_kernels.convolution


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 263424}, None)]
op140.unmet_dependencies = [MemoryDep('buf139', c0, {c0: 263424}, None)]
op140.met_dependencies = 
    [   MemoryDep('arg308_1', c1, {c0: 392, c1: 672}, None),
        MemoryDep('arg309_1', c1, {c0: 392, c1: 672}, None),
        MemoryDep('arg310_1', c1, {c0: 392, c1: 672}, None),
        MemoryDep('arg311_1', c1, {c0: 392, c1: 672}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
    buf140.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op140.group.device = cuda:0
op140.group.iteration = (263424, 1)
op140.sizes = ([392, 672], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
class op140_loop_body:
    var_ranges = {z0: 392, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg309_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg310_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg311_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf140', get_index_5, add_1, None)
        return store


op141_op142: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op141_op142.writes = 
    [   MemoryDep('buf141', c0, {c0: 5376}, None),
        MemoryDep('buf142', c0, {c0: 5376}, None)]
op141_op142.unmet_dependencies = [MemoryDep('buf140', 32928*c0 + c1 + 672*c2, {c0: 8, c1: 672, c2: 49}, None)]
op141_op142.met_dependencies = []
op141_op142.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op141_op142.snodes[0] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 5376}, None)]
op141.unmet_dependencies = [MemoryDep('buf140', 32928*c0 + c1 + 672*c2, {c0: 8, c1: 672, c2: 49}, None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (5376, 49)
op141.sizes = ([8, 672], [49])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
class op141_loop_body:
    var_ranges = {z0: 8, z1: 672, z2: 49}
    index0 = 32928*z0 + z1 + 672*z2
    index1 = 672*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf141', get_index_1, reduction)
        return store_reduction
op141_op142.snodes[1] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 5376}, None)]
op142.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 5376}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (5376, 1)
op142.sizes = ([5376], [])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
class op142_loop_body:
    var_ranges = {z0: 5376}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf142', get_index_1, truediv, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelAlloc)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg312_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelAlloc
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op143.node.kernel = extern_kernels.convolution


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 1344}, None)]
op144.unmet_dependencies = [MemoryDep('buf143', c0, {c0: 1344}, None)]
op144.met_dependencies = [MemoryDep('arg313_1', c1, {c0: 8, c1: 168}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (1344, 1)
op144.sizes = ([8, 168], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[168], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 168, 1, 1], stride=[168, 1, 1, 1])
class op144_loop_body:
    var_ranges = {z0: 8, z1: 168}
    index0 = 168*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg313_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf144', get_index_2, relu, None)
        return store


op145: ExternKernelSchedulerNode(ExternKernelAlloc)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg314_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelAlloc
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.node.kernel = extern_kernels.convolution


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 263424}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf140', c0, {c0: 263424}, None),
        MemoryDep('buf145', 672*c0 + c2, {c0: 8, c1: 49, c2: 672}, None)]
op146.met_dependencies = [MemoryDep('arg315_1', c1, {c0: 392, c1: 672}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (263424, 1)
op146.sizes = ([8, 49, 672], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
class op146_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 672}
    index0 = 32928*z0 + 672*z1 + z2
    index1 = 672*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf145', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg315_1', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(3.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul = ops.mul(minimum, constant_3)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf146', get_index_3, mul_1, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelAlloc)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg316_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelAlloc
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.convolution


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 31360}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 31360}, None)]
op148.met_dependencies = 
    [   MemoryDep('arg317_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg318_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg319_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg320_1', c1, {c0: 392, c1: 80}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf148.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
    ]
]
op148.group.device = cuda:0
op148.group.iteration = (31360, 1)
op148.sizes = ([392, 80], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
class op148_loop_body:
    var_ranges = {z0: 392, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg317_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg318_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg319_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg320_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf148', get_index_5, add_1, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg321_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf149.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op149.node.kernel = extern_kernels.convolution


op150: ExternKernelSchedulerNode(ExternKernelAlloc)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op150.met_dependencies = [StarDep(name='arg326_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelAlloc
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False)]
]
op150.node.kernel = extern_kernels.convolution


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 43904}, None)]
op151.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 43904}, None)]
op151.met_dependencies = 
    [   MemoryDep('arg327_1', c1, {c0: 392, c1: 112}, None),
        MemoryDep('arg328_1', c1, {c0: 392, c1: 112}, None),
        MemoryDep('arg329_1', c1, {c0: 392, c1: 112}, None),
        MemoryDep('arg330_1', c1, {c0: 392, c1: 112}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (43904, 1)
op151.sizes = ([392, 112], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op151_loop_body:
    var_ranges = {z0: 392, z1: 112}
    index0 = 112*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg327_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg328_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg329_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg330_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf151', get_index_5, add_1, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelAlloc)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg331_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelAlloc
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op152.node.kernel = extern_kernels.convolution


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 62720}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf148', 80*c0 + I, {c0: 392, c1: 160}, None),
        MemoryDep('buf149', 80*c0 + I, {c0: 392, c1: 160}, None),
        MemoryDep('buf152', c0, {c0: 62720}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg322_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg323_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg324_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg325_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg332_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg333_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg334_1', c1, {c0: 392, c1: 160}, None),
        MemoryDep('arg335_1', c1, {c0: 392, c1: 160}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (62720, 1)
op153.sizes = ([392, 160], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[160], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
class op153_loop_body:
    var_ranges = {z0: 392, z1: 160}
    index0 = z1
    index1 = 80*z0 + I
    index2 = 80*z0 + I
    index3 = I
    index4 = 160*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(80, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(80, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(160, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf152', get_index_4)
        get_index_5 = self.get_index('index0')
        load_1 = ops.load('arg332_1', get_index_5)
        sub = ops.sub(load, load_1)
        get_index_6 = self.get_index('index0')
        load_2 = ops.load('arg333_1', get_index_6)
        constant_4 = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant_4)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_5 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_5)
        mul_1 = ops.mul(sub, mul)
        get_index_7 = self.get_index('index0')
        load_3 = ops.load('arg334_1', get_index_7)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_8 = self.get_index('index0')
        load_4 = ops.load('arg335_1', get_index_8)
        add_1 = ops.add(mul_2, load_4)
        add_2 = ops.add(where, add_1)
        get_index_9 = self.get_index('index4')
        store = ops.store('buf153', get_index_9, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf148', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg322_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg323_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg324_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg325_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op154: ExternKernelSchedulerNode(ExternKernelAlloc)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg336_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelAlloc
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op154.node.kernel = extern_kernels.convolution


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 188160}, None)]
op155.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 188160}, None)]
op155.met_dependencies = 
    [   MemoryDep('arg337_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg338_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg339_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg340_1', c1, {c0: 392, c1: 480}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf155.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (188160, 1)
op155.sizes = ([392, 480], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
class op155_loop_body:
    var_ranges = {z0: 392, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg337_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg339_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg340_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf155', get_index_5, relu, None)
        return store


op156: ExternKernelSchedulerNode(ExternKernelAlloc)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg341_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelAlloc
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.node.kernel = extern_kernels.convolution


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 376320}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf155', 480*c0 + I, {c0: 392, c1: 960}, None),
        MemoryDep('buf156', 480*c0 + I, {c0: 392, c1: 960}, None)]
op157.met_dependencies = 
    [   MemoryDep('arg342_1', I, {c0: 392, c1: 960}, None),
        MemoryDep('arg343_1', I, {c0: 392, c1: 960}, None),
        MemoryDep('arg344_1', I, {c0: 392, c1: 960}, None),
        MemoryDep('arg345_1', I, {c0: 392, c1: 960}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (376320, 1)
op157.sizes = ([392, 960], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op157_loop_body:
    var_ranges = {z0: 392, z1: 960}
    index0 = z1
    index1 = 480*z0 + I
    index2 = 480*z0 + I
    index3 = I
    index4 = 960*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(480, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(480, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(960, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf157', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf155', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg342_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg343_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg344_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg345_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op158: ExternKernelSchedulerNode(ExternKernelAlloc)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op158.outputs = [
    buf158: ExternKernelAlloc
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
]
op158.node.kernel = extern_kernels.convolution


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 31360}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 31360}, None)]
op159.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg348_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg349_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg350_1', c1, {c0: 392, c1: 80}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf159.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (31360, 1)
op159.sizes = ([392, 80], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
class op159_loop_body:
    var_ranges = {z0: 392, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg349_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg350_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf159', get_index_5, add_1, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelAlloc)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op160.outputs = [
    buf160: ExternKernelAlloc
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.node.kernel = extern_kernels.convolution


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 62720}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 62720}, None),
        MemoryDep('buf159', 80*c0 + I, {c0: 392, c1: 160}, None),
        MemoryDep('buf160', 80*c0 + I, {c0: 392, c1: 160}, None)]
op161.met_dependencies = 
    [   MemoryDep('arg352_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg353_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg354_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg355_1', I, {c0: 392, c1: 160}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf161.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (62720, 1)
op161.sizes = ([392, 160], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
class op161_loop_body:
    var_ranges = {z0: 392, z1: 160}
    index0 = z1
    index1 = 80*z0 + I
    index2 = 80*z0 + I
    index3 = I
    index4 = 160*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(80, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(80, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(160, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf153', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf161', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf159', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg352_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg353_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg354_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg355_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op162: ExternKernelSchedulerNode(ExternKernelAlloc)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg356_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelAlloc
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf162.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False)]
]
op162.node.kernel = extern_kernels.convolution


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 188160}, None)]
op163.unmet_dependencies = [MemoryDep('buf162', c0, {c0: 188160}, None)]
op163.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg358_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg359_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg360_1', c1, {c0: 392, c1: 480}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf163.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
    ]
]
op163.group.device = cuda:0
op163.group.iteration = (188160, 1)
op163.sizes = ([392, 480], [])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
class op163_loop_body:
    var_ranges = {z0: 392, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg358_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg359_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg360_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf163', get_index_5, relu, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelAlloc)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = [StarDep(name='arg361_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelAlloc
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = extern_kernels.convolution


op165_op166_op167: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op165_op166_op167.writes = 
    [   MemoryDep('buf165', c0, {c0: 376320}, None),
        MemoryDep('buf166', c0, {c0: 7680}, None),
        MemoryDep('buf167', c0, {c0: 7680}, None)]
op165_op166_op167.unmet_dependencies = 
    [   MemoryDep('buf163', 23520*c0 + 480*c2 + I, {c0: 8, c1: 960, c2: 49}, None),
        MemoryDep('buf164', 23520*c0 + 480*c2 + I, {c0: 8, c1: 960, c2: 49}, None)]
op165_op166_op167.met_dependencies = 
    [   MemoryDep('arg362_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg363_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg364_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg365_1', I, {c0: 8, c1: 960}, None)]
op165_op166_op167.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
    ]
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op165_op166_op167.snodes[0] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 376320}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf163', 23520*c0 + 480*c2 + I, {c0: 8, c1: 960, c2: 49}, None),
        MemoryDep('buf164', 23520*c0 + 480*c2 + I, {c0: 8, c1: 960, c2: 49}, None)]
op165.met_dependencies = 
    [   MemoryDep('arg362_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg363_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg364_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg365_1', I, {c0: 8, c1: 960}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
    ]
]
op165.group.device = cuda:0
op165.group.iteration = (376320, 1)
op165.sizes = ([8, 960, 49], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
class op165_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = z1
    index1 = 23520*z0 + 480*z2 + I
    index2 = 23520*z0 + 480*z2 + I
    index3 = I
    index4 = 47040*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(480, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(480, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(960, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf165', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf163', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg362_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg363_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg364_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg365_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu
op165_op166_op167.snodes[1] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 7680}, None)]
op166.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 376320}, None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (7680, 49)
op166.sizes = ([7680], [49])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
class op166_loop_body:
    var_ranges = {z0: 7680, z1: 49}
    index0 = 49*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf166', get_index_1, reduction)
        return store_reduction
op165_op166_op167.snodes[2] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 7680}, None)]
op167.unmet_dependencies = [MemoryDep('buf166', c0, {c0: 7680}, None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (7680, 1)
op167.sizes = ([7680], [])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
class op167_loop_body:
    var_ranges = {z0: 7680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf166', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf167', get_index_1, truediv, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelAlloc)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg366_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelAlloc
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False)]
]
op168.node.kernel = extern_kernels.convolution


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 1920}, None)]
op169.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 1920}, None)]
op169.met_dependencies = [MemoryDep('arg367_1', c1, {c0: 8, c1: 240}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (1920, 1)
op169.sizes = ([8, 240], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
class op169_loop_body:
    var_ranges = {z0: 8, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg367_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf169', get_index_2, relu, None)
        return store


op170: ExternKernelSchedulerNode(ExternKernelAlloc)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='arg368_1', mode=None)]
op170.outputs = [
    buf170: ExternKernelAlloc
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.node.kernel = extern_kernels.convolution


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', 47040*c0 + c1 + 960*c2, {c0: 8, c1: 960, c2: 49}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf165', c0, {c0: 376320}, None),
        MemoryDep('buf170', c0, {c0: 7680}, None)]
op171.met_dependencies = [MemoryDep('arg369_1', c1, {c0: 8, c1: 960}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (376320, 1)
op171.sizes = ([8, 960, 49], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
arg369_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op171_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = 47040*z0 + 49*z1 + z2
    index1 = 960*z0 + z1
    index2 = z1
    index3 = 47040*z0 + z1 + 960*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf170', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg369_1', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(3.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul = ops.mul(minimum, constant_3)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index3')
        store = ops.store('buf171', get_index_3, mul_1, None)
        return store


op172: ExternKernelSchedulerNode(ExternKernelAlloc)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg370_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelAlloc
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.convolution


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 31360}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 31360}, None)]
op173.met_dependencies = 
    [   MemoryDep('arg371_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg372_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg373_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg374_1', c1, {c0: 392, c1: 80}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf173.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (31360, 1)
op173.sizes = ([392, 80], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
class op173_loop_body:
    var_ranges = {z0: 392, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg371_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg372_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg373_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg374_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf173', get_index_5, add_1, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelAlloc)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg375_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelAlloc
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = extern_kernels.convolution


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 62720}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 62720}, None),
        MemoryDep('buf173', 80*c0 + I, {c0: 392, c1: 160}, None),
        MemoryDep('buf174', 80*c0 + I, {c0: 392, c1: 160}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg376_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg377_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg378_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg379_1', I, {c0: 392, c1: 160}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf175.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (62720, 1)
op175.sizes = ([392, 160], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
arg376_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg377_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
class op175_loop_body:
    var_ranges = {z0: 392, z1: 160}
    index0 = z1
    index1 = 80*z0 + I
    index2 = 80*z0 + I
    index3 = I
    index4 = 160*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(80, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(80, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(160, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf161', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf175', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf173', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg376_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg377_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg378_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg379_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op176: ExternKernelSchedulerNode(ExternKernelAlloc)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg380_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelAlloc
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.node.kernel = extern_kernels.convolution


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 188160}, None)]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 188160}, None)]
op177.met_dependencies = 
    [   MemoryDep('arg381_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg382_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg383_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg384_1', c1, {c0: 392, c1: 480}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf177.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
    ]
]
op177.group.device = cuda:0
op177.group.iteration = (188160, 1)
op177.sizes = ([392, 480], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
class op177_loop_body:
    var_ranges = {z0: 392, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg381_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg382_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg383_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg384_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf177', get_index_5, relu, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelAlloc)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg385_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelAlloc
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.convolution


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 376320}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf177', 480*c0 + I, {c0: 392, c1: 960}, None),
        MemoryDep('buf178', 480*c0 + I, {c0: 392, c1: 960}, None)]
op179.met_dependencies = 
    [   MemoryDep('arg386_1', I, {c0: 392, c1: 960}, None),
        MemoryDep('arg387_1', I, {c0: 392, c1: 960}, None),
        MemoryDep('arg388_1', I, {c0: 392, c1: 960}, None),
        MemoryDep('arg389_1', I, {c0: 392, c1: 960}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (376320, 1)
op179.sizes = ([392, 960], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg389_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op179_loop_body:
    var_ranges = {z0: 392, z1: 960}
    index0 = z1
    index1 = 480*z0 + I
    index2 = 480*z0 + I
    index3 = I
    index4 = 960*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(480, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(480, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(960, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf179', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf177', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg386_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg387_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg388_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg389_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op180: ExternKernelSchedulerNode(ExternKernelAlloc)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg390_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelAlloc
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op180.node.kernel = extern_kernels.convolution


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 31360}, None)]
op181.unmet_dependencies = [MemoryDep('buf180', c0, {c0: 31360}, None)]
op181.met_dependencies = 
    [   MemoryDep('arg391_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg392_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg393_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg394_1', c1, {c0: 392, c1: 80}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf181.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (31360, 1)
op181.sizes = ([392, 80], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
class op181_loop_body:
    var_ranges = {z0: 392, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg391_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg392_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg393_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg394_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf181', get_index_5, add_1, None)
        return store


op182: ExternKernelSchedulerNode(ExternKernelAlloc)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf181', mode=None)]
op182.met_dependencies = [StarDep(name='arg395_1', mode=None)]
op182.outputs = [
    buf182: ExternKernelAlloc
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.node.kernel = extern_kernels.convolution


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 62720}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf175', c0, {c0: 62720}, None),
        MemoryDep('buf181', 80*c0 + I, {c0: 392, c1: 160}, None),
        MemoryDep('buf182', 80*c0 + I, {c0: 392, c1: 160}, None)]
op183.met_dependencies = 
    [   MemoryDep('arg396_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg397_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg398_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg399_1', I, {c0: 392, c1: 160}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf183.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (62720, 1)
op183.sizes = ([392, 160], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg399_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
class op183_loop_body:
    var_ranges = {z0: 392, z1: 160}
    index0 = z1
    index1 = 80*z0 + I
    index2 = 80*z0 + I
    index3 = I
    index4 = 160*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(80, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(80, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(160, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf175', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf183', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf181', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg396_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg397_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg398_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg399_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op184: ExternKernelSchedulerNode(ExternKernelAlloc)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf183', mode=None)]
op184.met_dependencies = [StarDep(name='arg400_1', mode=None)]
op184.outputs = [
    buf184: ExternKernelAlloc
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False)]
]
op184.node.kernel = extern_kernels.convolution


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 188160}, None)]
op185.unmet_dependencies = [MemoryDep('buf184', c0, {c0: 188160}, None)]
op185.met_dependencies = 
    [   MemoryDep('arg401_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg402_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg403_1', c1, {c0: 392, c1: 480}, None),
        MemoryDep('arg404_1', c1, {c0: 392, c1: 480}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf185.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op185.group.device = cuda:0
op185.group.iteration = (188160, 1)
op185.sizes = ([392, 480], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
class op185_loop_body:
    var_ranges = {z0: 392, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg401_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg402_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg403_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg404_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf185', get_index_5, relu, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelAlloc)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg405_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelAlloc
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.convolution


op187_op188_op189: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op187_op188_op189.writes = 
    [   MemoryDep('buf187', c0, {c0: 376320}, None),
        MemoryDep('buf188', c0, {c0: 7680}, None),
        MemoryDep('buf189', c0, {c0: 7680}, None)]
op187_op188_op189.unmet_dependencies = 
    [   MemoryDep('buf185', 23520*c0 + 480*c2 + I, {c0: 8, c1: 960, c2: 49}, None),
        MemoryDep('buf186', 23520*c0 + 480*c2 + I, {c0: 8, c1: 960, c2: 49}, None)]
op187_op188_op189.met_dependencies = 
    [   MemoryDep('arg406_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg407_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg408_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg409_1', I, {c0: 8, c1: 960}, None)]
op187_op188_op189.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op187_op188_op189.snodes[0] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 376320}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf185', 23520*c0 + 480*c2 + I, {c0: 8, c1: 960, c2: 49}, None),
        MemoryDep('buf186', 23520*c0 + 480*c2 + I, {c0: 8, c1: 960, c2: 49}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg406_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg407_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg408_1', I, {c0: 8, c1: 960}, None),
        MemoryDep('arg409_1', I, {c0: 8, c1: 960}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (376320, 1)
op187.sizes = ([8, 960, 49], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 7, 7], stride=[23520, 1, 3360, 480])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg409_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
class op187_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = z1
    index1 = 23520*z0 + 480*z2 + I
    index2 = 23520*z0 + 480*z2 + I
    index3 = I
    index4 = 47040*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(480, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(480, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(960, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf187', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf185', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg406_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg407_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg408_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg409_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu
op187_op188_op189.snodes[1] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 7680}, None)]
op188.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 376320}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (7680, 49)
op188.sizes = ([7680], [49])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
class op188_loop_body:
    var_ranges = {z0: 7680, z1: 49}
    index0 = 49*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf188', get_index_1, reduction)
        return store_reduction
op187_op188_op189.snodes[2] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 7680}, None)]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 7680}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (7680, 1)
op189.sizes = ([7680], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
class op189_loop_body:
    var_ranges = {z0: 7680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf189', get_index_1, truediv, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelAlloc)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg410_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelAlloc
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.convolution


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 1920}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 1920}, None)]
op191.met_dependencies = [MemoryDep('arg411_1', c1, {c0: 8, c1: 240}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (1920, 1)
op191.sizes = ([8, 240], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
class op191_loop_body:
    var_ranges = {z0: 8, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg411_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf191', get_index_2, relu, None)
        return store


op192: ExternKernelSchedulerNode(ExternKernelAlloc)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = [StarDep(name='arg412_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelAlloc
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.node.kernel = extern_kernels.convolution


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', 47040*c0 + c1 + 960*c2, {c0: 8, c1: 960, c2: 49}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 376320}, None),
        MemoryDep('buf192', c0, {c0: 7680}, None)]
op193.met_dependencies = [MemoryDep('arg413_1', c1, {c0: 8, c1: 960}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (376320, 1)
op193.sizes = ([8, 960, 49], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 49, 7, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
arg413_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op193_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = 47040*z0 + 49*z1 + z2
    index1 = 960*z0 + z1
    index2 = z1
    index3 = 47040*z0 + z1 + 960*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg413_1', get_index_2)
        add = ops.add(load_1, load_2)
        constant = ops.constant(3.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_1, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul = ops.mul(minimum, constant_3)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index3')
        store = ops.store('buf193', get_index_3, mul_1, None)
        return store


op194: ExternKernelSchedulerNode(ExternKernelAlloc)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='arg414_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelAlloc
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf194.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False)]
]
op194.node.kernel = extern_kernels.convolution


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 31360}, None)]
op195.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 31360}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg415_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg416_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg417_1', c1, {c0: 392, c1: 80}, None),
        MemoryDep('arg418_1', c1, {c0: 392, c1: 80}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf195.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
    ]
]
op195.group.device = cuda:0
op195.group.iteration = (31360, 1)
op195.sizes = ([392, 80], [])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
arg415_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
class op195_loop_body:
    var_ranges = {z0: 392, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg415_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg416_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg417_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg418_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf195', get_index_5, add_1, None)
        return store


op196: ExternKernelSchedulerNode(ExternKernelAlloc)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf195', mode=None)]
op196.met_dependencies = [StarDep(name='arg419_1', mode=None)]
op196.outputs = [
    buf196: ExternKernelAlloc
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
    buf196.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.node.kernel = extern_kernels.convolution


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 62720}, None)]
op197.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 62720}, None),
        MemoryDep('buf195', 80*c0 + I, {c0: 392, c1: 160}, None),
        MemoryDep('buf196', 80*c0 + I, {c0: 392, c1: 160}, None)]
op197.met_dependencies = 
    [   MemoryDep('arg420_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg421_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg422_1', I, {c0: 392, c1: 160}, None),
        MemoryDep('arg423_1', I, {c0: 392, c1: 160}, None)]
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (62720, 1)
op197.sizes = ([392, 160], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 7, 7], stride=[3920, 1, 560, 80])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg421_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg423_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 160, 7, 7], stride=[7840, 1, 1120, 160])
class op197_loop_body:
    var_ranges = {z0: 392, z1: 160}
    index0 = z1
    index1 = 80*z0 + I
    index2 = 80*z0 + I
    index3 = I
    index4 = 160*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(80, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(80, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(160, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf183', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        store = ops.store('buf197', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf195', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg420_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg421_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg422_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg423_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        return add_1


op198: ExternKernelSchedulerNode(ExternKernelAlloc)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg424_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelAlloc
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.node.kernel = extern_kernels.convolution


op199_op200: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op199_op200.writes = 
    [   MemoryDep('buf199', c0, {c0: 7680}, None),
        MemoryDep('buf200', c0, {c0: 7680}, None)]
op199_op200.unmet_dependencies = [MemoryDep('buf198', 47040*c0 + c1 + 960*c2, {c0: 8, c1: 960, c2: 49}, None)]
op199_op200.met_dependencies = 
    [   MemoryDep('arg425_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg426_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg427_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg428_1', c1, {c0: 8, c1: 960}, None)]
op199_op200.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op199_op200.snodes[0] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 7680}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', 47040*c0 + c1 + 960*c2, {c0: 8, c1: 960, c2: 49}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg425_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg426_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg427_1', c1, {c0: 8, c1: 960}, None),
        MemoryDep('arg428_1', c1, {c0: 8, c1: 960}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (7680, 49)
op199.sizes = ([8, 960], [49])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
arg425_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg427_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
class op199_loop_body:
    var_ranges = {z0: 8, z1: 960, z2: 49}
    index0 = 47040*z0 + z1 + 960*z2
    index1 = z1
    index2 = 960*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg425_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg426_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg427_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg428_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', relu)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf199', get_index_5, reduction)
        return store_reduction
op199_op200.snodes[1] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 7680}, None)]
op200.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 7680}, None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (7680, 1)
op200.sizes = ([7680], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 7680, 7680])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 1, 1], stride=[960, 1, 1, 1])
class op200_loop_body:
    var_ranges = {z0: 7680}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf200', get_index_1, truediv, None)
        return store


op201: ExternKernelSchedulerNode(ExternKernelAlloc)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg429_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelAlloc
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 1, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op201.node.kernel = extern_kernels.convolution


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 10240}, None)]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 10240}, None)]
op202.met_dependencies = [MemoryDep('arg430_1', c1, {c0: 8, c1: 1280}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (10240, 1)
op202.sizes = ([8, 1280], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 1, 1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
class op202_loop_body:
    var_ranges = {z0: 8, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg430_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf202', get_index_2, relu, None)
        return store


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='arg431_1', mode=None), StarDep(name='arg432_1', mode=None)]
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf203.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op203.node.kernel = extern_kernels.addmm



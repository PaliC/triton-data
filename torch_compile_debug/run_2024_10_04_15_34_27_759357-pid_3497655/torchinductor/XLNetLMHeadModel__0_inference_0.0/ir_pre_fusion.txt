op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 4194304}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0 + 512*c1, {c0: 512, c1: 8}, None),
        MemoryDep('arg1_1', c1 + 1024*tmp0, {c0: 4096, c1: 1024}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf0.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (4194304, 1)
op0.sizes = ([512, 8, 1024], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[8, 512], stride=[512, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[32000, 1024], stride=[1024, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op0_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 1024}
    index0 = z0 + 512*z1
    index1 = 1024*indirect0 + z2
    index2 = 8192*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf0', get_index_2, load_1, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 1024) % 8
        x2 = (xindex // 8192)
        x0 = xindex % 1024
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x2 + (512*x1)), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 32000, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 32000), "index out of bounds: 0 <= tmp4 < 32000")
        tmp6 = tl.load(in_ptr1 + (x0 + (1024*tmp4)), None)
        tl.store(out_ptr0 + (x4), tmp6, None)


op1: ExternKernelSchedulerNode(ExternKernelOut)
op1.writes = [StarDep(name='buf1', mode=None)]
op1.unmet_dependencies = [StarDep(name='buf0', mode=None)]
op1.met_dependencies = [StarDep(name='arg2_1', mode=None)]
op1.outputs = [
    buf1: ExternKernelOut
    buf1.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
]
op1.node.kernel = extern_kernels.bmm


op2: ExternKernelSchedulerNode(ExternKernelOut)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None)]
op2.met_dependencies = [StarDep(name='arg3_1', mode=None)]
op2.outputs = [
    buf2: ExternKernelOut
    buf2.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf2.users = [NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op2.node.kernel = extern_kernels.bmm


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 4194304}, None)]
op3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 4194304}, None)]
op3.met_dependencies = [MemoryDep('arg8_1', c1, {c0: 4096, c1: 1024}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (4194304, 1)
op3.sizes = ([4096, 1024], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op3_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg8_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf3', get_index_2, add, None)
        return store
op3 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op4: ExternKernelSchedulerNode(ExternKernelOut)
op4.writes = [StarDep(name='buf4', mode=None)]
op4.unmet_dependencies = [StarDep(name='buf2', mode=None), StarDep(name='buf3', mode=None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ExternKernelOut
    buf4.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf4.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
    ]
]
op4.node.kernel = extern_kernels.bmm


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', 1024*c0 + c1, {c0: 1024, c1: 512}, None)]
op5.unmet_dependencies = []
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = NonOwningLayout('cpu', torch.float32, size=[1024, 512], stride=[1024, 1])
    buf5.aliases = ['buf7']
    buf5.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]
op5.group.device = cpu
op5.group.iteration = ((1024, 512), ())
op5.sizes = ([1024, 512], [])
buf5_layout = NonOwningLayout('cpu', torch.float32, size=[1024, 512], stride=[1024, 1])
class op5_loop_body:
    var_ranges = {z0: 1024, z1: 512}
    index0 = 2*z1
    index1 = 512 - z0
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.0009765625, torch.float32)
        mul = ops.mul(index_expr, constant)
        constant_1 = ops.constant(10000.0, torch.float32)
        pow_1 = ops.pow(constant_1, mul)
        reciprocal = ops.reciprocal(pow_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(reciprocal, constant_2)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        mul_2 = ops.mul(index_expr_1, mul_1)
        sin = ops.sin(mul_2)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf5', get_index_2, sin, None)
        return store


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', 1024*c0 + c1, {c0: 1024, c1: 512}, None)]
op6.unmet_dependencies = []
op6.met_dependencies = []
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = NonOwningLayout('cpu', torch.float32, size=[1024, 512], stride=[1024, 1])
    buf6.aliases = ['buf7']
    buf6.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cpu
op6.group.iteration = ((1024, 512), ())
op6.sizes = ([1024, 512], [])
buf6_layout = NonOwningLayout('cpu', torch.float32, size=[1024, 512], stride=[1024, 1])
class op6_loop_body:
    var_ranges = {z0: 1024, z1: 512}
    index0 = 2*z1
    index1 = 512 - z0
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.float32)
        constant = ops.constant(0.0009765625, torch.float32)
        mul = ops.mul(index_expr, constant)
        constant_1 = ops.constant(10000.0, torch.float32)
        pow_1 = ops.pow(constant_1, mul)
        reciprocal = ops.reciprocal(pow_1)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(reciprocal, constant_2)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.float32)
        mul_2 = ops.mul(index_expr_1, mul_1)
        cos = ops.cos(mul_2)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf6', get_index_2, cos, None)
        return store


op7: NopKernelSchedulerNode(ConcatKernel)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf5', mode=None), StarDep(name='buf6', mode=None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ConcatKernel
    buf7.layout = FixedLayout('cpu', torch.float32, size=[1024, 1024], stride=[1024, 1])
    buf7.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
    ]
]


op8: ExternKernelSchedulerNode(DeviceCopy)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: DeviceCopy
    buf8.layout = FixedLayout('cuda', torch.float32, size=[1024, 8, 1024], stride=[8192, 1024, 1])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
]
op8.node.kernel = None


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 8388608}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 8388608}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[1024, 8, 1024], stride=[8192, 1024, 1])
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op608'), can_inplace=False, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (8388608, 1)
op9.sizes = ([8388608], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1024, 8, 1024], stride=[8192, 1024, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[1024, 8, 1024], stride=[8192, 1024, 1])
class op9_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf9', get_index_1, load, None)
        return store
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tl.store(in_out_ptr0 + (x0), tmp0, None)


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf10.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op10.node.kernel = extern_kernels.bmm


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 4194304}, None)]
op11.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 4194304}, None)]
op11.met_dependencies = [MemoryDep('arg7_1', c1, {c0: 4096, c1: 1024}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (4194304, 1)
op11.sizes = ([4096, 1024], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op11_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf11', get_index_2, add, None)
        return store
op11 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op12: ExternKernelSchedulerNode(ExternKernelOut)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf11', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ExternKernelOut
    buf12.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op12.node.kernel = extern_kernels.bmm


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 65536}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf12', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf4', c0, {c0: 33554432}, None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf13.users = [
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op13.group.device = cuda:0
op13.group.iteration = (65536, 512)
op13.sizes = ([8, 16, 512], [512])
buf4_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf12', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf13', get_index_4, reduction)
        return store_reduction
op13 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 65536}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf12', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf13', c0, {c0: 65536}, None),
        MemoryDep('buf4', c0, {c0: 33554432}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf14.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (65536, 512)
op14.sizes = ([8, 16, 512], [512])
buf4_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op14_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf12', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf13', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf14', get_index_5, reduction)
        return store_reduction
op14 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf0', mode=None)]
op15.met_dependencies = [StarDep(name='arg4_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op15.node.kernel = extern_kernels.bmm


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 33554432}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf12', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf13', c0, {c0: 65536}, None),
        MemoryDep('buf14', c0, {c0: 65536}, None),
        MemoryDep('buf4', c0, {c0: 33554432}, None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (33554432, 1)
op16.sizes = ([8, 16, 512, 512], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op16_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf12', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf13', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf14', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf16', get_index_6, truediv, None)
        return store
op16 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf15', mode=None), StarDep(name='buf16', mode=None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.node.kernel = extern_kernels.bmm


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 4194304}, None)]
op18.unmet_dependencies = [   MemoryDep('buf17', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (4194304, 1)
op18.sizes = ([512, 8, 64, 16], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op18_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf18', get_index_1, load, None)
        return store
op18 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 1048576}, None)]
op19.unmet_dependencies = []
op19.met_dependencies = [MemoryDep('arg5_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (1048576, 1)
op19.sizes = ([64, 16, 1024], [])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op19_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg5_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf19', get_index_1, load, None)
        return store
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf18', mode=None), StarDep(name='buf19', mode=None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False),
    ]
]
op20.node.kernel = extern_kernels.bmm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 4096}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 4194304}, None),
        MemoryDep('buf20', c0, {c0: 4194304}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf21.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (4096, 1024)
op21.sizes = ([4096], [1024])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op21_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf0', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf21', get_index_2, getitem)
        return store_reduction
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 4096}, None)]
op22.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 4194304}, None),
        MemoryDep('buf20', c0, {c0: 4194304}, None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf22.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (4096, 1024)
op22.sizes = ([4096], [1024])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op22_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf0', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf22', get_index_2, getitem_1)
        return store_reduction
op22 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 4194304}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 4194304}, None),
        MemoryDep('buf20', c0, {c0: 4194304}, None),
        MemoryDep('buf21', c0, {c0: 4096}, None),
        MemoryDep('buf22', c0, {c0: 4096}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg9_1', c1, {c0: 4096, c1: 1024}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf24.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (4194304, 1)
op24.sizes = ([4096, 1024], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf22_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op24_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf0', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf21', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf22', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg9_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg10_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf24', get_index_6, add_2, None)
        return store
op24 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.node.kernel = extern_kernels.mm


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 16777216}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 16777216}, None)]
op26.met_dependencies = [MemoryDep('arg14_1', c1, {c0: 4096, c1: 4096}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (16777216, 1)
op26.sizes = ([4096, 4096], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op26_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf25', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf26', get_index_4, mul_2, None)
        return store
op26 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
    ]
]
op27.node.kernel = extern_kernels.mm


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 4096}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 4194304}, None),
        MemoryDep('buf27', c0, {c0: 4194304}, None)]
op28.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 4096, c1: 1024}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf28.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (4096, 1024)
op28.sizes = ([4096], [1024])
buf27_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op28_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf28', get_index_3, getitem)
        return store_reduction
op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 4096}, None)]
op29.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 4194304}, None),
        MemoryDep('buf27', c0, {c0: 4194304}, None)]
op29.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 4096, c1: 1024}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf29.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (4096, 1024)
op29.sizes = ([4096], [1024])
buf27_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op29_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf29', get_index_3, getitem_1)
        return store_reduction
op29 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 4194304}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 4194304}, None),
        MemoryDep('buf27', c0, {c0: 4194304}, None),
        MemoryDep('buf28', c0, {c0: 4096}, None),
        MemoryDep('buf29', c0, {c0: 4096}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg12_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg16_1', c1, {c0: 4096, c1: 1024}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf31.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op31.group.device = cuda:0
op31.group.iteration = (4194304, 1)
op31.sizes = ([4096, 1024], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf29_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op31_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf28', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf29', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg11_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg12_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf31', get_index_7, add_3, None)
        return store
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False),
    ]
]
op32.node.kernel = extern_kernels.bmm


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op33.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33.node.kernel = extern_kernels.bmm


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 4194304}, None)]
op34.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 4194304}, None)]
op34.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 4096, c1: 1024}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (4194304, 1)
op34.sizes = ([4096, 1024], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op34_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg23_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf34', get_index_2, add, None)
        return store
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf33', mode=None), StarDep(name='buf34', mode=None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
    ]
]
op35.node.kernel = extern_kernels.bmm


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op36.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.node.kernel = extern_kernels.bmm


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 4194304}, None)]
op37.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 4194304}, None)]
op37.met_dependencies = [MemoryDep('arg22_1', c1, {c0: 4096, c1: 1024}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (4194304, 1)
op37.sizes = ([4096, 1024], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op37_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf37', get_index_2, add, None)
        return store
op37 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf37', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf38.users = [
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
]
op38.node.kernel = extern_kernels.bmm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 65536}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 33554432}, None),
        MemoryDep('buf38', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (65536, 512)
op39.sizes = ([8, 16, 512], [512])
buf35_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf38', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf39', get_index_4, reduction)
        return store_reduction
op39 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 65536}, None)]
op40.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 33554432}, None),
        MemoryDep('buf38', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf39', c0, {c0: 65536}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf40.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (65536, 512)
op40.sizes = ([8, 16, 512], [512])
buf35_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op40_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf38', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf39', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf40', get_index_5, reduction)
        return store_reduction
op40 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op41.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41.node.kernel = extern_kernels.bmm


op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 33554432}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 33554432}, None),
        MemoryDep('buf38', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf39', c0, {c0: 65536}, None),
        MemoryDep('buf40', c0, {c0: 65536}, None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf42.users = [NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (33554432, 1)
op42.sizes = ([8, 16, 512, 512], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf38', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf39', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf40', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf42', get_index_6, truediv, None)
        return store
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf41', mode=None), StarDep(name='buf42', mode=None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.node.kernel = extern_kernels.bmm


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 4194304}, None)]
op44.unmet_dependencies = [   MemoryDep('buf43', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (4194304, 1)
op44.sizes = ([512, 8, 64, 16], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op44_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf44', get_index_1, load, None)
        return store
op44 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 1048576}, None)]
op45.unmet_dependencies = []
op45.met_dependencies = [MemoryDep('arg20_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (1048576, 1)
op45.sizes = ([64, 16, 1024], [])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op45_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg20_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf45', get_index_1, load, None)
        return store
op45 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf46.users = [
        NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op46.node.kernel = extern_kernels.bmm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 4096}, None)]
op47.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 4194304}, None),
        MemoryDep('buf46', c0, {c0: 4194304}, None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf47.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (4096, 1024)
op47.sizes = ([4096], [1024])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op47_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf47', get_index_2, getitem)
        return store_reduction
op47 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 4096}, None)]
op48.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 4194304}, None),
        MemoryDep('buf46', c0, {c0: 4194304}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf48.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (4096, 1024)
op48.sizes = ([4096], [1024])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op48_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf48', get_index_2, getitem_1)
        return store_reduction
op48 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 4194304}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 4194304}, None),
        MemoryDep('buf46', c0, {c0: 4194304}, None),
        MemoryDep('buf47', c0, {c0: 4096}, None),
        MemoryDep('buf48', c0, {c0: 4096}, None)]
op50.met_dependencies = 
    [   MemoryDep('arg24_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg25_1', c1, {c0: 4096, c1: 1024}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf50.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (4194304, 1)
op50.sizes = ([4096, 1024], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf48_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op50_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf47', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf48', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg24_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg25_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf50', get_index_6, add_2, None)
        return store
op50 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False)]
]
op51.node.kernel = extern_kernels.mm


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 16777216}, None)]
op52.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 16777216}, None)]
op52.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 4096, c1: 4096}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (16777216, 1)
op52.sizes = ([4096, 4096], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op52_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf51', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf52', get_index_4, mul_2, None)
        return store
op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf53.users = [
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op53.node.kernel = extern_kernels.mm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 4096}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 4194304}, None),
        MemoryDep('buf53', c0, {c0: 4194304}, None)]
op54.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 4096, c1: 1024}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf54.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (4096, 1024)
op54.sizes = ([4096], [1024])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op54_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf50', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf54', get_index_3, getitem)
        return store_reduction
op54 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 4096}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 4194304}, None),
        MemoryDep('buf53', c0, {c0: 4194304}, None)]
op55.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 4096, c1: 1024}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf55.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (4096, 1024)
op55.sizes = ([4096], [1024])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op55_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf50', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf55', get_index_3, getitem_1)
        return store_reduction
op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 4194304}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 4194304}, None),
        MemoryDep('buf53', c0, {c0: 4194304}, None),
        MemoryDep('buf54', c0, {c0: 4096}, None),
        MemoryDep('buf55', c0, {c0: 4096}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg27_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg31_1', c1, {c0: 4096, c1: 1024}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf57.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (4194304, 1)
op57.sizes = ([4096, 1024], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf55_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op57_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf50', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf54', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf55', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg26_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg27_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf57', get_index_7, add_3, None)
        return store
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op58.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
    ]
]
op58.node.kernel = extern_kernels.bmm


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op59.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.node.kernel = extern_kernels.bmm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 4194304}, None)]
op60.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 4194304}, None)]
op60.met_dependencies = [MemoryDep('arg38_1', c1, {c0: 4096, c1: 1024}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (4194304, 1)
op60.sizes = ([4096, 1024], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op60_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf60', get_index_2, add, None)
        return store
op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf59', mode=None), StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.bmm


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op62.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op62.node.kernel = extern_kernels.bmm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 4194304}, None)]
op63.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 4194304}, None)]
op63.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 4096, c1: 1024}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (4194304, 1)
op63.sizes = ([4096, 1024], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op63_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf63', get_index_2, add, None)
        return store
op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf62', mode=None), StarDep(name='buf63', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]
op64.node.kernel = extern_kernels.bmm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 65536}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf61', c0, {c0: 33554432}, None),
        MemoryDep('buf64', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]
op65.group.device = cuda:0
op65.group.iteration = (65536, 512)
op65.sizes = ([8, 16, 512], [512])
buf61_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op65_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf64', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf65', get_index_4, reduction)
        return store_reduction
op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 65536}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf61', c0, {c0: 33554432}, None),
        MemoryDep('buf64', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf65', c0, {c0: 65536}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (65536, 512)
op66.sizes = ([8, 16, 512], [512])
buf61_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op66_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf64', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf65', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf66', get_index_5, reduction)
        return store_reduction
op66 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op67.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op67.node.kernel = extern_kernels.bmm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 33554432}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf61', c0, {c0: 33554432}, None),
        MemoryDep('buf64', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf65', c0, {c0: 65536}, None),
        MemoryDep('buf66', c0, {c0: 65536}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (33554432, 1)
op68.sizes = ([8, 16, 512, 512], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op68_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf64', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf65', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf66', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf68', get_index_6, truediv, None)
        return store
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf67', mode=None), StarDep(name='buf68', mode=None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.node.kernel = extern_kernels.bmm


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 4194304}, None)]
op70.unmet_dependencies = [   MemoryDep('buf69', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (4194304, 1)
op70.sizes = ([512, 8, 64, 16], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op70_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf70', get_index_1, load, None)
        return store
op70 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 1048576}, None)]
op71.unmet_dependencies = []
op71.met_dependencies = [MemoryDep('arg35_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (1048576, 1)
op71.sizes = ([64, 16, 1024], [])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op71_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg35_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf71', get_index_1, load, None)
        return store
op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf70', mode=None), StarDep(name='buf71', mode=None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False),
    ]
]
op72.node.kernel = extern_kernels.bmm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 4096}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 4194304}, None),
        MemoryDep('buf72', c0, {c0: 4194304}, None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf73.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (4096, 1024)
op73.sizes = ([4096], [1024])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op73_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf57', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf73', get_index_2, getitem)
        return store_reduction
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 4096}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 4194304}, None),
        MemoryDep('buf72', c0, {c0: 4194304}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf74.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (4096, 1024)
op74.sizes = ([4096], [1024])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op74_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf57', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf74', get_index_2, getitem_1)
        return store_reduction
op74 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 4194304}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 4194304}, None),
        MemoryDep('buf72', c0, {c0: 4194304}, None),
        MemoryDep('buf73', c0, {c0: 4096}, None),
        MemoryDep('buf74', c0, {c0: 4096}, None)]
op76.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg40_1', c1, {c0: 4096, c1: 1024}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf76.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (4194304, 1)
op76.sizes = ([4096, 1024], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf74_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op76_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf57', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf73', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf74', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg39_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg40_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf76', get_index_6, add_2, None)
        return store
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op77: ExternKernelSchedulerNode(ExternKernelOut)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf76', mode=None)]
op77.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op77.outputs = [
    buf77: ExternKernelOut
    buf77.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.node.kernel = extern_kernels.mm


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 16777216}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 16777216}, None)]
op78.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 4096, c1: 4096}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (16777216, 1)
op78.sizes = ([4096, 4096], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op78_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf78', get_index_4, mul_2, None)
        return store
op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
    ]
]
op79.node.kernel = extern_kernels.mm


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 4096}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 4194304}, None),
        MemoryDep('buf79', c0, {c0: 4194304}, None)]
op80.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 4096, c1: 1024}, None)]
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (4096, 1024)
op80.sizes = ([4096], [1024])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op80_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf76', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf80', get_index_3, getitem)
        return store_reduction
op80 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 4096}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 4194304}, None),
        MemoryDep('buf79', c0, {c0: 4194304}, None)]
op81.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 4096, c1: 1024}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (4096, 1024)
op81.sizes = ([4096], [1024])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op81_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf76', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf81', get_index_3, getitem_1)
        return store_reduction
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 4194304}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 4194304}, None),
        MemoryDep('buf79', c0, {c0: 4194304}, None),
        MemoryDep('buf80', c0, {c0: 4096}, None),
        MemoryDep('buf81', c0, {c0: 4096}, None)]
op83.met_dependencies = 
    [   MemoryDep('arg41_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg42_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg46_1', c1, {c0: 4096, c1: 1024}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf83.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (4194304, 1)
op83.sizes = ([4096, 1024], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf81_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op83_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf76', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf80', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf81', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg41_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg42_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf83', get_index_7, add_3, None)
        return store
op83 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op84: ExternKernelSchedulerNode(ExternKernelOut)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelOut
    buf84.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
]
op84.node.kernel = extern_kernels.bmm


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op85.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = extern_kernels.bmm


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 4194304}, None)]
op86.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 4194304}, None)]
op86.met_dependencies = [MemoryDep('arg53_1', c1, {c0: 4096, c1: 1024}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (4194304, 1)
op86.sizes = ([4096, 1024], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op86_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg53_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf86', get_index_2, add, None)
        return store
op86 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op87: ExternKernelSchedulerNode(ExternKernelOut)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf85', mode=None), StarDep(name='buf86', mode=None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ExternKernelOut
    buf87.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf87.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
    ]
]
op87.node.kernel = extern_kernels.bmm


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op88.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op88.node.kernel = extern_kernels.bmm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 4194304}, None)]
op89.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 4194304}, None)]
op89.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 4096, c1: 1024}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (4194304, 1)
op89.sizes = ([4096, 1024], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op89_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf89', get_index_2, add, None)
        return store
op89 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf88', mode=None), StarDep(name='buf89', mode=None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
    ]
]
op90.node.kernel = extern_kernels.bmm


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 65536}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf87', c0, {c0: 33554432}, None),
        MemoryDep('buf90', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
    ]
]
op91.group.device = cuda:0
op91.group.iteration = (65536, 512)
op91.sizes = ([8, 16, 512], [512])
buf87_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op91_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf90', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf91', get_index_4, reduction)
        return store_reduction
op91 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 65536}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf87', c0, {c0: 33554432}, None),
        MemoryDep('buf90', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf91', c0, {c0: 65536}, None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf92.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (65536, 512)
op92.sizes = ([8, 16, 512], [512])
buf87_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op92_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf90', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf91', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf92', get_index_5, reduction)
        return store_reduction
op92 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op93.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op93.node.kernel = extern_kernels.bmm


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 33554432}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf87', c0, {c0: 33554432}, None),
        MemoryDep('buf90', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf91', c0, {c0: 65536}, None),
        MemoryDep('buf92', c0, {c0: 65536}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (33554432, 1)
op94.sizes = ([8, 16, 512, 512], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op94_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf90', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf91', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf92', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf94', get_index_6, truediv, None)
        return store
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op95: ExternKernelSchedulerNode(ExternKernelOut)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf93', mode=None), StarDep(name='buf94', mode=None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ExternKernelOut
    buf95.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.node.kernel = extern_kernels.bmm


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 4194304}, None)]
op96.unmet_dependencies = [   MemoryDep('buf95', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (4194304, 1)
op96.sizes = ([512, 8, 64, 16], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op96_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf96', get_index_1, load, None)
        return store
op96 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 1048576}, None)]
op97.unmet_dependencies = []
op97.met_dependencies = [MemoryDep('arg50_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (1048576, 1)
op97.sizes = ([64, 16, 1024], [])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op97_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg50_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf97', get_index_1, load, None)
        return store
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf96', mode=None), StarDep(name='buf97', mode=None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op98.node.kernel = extern_kernels.bmm


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 4096}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 4194304}, None),
        MemoryDep('buf98', c0, {c0: 4194304}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf99.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (4096, 1024)
op99.sizes = ([4096], [1024])
buf98_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op99_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf99', get_index_2, getitem)
        return store_reduction
op99 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 4096}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf83', c0, {c0: 4194304}, None),
        MemoryDep('buf98', c0, {c0: 4194304}, None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (4096, 1024)
op100.sizes = ([4096], [1024])
buf98_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op100_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf100', get_index_2, getitem_1)
        return store_reduction
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 4194304}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 4096}, None),
        MemoryDep('buf83', c0, {c0: 4194304}, None),
        MemoryDep('buf98', c0, {c0: 4194304}, None),
        MemoryDep('buf99', c0, {c0: 4096}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg55_1', c1, {c0: 4096, c1: 1024}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf102.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
    ]
]
op102.group.device = cuda:0
op102.group.iteration = (4194304, 1)
op102.sizes = ([4096, 1024], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf100_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op102_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf83', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf99', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf100', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg54_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg55_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf102', get_index_6, add_2, None)
        return store
op102 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.node.kernel = extern_kernels.mm


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 16777216}, None)]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 16777216}, None)]
op104.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 4096, c1: 4096}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (16777216, 1)
op104.sizes = ([4096, 4096], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op104_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf103', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg59_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf104', get_index_4, mul_2, None)
        return store
op104 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False),
    ]
]
op105.node.kernel = extern_kernels.mm


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 4096}, None)]
op106.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 4194304}, None),
        MemoryDep('buf105', c0, {c0: 4194304}, None)]
op106.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 4096, c1: 1024}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf106.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (4096, 1024)
op106.sizes = ([4096], [1024])
buf105_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op106_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf102', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf106', get_index_3, getitem)
        return store_reduction
op106 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 4096}, None)]
op107.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 4194304}, None),
        MemoryDep('buf105', c0, {c0: 4194304}, None)]
op107.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 4096, c1: 1024}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf107.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (4096, 1024)
op107.sizes = ([4096], [1024])
buf105_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op107_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf102', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf107', get_index_3, getitem_1)
        return store_reduction
op107 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 4194304}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 4194304}, None),
        MemoryDep('buf105', c0, {c0: 4194304}, None),
        MemoryDep('buf106', c0, {c0: 4096}, None),
        MemoryDep('buf107', c0, {c0: 4096}, None)]
op109.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg57_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg61_1', c1, {c0: 4096, c1: 1024}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf109.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op109.group.device = cuda:0
op109.group.iteration = (4194304, 1)
op109.sizes = ([4096, 1024], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf107_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op109_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf102', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf106', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf107', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg56_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg57_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf109', get_index_7, add_3, None)
        return store
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op110: ExternKernelSchedulerNode(ExternKernelOut)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelOut
    buf110.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op110.node.kernel = extern_kernels.bmm


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op111.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = extern_kernels.bmm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 4194304}, None)]
op112.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 4194304}, None)]
op112.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 4096, c1: 1024}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (4194304, 1)
op112.sizes = ([4096, 1024], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op112_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf112', get_index_2, add, None)
        return store
op112 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf111', mode=None), StarDep(name='buf112', mode=None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False),
    ]
]
op113.node.kernel = extern_kernels.bmm


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op114.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op114.node.kernel = extern_kernels.bmm


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 4194304}, None)]
op115.unmet_dependencies = [MemoryDep('buf110', c0, {c0: 4194304}, None)]
op115.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 4096, c1: 1024}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (4194304, 1)
op115.sizes = ([4096, 1024], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op115_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf115', get_index_2, add, None)
        return store
op115 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf114', mode=None), StarDep(name='buf115', mode=None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op116.node.kernel = extern_kernels.bmm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 65536}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 33554432}, None),
        MemoryDep('buf116', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (65536, 512)
op117.sizes = ([8, 16, 512], [512])
buf113_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op117_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf116', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf117', get_index_4, reduction)
        return store_reduction
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 65536}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 33554432}, None),
        MemoryDep('buf116', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf117', c0, {c0: 65536}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf118.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (65536, 512)
op118.sizes = ([8, 16, 512], [512])
buf113_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op118_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf116', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf117', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf118', get_index_5, reduction)
        return store_reduction
op118 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op119.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.node.kernel = extern_kernels.bmm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 33554432}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 33554432}, None),
        MemoryDep('buf116', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf117', c0, {c0: 65536}, None),
        MemoryDep('buf118', c0, {c0: 65536}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (33554432, 1)
op120.sizes = ([8, 16, 512, 512], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf116', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf117', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf118', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf120', get_index_6, truediv, None)
        return store
op120 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf119', mode=None), StarDep(name='buf120', mode=None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.node.kernel = extern_kernels.bmm


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 4194304}, None)]
op122.unmet_dependencies = [   MemoryDep('buf121', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (4194304, 1)
op122.sizes = ([512, 8, 64, 16], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op122_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf122', get_index_1, load, None)
        return store
op122 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 1048576}, None)]
op123.unmet_dependencies = []
op123.met_dependencies = [MemoryDep('arg65_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (1048576, 1)
op123.sizes = ([64, 16, 1024], [])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op123_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg65_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf123', get_index_1, load, None)
        return store
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf122', mode=None), StarDep(name='buf123', mode=None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False),
    ]
]
op124.node.kernel = extern_kernels.bmm


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 4096}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf109', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf125.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (4096, 1024)
op125.sizes = ([4096], [1024])
buf124_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op125_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf109', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf125', get_index_2, getitem)
        return store_reduction
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 4096}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf109', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None)]
op126.met_dependencies = []
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (4096, 1024)
op126.sizes = ([4096], [1024])
buf124_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op126_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf109', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf126', get_index_2, getitem_1)
        return store_reduction
op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 4194304}, None)]
op128.unmet_dependencies = 
    [   MemoryDep('buf109', c0, {c0: 4194304}, None),
        MemoryDep('buf124', c0, {c0: 4194304}, None),
        MemoryDep('buf125', c0, {c0: 4096}, None),
        MemoryDep('buf126', c0, {c0: 4096}, None)]
op128.met_dependencies = 
    [   MemoryDep('arg69_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg70_1', c1, {c0: 4096, c1: 1024}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (4194304, 1)
op128.sizes = ([4096, 1024], [])
buf124_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf126_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op128_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf124', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf109', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf125', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf126', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg69_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg70_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf128', get_index_6, add_2, None)
        return store
op128 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 16777216}, None)]
op130.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 16777216}, None)]
op130.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 4096, c1: 4096}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (16777216, 1)
op130.sizes = ([4096, 4096], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op130_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf129', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf130', get_index_4, mul_2, None)
        return store
op130 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf131.users = [
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
    ]
]
op131.node.kernel = extern_kernels.mm


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 4096}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf128', c0, {c0: 4194304}, None),
        MemoryDep('buf131', c0, {c0: 4194304}, None)]
op132.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 4096, c1: 1024}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf132.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (4096, 1024)
op132.sizes = ([4096], [1024])
buf131_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op132_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf128', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf132', get_index_3, getitem)
        return store_reduction
op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 4096}, None)]
op133.unmet_dependencies = 
    [   MemoryDep('buf128', c0, {c0: 4194304}, None),
        MemoryDep('buf131', c0, {c0: 4194304}, None)]
op133.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 4096, c1: 1024}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (4096, 1024)
op133.sizes = ([4096], [1024])
buf131_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op133_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf128', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf133', get_index_3, getitem_1)
        return store_reduction
op133 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 4194304}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf128', c0, {c0: 4194304}, None),
        MemoryDep('buf131', c0, {c0: 4194304}, None),
        MemoryDep('buf132', c0, {c0: 4096}, None),
        MemoryDep('buf133', c0, {c0: 4096}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg72_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg76_1', c1, {c0: 4096, c1: 1024}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf135.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (4194304, 1)
op135.sizes = ([4096, 1024], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf133_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op135_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg76_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf128', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf132', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf133', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg71_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg72_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf135', get_index_7, add_3, None)
        return store
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.bmm


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op137.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op137.node.kernel = extern_kernels.bmm


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 4194304}, None)]
op138.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 4194304}, None)]
op138.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 4096, c1: 1024}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (4194304, 1)
op138.sizes = ([4096, 1024], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op138_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf138', get_index_2, add, None)
        return store
op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf137', mode=None), StarDep(name='buf138', mode=None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False),
    ]
]
op139.node.kernel = extern_kernels.bmm


op140: ExternKernelSchedulerNode(ExternKernelOut)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op140.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelOut
    buf140.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op140.node.kernel = extern_kernels.bmm


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 4194304}, None)]
op141.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 4194304}, None)]
op141.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 4096, c1: 1024}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (4194304, 1)
op141.sizes = ([4096, 1024], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op141_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf141', get_index_2, add, None)
        return store
op141 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf140', mode=None), StarDep(name='buf141', mode=None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf142.users = [
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op142.node.kernel = extern_kernels.bmm


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 65536}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 33554432}, None),
        MemoryDep('buf142', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf143.users = [
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
    ]
]
op143.group.device = cuda:0
op143.group.iteration = (65536, 512)
op143.sizes = ([8, 16, 512], [512])
buf139_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op143_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf142', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf143', get_index_4, reduction)
        return store_reduction
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 65536}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 33554432}, None),
        MemoryDep('buf142', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf143', c0, {c0: 65536}, None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf144.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (65536, 512)
op144.sizes = ([8, 16, 512], [512])
buf139_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op144_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf142', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf143', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf144', get_index_5, reduction)
        return store_reduction
op144 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op145: ExternKernelSchedulerNode(ExternKernelOut)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op145.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelOut
    buf145.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op145.node.kernel = extern_kernels.bmm


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 33554432}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 33554432}, None),
        MemoryDep('buf142', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf143', c0, {c0: 65536}, None),
        MemoryDep('buf144', c0, {c0: 65536}, None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (33554432, 1)
op146.sizes = ([8, 16, 512, 512], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op146_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf142', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf143', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf144', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf146', get_index_6, truediv, None)
        return store
op146 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op147: ExternKernelSchedulerNode(ExternKernelOut)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf145', mode=None), StarDep(name='buf146', mode=None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ExternKernelOut
    buf147.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.node.kernel = extern_kernels.bmm


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 4194304}, None)]
op148.unmet_dependencies = [   MemoryDep('buf147', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (4194304, 1)
op148.sizes = ([512, 8, 64, 16], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op148_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf148', get_index_1, load, None)
        return store
op148 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 1048576}, None)]
op149.unmet_dependencies = []
op149.met_dependencies = [MemoryDep('arg80_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (1048576, 1)
op149.sizes = ([64, 16, 1024], [])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op149_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg80_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf149', get_index_1, load, None)
        return store
op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf148', mode=None), StarDep(name='buf149', mode=None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf150.users = [
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False),
    ]
]
op150.node.kernel = extern_kernels.bmm


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 4096}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 4194304}, None),
        MemoryDep('buf150', c0, {c0: 4194304}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf151.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (4096, 1024)
op151.sizes = ([4096], [1024])
buf150_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op151_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf151', get_index_2, getitem)
        return store_reduction
op151 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 4096}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 4194304}, None),
        MemoryDep('buf150', c0, {c0: 4194304}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf152.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (4096, 1024)
op152.sizes = ([4096], [1024])
buf150_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op152_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf152', get_index_2, getitem_1)
        return store_reduction
op152 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 4194304}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 4194304}, None),
        MemoryDep('buf150', c0, {c0: 4194304}, None),
        MemoryDep('buf151', c0, {c0: 4096}, None),
        MemoryDep('buf152', c0, {c0: 4096}, None)]
op154.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg85_1', c1, {c0: 4096, c1: 1024}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf154.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
    ]
]
op154.group.device = cuda:0
op154.group.iteration = (4194304, 1)
op154.sizes = ([4096, 1024], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf152_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op154_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf135', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf151', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf152', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg84_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg85_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf154', get_index_6, add_2, None)
        return store
op154 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False)]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 16777216}, None)]
op156.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 16777216}, None)]
op156.met_dependencies = [MemoryDep('arg89_1', c1, {c0: 4096, c1: 4096}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (16777216, 1)
op156.sizes = ([4096, 4096], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op156_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf155', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg89_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf156', get_index_4, mul_2, None)
        return store
op156 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False),
    ]
]
op157.node.kernel = extern_kernels.mm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 4096}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf154', c0, {c0: 4194304}, None),
        MemoryDep('buf157', c0, {c0: 4194304}, None)]
op158.met_dependencies = [MemoryDep('arg91_1', c1, {c0: 4096, c1: 1024}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf158.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (4096, 1024)
op158.sizes = ([4096], [1024])
buf157_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op158_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf154', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf158', get_index_3, getitem)
        return store_reduction
op158 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 4096}, None)]
op159.unmet_dependencies = 
    [   MemoryDep('buf154', c0, {c0: 4194304}, None),
        MemoryDep('buf157', c0, {c0: 4194304}, None)]
op159.met_dependencies = [MemoryDep('arg91_1', c1, {c0: 4096, c1: 1024}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf159.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (4096, 1024)
op159.sizes = ([4096], [1024])
buf157_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op159_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf154', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf159', get_index_3, getitem_1)
        return store_reduction
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 4194304}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf154', c0, {c0: 4194304}, None),
        MemoryDep('buf157', c0, {c0: 4194304}, None),
        MemoryDep('buf158', c0, {c0: 4096}, None),
        MemoryDep('buf159', c0, {c0: 4096}, None)]
op161.met_dependencies = 
    [   MemoryDep('arg86_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg87_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg91_1', c1, {c0: 4096, c1: 1024}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf161.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (4194304, 1)
op161.sizes = ([4096, 1024], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf159_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op161_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf154', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf158', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf159', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg86_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg87_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf161', get_index_7, add_3, None)
        return store
op161 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op162.node.kernel = extern_kernels.bmm


op163: ExternKernelSchedulerNode(ExternKernelOut)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op163.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelOut
    buf163.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op163.node.kernel = extern_kernels.bmm


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 4194304}, None)]
op164.unmet_dependencies = [MemoryDep('buf162', c0, {c0: 4194304}, None)]
op164.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 4096, c1: 1024}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (4194304, 1)
op164.sizes = ([4096, 1024], [])
buf162_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op164_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf164', get_index_2, add, None)
        return store
op164 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf163', mode=None), StarDep(name='buf164', mode=None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf165.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
    ]
]
op165.node.kernel = extern_kernels.bmm


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op166.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op166.node.kernel = extern_kernels.bmm


op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 4194304}, None)]
op167.unmet_dependencies = [MemoryDep('buf162', c0, {c0: 4194304}, None)]
op167.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 4096, c1: 1024}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (4194304, 1)
op167.sizes = ([4096, 1024], [])
buf162_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op167_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf167', get_index_2, add, None)
        return store
op167 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf166', mode=None), StarDep(name='buf167', mode=None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf168.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
    ]
]
op168.node.kernel = extern_kernels.bmm


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 65536}, None)]
op169.unmet_dependencies = 
    [   MemoryDep('buf165', c0, {c0: 33554432}, None),
        MemoryDep('buf168', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
    ]
]
op169.group.device = cuda:0
op169.group.iteration = (65536, 512)
op169.sizes = ([8, 16, 512], [512])
buf165_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op169_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf168', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf169', get_index_4, reduction)
        return store_reduction
op169 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 65536}, None)]
op170.unmet_dependencies = 
    [   MemoryDep('buf165', c0, {c0: 33554432}, None),
        MemoryDep('buf168', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf169', c0, {c0: 65536}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf170.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (65536, 512)
op170.sizes = ([8, 16, 512], [512])
buf165_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op170_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf168', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf169', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf170', get_index_5, reduction)
        return store_reduction
op170 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op171.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.node.kernel = extern_kernels.bmm


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 33554432}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf165', c0, {c0: 33554432}, None),
        MemoryDep('buf168', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf169', c0, {c0: 65536}, None),
        MemoryDep('buf170', c0, {c0: 65536}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (33554432, 1)
op172.sizes = ([8, 16, 512, 512], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op172_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf168', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf169', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf170', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf172', get_index_6, truediv, None)
        return store
op172 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf171', mode=None), StarDep(name='buf172', mode=None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.node.kernel = extern_kernels.bmm


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 4194304}, None)]
op174.unmet_dependencies = [   MemoryDep('buf173', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (4194304, 1)
op174.sizes = ([512, 8, 64, 16], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op174_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf174', get_index_1, load, None)
        return store
op174 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 1048576}, None)]
op175.unmet_dependencies = []
op175.met_dependencies = [MemoryDep('arg95_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (1048576, 1)
op175.sizes = ([64, 16, 1024], [])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op175_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg95_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf175', get_index_1, load, None)
        return store
op175 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf174', mode=None), StarDep(name='buf175', mode=None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
    ]
]
op176.node.kernel = extern_kernels.bmm


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 4096}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 4194304}, None),
        MemoryDep('buf176', c0, {c0: 4194304}, None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf177.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (4096, 1024)
op177.sizes = ([4096], [1024])
buf176_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op177_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf177', get_index_2, getitem)
        return store_reduction
op177 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 4096}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 4194304}, None),
        MemoryDep('buf176', c0, {c0: 4194304}, None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf178.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (4096, 1024)
op178.sizes = ([4096], [1024])
buf176_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op178_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf178', get_index_2, getitem_1)
        return store_reduction
op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 4194304}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 4194304}, None),
        MemoryDep('buf176', c0, {c0: 4194304}, None),
        MemoryDep('buf177', c0, {c0: 4096}, None),
        MemoryDep('buf178', c0, {c0: 4096}, None)]
op180.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg99_1', c1, {c0: 4096, c1: 1024}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf180.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op180.group.device = cuda:0
op180.group.iteration = (4194304, 1)
op180.sizes = ([4096, 1024], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf178_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op180_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf177', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf178', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg99_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg100_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf180', get_index_6, add_2, None)
        return store
op180 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False)]
]
op181.node.kernel = extern_kernels.mm


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 16777216}, None)]
op182.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 16777216}, None)]
op182.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 4096, c1: 4096}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (16777216, 1)
op182.sizes = ([4096, 4096], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op182_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf181', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf182', get_index_4, mul_2, None)
        return store
op182 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op183.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.mm


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 4096}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf180', c0, {c0: 4194304}, None),
        MemoryDep('buf183', c0, {c0: 4194304}, None)]
op184.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 4096, c1: 1024}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (4096, 1024)
op184.sizes = ([4096], [1024])
buf183_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op184_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf180', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf184', get_index_3, getitem)
        return store_reduction
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 4096}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf180', c0, {c0: 4194304}, None),
        MemoryDep('buf183', c0, {c0: 4194304}, None)]
op185.met_dependencies = [MemoryDep('arg106_1', c1, {c0: 4096, c1: 1024}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (4096, 1024)
op185.sizes = ([4096], [1024])
buf183_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op185_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf180', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf185', get_index_3, getitem_1)
        return store_reduction
op185 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 4194304}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf180', c0, {c0: 4194304}, None),
        MemoryDep('buf183', c0, {c0: 4194304}, None),
        MemoryDep('buf184', c0, {c0: 4096}, None),
        MemoryDep('buf185', c0, {c0: 4096}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg102_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg106_1', c1, {c0: 4096, c1: 1024}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf187.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (4194304, 1)
op187.sizes = ([4096, 1024], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf185_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op187_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf180', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf184', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf185', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg101_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg102_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf187', get_index_7, add_3, None)
        return store
op187 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf188.users = [
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False),
    ]
]
op188.node.kernel = extern_kernels.bmm


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op189.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = extern_kernels.bmm


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 4194304}, None)]
op190.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 4194304}, None)]
op190.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 4096, c1: 1024}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (4194304, 1)
op190.sizes = ([4096, 1024], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op190_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf190', get_index_2, add, None)
        return store
op190 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf189', mode=None), StarDep(name='buf190', mode=None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
]
op191.node.kernel = extern_kernels.bmm


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op192.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.node.kernel = extern_kernels.bmm


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 4194304}, None)]
op193.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 4194304}, None)]
op193.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 4096, c1: 1024}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (4194304, 1)
op193.sizes = ([4096, 1024], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op193_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf193', get_index_2, add, None)
        return store
op193 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op194: ExternKernelSchedulerNode(ExternKernelOut)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf192', mode=None), StarDep(name='buf193', mode=None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ExternKernelOut
    buf194.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op194.node.kernel = extern_kernels.bmm


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 65536}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 33554432}, None),
        MemoryDep('buf194', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op195.group.device = cuda:0
op195.group.iteration = (65536, 512)
op195.sizes = ([8, 16, 512], [512])
buf191_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op195_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf194', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf195', get_index_4, reduction)
        return store_reduction
op195 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 65536}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 33554432}, None),
        MemoryDep('buf194', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf195', c0, {c0: 65536}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf196.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (65536, 512)
op196.sizes = ([8, 16, 512], [512])
buf191_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op196_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf194', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf195', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf196', get_index_5, reduction)
        return store_reduction
op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op197.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.node.kernel = extern_kernels.bmm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 33554432}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 33554432}, None),
        MemoryDep('buf194', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf195', c0, {c0: 65536}, None),
        MemoryDep('buf196', c0, {c0: 65536}, None)]
op198.met_dependencies = []
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (33554432, 1)
op198.sizes = ([8, 16, 512, 512], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op198_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf194', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf195', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf196', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf198', get_index_6, truediv, None)
        return store
op198 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf197', mode=None), StarDep(name='buf198', mode=None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.node.kernel = extern_kernels.bmm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 4194304}, None)]
op200.unmet_dependencies = [   MemoryDep('buf199', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (4194304, 1)
op200.sizes = ([512, 8, 64, 16], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op200_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf200', get_index_1, load, None)
        return store
op200 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 1048576}, None)]
op201.unmet_dependencies = []
op201.met_dependencies = [MemoryDep('arg110_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (1048576, 1)
op201.sizes = ([64, 16, 1024], [])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op201_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg110_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf201', get_index_1, load, None)
        return store
op201 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf200', mode=None), StarDep(name='buf201', mode=None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op202.node.kernel = extern_kernels.bmm


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 4096}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 4194304}, None),
        MemoryDep('buf202', c0, {c0: 4194304}, None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (4096, 1024)
op203.sizes = ([4096], [1024])
buf202_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op203_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf203', get_index_2, getitem)
        return store_reduction
op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 4096}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 4194304}, None),
        MemoryDep('buf202', c0, {c0: 4194304}, None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (4096, 1024)
op204.sizes = ([4096], [1024])
buf202_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op204_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf204', get_index_2, getitem_1)
        return store_reduction
op204 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 4194304}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 4194304}, None),
        MemoryDep('buf202', c0, {c0: 4194304}, None),
        MemoryDep('buf203', c0, {c0: 4096}, None),
        MemoryDep('buf204', c0, {c0: 4096}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg115_1', c1, {c0: 4096, c1: 1024}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf206.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (4194304, 1)
op206.sizes = ([4096, 1024], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf204_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op206_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf203', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf204', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg114_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg115_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf206', get_index_6, add_2, None)
        return store
op206 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.mm


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 16777216}, None)]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 16777216}, None)]
op208.met_dependencies = [MemoryDep('arg119_1', c1, {c0: 4096, c1: 4096}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (16777216, 1)
op208.sizes = ([4096, 4096], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op208_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf207', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg119_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf208', get_index_4, mul_2, None)
        return store
op208 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
    ]
]
op209.node.kernel = extern_kernels.mm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 4096}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 4194304}, None),
        MemoryDep('buf209', c0, {c0: 4194304}, None)]
op210.met_dependencies = [MemoryDep('arg121_1', c1, {c0: 4096, c1: 1024}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf210.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (4096, 1024)
op210.sizes = ([4096], [1024])
buf209_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op210_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf206', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf210', get_index_3, getitem)
        return store_reduction
op210 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 4096}, None)]
op211.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 4194304}, None),
        MemoryDep('buf209', c0, {c0: 4194304}, None)]
op211.met_dependencies = [MemoryDep('arg121_1', c1, {c0: 4096, c1: 1024}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf211.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (4096, 1024)
op211.sizes = ([4096], [1024])
buf209_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op211_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf206', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf211', get_index_3, getitem_1)
        return store_reduction
op211 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 4194304}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 4194304}, None),
        MemoryDep('buf209', c0, {c0: 4194304}, None),
        MemoryDep('buf210', c0, {c0: 4096}, None),
        MemoryDep('buf211', c0, {c0: 4096}, None)]
op213.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg117_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg121_1', c1, {c0: 4096, c1: 1024}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf213.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (4194304, 1)
op213.sizes = ([4096, 1024], [])
buf209_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf211_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op213_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf206', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf210', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf211', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg116_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg117_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf213', get_index_7, add_3, None)
        return store
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf214.users = [
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op214.node.kernel = extern_kernels.bmm


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op215.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.node.kernel = extern_kernels.bmm


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 4194304}, None)]
op216.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 4194304}, None)]
op216.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 4096, c1: 1024}, None)]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (4194304, 1)
op216.sizes = ([4096, 1024], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op216_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf216', get_index_2, add, None)
        return store
op216 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf215', mode=None), StarDep(name='buf216', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False),
    ]
]
op217.node.kernel = extern_kernels.bmm


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op218.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = extern_kernels.bmm


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 4194304}, None)]
op219.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 4194304}, None)]
op219.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 4096, c1: 1024}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (4194304, 1)
op219.sizes = ([4096, 1024], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op219_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf219', get_index_2, add, None)
        return store
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf218', mode=None), StarDep(name='buf219', mode=None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf220.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op220.node.kernel = extern_kernels.bmm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 65536}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 33554432}, None),
        MemoryDep('buf220', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf221.users = [
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (65536, 512)
op221.sizes = ([8, 16, 512], [512])
buf217_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op221_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf220', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf221', get_index_4, reduction)
        return store_reduction
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 65536}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 33554432}, None),
        MemoryDep('buf220', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf221', c0, {c0: 65536}, None)]
op222.met_dependencies = []
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf222.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (65536, 512)
op222.sizes = ([8, 16, 512], [512])
buf217_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op222_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf220', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf221', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf222', get_index_5, reduction)
        return store_reduction
op222 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op223.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.node.kernel = extern_kernels.bmm


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 33554432}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 33554432}, None),
        MemoryDep('buf220', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf221', c0, {c0: 65536}, None),
        MemoryDep('buf222', c0, {c0: 65536}, None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (33554432, 1)
op224.sizes = ([8, 16, 512, 512], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op224_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf220', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf221', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf222', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf224', get_index_6, truediv, None)
        return store
op224 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf223', mode=None), StarDep(name='buf224', mode=None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf225.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.node.kernel = extern_kernels.bmm


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 4194304}, None)]
op226.unmet_dependencies = [   MemoryDep('buf225', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (4194304, 1)
op226.sizes = ([512, 8, 64, 16], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op226_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf226', get_index_1, load, None)
        return store
op226 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 1048576}, None)]
op227.unmet_dependencies = []
op227.met_dependencies = [MemoryDep('arg125_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (1048576, 1)
op227.sizes = ([64, 16, 1024], [])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op227_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg125_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf227', get_index_1, load, None)
        return store
op227 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf226', mode=None), StarDep(name='buf227', mode=None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False),
    ]
]
op228.node.kernel = extern_kernels.bmm


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 4096}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf213', c0, {c0: 4194304}, None),
        MemoryDep('buf228', c0, {c0: 4194304}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf229.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (4096, 1024)
op229.sizes = ([4096], [1024])
buf228_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op229_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf213', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf229', get_index_2, getitem)
        return store_reduction
op229 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 4096}, None)]
op230.unmet_dependencies = 
    [   MemoryDep('buf213', c0, {c0: 4194304}, None),
        MemoryDep('buf228', c0, {c0: 4194304}, None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf230.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (4096, 1024)
op230.sizes = ([4096], [1024])
buf228_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op230_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf213', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf230', get_index_2, getitem_1)
        return store_reduction
op230 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 4194304}, None)]
op232.unmet_dependencies = 
    [   MemoryDep('buf213', c0, {c0: 4194304}, None),
        MemoryDep('buf228', c0, {c0: 4194304}, None),
        MemoryDep('buf229', c0, {c0: 4096}, None),
        MemoryDep('buf230', c0, {c0: 4096}, None)]
op232.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg130_1', c1, {c0: 4096, c1: 1024}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf232.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (4194304, 1)
op232.sizes = ([4096, 1024], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf230_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op232_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf213', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf229', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf230', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg129_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg130_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf232', get_index_6, add_2, None)
        return store
op232 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.node.kernel = extern_kernels.mm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 16777216}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 16777216}, None)]
op234.met_dependencies = [MemoryDep('arg134_1', c1, {c0: 4096, c1: 4096}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (16777216, 1)
op234.sizes = ([4096, 4096], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op234_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf233', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf234', get_index_4, mul_2, None)
        return store
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
    ]
]
op235.node.kernel = extern_kernels.mm


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 4096}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 4194304}, None),
        MemoryDep('buf235', c0, {c0: 4194304}, None)]
op236.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 4096, c1: 1024}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf236.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (4096, 1024)
op236.sizes = ([4096], [1024])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op236_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf232', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf236', get_index_3, getitem)
        return store_reduction
op236 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 4096}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 4194304}, None),
        MemoryDep('buf235', c0, {c0: 4194304}, None)]
op237.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 4096, c1: 1024}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf237.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (4096, 1024)
op237.sizes = ([4096], [1024])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op237_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf232', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf237', get_index_3, getitem_1)
        return store_reduction
op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 4194304}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 4194304}, None),
        MemoryDep('buf235', c0, {c0: 4194304}, None),
        MemoryDep('buf236', c0, {c0: 4096}, None),
        MemoryDep('buf237', c0, {c0: 4096}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg132_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg136_1', c1, {c0: 4096, c1: 1024}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf239.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op239.group.device = cuda:0
op239.group.iteration = (4194304, 1)
op239.sizes = ([4096, 1024], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf237_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op239_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf232', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf236', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf237', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg131_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg132_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf239', get_index_7, add_3, None)
        return store
op239 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf240.users = [
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False),
    ]
]
op240.node.kernel = extern_kernels.bmm


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op241.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op241.node.kernel = extern_kernels.bmm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 4194304}, None)]
op242.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 4194304}, None)]
op242.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 4096, c1: 1024}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (4194304, 1)
op242.sizes = ([4096, 1024], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op242_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf242', get_index_2, add, None)
        return store
op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf241', mode=None), StarDep(name='buf242', mode=None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
    ]
]
op243.node.kernel = extern_kernels.bmm


op244: ExternKernelSchedulerNode(ExternKernelOut)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op244.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelOut
    buf244.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.node.kernel = extern_kernels.bmm


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 4194304}, None)]
op245.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 4194304}, None)]
op245.met_dependencies = [MemoryDep('arg142_1', c1, {c0: 4096, c1: 1024}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (4194304, 1)
op245.sizes = ([4096, 1024], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op245_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf245', get_index_2, add, None)
        return store
op245 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op246: ExternKernelSchedulerNode(ExternKernelOut)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf244', mode=None), StarDep(name='buf245', mode=None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ExternKernelOut
    buf246.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf246.users = [
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
    ]
]
op246.node.kernel = extern_kernels.bmm


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 65536}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 33554432}, None),
        MemoryDep('buf246', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf247.users = [
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
    ]
]
op247.group.device = cuda:0
op247.group.iteration = (65536, 512)
op247.sizes = ([8, 16, 512], [512])
buf243_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op247_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf246', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf247', get_index_4, reduction)
        return store_reduction
op247 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 65536}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 33554432}, None),
        MemoryDep('buf246', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf247', c0, {c0: 65536}, None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf248.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (65536, 512)
op248.sizes = ([8, 16, 512], [512])
buf243_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op248_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf246', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf247', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf248', get_index_5, reduction)
        return store_reduction
op248 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op249.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op249.node.kernel = extern_kernels.bmm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 33554432}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 33554432}, None),
        MemoryDep('buf246', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf247', c0, {c0: 65536}, None),
        MemoryDep('buf248', c0, {c0: 65536}, None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (33554432, 1)
op250.sizes = ([8, 16, 512, 512], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op250_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf246', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf247', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf248', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf250', get_index_6, truediv, None)
        return store
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf249', mode=None), StarDep(name='buf250', mode=None)]
op251.met_dependencies = []
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.node.kernel = extern_kernels.bmm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 4194304}, None)]
op252.unmet_dependencies = [   MemoryDep('buf251', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (4194304, 1)
op252.sizes = ([512, 8, 64, 16], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op252_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf252', get_index_1, load, None)
        return store
op252 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 1048576}, None)]
op253.unmet_dependencies = []
op253.met_dependencies = [MemoryDep('arg140_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (1048576, 1)
op253.sizes = ([64, 16, 1024], [])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op253_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg140_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf253', get_index_1, load, None)
        return store
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf252', mode=None), StarDep(name='buf253', mode=None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf254.users = [
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
    ]
]
op254.node.kernel = extern_kernels.bmm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 4096}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 4194304}, None),
        MemoryDep('buf254', c0, {c0: 4194304}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf255.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (4096, 1024)
op255.sizes = ([4096], [1024])
buf254_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op255_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf239', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf255', get_index_2, getitem)
        return store_reduction
op255 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 4096}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 4194304}, None),
        MemoryDep('buf254', c0, {c0: 4194304}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf256.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (4096, 1024)
op256.sizes = ([4096], [1024])
buf254_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op256_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf239', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf256', get_index_2, getitem_1)
        return store_reduction
op256 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 4194304}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf239', c0, {c0: 4194304}, None),
        MemoryDep('buf254', c0, {c0: 4194304}, None),
        MemoryDep('buf255', c0, {c0: 4096}, None),
        MemoryDep('buf256', c0, {c0: 4096}, None)]
op258.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg145_1', c1, {c0: 4096, c1: 1024}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf258.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False),
    ]
]
op258.group.device = cuda:0
op258.group.iteration = (4194304, 1)
op258.sizes = ([4096, 1024], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf256_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op258_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf239', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf255', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf256', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg144_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg145_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf258', get_index_6, add_2, None)
        return store
op258 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op259.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf259.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False)]
]
op259.node.kernel = extern_kernels.mm


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 16777216}, None)]
op260.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 16777216}, None)]
op260.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 4096, c1: 4096}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (16777216, 1)
op260.sizes = ([4096, 4096], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op260_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf259', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg149_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf260', get_index_4, mul_2, None)
        return store
op260 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op261.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf261.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False),
    ]
]
op261.node.kernel = extern_kernels.mm


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 4096}, None)]
op262.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 4194304}, None),
        MemoryDep('buf261', c0, {c0: 4194304}, None)]
op262.met_dependencies = [MemoryDep('arg151_1', c1, {c0: 4096, c1: 1024}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf262.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (4096, 1024)
op262.sizes = ([4096], [1024])
buf261_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op262_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf258', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf262', get_index_3, getitem)
        return store_reduction
op262 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 4096}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 4194304}, None),
        MemoryDep('buf261', c0, {c0: 4194304}, None)]
op263.met_dependencies = [MemoryDep('arg151_1', c1, {c0: 4096, c1: 1024}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf263.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (4096, 1024)
op263.sizes = ([4096], [1024])
buf261_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op263_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf258', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf263', get_index_3, getitem_1)
        return store_reduction
op263 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 4194304}, None)]
op265.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 4194304}, None),
        MemoryDep('buf261', c0, {c0: 4194304}, None),
        MemoryDep('buf262', c0, {c0: 4096}, None),
        MemoryDep('buf263', c0, {c0: 4096}, None)]
op265.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg147_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg151_1', c1, {c0: 4096, c1: 1024}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf265.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op265.group.device = cuda:0
op265.group.iteration = (4194304, 1)
op265.sizes = ([4096, 1024], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf263_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op265_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf258', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf262', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf263', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg146_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg147_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf265', get_index_7, add_3, None)
        return store
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf266.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
    ]
]
op266.node.kernel = extern_kernels.bmm


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op267.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op267.node.kernel = extern_kernels.bmm


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 4194304}, None)]
op268.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 4194304}, None)]
op268.met_dependencies = [MemoryDep('arg158_1', c1, {c0: 4096, c1: 1024}, None)]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (4194304, 1)
op268.sizes = ([4096, 1024], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op268_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf268', get_index_2, add, None)
        return store
op268 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op269: ExternKernelSchedulerNode(ExternKernelOut)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf267', mode=None), StarDep(name='buf268', mode=None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ExternKernelOut
    buf269.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf269.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
    ]
]
op269.node.kernel = extern_kernels.bmm


op270: ExternKernelSchedulerNode(ExternKernelOut)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op270.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op270.outputs = [
    buf270: ExternKernelOut
    buf270.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.node.kernel = extern_kernels.bmm


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 4194304}, None)]
op271.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 4194304}, None)]
op271.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 4096, c1: 1024}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (4194304, 1)
op271.sizes = ([4096, 1024], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op271_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf271', get_index_2, add, None)
        return store
op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf270', mode=None), StarDep(name='buf271', mode=None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
    ]
]
op272.node.kernel = extern_kernels.bmm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 65536}, None)]
op273.unmet_dependencies = 
    [   MemoryDep('buf269', c0, {c0: 33554432}, None),
        MemoryDep('buf272', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
    ]
]
op273.group.device = cuda:0
op273.group.iteration = (65536, 512)
op273.sizes = ([8, 16, 512], [512])
buf269_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op273_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf272', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf273', get_index_4, reduction)
        return store_reduction
op273 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 65536}, None)]
op274.unmet_dependencies = 
    [   MemoryDep('buf269', c0, {c0: 33554432}, None),
        MemoryDep('buf272', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf273', c0, {c0: 65536}, None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf274.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (65536, 512)
op274.sizes = ([8, 16, 512], [512])
buf269_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op274_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf272', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf273', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf274', get_index_5, reduction)
        return store_reduction
op274 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op275: ExternKernelSchedulerNode(ExternKernelOut)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op275.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelOut
    buf275.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op275.node.kernel = extern_kernels.bmm


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 33554432}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf269', c0, {c0: 33554432}, None),
        MemoryDep('buf272', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf273', c0, {c0: 65536}, None),
        MemoryDep('buf274', c0, {c0: 65536}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (33554432, 1)
op276.sizes = ([8, 16, 512, 512], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op276_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf272', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf273', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf274', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf276', get_index_6, truediv, None)
        return store
op276 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op277: ExternKernelSchedulerNode(ExternKernelOut)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf275', mode=None), StarDep(name='buf276', mode=None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: ExternKernelOut
    buf277.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf277.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.node.kernel = extern_kernels.bmm


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 4194304}, None)]
op278.unmet_dependencies = [   MemoryDep('buf277', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (4194304, 1)
op278.sizes = ([512, 8, 64, 16], [])
buf277_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op278_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf278', get_index_1, load, None)
        return store
op278 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 1048576}, None)]
op279.unmet_dependencies = []
op279.met_dependencies = [MemoryDep('arg155_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (1048576, 1)
op279.sizes = ([64, 16, 1024], [])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op279_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg155_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf279', get_index_1, load, None)
        return store
op279 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None), StarDep(name='buf279', mode=None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False),
    ]
]
op280.node.kernel = extern_kernels.bmm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 4096}, None)]
op281.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 4194304}, None),
        MemoryDep('buf280', c0, {c0: 4194304}, None)]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf281.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (4096, 1024)
op281.sizes = ([4096], [1024])
buf280_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op281_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf265', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf281', get_index_2, getitem)
        return store_reduction
op281 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 4096}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 4194304}, None),
        MemoryDep('buf280', c0, {c0: 4194304}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf282.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (4096, 1024)
op282.sizes = ([4096], [1024])
buf280_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op282_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf265', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf282', get_index_2, getitem_1)
        return store_reduction
op282 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 4194304}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf265', c0, {c0: 4194304}, None),
        MemoryDep('buf280', c0, {c0: 4194304}, None),
        MemoryDep('buf281', c0, {c0: 4096}, None),
        MemoryDep('buf282', c0, {c0: 4096}, None)]
op284.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg160_1', c1, {c0: 4096, c1: 1024}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf284.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (4194304, 1)
op284.sizes = ([4096, 1024], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf282_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op284_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf265', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf281', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf282', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg159_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg160_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf284', get_index_6, add_2, None)
        return store
op284 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op285: ExternKernelSchedulerNode(ExternKernelOut)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf284', mode=None)]
op285.met_dependencies = [StarDep(name='arg163_1', mode=None)]
op285.outputs = [
    buf285: ExternKernelOut
    buf285.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf285.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False)]
]
op285.node.kernel = extern_kernels.mm


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 16777216}, None)]
op286.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 16777216}, None)]
op286.met_dependencies = [MemoryDep('arg164_1', c1, {c0: 4096, c1: 4096}, None)]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (16777216, 1)
op286.sizes = ([4096, 4096], [])
buf285_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op286_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf285', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg164_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf286', get_index_4, mul_2, None)
        return store
op286 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op287: ExternKernelSchedulerNode(ExternKernelOut)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf286', mode=None)]
op287.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op287.outputs = [
    buf287: ExternKernelOut
    buf287.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf287.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op287.node.kernel = extern_kernels.mm


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 4096}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 4194304}, None),
        MemoryDep('buf287', c0, {c0: 4194304}, None)]
op288.met_dependencies = [MemoryDep('arg166_1', c1, {c0: 4096, c1: 1024}, None)]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf288.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (4096, 1024)
op288.sizes = ([4096], [1024])
buf287_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op288_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf284', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf288', get_index_3, getitem)
        return store_reduction
op288 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 4096}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 4194304}, None),
        MemoryDep('buf287', c0, {c0: 4194304}, None)]
op289.met_dependencies = [MemoryDep('arg166_1', c1, {c0: 4096, c1: 1024}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf289.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (4096, 1024)
op289.sizes = ([4096], [1024])
buf287_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op289_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf284', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf289', get_index_3, getitem_1)
        return store_reduction
op289 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 4194304}, None)]
op291.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 4194304}, None),
        MemoryDep('buf287', c0, {c0: 4194304}, None),
        MemoryDep('buf288', c0, {c0: 4096}, None),
        MemoryDep('buf289', c0, {c0: 4096}, None)]
op291.met_dependencies = 
    [   MemoryDep('arg161_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg162_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg166_1', c1, {c0: 4096, c1: 1024}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf291.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op291.group.device = cuda:0
op291.group.iteration = (4194304, 1)
op291.sizes = ([4096, 1024], [])
buf287_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf289_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op291_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf284', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf288', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf289', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg161_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg162_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf291', get_index_7, add_3, None)
        return store
op291 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op292: ExternKernelSchedulerNode(ExternKernelOut)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf291', mode=None)]
op292.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op292.outputs = [
    buf292: ExternKernelOut
    buf292.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False),
    ]
]
op292.node.kernel = extern_kernels.bmm


op293: ExternKernelSchedulerNode(ExternKernelOut)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf291', mode=None)]
op293.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelOut
    buf293.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf293.users = [NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op293.node.kernel = extern_kernels.bmm


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 4194304}, None)]
op294.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 4194304}, None)]
op294.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 4096, c1: 1024}, None)]
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf294.users = [NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (4194304, 1)
op294.sizes = ([4096, 1024], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op294_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf294', get_index_2, add, None)
        return store
op294 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op295: ExternKernelSchedulerNode(ExternKernelOut)
op295.writes = [StarDep(name='buf295', mode=None)]
op295.unmet_dependencies = [StarDep(name='buf293', mode=None), StarDep(name='buf294', mode=None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ExternKernelOut
    buf295.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
    ]
]
op295.node.kernel = extern_kernels.bmm


op296: ExternKernelSchedulerNode(ExternKernelOut)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op296.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op296.outputs = [
    buf296: ExternKernelOut
    buf296.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op296.node.kernel = extern_kernels.bmm


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 4194304}, None)]
op297.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 4194304}, None)]
op297.met_dependencies = [MemoryDep('arg172_1', c1, {c0: 4096, c1: 1024}, None)]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (4194304, 1)
op297.sizes = ([4096, 1024], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op297_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf297', get_index_2, add, None)
        return store
op297 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op298: ExternKernelSchedulerNode(ExternKernelOut)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf296', mode=None), StarDep(name='buf297', mode=None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ExternKernelOut
    buf298.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
    ]
]
op298.node.kernel = extern_kernels.bmm


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 65536}, None)]
op299.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 33554432}, None),
        MemoryDep('buf298', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
    ]
]
op299.group.device = cuda:0
op299.group.iteration = (65536, 512)
op299.sizes = ([8, 16, 512], [512])
buf295_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op299_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf298', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf299', get_index_4, reduction)
        return store_reduction
op299 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 65536}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 33554432}, None),
        MemoryDep('buf298', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf299', c0, {c0: 65536}, None)]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf300.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (65536, 512)
op300.sizes = ([8, 16, 512], [512])
buf295_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op300_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf298', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf299', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf300', get_index_5, reduction)
        return store_reduction
op300 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op301: ExternKernelSchedulerNode(ExternKernelOut)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf291', mode=None)]
op301.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op301.outputs = [
    buf301: ExternKernelOut
    buf301.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf301.users = [NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op301.node.kernel = extern_kernels.bmm


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 33554432}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 33554432}, None),
        MemoryDep('buf298', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf299', c0, {c0: 65536}, None),
        MemoryDep('buf300', c0, {c0: 65536}, None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf302.users = [NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (33554432, 1)
op302.sizes = ([8, 16, 512, 512], [])
buf295_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op302_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf298', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf299', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf300', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf302', get_index_6, truediv, None)
        return store
op302 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op303: ExternKernelSchedulerNode(ExternKernelOut)
op303.writes = [StarDep(name='buf303', mode=None)]
op303.unmet_dependencies = [StarDep(name='buf301', mode=None), StarDep(name='buf302', mode=None)]
op303.met_dependencies = []
op303.outputs = [
    buf303: ExternKernelOut
    buf303.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf303.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op303.node.kernel = extern_kernels.bmm


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 4194304}, None)]
op304.unmet_dependencies = [   MemoryDep('buf303', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op304.met_dependencies = []
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (4194304, 1)
op304.sizes = ([512, 8, 64, 16], [])
buf303_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op304_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf304', get_index_1, load, None)
        return store
op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 1048576}, None)]
op305.unmet_dependencies = []
op305.met_dependencies = [MemoryDep('arg170_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (1048576, 1)
op305.sizes = ([64, 16, 1024], [])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op305_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg170_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf305', get_index_1, load, None)
        return store
op305 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op306: ExternKernelSchedulerNode(ExternKernelOut)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf304', mode=None), StarDep(name='buf305', mode=None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: ExternKernelOut
    buf306.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
    ]
]
op306.node.kernel = extern_kernels.bmm


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 4096}, None)]
op307.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 4194304}, None),
        MemoryDep('buf306', c0, {c0: 4194304}, None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf307.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (4096, 1024)
op307.sizes = ([4096], [1024])
buf306_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op307_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf307', get_index_2, getitem)
        return store_reduction
op307 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 4096}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 4194304}, None),
        MemoryDep('buf306', c0, {c0: 4194304}, None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf308.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (4096, 1024)
op308.sizes = ([4096], [1024])
buf306_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op308_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf308', get_index_2, getitem_1)
        return store_reduction
op308 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 4194304}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 4194304}, None),
        MemoryDep('buf306', c0, {c0: 4194304}, None),
        MemoryDep('buf307', c0, {c0: 4096}, None),
        MemoryDep('buf308', c0, {c0: 4096}, None)]
op310.met_dependencies = 
    [   MemoryDep('arg174_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg175_1', c1, {c0: 4096, c1: 1024}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf310.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
]
op310.group.device = cuda:0
op310.group.iteration = (4194304, 1)
op310.sizes = ([4096, 1024], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf308_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op310_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf307', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf308', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg174_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg175_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf310', get_index_6, add_2, None)
        return store
op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf310', mode=None)]
op311.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False)]
]
op311.node.kernel = extern_kernels.mm


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 16777216}, None)]
op312.unmet_dependencies = [MemoryDep('buf311', c0, {c0: 16777216}, None)]
op312.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 4096, c1: 4096}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (16777216, 1)
op312.sizes = ([4096, 4096], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op312_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg179_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf311', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf312', get_index_4, mul_2, None)
        return store
op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op313: ExternKernelSchedulerNode(ExternKernelOut)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op313.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op313.outputs = [
    buf313: ExternKernelOut
    buf313.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf313.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
]
op313.node.kernel = extern_kernels.mm


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 4096}, None)]
op314.unmet_dependencies = 
    [   MemoryDep('buf310', c0, {c0: 4194304}, None),
        MemoryDep('buf313', c0, {c0: 4194304}, None)]
op314.met_dependencies = [MemoryDep('arg181_1', c1, {c0: 4096, c1: 1024}, None)]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf314.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (4096, 1024)
op314.sizes = ([4096], [1024])
buf313_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op314_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf310', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf314', get_index_3, getitem)
        return store_reduction
op314 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 4096}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf310', c0, {c0: 4194304}, None),
        MemoryDep('buf313', c0, {c0: 4194304}, None)]
op315.met_dependencies = [MemoryDep('arg181_1', c1, {c0: 4096, c1: 1024}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf315.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (4096, 1024)
op315.sizes = ([4096], [1024])
buf313_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op315_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf310', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf315', get_index_3, getitem_1)
        return store_reduction
op315 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 4194304}, None)]
op317.unmet_dependencies = 
    [   MemoryDep('buf310', c0, {c0: 4194304}, None),
        MemoryDep('buf313', c0, {c0: 4194304}, None),
        MemoryDep('buf314', c0, {c0: 4096}, None),
        MemoryDep('buf315', c0, {c0: 4096}, None)]
op317.met_dependencies = 
    [   MemoryDep('arg176_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg177_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg181_1', c1, {c0: 4096, c1: 1024}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf317.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op317.group.device = cuda:0
op317.group.iteration = (4194304, 1)
op317.sizes = ([4096, 1024], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf315_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op317_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf310', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf314', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf315', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg176_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg177_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf317', get_index_7, add_3, None)
        return store
op317 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op318: ExternKernelSchedulerNode(ExternKernelOut)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op318.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op318.outputs = [
    buf318: ExternKernelOut
    buf318.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf318.users = [
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False),
    ]
]
op318.node.kernel = extern_kernels.bmm


op319: ExternKernelSchedulerNode(ExternKernelOut)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op319.met_dependencies = [StarDep(name='arg183_1', mode=None)]
op319.outputs = [
    buf319: ExternKernelOut
    buf319.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op319.node.kernel = extern_kernels.bmm


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 4194304}, None)]
op320.unmet_dependencies = [MemoryDep('buf318', c0, {c0: 4194304}, None)]
op320.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 4096, c1: 1024}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf320.users = [NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (4194304, 1)
op320.sizes = ([4096, 1024], [])
buf318_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op320_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg188_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf320', get_index_2, add, None)
        return store
op320 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op321: ExternKernelSchedulerNode(ExternKernelOut)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf319', mode=None), StarDep(name='buf320', mode=None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ExternKernelOut
    buf321.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf321.users = [
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
    ]
]
op321.node.kernel = extern_kernels.bmm


op322: ExternKernelSchedulerNode(ExternKernelOut)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op322.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op322.outputs = [
    buf322: ExternKernelOut
    buf322.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op322.node.kernel = extern_kernels.bmm


op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 4194304}, None)]
op323.unmet_dependencies = [MemoryDep('buf318', c0, {c0: 4194304}, None)]
op323.met_dependencies = [MemoryDep('arg187_1', c1, {c0: 4096, c1: 1024}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (4194304, 1)
op323.sizes = ([4096, 1024], [])
buf318_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op323_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf323', get_index_2, add, None)
        return store
op323 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op324: ExternKernelSchedulerNode(ExternKernelOut)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf322', mode=None), StarDep(name='buf323', mode=None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ExternKernelOut
    buf324.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf324.users = [
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
    ]
]
op324.node.kernel = extern_kernels.bmm


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 65536}, None)]
op325.unmet_dependencies = 
    [   MemoryDep('buf321', c0, {c0: 33554432}, None),
        MemoryDep('buf324', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op325.met_dependencies = []
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf325.users = [
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
    ]
]
op325.group.device = cuda:0
op325.group.iteration = (65536, 512)
op325.sizes = ([8, 16, 512], [512])
buf321_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op325_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf324', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf325', get_index_4, reduction)
        return store_reduction
op325 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 65536}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf321', c0, {c0: 33554432}, None),
        MemoryDep('buf324', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf325', c0, {c0: 65536}, None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf326.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (65536, 512)
op326.sizes = ([8, 16, 512], [512])
buf321_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op326_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf324', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf325', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf326', get_index_5, reduction)
        return store_reduction
op326 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op327: ExternKernelSchedulerNode(ExternKernelOut)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op327.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op327.outputs = [
    buf327: ExternKernelOut
    buf327.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op327.node.kernel = extern_kernels.bmm


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 33554432}, None)]
op328.unmet_dependencies = 
    [   MemoryDep('buf321', c0, {c0: 33554432}, None),
        MemoryDep('buf324', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf325', c0, {c0: 65536}, None),
        MemoryDep('buf326', c0, {c0: 65536}, None)]
op328.met_dependencies = []
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf328.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (33554432, 1)
op328.sizes = ([8, 16, 512, 512], [])
buf321_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op328_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf321', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf324', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf325', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf326', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf328', get_index_6, truediv, None)
        return store
op328 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op329: ExternKernelSchedulerNode(ExternKernelOut)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf327', mode=None), StarDep(name='buf328', mode=None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ExternKernelOut
    buf329.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.node.kernel = extern_kernels.bmm


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 4194304}, None)]
op330.unmet_dependencies = [   MemoryDep('buf329', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf330.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (4194304, 1)
op330.sizes = ([512, 8, 64, 16], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op330_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf330', get_index_1, load, None)
        return store
op330 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 1048576}, None)]
op331.unmet_dependencies = []
op331.met_dependencies = [MemoryDep('arg185_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (1048576, 1)
op331.sizes = ([64, 16, 1024], [])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op331_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg185_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf331', get_index_1, load, None)
        return store
op331 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op332: ExternKernelSchedulerNode(ExternKernelOut)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf330', mode=None), StarDep(name='buf331', mode=None)]
op332.met_dependencies = []
op332.outputs = [
    buf332: ExternKernelOut
    buf332.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=True, is_weak=False),
    ]
]
op332.node.kernel = extern_kernels.bmm


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 4096}, None)]
op333.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 4194304}, None),
        MemoryDep('buf332', c0, {c0: 4194304}, None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf333.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (4096, 1024)
op333.sizes = ([4096], [1024])
buf332_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op333_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf333', get_index_2, getitem)
        return store_reduction
op333 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 4096}, None)]
op334.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 4194304}, None),
        MemoryDep('buf332', c0, {c0: 4194304}, None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf334.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (4096, 1024)
op334.sizes = ([4096], [1024])
buf332_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op334_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf334', get_index_2, getitem_1)
        return store_reduction
op334 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 4194304}, None)]
op336.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 4194304}, None),
        MemoryDep('buf332', c0, {c0: 4194304}, None),
        MemoryDep('buf333', c0, {c0: 4096}, None),
        MemoryDep('buf334', c0, {c0: 4096}, None)]
op336.met_dependencies = 
    [   MemoryDep('arg189_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg190_1', c1, {c0: 4096, c1: 1024}, None)]
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf336.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
    ]
]
op336.group.device = cuda:0
op336.group.iteration = (4194304, 1)
op336.sizes = ([4096, 1024], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf334_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op336_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf317', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf333', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf334', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg189_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg190_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf336', get_index_6, add_2, None)
        return store
op336 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op337: ExternKernelSchedulerNode(ExternKernelOut)
op337.writes = [StarDep(name='buf337', mode=None)]
op337.unmet_dependencies = [StarDep(name='buf336', mode=None)]
op337.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op337.outputs = [
    buf337: ExternKernelOut
    buf337.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf337.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False)]
]
op337.node.kernel = extern_kernels.mm


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 16777216}, None)]
op338.unmet_dependencies = [MemoryDep('buf337', c0, {c0: 16777216}, None)]
op338.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 4096, c1: 4096}, None)]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (16777216, 1)
op338.sizes = ([4096, 4096], [])
buf337_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op338_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg194_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf337', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg194_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf338', get_index_4, mul_2, None)
        return store
op338 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op339: ExternKernelSchedulerNode(ExternKernelOut)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = [StarDep(name='buf338', mode=None)]
op339.met_dependencies = [StarDep(name='arg195_1', mode=None)]
op339.outputs = [
    buf339: ExternKernelOut
    buf339.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
    ]
]
op339.node.kernel = extern_kernels.mm


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 4096}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf336', c0, {c0: 4194304}, None),
        MemoryDep('buf339', c0, {c0: 4194304}, None)]
op340.met_dependencies = [MemoryDep('arg196_1', c1, {c0: 4096, c1: 1024}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf340.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (4096, 1024)
op340.sizes = ([4096], [1024])
buf339_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op340_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf340', get_index_3, getitem)
        return store_reduction
op340 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 4096}, None)]
op341.unmet_dependencies = 
    [   MemoryDep('buf336', c0, {c0: 4194304}, None),
        MemoryDep('buf339', c0, {c0: 4194304}, None)]
op341.met_dependencies = [MemoryDep('arg196_1', c1, {c0: 4096, c1: 1024}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf341.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (4096, 1024)
op341.sizes = ([4096], [1024])
buf339_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op341_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf341', get_index_3, getitem_1)
        return store_reduction
op341 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 4194304}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf336', c0, {c0: 4194304}, None),
        MemoryDep('buf339', c0, {c0: 4194304}, None),
        MemoryDep('buf340', c0, {c0: 4096}, None),
        MemoryDep('buf341', c0, {c0: 4096}, None)]
op343.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg192_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg196_1', c1, {c0: 4096, c1: 1024}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf343.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op343.group.device = cuda:0
op343.group.iteration = (4194304, 1)
op343.sizes = ([4096, 1024], [])
buf339_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf341_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op343_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf340', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf341', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg191_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg192_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf343', get_index_7, add_3, None)
        return store
op343 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op344: ExternKernelSchedulerNode(ExternKernelOut)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op344.met_dependencies = [StarDep(name='arg197_1', mode=None)]
op344.outputs = [
    buf344: ExternKernelOut
    buf344.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf344.users = [
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False),
    ]
]
op344.node.kernel = extern_kernels.bmm


op345: ExternKernelSchedulerNode(ExternKernelOut)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op345.met_dependencies = [StarDep(name='arg198_1', mode=None)]
op345.outputs = [
    buf345: ExternKernelOut
    buf345.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op345.node.kernel = extern_kernels.bmm


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 4194304}, None)]
op346.unmet_dependencies = [MemoryDep('buf344', c0, {c0: 4194304}, None)]
op346.met_dependencies = [MemoryDep('arg203_1', c1, {c0: 4096, c1: 1024}, None)]
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (4194304, 1)
op346.sizes = ([4096, 1024], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op346_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf346', get_index_2, add, None)
        return store
op346 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf345', mode=None), StarDep(name='buf346', mode=None)]
op347.met_dependencies = []
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
    ]
]
op347.node.kernel = extern_kernels.bmm


op348: ExternKernelSchedulerNode(ExternKernelOut)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op348.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op348.outputs = [
    buf348: ExternKernelOut
    buf348.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf348.users = [NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op348.node.kernel = extern_kernels.bmm


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 4194304}, None)]
op349.unmet_dependencies = [MemoryDep('buf344', c0, {c0: 4194304}, None)]
op349.met_dependencies = [MemoryDep('arg202_1', c1, {c0: 4096, c1: 1024}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf349.users = [NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (4194304, 1)
op349.sizes = ([4096, 1024], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op349_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf349', get_index_2, add, None)
        return store
op349 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op350: ExternKernelSchedulerNode(ExternKernelOut)
op350.writes = [StarDep(name='buf350', mode=None)]
op350.unmet_dependencies = [StarDep(name='buf348', mode=None), StarDep(name='buf349', mode=None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: ExternKernelOut
    buf350.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf350.users = [
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
    ]
]
op350.node.kernel = extern_kernels.bmm


op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 65536}, None)]
op351.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 33554432}, None),
        MemoryDep('buf350', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf351.users = [
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
    ]
]
op351.group.device = cuda:0
op351.group.iteration = (65536, 512)
op351.sizes = ([8, 16, 512], [512])
buf347_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op351_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf350', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf351', get_index_4, reduction)
        return store_reduction
op351 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 65536}, None)]
op352.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 33554432}, None),
        MemoryDep('buf350', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf351', c0, {c0: 65536}, None)]
op352.met_dependencies = []
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf352.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (65536, 512)
op352.sizes = ([8, 16, 512], [512])
buf347_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op352_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf350', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf351', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf352', get_index_5, reduction)
        return store_reduction
op352 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op353.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf353.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op353.node.kernel = extern_kernels.bmm


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 33554432}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 33554432}, None),
        MemoryDep('buf350', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf351', c0, {c0: 65536}, None),
        MemoryDep('buf352', c0, {c0: 65536}, None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (33554432, 1)
op354.sizes = ([8, 16, 512, 512], [])
buf347_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op354_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf350', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf351', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf352', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf354', get_index_6, truediv, None)
        return store
op354 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf353', mode=None), StarDep(name='buf354', mode=None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf355.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op355.node.kernel = extern_kernels.bmm


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 4194304}, None)]
op356.unmet_dependencies = [   MemoryDep('buf355', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op356.met_dependencies = []
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf356.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (4194304, 1)
op356.sizes = ([512, 8, 64, 16], [])
buf355_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op356_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf356', get_index_1, load, None)
        return store
op356 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 1048576}, None)]
op357.unmet_dependencies = []
op357.met_dependencies = [MemoryDep('arg200_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf357.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (1048576, 1)
op357.sizes = ([64, 16, 1024], [])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op357_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg200_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf357', get_index_1, load, None)
        return store
op357 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op358: ExternKernelSchedulerNode(ExternKernelOut)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf356', mode=None), StarDep(name='buf357', mode=None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ExternKernelOut
    buf358.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf358.users = [
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=True, is_weak=False),
    ]
]
op358.node.kernel = extern_kernels.bmm


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 4096}, None)]
op359.unmet_dependencies = 
    [   MemoryDep('buf343', c0, {c0: 4194304}, None),
        MemoryDep('buf358', c0, {c0: 4194304}, None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf359.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (4096, 1024)
op359.sizes = ([4096], [1024])
buf358_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op359_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf359', get_index_2, getitem)
        return store_reduction
op359 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 4096}, None)]
op360.unmet_dependencies = 
    [   MemoryDep('buf343', c0, {c0: 4194304}, None),
        MemoryDep('buf358', c0, {c0: 4194304}, None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf360.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (4096, 1024)
op360.sizes = ([4096], [1024])
buf358_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op360_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf360', get_index_2, getitem_1)
        return store_reduction
op360 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 4194304}, None)]
op362.unmet_dependencies = 
    [   MemoryDep('buf343', c0, {c0: 4194304}, None),
        MemoryDep('buf358', c0, {c0: 4194304}, None),
        MemoryDep('buf359', c0, {c0: 4096}, None),
        MemoryDep('buf360', c0, {c0: 4096}, None)]
op362.met_dependencies = 
    [   MemoryDep('arg204_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg205_1', c1, {c0: 4096, c1: 1024}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf362.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False),
    ]
]
op362.group.device = cuda:0
op362.group.iteration = (4194304, 1)
op362.sizes = ([4096, 1024], [])
buf358_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf360_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op362_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf343', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf359', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf360', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg204_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg205_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf362', get_index_6, add_2, None)
        return store
op362 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op363: ExternKernelSchedulerNode(ExternKernelOut)
op363.writes = [StarDep(name='buf363', mode=None)]
op363.unmet_dependencies = [StarDep(name='buf362', mode=None)]
op363.met_dependencies = [StarDep(name='arg208_1', mode=None)]
op363.outputs = [
    buf363: ExternKernelOut
    buf363.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf363.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False)]
]
op363.node.kernel = extern_kernels.mm


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 16777216}, None)]
op364.unmet_dependencies = [MemoryDep('buf363', c0, {c0: 16777216}, None)]
op364.met_dependencies = [MemoryDep('arg209_1', c1, {c0: 4096, c1: 4096}, None)]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (16777216, 1)
op364.sizes = ([4096, 4096], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op364_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg209_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf363', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg209_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf364', get_index_4, mul_2, None)
        return store
op364 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op365: ExternKernelSchedulerNode(ExternKernelOut)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op365.met_dependencies = [StarDep(name='arg210_1', mode=None)]
op365.outputs = [
    buf365: ExternKernelOut
    buf365.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf365.users = [
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False),
    ]
]
op365.node.kernel = extern_kernels.mm


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 4096}, None)]
op366.unmet_dependencies = 
    [   MemoryDep('buf362', c0, {c0: 4194304}, None),
        MemoryDep('buf365', c0, {c0: 4194304}, None)]
op366.met_dependencies = [MemoryDep('arg211_1', c1, {c0: 4096, c1: 1024}, None)]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf366.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (4096, 1024)
op366.sizes = ([4096], [1024])
buf365_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op366_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg211_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf362', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf366', get_index_3, getitem)
        return store_reduction
op366 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 4096}, None)]
op367.unmet_dependencies = 
    [   MemoryDep('buf362', c0, {c0: 4194304}, None),
        MemoryDep('buf365', c0, {c0: 4194304}, None)]
op367.met_dependencies = [MemoryDep('arg211_1', c1, {c0: 4096, c1: 1024}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf367.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (4096, 1024)
op367.sizes = ([4096], [1024])
buf365_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op367_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg211_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf362', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf367', get_index_3, getitem_1)
        return store_reduction
op367 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 4194304}, None)]
op369.unmet_dependencies = 
    [   MemoryDep('buf362', c0, {c0: 4194304}, None),
        MemoryDep('buf365', c0, {c0: 4194304}, None),
        MemoryDep('buf366', c0, {c0: 4096}, None),
        MemoryDep('buf367', c0, {c0: 4096}, None)]
op369.met_dependencies = 
    [   MemoryDep('arg206_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg207_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg211_1', c1, {c0: 4096, c1: 1024}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf369.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op369.group.device = cuda:0
op369.group.iteration = (4194304, 1)
op369.sizes = ([4096, 1024], [])
buf365_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf367_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op369_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg211_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf362', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf366', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf367', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg206_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg207_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf369', get_index_7, add_3, None)
        return store
op369 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op370: ExternKernelSchedulerNode(ExternKernelOut)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf369', mode=None)]
op370.met_dependencies = [StarDep(name='arg212_1', mode=None)]
op370.outputs = [
    buf370: ExternKernelOut
    buf370.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=True, is_weak=False),
    ]
]
op370.node.kernel = extern_kernels.bmm


op371: ExternKernelSchedulerNode(ExternKernelOut)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = [StarDep(name='buf369', mode=None)]
op371.met_dependencies = [StarDep(name='arg213_1', mode=None)]
op371.outputs = [
    buf371: ExternKernelOut
    buf371.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf371.users = [NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op371.node.kernel = extern_kernels.bmm


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 4194304}, None)]
op372.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 4194304}, None)]
op372.met_dependencies = [MemoryDep('arg218_1', c1, {c0: 4096, c1: 1024}, None)]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (4194304, 1)
op372.sizes = ([4096, 1024], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op372_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg218_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf372', get_index_2, add, None)
        return store
op372 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op373: ExternKernelSchedulerNode(ExternKernelOut)
op373.writes = [StarDep(name='buf373', mode=None)]
op373.unmet_dependencies = [StarDep(name='buf371', mode=None), StarDep(name='buf372', mode=None)]
op373.met_dependencies = []
op373.outputs = [
    buf373: ExternKernelOut
    buf373.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
    ]
]
op373.node.kernel = extern_kernels.bmm


op374: ExternKernelSchedulerNode(ExternKernelOut)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op374.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op374.outputs = [
    buf374: ExternKernelOut
    buf374.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op374.node.kernel = extern_kernels.bmm


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 4194304}, None)]
op375.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 4194304}, None)]
op375.met_dependencies = [MemoryDep('arg217_1', c1, {c0: 4096, c1: 1024}, None)]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (4194304, 1)
op375.sizes = ([4096, 1024], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op375_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf375', get_index_2, add, None)
        return store
op375 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op376: ExternKernelSchedulerNode(ExternKernelOut)
op376.writes = [StarDep(name='buf376', mode=None)]
op376.unmet_dependencies = [StarDep(name='buf374', mode=None), StarDep(name='buf375', mode=None)]
op376.met_dependencies = []
op376.outputs = [
    buf376: ExternKernelOut
    buf376.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf376.users = [
        NodeUser(node=SchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
    ]
]
op376.node.kernel = extern_kernels.bmm


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 65536}, None)]
op377.unmet_dependencies = 
    [   MemoryDep('buf373', c0, {c0: 33554432}, None),
        MemoryDep('buf376', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op377.met_dependencies = []
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf377.users = [
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
    ]
]
op377.group.device = cuda:0
op377.group.iteration = (65536, 512)
op377.sizes = ([8, 16, 512], [512])
buf373_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op377_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf376', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf377', get_index_4, reduction)
        return store_reduction
op377 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 65536}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf373', c0, {c0: 33554432}, None),
        MemoryDep('buf376', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf377', c0, {c0: 65536}, None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf378.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (65536, 512)
op378.sizes = ([8, 16, 512], [512])
buf373_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op378_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf376', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf377', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf378', get_index_5, reduction)
        return store_reduction
op378 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op379: ExternKernelSchedulerNode(ExternKernelOut)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf369', mode=None)]
op379.met_dependencies = [StarDep(name='arg214_1', mode=None)]
op379.outputs = [
    buf379: ExternKernelOut
    buf379.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf379.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op379.node.kernel = extern_kernels.bmm


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 33554432}, None)]
op380.unmet_dependencies = 
    [   MemoryDep('buf373', c0, {c0: 33554432}, None),
        MemoryDep('buf376', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf377', c0, {c0: 65536}, None),
        MemoryDep('buf378', c0, {c0: 65536}, None)]
op380.met_dependencies = []
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (33554432, 1)
op380.sizes = ([8, 16, 512, 512], [])
buf373_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op380_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf376', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf377', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf378', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf380', get_index_6, truediv, None)
        return store
op380 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op381: ExternKernelSchedulerNode(ExternKernelOut)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf379', mode=None), StarDep(name='buf380', mode=None)]
op381.met_dependencies = []
op381.outputs = [
    buf381: ExternKernelOut
    buf381.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf381.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op381.node.kernel = extern_kernels.bmm


op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 4194304}, None)]
op382.unmet_dependencies = [   MemoryDep('buf381', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op382.met_dependencies = []
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf382.users = [NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (4194304, 1)
op382.sizes = ([512, 8, 64, 16], [])
buf381_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op382_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf382', get_index_1, load, None)
        return store
op382 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 1048576}, None)]
op383.unmet_dependencies = []
op383.met_dependencies = [MemoryDep('arg215_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf383.users = [NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (1048576, 1)
op383.sizes = ([64, 16, 1024], [])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op383_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg215_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf383', get_index_1, load, None)
        return store
op383 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op384: ExternKernelSchedulerNode(ExternKernelOut)
op384.writes = [StarDep(name='buf384', mode=None)]
op384.unmet_dependencies = [StarDep(name='buf382', mode=None), StarDep(name='buf383', mode=None)]
op384.met_dependencies = []
op384.outputs = [
    buf384: ExternKernelOut
    buf384.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
    ]
]
op384.node.kernel = extern_kernels.bmm


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 4096}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf369', c0, {c0: 4194304}, None),
        MemoryDep('buf384', c0, {c0: 4194304}, None)]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf385.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (4096, 1024)
op385.sizes = ([4096], [1024])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op385_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf369', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf385', get_index_2, getitem)
        return store_reduction
op385 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 4096}, None)]
op386.unmet_dependencies = 
    [   MemoryDep('buf369', c0, {c0: 4194304}, None),
        MemoryDep('buf384', c0, {c0: 4194304}, None)]
op386.met_dependencies = []
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf386.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op386.group.device = cuda:0
op386.group.iteration = (4096, 1024)
op386.sizes = ([4096], [1024])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op386_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf369', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf386', get_index_2, getitem_1)
        return store_reduction
op386 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 4194304}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf369', c0, {c0: 4194304}, None),
        MemoryDep('buf384', c0, {c0: 4194304}, None),
        MemoryDep('buf385', c0, {c0: 4096}, None),
        MemoryDep('buf386', c0, {c0: 4096}, None)]
op388.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg220_1', c1, {c0: 4096, c1: 1024}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf388.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False),
    ]
]
op388.group.device = cuda:0
op388.group.iteration = (4194304, 1)
op388.sizes = ([4096, 1024], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf386_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op388_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf369', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf385', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf386', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg219_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg220_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf388', get_index_6, add_2, None)
        return store
op388 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op389: ExternKernelSchedulerNode(ExternKernelOut)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf388', mode=None)]
op389.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op389.outputs = [
    buf389: ExternKernelOut
    buf389.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf389.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=True, is_weak=False)]
]
op389.node.kernel = extern_kernels.mm


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 16777216}, None)]
op390.unmet_dependencies = [MemoryDep('buf389', c0, {c0: 16777216}, None)]
op390.met_dependencies = [MemoryDep('arg224_1', c1, {c0: 4096, c1: 4096}, None)]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf390.users = [NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (16777216, 1)
op390.sizes = ([4096, 4096], [])
buf389_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op390_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf389', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg224_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf390', get_index_4, mul_2, None)
        return store
op390 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op391: ExternKernelSchedulerNode(ExternKernelOut)
op391.writes = [StarDep(name='buf391', mode=None)]
op391.unmet_dependencies = [StarDep(name='buf390', mode=None)]
op391.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op391.outputs = [
    buf391: ExternKernelOut
    buf391.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False),
    ]
]
op391.node.kernel = extern_kernels.mm


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 4096}, None)]
op392.unmet_dependencies = 
    [   MemoryDep('buf388', c0, {c0: 4194304}, None),
        MemoryDep('buf391', c0, {c0: 4194304}, None)]
op392.met_dependencies = [MemoryDep('arg226_1', c1, {c0: 4096, c1: 1024}, None)]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf392.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (4096, 1024)
op392.sizes = ([4096], [1024])
buf391_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op392_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf388', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf392', get_index_3, getitem)
        return store_reduction
op392 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 4096}, None)]
op393.unmet_dependencies = 
    [   MemoryDep('buf388', c0, {c0: 4194304}, None),
        MemoryDep('buf391', c0, {c0: 4194304}, None)]
op393.met_dependencies = [MemoryDep('arg226_1', c1, {c0: 4096, c1: 1024}, None)]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf393.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (4096, 1024)
op393.sizes = ([4096], [1024])
buf391_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op393_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf388', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf393', get_index_3, getitem_1)
        return store_reduction
op393 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 4194304}, None)]
op395.unmet_dependencies = 
    [   MemoryDep('buf388', c0, {c0: 4194304}, None),
        MemoryDep('buf391', c0, {c0: 4194304}, None),
        MemoryDep('buf392', c0, {c0: 4096}, None),
        MemoryDep('buf393', c0, {c0: 4096}, None)]
op395.met_dependencies = 
    [   MemoryDep('arg221_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg222_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg226_1', c1, {c0: 4096, c1: 1024}, None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf395.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op395.group.device = cuda:0
op395.group.iteration = (4194304, 1)
op395.sizes = ([4096, 1024], [])
buf391_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf393_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op395_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf388', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf392', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf393', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg221_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg222_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf395', get_index_7, add_3, None)
        return store
op395 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op396: ExternKernelSchedulerNode(ExternKernelOut)
op396.writes = [StarDep(name='buf396', mode=None)]
op396.unmet_dependencies = [StarDep(name='buf395', mode=None)]
op396.met_dependencies = [StarDep(name='arg227_1', mode=None)]
op396.outputs = [
    buf396: ExternKernelOut
    buf396.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf396.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op401'), can_inplace=True, is_weak=False),
    ]
]
op396.node.kernel = extern_kernels.bmm


op397: ExternKernelSchedulerNode(ExternKernelOut)
op397.writes = [StarDep(name='buf397', mode=None)]
op397.unmet_dependencies = [StarDep(name='buf395', mode=None)]
op397.met_dependencies = [StarDep(name='arg228_1', mode=None)]
op397.outputs = [
    buf397: ExternKernelOut
    buf397.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op397.node.kernel = extern_kernels.bmm


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 4194304}, None)]
op398.unmet_dependencies = [MemoryDep('buf396', c0, {c0: 4194304}, None)]
op398.met_dependencies = [MemoryDep('arg233_1', c1, {c0: 4096, c1: 1024}, None)]
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (4194304, 1)
op398.sizes = ([4096, 1024], [])
buf396_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op398_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg233_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf398', get_index_2, add, None)
        return store
op398 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op399: ExternKernelSchedulerNode(ExternKernelOut)
op399.writes = [StarDep(name='buf399', mode=None)]
op399.unmet_dependencies = [StarDep(name='buf397', mode=None), StarDep(name='buf398', mode=None)]
op399.met_dependencies = []
op399.outputs = [
    buf399: ExternKernelOut
    buf399.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf399.users = [
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
    ]
]
op399.node.kernel = extern_kernels.bmm


op400: ExternKernelSchedulerNode(ExternKernelOut)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op400.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op400.outputs = [
    buf400: ExternKernelOut
    buf400.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf400.users = [NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op400.node.kernel = extern_kernels.bmm


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 4194304}, None)]
op401.unmet_dependencies = [MemoryDep('buf396', c0, {c0: 4194304}, None)]
op401.met_dependencies = [MemoryDep('arg232_1', c1, {c0: 4096, c1: 1024}, None)]
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf401.users = [NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (4194304, 1)
op401.sizes = ([4096, 1024], [])
buf396_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op401_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf401', get_index_2, add, None)
        return store
op401 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op402: ExternKernelSchedulerNode(ExternKernelOut)
op402.writes = [StarDep(name='buf402', mode=None)]
op402.unmet_dependencies = [StarDep(name='buf400', mode=None), StarDep(name='buf401', mode=None)]
op402.met_dependencies = []
op402.outputs = [
    buf402: ExternKernelOut
    buf402.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf402.users = [
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
    ]
]
op402.node.kernel = extern_kernels.bmm


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 65536}, None)]
op403.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 33554432}, None),
        MemoryDep('buf402', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op403.met_dependencies = []
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf403.users = [
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
    ]
]
op403.group.device = cuda:0
op403.group.iteration = (65536, 512)
op403.sizes = ([8, 16, 512], [512])
buf399_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op403_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf402', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf403', get_index_4, reduction)
        return store_reduction
op403 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 65536}, None)]
op404.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 33554432}, None),
        MemoryDep('buf402', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf403', c0, {c0: 65536}, None)]
op404.met_dependencies = []
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf404.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (65536, 512)
op404.sizes = ([8, 16, 512], [512])
buf399_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op404_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf402', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf403', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf404', get_index_5, reduction)
        return store_reduction
op404 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op405: ExternKernelSchedulerNode(ExternKernelOut)
op405.writes = [StarDep(name='buf405', mode=None)]
op405.unmet_dependencies = [StarDep(name='buf395', mode=None)]
op405.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op405.outputs = [
    buf405: ExternKernelOut
    buf405.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf405.users = [NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op405.node.kernel = extern_kernels.bmm


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 33554432}, None)]
op406.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 33554432}, None),
        MemoryDep('buf402', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf403', c0, {c0: 65536}, None),
        MemoryDep('buf404', c0, {c0: 65536}, None)]
op406.met_dependencies = []
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf406.users = [NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op406.group.device = cuda:0
op406.group.iteration = (33554432, 1)
op406.sizes = ([8, 16, 512, 512], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op406_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf402', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf403', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf404', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf406', get_index_6, truediv, None)
        return store
op406 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op407: ExternKernelSchedulerNode(ExternKernelOut)
op407.writes = [StarDep(name='buf407', mode=None)]
op407.unmet_dependencies = [StarDep(name='buf405', mode=None), StarDep(name='buf406', mode=None)]
op407.met_dependencies = []
op407.outputs = [
    buf407: ExternKernelOut
    buf407.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf407.users = [NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.node.kernel = extern_kernels.bmm


op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 4194304}, None)]
op408.unmet_dependencies = [   MemoryDep('buf407', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op408.met_dependencies = []
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf408.users = [NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op408.group.device = cuda:0
op408.group.iteration = (4194304, 1)
op408.sizes = ([512, 8, 64, 16], [])
buf407_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op408_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf407', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf408', get_index_1, load, None)
        return store
op408 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 1048576}, None)]
op409.unmet_dependencies = []
op409.met_dependencies = [MemoryDep('arg230_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf409.users = [NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (1048576, 1)
op409.sizes = ([64, 16, 1024], [])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op409_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg230_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf409', get_index_1, load, None)
        return store
op409 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op410: ExternKernelSchedulerNode(ExternKernelOut)
op410.writes = [StarDep(name='buf410', mode=None)]
op410.unmet_dependencies = [StarDep(name='buf408', mode=None), StarDep(name='buf409', mode=None)]
op410.met_dependencies = []
op410.outputs = [
    buf410: ExternKernelOut
    buf410.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf410.users = [
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False),
    ]
]
op410.node.kernel = extern_kernels.bmm


op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 4096}, None)]
op411.unmet_dependencies = 
    [   MemoryDep('buf395', c0, {c0: 4194304}, None),
        MemoryDep('buf410', c0, {c0: 4194304}, None)]
op411.met_dependencies = []
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf411.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op411.group.device = cuda:0
op411.group.iteration = (4096, 1024)
op411.sizes = ([4096], [1024])
buf410_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op411_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf395', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf411', get_index_2, getitem)
        return store_reduction
op411 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 4096}, None)]
op412.unmet_dependencies = 
    [   MemoryDep('buf395', c0, {c0: 4194304}, None),
        MemoryDep('buf410', c0, {c0: 4194304}, None)]
op412.met_dependencies = []
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf412.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (4096, 1024)
op412.sizes = ([4096], [1024])
buf410_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op412_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf395', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf412', get_index_2, getitem_1)
        return store_reduction
op412 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 4194304}, None)]
op414.unmet_dependencies = 
    [   MemoryDep('buf395', c0, {c0: 4194304}, None),
        MemoryDep('buf410', c0, {c0: 4194304}, None),
        MemoryDep('buf411', c0, {c0: 4096}, None),
        MemoryDep('buf412', c0, {c0: 4096}, None)]
op414.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg235_1', c1, {c0: 4096, c1: 1024}, None)]
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf414.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=True, is_weak=False),
    ]
]
op414.group.device = cuda:0
op414.group.iteration = (4194304, 1)
op414.sizes = ([4096, 1024], [])
buf410_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf412_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op414_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf395', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf411', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf412', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg234_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg235_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf414', get_index_6, add_2, None)
        return store
op414 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op415: ExternKernelSchedulerNode(ExternKernelOut)
op415.writes = [StarDep(name='buf415', mode=None)]
op415.unmet_dependencies = [StarDep(name='buf414', mode=None)]
op415.met_dependencies = [StarDep(name='arg238_1', mode=None)]
op415.outputs = [
    buf415: ExternKernelOut
    buf415.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf415.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False)]
]
op415.node.kernel = extern_kernels.mm


op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 16777216}, None)]
op416.unmet_dependencies = [MemoryDep('buf415', c0, {c0: 16777216}, None)]
op416.met_dependencies = [MemoryDep('arg239_1', c1, {c0: 4096, c1: 4096}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf416.users = [NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (16777216, 1)
op416.sizes = ([4096, 4096], [])
buf415_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op416_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg239_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf415', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg239_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf416', get_index_4, mul_2, None)
        return store
op416 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op417: ExternKernelSchedulerNode(ExternKernelOut)
op417.writes = [StarDep(name='buf417', mode=None)]
op417.unmet_dependencies = [StarDep(name='buf416', mode=None)]
op417.met_dependencies = [StarDep(name='arg240_1', mode=None)]
op417.outputs = [
    buf417: ExternKernelOut
    buf417.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf417.users = [
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=True, is_weak=False),
    ]
]
op417.node.kernel = extern_kernels.mm


op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 4096}, None)]
op418.unmet_dependencies = 
    [   MemoryDep('buf414', c0, {c0: 4194304}, None),
        MemoryDep('buf417', c0, {c0: 4194304}, None)]
op418.met_dependencies = [MemoryDep('arg241_1', c1, {c0: 4096, c1: 1024}, None)]
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf418.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (4096, 1024)
op418.sizes = ([4096], [1024])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op418_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg241_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf414', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf418', get_index_3, getitem)
        return store_reduction
op418 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 4096}, None)]
op419.unmet_dependencies = 
    [   MemoryDep('buf414', c0, {c0: 4194304}, None),
        MemoryDep('buf417', c0, {c0: 4194304}, None)]
op419.met_dependencies = [MemoryDep('arg241_1', c1, {c0: 4096, c1: 1024}, None)]
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf419.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op419.group.device = cuda:0
op419.group.iteration = (4096, 1024)
op419.sizes = ([4096], [1024])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op419_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg241_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf414', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf419', get_index_3, getitem_1)
        return store_reduction
op419 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 4194304}, None)]
op421.unmet_dependencies = 
    [   MemoryDep('buf414', c0, {c0: 4194304}, None),
        MemoryDep('buf417', c0, {c0: 4194304}, None),
        MemoryDep('buf418', c0, {c0: 4096}, None),
        MemoryDep('buf419', c0, {c0: 4096}, None)]
op421.met_dependencies = 
    [   MemoryDep('arg236_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg237_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg241_1', c1, {c0: 4096, c1: 1024}, None)]
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf421.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op421.group.device = cuda:0
op421.group.iteration = (4194304, 1)
op421.sizes = ([4096, 1024], [])
buf417_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf419_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op421_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg241_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf414', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf418', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf419', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg236_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg237_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf421', get_index_7, add_3, None)
        return store
op421 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op422: ExternKernelSchedulerNode(ExternKernelOut)
op422.writes = [StarDep(name='buf422', mode=None)]
op422.unmet_dependencies = [StarDep(name='buf421', mode=None)]
op422.met_dependencies = [StarDep(name='arg242_1', mode=None)]
op422.outputs = [
    buf422: ExternKernelOut
    buf422.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf422.users = [
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=True, is_weak=False),
    ]
]
op422.node.kernel = extern_kernels.bmm


op423: ExternKernelSchedulerNode(ExternKernelOut)
op423.writes = [StarDep(name='buf423', mode=None)]
op423.unmet_dependencies = [StarDep(name='buf421', mode=None)]
op423.met_dependencies = [StarDep(name='arg243_1', mode=None)]
op423.outputs = [
    buf423: ExternKernelOut
    buf423.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op423.node.kernel = extern_kernels.bmm


op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 4194304}, None)]
op424.unmet_dependencies = [MemoryDep('buf422', c0, {c0: 4194304}, None)]
op424.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 4096, c1: 1024}, None)]
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf424.users = [NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op424.group.device = cuda:0
op424.group.iteration = (4194304, 1)
op424.sizes = ([4096, 1024], [])
buf422_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op424_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf422', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg248_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf424', get_index_2, add, None)
        return store
op424 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op425: ExternKernelSchedulerNode(ExternKernelOut)
op425.writes = [StarDep(name='buf425', mode=None)]
op425.unmet_dependencies = [StarDep(name='buf423', mode=None), StarDep(name='buf424', mode=None)]
op425.met_dependencies = []
op425.outputs = [
    buf425: ExternKernelOut
    buf425.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf425.users = [
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
    ]
]
op425.node.kernel = extern_kernels.bmm


op426: ExternKernelSchedulerNode(ExternKernelOut)
op426.writes = [StarDep(name='buf426', mode=None)]
op426.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op426.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op426.outputs = [
    buf426: ExternKernelOut
    buf426.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op426.node.kernel = extern_kernels.bmm


op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', c0, {c0: 4194304}, None)]
op427.unmet_dependencies = [MemoryDep('buf422', c0, {c0: 4194304}, None)]
op427.met_dependencies = [MemoryDep('arg247_1', c1, {c0: 4096, c1: 1024}, None)]
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf427.users = [NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op427.group.device = cuda:0
op427.group.iteration = (4194304, 1)
op427.sizes = ([4096, 1024], [])
buf422_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op427_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf422', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf427', get_index_2, add, None)
        return store
op427 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op428: ExternKernelSchedulerNode(ExternKernelOut)
op428.writes = [StarDep(name='buf428', mode=None)]
op428.unmet_dependencies = [StarDep(name='buf426', mode=None), StarDep(name='buf427', mode=None)]
op428.met_dependencies = []
op428.outputs = [
    buf428: ExternKernelOut
    buf428.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf428.users = [
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op428.node.kernel = extern_kernels.bmm


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 65536}, None)]
op429.unmet_dependencies = 
    [   MemoryDep('buf425', c0, {c0: 33554432}, None),
        MemoryDep('buf428', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op429.met_dependencies = []
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf429.users = [
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op429.group.device = cuda:0
op429.group.iteration = (65536, 512)
op429.sizes = ([8, 16, 512], [512])
buf425_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op429_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf428', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf429', get_index_4, reduction)
        return store_reduction
op429 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 65536}, None)]
op430.unmet_dependencies = 
    [   MemoryDep('buf425', c0, {c0: 33554432}, None),
        MemoryDep('buf428', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf429', c0, {c0: 65536}, None)]
op430.met_dependencies = []
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf430.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op430.group.device = cuda:0
op430.group.iteration = (65536, 512)
op430.sizes = ([8, 16, 512], [512])
buf425_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op430_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf428', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf429', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf430', get_index_5, reduction)
        return store_reduction
op430 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op431: ExternKernelSchedulerNode(ExternKernelOut)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = [StarDep(name='buf421', mode=None)]
op431.met_dependencies = [StarDep(name='arg244_1', mode=None)]
op431.outputs = [
    buf431: ExternKernelOut
    buf431.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf431.users = [NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op431.node.kernel = extern_kernels.bmm


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 33554432}, None)]
op432.unmet_dependencies = 
    [   MemoryDep('buf425', c0, {c0: 33554432}, None),
        MemoryDep('buf428', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf429', c0, {c0: 65536}, None),
        MemoryDep('buf430', c0, {c0: 65536}, None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (33554432, 1)
op432.sizes = ([8, 16, 512, 512], [])
buf425_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op432_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf428', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf429', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf430', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf432', get_index_6, truediv, None)
        return store
op432 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op433: ExternKernelSchedulerNode(ExternKernelOut)
op433.writes = [StarDep(name='buf433', mode=None)]
op433.unmet_dependencies = [StarDep(name='buf431', mode=None), StarDep(name='buf432', mode=None)]
op433.met_dependencies = []
op433.outputs = [
    buf433: ExternKernelOut
    buf433.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf433.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op433.node.kernel = extern_kernels.bmm


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 4194304}, None)]
op434.unmet_dependencies = [   MemoryDep('buf433', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op434.met_dependencies = []
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf434.users = [NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (4194304, 1)
op434.sizes = ([512, 8, 64, 16], [])
buf433_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op434_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf434', get_index_1, load, None)
        return store
op434 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 1048576}, None)]
op435.unmet_dependencies = []
op435.met_dependencies = [MemoryDep('arg245_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf435.users = [NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (1048576, 1)
op435.sizes = ([64, 16, 1024], [])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op435_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg245_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf435', get_index_1, load, None)
        return store
op435 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op436: ExternKernelSchedulerNode(ExternKernelOut)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf434', mode=None), StarDep(name='buf435', mode=None)]
op436.met_dependencies = []
op436.outputs = [
    buf436: ExternKernelOut
    buf436.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf436.users = [
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=True, is_weak=False),
    ]
]
op436.node.kernel = extern_kernels.bmm


op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 4096}, None)]
op437.unmet_dependencies = 
    [   MemoryDep('buf421', c0, {c0: 4194304}, None),
        MemoryDep('buf436', c0, {c0: 4194304}, None)]
op437.met_dependencies = []
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf437.users = [NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op437.group.device = cuda:0
op437.group.iteration = (4096, 1024)
op437.sizes = ([4096], [1024])
buf436_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op437_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf436', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf421', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf437', get_index_2, getitem)
        return store_reduction
op437 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 4096}, None)]
op438.unmet_dependencies = 
    [   MemoryDep('buf421', c0, {c0: 4194304}, None),
        MemoryDep('buf436', c0, {c0: 4194304}, None)]
op438.met_dependencies = []
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf438.users = [NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (4096, 1024)
op438.sizes = ([4096], [1024])
buf436_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op438_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf436', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf421', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf438', get_index_2, getitem_1)
        return store_reduction
op438 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 4194304}, None)]
op440.unmet_dependencies = 
    [   MemoryDep('buf421', c0, {c0: 4194304}, None),
        MemoryDep('buf436', c0, {c0: 4194304}, None),
        MemoryDep('buf437', c0, {c0: 4096}, None),
        MemoryDep('buf438', c0, {c0: 4096}, None)]
op440.met_dependencies = 
    [   MemoryDep('arg249_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg250_1', c1, {c0: 4096, c1: 1024}, None)]
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf440.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
    ]
]
op440.group.device = cuda:0
op440.group.iteration = (4194304, 1)
op440.sizes = ([4096, 1024], [])
buf436_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf438_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op440_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf436', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf421', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf437', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf438', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg249_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg250_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf440', get_index_6, add_2, None)
        return store
op440 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op441: ExternKernelSchedulerNode(ExternKernelOut)
op441.writes = [StarDep(name='buf441', mode=None)]
op441.unmet_dependencies = [StarDep(name='buf440', mode=None)]
op441.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op441.outputs = [
    buf441: ExternKernelOut
    buf441.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf441.users = [NodeUser(node=SchedulerNode(name='op442'), can_inplace=True, is_weak=False)]
]
op441.node.kernel = extern_kernels.mm


op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 16777216}, None)]
op442.unmet_dependencies = [MemoryDep('buf441', c0, {c0: 16777216}, None)]
op442.met_dependencies = [MemoryDep('arg254_1', c1, {c0: 4096, c1: 4096}, None)]
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf442.users = [NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op442.group.device = cuda:0
op442.group.iteration = (16777216, 1)
op442.sizes = ([4096, 4096], [])
buf441_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf442_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op442_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf441', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg254_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf441', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg254_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf442', get_index_4, mul_2, None)
        return store
op442 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op443: ExternKernelSchedulerNode(ExternKernelOut)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf442', mode=None)]
op443.met_dependencies = [StarDep(name='arg255_1', mode=None)]
op443.outputs = [
    buf443: ExternKernelOut
    buf443.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf443.users = [
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
    ]
]
op443.node.kernel = extern_kernels.mm


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 4096}, None)]
op444.unmet_dependencies = 
    [   MemoryDep('buf440', c0, {c0: 4194304}, None),
        MemoryDep('buf443', c0, {c0: 4194304}, None)]
op444.met_dependencies = [MemoryDep('arg256_1', c1, {c0: 4096, c1: 1024}, None)]
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf444.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (4096, 1024)
op444.sizes = ([4096], [1024])
buf443_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op444_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf440', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf444', get_index_3, getitem)
        return store_reduction
op444 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 4096}, None)]
op445.unmet_dependencies = 
    [   MemoryDep('buf440', c0, {c0: 4194304}, None),
        MemoryDep('buf443', c0, {c0: 4194304}, None)]
op445.met_dependencies = [MemoryDep('arg256_1', c1, {c0: 4096, c1: 1024}, None)]
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf445.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (4096, 1024)
op445.sizes = ([4096], [1024])
buf443_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op445_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf440', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf445', get_index_3, getitem_1)
        return store_reduction
op445 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 4194304}, None)]
op447.unmet_dependencies = 
    [   MemoryDep('buf440', c0, {c0: 4194304}, None),
        MemoryDep('buf443', c0, {c0: 4194304}, None),
        MemoryDep('buf444', c0, {c0: 4096}, None),
        MemoryDep('buf445', c0, {c0: 4096}, None)]
op447.met_dependencies = 
    [   MemoryDep('arg251_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg252_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg256_1', c1, {c0: 4096, c1: 1024}, None)]
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf447.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op457'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op447.group.device = cuda:0
op447.group.iteration = (4194304, 1)
op447.sizes = ([4096, 1024], [])
buf443_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf445_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op447_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg256_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf440', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf444', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf445', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg251_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg252_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf447', get_index_7, add_3, None)
        return store
op447 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op448: ExternKernelSchedulerNode(ExternKernelOut)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op448.met_dependencies = [StarDep(name='arg257_1', mode=None)]
op448.outputs = [
    buf448: ExternKernelOut
    buf448.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf448.users = [
        NodeUser(node=SchedulerNode(name='op450'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False),
    ]
]
op448.node.kernel = extern_kernels.bmm


op449: ExternKernelSchedulerNode(ExternKernelOut)
op449.writes = [StarDep(name='buf449', mode=None)]
op449.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op449.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op449.outputs = [
    buf449: ExternKernelOut
    buf449.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf449.users = [NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op449.node.kernel = extern_kernels.bmm


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 4194304}, None)]
op450.unmet_dependencies = [MemoryDep('buf448', c0, {c0: 4194304}, None)]
op450.met_dependencies = [MemoryDep('arg263_1', c1, {c0: 4096, c1: 1024}, None)]
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (4194304, 1)
op450.sizes = ([4096, 1024], [])
buf448_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op450_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg263_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf450', get_index_2, add, None)
        return store
op450 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op451: ExternKernelSchedulerNode(ExternKernelOut)
op451.writes = [StarDep(name='buf451', mode=None)]
op451.unmet_dependencies = [StarDep(name='buf449', mode=None), StarDep(name='buf450', mode=None)]
op451.met_dependencies = []
op451.outputs = [
    buf451: ExternKernelOut
    buf451.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf451.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=True, is_weak=False),
    ]
]
op451.node.kernel = extern_kernels.bmm


op452: ExternKernelSchedulerNode(ExternKernelOut)
op452.writes = [StarDep(name='buf452', mode=None)]
op452.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op452.met_dependencies = [StarDep(name='arg261_1', mode=None)]
op452.outputs = [
    buf452: ExternKernelOut
    buf452.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf452.users = [NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op452.node.kernel = extern_kernels.bmm


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 4194304}, None)]
op453.unmet_dependencies = [MemoryDep('buf448', c0, {c0: 4194304}, None)]
op453.met_dependencies = [MemoryDep('arg262_1', c1, {c0: 4096, c1: 1024}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf453.users = [NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op453.group.device = cuda:0
op453.group.iteration = (4194304, 1)
op453.sizes = ([4096, 1024], [])
buf448_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op453_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf453', get_index_2, add, None)
        return store
op453 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op454: ExternKernelSchedulerNode(ExternKernelOut)
op454.writes = [StarDep(name='buf454', mode=None)]
op454.unmet_dependencies = [StarDep(name='buf452', mode=None), StarDep(name='buf453', mode=None)]
op454.met_dependencies = []
op454.outputs = [
    buf454: ExternKernelOut
    buf454.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf454.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
    ]
]
op454.node.kernel = extern_kernels.bmm


op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 65536}, None)]
op455.unmet_dependencies = 
    [   MemoryDep('buf451', c0, {c0: 33554432}, None),
        MemoryDep('buf454', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op455.met_dependencies = []
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf455.users = [
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
    ]
]
op455.group.device = cuda:0
op455.group.iteration = (65536, 512)
op455.sizes = ([8, 16, 512], [512])
buf451_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op455_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf454', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf455', get_index_4, reduction)
        return store_reduction
op455 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 65536}, None)]
op456.unmet_dependencies = 
    [   MemoryDep('buf451', c0, {c0: 33554432}, None),
        MemoryDep('buf454', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf455', c0, {c0: 65536}, None)]
op456.met_dependencies = []
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf456.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op456.group.device = cuda:0
op456.group.iteration = (65536, 512)
op456.sizes = ([8, 16, 512], [512])
buf451_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op456_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf454', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf455', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf456', get_index_5, reduction)
        return store_reduction
op456 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op457: ExternKernelSchedulerNode(ExternKernelOut)
op457.writes = [StarDep(name='buf457', mode=None)]
op457.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op457.met_dependencies = [StarDep(name='arg259_1', mode=None)]
op457.outputs = [
    buf457: ExternKernelOut
    buf457.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf457.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op457.node.kernel = extern_kernels.bmm


op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', c0, {c0: 33554432}, None)]
op458.unmet_dependencies = 
    [   MemoryDep('buf451', c0, {c0: 33554432}, None),
        MemoryDep('buf454', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf455', c0, {c0: 65536}, None),
        MemoryDep('buf456', c0, {c0: 65536}, None)]
op458.met_dependencies = []
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf458.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op458.group.device = cuda:0
op458.group.iteration = (33554432, 1)
op458.sizes = ([8, 16, 512, 512], [])
buf451_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf456_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op458_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf451', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf454', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf455', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf456', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf458', get_index_6, truediv, None)
        return store
op458 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op459: ExternKernelSchedulerNode(ExternKernelOut)
op459.writes = [StarDep(name='buf459', mode=None)]
op459.unmet_dependencies = [StarDep(name='buf457', mode=None), StarDep(name='buf458', mode=None)]
op459.met_dependencies = []
op459.outputs = [
    buf459: ExternKernelOut
    buf459.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf459.users = [NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
]
op459.node.kernel = extern_kernels.bmm


op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 4194304}, None)]
op460.unmet_dependencies = [   MemoryDep('buf459', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op460.met_dependencies = []
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf460.users = [NodeUser(node=ExternKernelSchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (4194304, 1)
op460.sizes = ([512, 8, 64, 16], [])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op460_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf460', get_index_1, load, None)
        return store
op460 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op461: SchedulerNode(ComputedBuffer)
op461.writes = [MemoryDep('buf461', c0, {c0: 1048576}, None)]
op461.unmet_dependencies = []
op461.met_dependencies = [MemoryDep('arg260_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op461.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf461.users = [NodeUser(node=ExternKernelSchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
]
op461.group.device = cuda:0
op461.group.iteration = (1048576, 1)
op461.sizes = ([64, 16, 1024], [])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op461_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg260_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf461', get_index_1, load, None)
        return store
op461 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op462: ExternKernelSchedulerNode(ExternKernelOut)
op462.writes = [StarDep(name='buf462', mode=None)]
op462.unmet_dependencies = [StarDep(name='buf460', mode=None), StarDep(name='buf461', mode=None)]
op462.met_dependencies = []
op462.outputs = [
    buf462: ExternKernelOut
    buf462.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf462.users = [
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False),
    ]
]
op462.node.kernel = extern_kernels.bmm


op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 4096}, None)]
op463.unmet_dependencies = 
    [   MemoryDep('buf447', c0, {c0: 4194304}, None),
        MemoryDep('buf462', c0, {c0: 4194304}, None)]
op463.met_dependencies = []
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf463.users = [NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (4096, 1024)
op463.sizes = ([4096], [1024])
buf462_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op463_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf447', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf463', get_index_2, getitem)
        return store_reduction
op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 4096}, None)]
op464.unmet_dependencies = 
    [   MemoryDep('buf447', c0, {c0: 4194304}, None),
        MemoryDep('buf462', c0, {c0: 4194304}, None)]
op464.met_dependencies = []
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf464.users = [NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op464.group.device = cuda:0
op464.group.iteration = (4096, 1024)
op464.sizes = ([4096], [1024])
buf462_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf464_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op464_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf447', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf464', get_index_2, getitem_1)
        return store_reduction
op464 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 4194304}, None)]
op466.unmet_dependencies = 
    [   MemoryDep('buf447', c0, {c0: 4194304}, None),
        MemoryDep('buf462', c0, {c0: 4194304}, None),
        MemoryDep('buf463', c0, {c0: 4096}, None),
        MemoryDep('buf464', c0, {c0: 4096}, None)]
op466.met_dependencies = 
    [   MemoryDep('arg264_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg265_1', c1, {c0: 4096, c1: 1024}, None)]
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf466.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=True, is_weak=False),
    ]
]
op466.group.device = cuda:0
op466.group.iteration = (4194304, 1)
op466.sizes = ([4096, 1024], [])
buf462_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf464_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op466_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf447', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf463', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf464', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg264_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg265_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf466', get_index_6, add_2, None)
        return store
op466 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op467: ExternKernelSchedulerNode(ExternKernelOut)
op467.writes = [StarDep(name='buf467', mode=None)]
op467.unmet_dependencies = [StarDep(name='buf466', mode=None)]
op467.met_dependencies = [StarDep(name='arg268_1', mode=None)]
op467.outputs = [
    buf467: ExternKernelOut
    buf467.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf467.users = [NodeUser(node=SchedulerNode(name='op468'), can_inplace=True, is_weak=False)]
]
op467.node.kernel = extern_kernels.mm


op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', c0, {c0: 16777216}, None)]
op468.unmet_dependencies = [MemoryDep('buf467', c0, {c0: 16777216}, None)]
op468.met_dependencies = [MemoryDep('arg269_1', c1, {c0: 4096, c1: 4096}, None)]
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf468.users = [NodeUser(node=ExternKernelSchedulerNode(name='op469'), can_inplace=False, is_weak=False)]
]
op468.group.device = cuda:0
op468.group.iteration = (16777216, 1)
op468.sizes = ([4096, 4096], [])
buf467_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf468_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op468_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg269_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf467', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg269_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf468', get_index_4, mul_2, None)
        return store
op468 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op469: ExternKernelSchedulerNode(ExternKernelOut)
op469.writes = [StarDep(name='buf469', mode=None)]
op469.unmet_dependencies = [StarDep(name='buf468', mode=None)]
op469.met_dependencies = [StarDep(name='arg270_1', mode=None)]
op469.outputs = [
    buf469: ExternKernelOut
    buf469.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf469.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=True, is_weak=False),
    ]
]
op469.node.kernel = extern_kernels.mm


op470: SchedulerNode(ComputedBuffer)
op470.writes = [MemoryDep('buf470', c0, {c0: 4096}, None)]
op470.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 4194304}, None),
        MemoryDep('buf469', c0, {c0: 4194304}, None)]
op470.met_dependencies = [MemoryDep('arg271_1', c1, {c0: 4096, c1: 1024}, None)]
op470.outputs = [
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf470.users = [NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op470.group.device = cuda:0
op470.group.iteration = (4096, 1024)
op470.sizes = ([4096], [1024])
buf469_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op470_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf469', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg271_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf466', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf470', get_index_3, getitem)
        return store_reduction
op470 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 4096}, None)]
op471.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 4194304}, None),
        MemoryDep('buf469', c0, {c0: 4194304}, None)]
op471.met_dependencies = [MemoryDep('arg271_1', c1, {c0: 4096, c1: 1024}, None)]
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf471.users = [NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op471.group.device = cuda:0
op471.group.iteration = (4096, 1024)
op471.sizes = ([4096], [1024])
buf469_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op471_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf469', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg271_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf466', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf471', get_index_3, getitem_1)
        return store_reduction
op471 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', c0, {c0: 4194304}, None)]
op473.unmet_dependencies = 
    [   MemoryDep('buf466', c0, {c0: 4194304}, None),
        MemoryDep('buf469', c0, {c0: 4194304}, None),
        MemoryDep('buf470', c0, {c0: 4096}, None),
        MemoryDep('buf471', c0, {c0: 4096}, None)]
op473.met_dependencies = 
    [   MemoryDep('arg266_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg267_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg271_1', c1, {c0: 4096, c1: 1024}, None)]
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf473.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op473.group.device = cuda:0
op473.group.iteration = (4194304, 1)
op473.sizes = ([4096, 1024], [])
buf469_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf471_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op473_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf469', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg271_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf466', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf470', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf471', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg266_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg267_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf473', get_index_7, add_3, None)
        return store
op473 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op474: ExternKernelSchedulerNode(ExternKernelOut)
op474.writes = [StarDep(name='buf474', mode=None)]
op474.unmet_dependencies = [StarDep(name='buf473', mode=None)]
op474.met_dependencies = [StarDep(name='arg272_1', mode=None)]
op474.outputs = [
    buf474: ExternKernelOut
    buf474.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf474.users = [
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
    ]
]
op474.node.kernel = extern_kernels.bmm


op475: ExternKernelSchedulerNode(ExternKernelOut)
op475.writes = [StarDep(name='buf475', mode=None)]
op475.unmet_dependencies = [StarDep(name='buf473', mode=None)]
op475.met_dependencies = [StarDep(name='arg273_1', mode=None)]
op475.outputs = [
    buf475: ExternKernelOut
    buf475.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf475.users = [NodeUser(node=ExternKernelSchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op475.node.kernel = extern_kernels.bmm


op476: SchedulerNode(ComputedBuffer)
op476.writes = [MemoryDep('buf476', c0, {c0: 4194304}, None)]
op476.unmet_dependencies = [MemoryDep('buf474', c0, {c0: 4194304}, None)]
op476.met_dependencies = [MemoryDep('arg278_1', c1, {c0: 4096, c1: 1024}, None)]
op476.outputs = [
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf476.users = [NodeUser(node=ExternKernelSchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op476.group.device = cuda:0
op476.group.iteration = (4194304, 1)
op476.sizes = ([4096, 1024], [])
buf474_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op476_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf474', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg278_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf476', get_index_2, add, None)
        return store
op476 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op477: ExternKernelSchedulerNode(ExternKernelOut)
op477.writes = [StarDep(name='buf477', mode=None)]
op477.unmet_dependencies = [StarDep(name='buf475', mode=None), StarDep(name='buf476', mode=None)]
op477.met_dependencies = []
op477.outputs = [
    buf477: ExternKernelOut
    buf477.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf477.users = [
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False),
    ]
]
op477.node.kernel = extern_kernels.bmm


op478: ExternKernelSchedulerNode(ExternKernelOut)
op478.writes = [StarDep(name='buf478', mode=None)]
op478.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op478.met_dependencies = [StarDep(name='arg276_1', mode=None)]
op478.outputs = [
    buf478: ExternKernelOut
    buf478.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf478.users = [NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op478.node.kernel = extern_kernels.bmm


op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', c0, {c0: 4194304}, None)]
op479.unmet_dependencies = [MemoryDep('buf474', c0, {c0: 4194304}, None)]
op479.met_dependencies = [MemoryDep('arg277_1', c1, {c0: 4096, c1: 1024}, None)]
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf479.users = [NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op479.group.device = cuda:0
op479.group.iteration = (4194304, 1)
op479.sizes = ([4096, 1024], [])
buf474_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf479_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op479_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf474', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg277_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf479', get_index_2, add, None)
        return store
op479 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op480: ExternKernelSchedulerNode(ExternKernelOut)
op480.writes = [StarDep(name='buf480', mode=None)]
op480.unmet_dependencies = [StarDep(name='buf478', mode=None), StarDep(name='buf479', mode=None)]
op480.met_dependencies = []
op480.outputs = [
    buf480: ExternKernelOut
    buf480.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf480.users = [
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
    ]
]
op480.node.kernel = extern_kernels.bmm


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 65536}, None)]
op481.unmet_dependencies = 
    [   MemoryDep('buf477', c0, {c0: 33554432}, None),
        MemoryDep('buf480', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op481.met_dependencies = []
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf481.users = [
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
    ]
]
op481.group.device = cuda:0
op481.group.iteration = (65536, 512)
op481.sizes = ([8, 16, 512], [512])
buf477_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op481_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf477', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf480', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf481', get_index_4, reduction)
        return store_reduction
op481 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', c0, {c0: 65536}, None)]
op482.unmet_dependencies = 
    [   MemoryDep('buf477', c0, {c0: 33554432}, None),
        MemoryDep('buf480', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf481', c0, {c0: 65536}, None)]
op482.met_dependencies = []
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf482.users = [NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False)]
]
op482.group.device = cuda:0
op482.group.iteration = (65536, 512)
op482.sizes = ([8, 16, 512], [512])
buf477_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op482_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf477', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf480', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf481', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf482', get_index_5, reduction)
        return store_reduction
op482 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op483: ExternKernelSchedulerNode(ExternKernelOut)
op483.writes = [StarDep(name='buf483', mode=None)]
op483.unmet_dependencies = [StarDep(name='buf473', mode=None)]
op483.met_dependencies = [StarDep(name='arg274_1', mode=None)]
op483.outputs = [
    buf483: ExternKernelOut
    buf483.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf483.users = [NodeUser(node=ExternKernelSchedulerNode(name='op485'), can_inplace=False, is_weak=False)]
]
op483.node.kernel = extern_kernels.bmm


op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 33554432}, None)]
op484.unmet_dependencies = 
    [   MemoryDep('buf477', c0, {c0: 33554432}, None),
        MemoryDep('buf480', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf481', c0, {c0: 65536}, None),
        MemoryDep('buf482', c0, {c0: 65536}, None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf484.users = [NodeUser(node=ExternKernelSchedulerNode(name='op485'), can_inplace=False, is_weak=False)]
]
op484.group.device = cuda:0
op484.group.iteration = (33554432, 1)
op484.sizes = ([8, 16, 512, 512], [])
buf477_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op484_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf477', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf480', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf481', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf482', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf484', get_index_6, truediv, None)
        return store
op484 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op485: ExternKernelSchedulerNode(ExternKernelOut)
op485.writes = [StarDep(name='buf485', mode=None)]
op485.unmet_dependencies = [StarDep(name='buf483', mode=None), StarDep(name='buf484', mode=None)]
op485.met_dependencies = []
op485.outputs = [
    buf485: ExternKernelOut
    buf485.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf485.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op485.node.kernel = extern_kernels.bmm


op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 4194304}, None)]
op486.unmet_dependencies = [   MemoryDep('buf485', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op486.met_dependencies = []
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf486.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (4194304, 1)
op486.sizes = ([512, 8, 64, 16], [])
buf485_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf486_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op486_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf486', get_index_1, load, None)
        return store
op486 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 1048576}, None)]
op487.unmet_dependencies = []
op487.met_dependencies = [MemoryDep('arg275_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf487.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op487.group.device = cuda:0
op487.group.iteration = (1048576, 1)
op487.sizes = ([64, 16, 1024], [])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op487_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg275_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf487', get_index_1, load, None)
        return store
op487 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op488: ExternKernelSchedulerNode(ExternKernelOut)
op488.writes = [StarDep(name='buf488', mode=None)]
op488.unmet_dependencies = [StarDep(name='buf486', mode=None), StarDep(name='buf487', mode=None)]
op488.met_dependencies = []
op488.outputs = [
    buf488: ExternKernelOut
    buf488.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf488.users = [
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=True, is_weak=False),
    ]
]
op488.node.kernel = extern_kernels.bmm


op489: SchedulerNode(ComputedBuffer)
op489.writes = [MemoryDep('buf489', c0, {c0: 4096}, None)]
op489.unmet_dependencies = 
    [   MemoryDep('buf473', c0, {c0: 4194304}, None),
        MemoryDep('buf488', c0, {c0: 4194304}, None)]
op489.met_dependencies = []
op489.outputs = [
    buf489: ComputedBuffer
    buf489.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf489.users = [NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False)]
]
op489.group.device = cuda:0
op489.group.iteration = (4096, 1024)
op489.sizes = ([4096], [1024])
buf488_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op489_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf473', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf489', get_index_2, getitem)
        return store_reduction
op489 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 4096}, None)]
op490.unmet_dependencies = 
    [   MemoryDep('buf473', c0, {c0: 4194304}, None),
        MemoryDep('buf488', c0, {c0: 4194304}, None)]
op490.met_dependencies = []
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf490.users = [NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False)]
]
op490.group.device = cuda:0
op490.group.iteration = (4096, 1024)
op490.sizes = ([4096], [1024])
buf488_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op490_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf473', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf490', get_index_2, getitem_1)
        return store_reduction
op490 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', c0, {c0: 4194304}, None)]
op492.unmet_dependencies = 
    [   MemoryDep('buf473', c0, {c0: 4194304}, None),
        MemoryDep('buf488', c0, {c0: 4194304}, None),
        MemoryDep('buf489', c0, {c0: 4096}, None),
        MemoryDep('buf490', c0, {c0: 4096}, None)]
op492.met_dependencies = 
    [   MemoryDep('arg279_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg280_1', c1, {c0: 4096, c1: 1024}, None)]
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf492.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False),
    ]
]
op492.group.device = cuda:0
op492.group.iteration = (4194304, 1)
op492.sizes = ([4096, 1024], [])
buf488_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf490_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op492_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf473', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf489', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf490', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg279_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg280_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf492', get_index_6, add_2, None)
        return store
op492 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op493: ExternKernelSchedulerNode(ExternKernelOut)
op493.writes = [StarDep(name='buf493', mode=None)]
op493.unmet_dependencies = [StarDep(name='buf492', mode=None)]
op493.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op493.outputs = [
    buf493: ExternKernelOut
    buf493.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf493.users = [NodeUser(node=SchedulerNode(name='op494'), can_inplace=True, is_weak=False)]
]
op493.node.kernel = extern_kernels.mm


op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', c0, {c0: 16777216}, None)]
op494.unmet_dependencies = [MemoryDep('buf493', c0, {c0: 16777216}, None)]
op494.met_dependencies = [MemoryDep('arg284_1', c1, {c0: 4096, c1: 4096}, None)]
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf494.users = [NodeUser(node=ExternKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op494.group.device = cuda:0
op494.group.iteration = (16777216, 1)
op494.sizes = ([4096, 4096], [])
buf493_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op494_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf493', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg284_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf493', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg284_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf494', get_index_4, mul_2, None)
        return store
op494 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op495: ExternKernelSchedulerNode(ExternKernelOut)
op495.writes = [StarDep(name='buf495', mode=None)]
op495.unmet_dependencies = [StarDep(name='buf494', mode=None)]
op495.met_dependencies = [StarDep(name='arg285_1', mode=None)]
op495.outputs = [
    buf495: ExternKernelOut
    buf495.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf495.users = [
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=True, is_weak=False),
    ]
]
op495.node.kernel = extern_kernels.mm


op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 4096}, None)]
op496.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 4194304}, None),
        MemoryDep('buf495', c0, {c0: 4194304}, None)]
op496.met_dependencies = [MemoryDep('arg286_1', c1, {c0: 4096, c1: 1024}, None)]
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf496.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (4096, 1024)
op496.sizes = ([4096], [1024])
buf495_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op496_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf492', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf496', get_index_3, getitem)
        return store_reduction
op496 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op497: SchedulerNode(ComputedBuffer)
op497.writes = [MemoryDep('buf497', c0, {c0: 4096}, None)]
op497.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 4194304}, None),
        MemoryDep('buf495', c0, {c0: 4194304}, None)]
op497.met_dependencies = [MemoryDep('arg286_1', c1, {c0: 4096, c1: 1024}, None)]
op497.outputs = [
    buf497: ComputedBuffer
    buf497.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf497.users = [NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
]
op497.group.device = cuda:0
op497.group.iteration = (4096, 1024)
op497.sizes = ([4096], [1024])
buf495_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf497_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op497_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf492', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf497', get_index_3, getitem_1)
        return store_reduction
op497 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op499: SchedulerNode(ComputedBuffer)
op499.writes = [MemoryDep('buf499', c0, {c0: 4194304}, None)]
op499.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 4194304}, None),
        MemoryDep('buf495', c0, {c0: 4194304}, None),
        MemoryDep('buf496', c0, {c0: 4096}, None),
        MemoryDep('buf497', c0, {c0: 4096}, None)]
op499.met_dependencies = 
    [   MemoryDep('arg281_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg282_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg286_1', c1, {c0: 4096, c1: 1024}, None)]
op499.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf499.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op499.group.device = cuda:0
op499.group.iteration = (4194304, 1)
op499.sizes = ([4096, 1024], [])
buf495_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf497_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op499_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf492', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf496', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf497', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg281_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg282_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf499', get_index_7, add_3, None)
        return store
op499 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op500: ExternKernelSchedulerNode(ExternKernelOut)
op500.writes = [StarDep(name='buf500', mode=None)]
op500.unmet_dependencies = [StarDep(name='buf499', mode=None)]
op500.met_dependencies = [StarDep(name='arg287_1', mode=None)]
op500.outputs = [
    buf500: ExternKernelOut
    buf500.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf500.users = [
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op505'), can_inplace=True, is_weak=False),
    ]
]
op500.node.kernel = extern_kernels.bmm


op501: ExternKernelSchedulerNode(ExternKernelOut)
op501.writes = [StarDep(name='buf501', mode=None)]
op501.unmet_dependencies = [StarDep(name='buf499', mode=None)]
op501.met_dependencies = [StarDep(name='arg288_1', mode=None)]
op501.outputs = [
    buf501: ExternKernelOut
    buf501.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf501.users = [NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op501.node.kernel = extern_kernels.bmm


op502: SchedulerNode(ComputedBuffer)
op502.writes = [MemoryDep('buf502', c0, {c0: 4194304}, None)]
op502.unmet_dependencies = [MemoryDep('buf500', c0, {c0: 4194304}, None)]
op502.met_dependencies = [MemoryDep('arg293_1', c1, {c0: 4096, c1: 1024}, None)]
op502.outputs = [
    buf502: ComputedBuffer
    buf502.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf502.users = [NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op502.group.device = cuda:0
op502.group.iteration = (4194304, 1)
op502.sizes = ([4096, 1024], [])
buf500_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf502_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op502_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf500', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg293_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf502', get_index_2, add, None)
        return store
op502 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op503: ExternKernelSchedulerNode(ExternKernelOut)
op503.writes = [StarDep(name='buf503', mode=None)]
op503.unmet_dependencies = [StarDep(name='buf501', mode=None), StarDep(name='buf502', mode=None)]
op503.met_dependencies = []
op503.outputs = [
    buf503: ExternKernelOut
    buf503.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf503.users = [
        NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=True, is_weak=False),
    ]
]
op503.node.kernel = extern_kernels.bmm


op504: ExternKernelSchedulerNode(ExternKernelOut)
op504.writes = [StarDep(name='buf504', mode=None)]
op504.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op504.met_dependencies = [StarDep(name='arg291_1', mode=None)]
op504.outputs = [
    buf504: ExternKernelOut
    buf504.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf504.users = [NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op504.node.kernel = extern_kernels.bmm


op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', c0, {c0: 4194304}, None)]
op505.unmet_dependencies = [MemoryDep('buf500', c0, {c0: 4194304}, None)]
op505.met_dependencies = [MemoryDep('arg292_1', c1, {c0: 4096, c1: 1024}, None)]
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf505.users = [NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op505.group.device = cuda:0
op505.group.iteration = (4194304, 1)
op505.sizes = ([4096, 1024], [])
buf500_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf505_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op505_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf500', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg292_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf505', get_index_2, add, None)
        return store
op505 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op506: ExternKernelSchedulerNode(ExternKernelOut)
op506.writes = [StarDep(name='buf506', mode=None)]
op506.unmet_dependencies = [StarDep(name='buf504', mode=None), StarDep(name='buf505', mode=None)]
op506.met_dependencies = []
op506.outputs = [
    buf506: ExternKernelOut
    buf506.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf506.users = [
        NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op506.node.kernel = extern_kernels.bmm


op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 65536}, None)]
op507.unmet_dependencies = 
    [   MemoryDep('buf503', c0, {c0: 33554432}, None),
        MemoryDep('buf506', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op507.met_dependencies = []
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf507.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
    ]
]
op507.group.device = cuda:0
op507.group.iteration = (65536, 512)
op507.sizes = ([8, 16, 512], [512])
buf503_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf506_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op507_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf506', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf507', get_index_4, reduction)
        return store_reduction
op507 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op508: SchedulerNode(ComputedBuffer)
op508.writes = [MemoryDep('buf508', c0, {c0: 65536}, None)]
op508.unmet_dependencies = 
    [   MemoryDep('buf503', c0, {c0: 33554432}, None),
        MemoryDep('buf506', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf507', c0, {c0: 65536}, None)]
op508.met_dependencies = []
op508.outputs = [
    buf508: ComputedBuffer
    buf508.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf508.users = [NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False)]
]
op508.group.device = cuda:0
op508.group.iteration = (65536, 512)
op508.sizes = ([8, 16, 512], [512])
buf503_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf506_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf508_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op508_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf506', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf507', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf508', get_index_5, reduction)
        return store_reduction
op508 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op509: ExternKernelSchedulerNode(ExternKernelOut)
op509.writes = [StarDep(name='buf509', mode=None)]
op509.unmet_dependencies = [StarDep(name='buf499', mode=None)]
op509.met_dependencies = [StarDep(name='arg289_1', mode=None)]
op509.outputs = [
    buf509: ExternKernelOut
    buf509.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf509.users = [NodeUser(node=ExternKernelSchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op509.node.kernel = extern_kernels.bmm


op510: SchedulerNode(ComputedBuffer)
op510.writes = [MemoryDep('buf510', c0, {c0: 33554432}, None)]
op510.unmet_dependencies = 
    [   MemoryDep('buf503', c0, {c0: 33554432}, None),
        MemoryDep('buf506', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf507', c0, {c0: 65536}, None),
        MemoryDep('buf508', c0, {c0: 65536}, None)]
op510.met_dependencies = []
op510.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf510.users = [NodeUser(node=ExternKernelSchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op510.group.device = cuda:0
op510.group.iteration = (33554432, 1)
op510.sizes = ([8, 16, 512, 512], [])
buf503_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf506_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf508_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op510_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf506', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf507', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf508', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf510', get_index_6, truediv, None)
        return store
op510 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op511: ExternKernelSchedulerNode(ExternKernelOut)
op511.writes = [StarDep(name='buf511', mode=None)]
op511.unmet_dependencies = [StarDep(name='buf509', mode=None), StarDep(name='buf510', mode=None)]
op511.met_dependencies = []
op511.outputs = [
    buf511: ExternKernelOut
    buf511.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf511.users = [NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op511.node.kernel = extern_kernels.bmm


op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 4194304}, None)]
op512.unmet_dependencies = [   MemoryDep('buf511', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op512.met_dependencies = []
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf512.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op512.group.device = cuda:0
op512.group.iteration = (4194304, 1)
op512.sizes = ([512, 8, 64, 16], [])
buf511_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op512_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf512', get_index_1, load, None)
        return store
op512 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 1048576}, None)]
op513.unmet_dependencies = []
op513.met_dependencies = [MemoryDep('arg290_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf513.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op513.group.device = cuda:0
op513.group.iteration = (1048576, 1)
op513.sizes = ([64, 16, 1024], [])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op513_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg290_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf513', get_index_1, load, None)
        return store
op513 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op514: ExternKernelSchedulerNode(ExternKernelOut)
op514.writes = [StarDep(name='buf514', mode=None)]
op514.unmet_dependencies = [StarDep(name='buf512', mode=None), StarDep(name='buf513', mode=None)]
op514.met_dependencies = []
op514.outputs = [
    buf514: ExternKernelOut
    buf514.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf514.users = [
        NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=True, is_weak=False),
    ]
]
op514.node.kernel = extern_kernels.bmm


op515: SchedulerNode(ComputedBuffer)
op515.writes = [MemoryDep('buf515', c0, {c0: 4096}, None)]
op515.unmet_dependencies = 
    [   MemoryDep('buf499', c0, {c0: 4194304}, None),
        MemoryDep('buf514', c0, {c0: 4194304}, None)]
op515.met_dependencies = []
op515.outputs = [
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf515.users = [NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op515.group.device = cuda:0
op515.group.iteration = (4096, 1024)
op515.sizes = ([4096], [1024])
buf514_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf515_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op515_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf514', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf515', get_index_2, getitem)
        return store_reduction
op515 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op516: SchedulerNode(ComputedBuffer)
op516.writes = [MemoryDep('buf516', c0, {c0: 4096}, None)]
op516.unmet_dependencies = 
    [   MemoryDep('buf499', c0, {c0: 4194304}, None),
        MemoryDep('buf514', c0, {c0: 4194304}, None)]
op516.met_dependencies = []
op516.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf516.users = [NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op516.group.device = cuda:0
op516.group.iteration = (4096, 1024)
op516.sizes = ([4096], [1024])
buf514_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op516_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf514', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf516', get_index_2, getitem_1)
        return store_reduction
op516 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 4194304}, None)]
op518.unmet_dependencies = 
    [   MemoryDep('buf499', c0, {c0: 4194304}, None),
        MemoryDep('buf514', c0, {c0: 4194304}, None),
        MemoryDep('buf515', c0, {c0: 4096}, None),
        MemoryDep('buf516', c0, {c0: 4096}, None)]
op518.met_dependencies = 
    [   MemoryDep('arg294_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg295_1', c1, {c0: 4096, c1: 1024}, None)]
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf518.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=True, is_weak=False),
    ]
]
op518.group.device = cuda:0
op518.group.iteration = (4194304, 1)
op518.sizes = ([4096, 1024], [])
buf514_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf515_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf516_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op518_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf514', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf515', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf516', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg294_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg295_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf518', get_index_6, add_2, None)
        return store
op518 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op519: ExternKernelSchedulerNode(ExternKernelOut)
op519.writes = [StarDep(name='buf519', mode=None)]
op519.unmet_dependencies = [StarDep(name='buf518', mode=None)]
op519.met_dependencies = [StarDep(name='arg298_1', mode=None)]
op519.outputs = [
    buf519: ExternKernelOut
    buf519.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf519.users = [NodeUser(node=SchedulerNode(name='op520'), can_inplace=True, is_weak=False)]
]
op519.node.kernel = extern_kernels.mm


op520: SchedulerNode(ComputedBuffer)
op520.writes = [MemoryDep('buf520', c0, {c0: 16777216}, None)]
op520.unmet_dependencies = [MemoryDep('buf519', c0, {c0: 16777216}, None)]
op520.met_dependencies = [MemoryDep('arg299_1', c1, {c0: 4096, c1: 4096}, None)]
op520.outputs = [
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf520.users = [NodeUser(node=ExternKernelSchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
]
op520.group.device = cuda:0
op520.group.iteration = (16777216, 1)
op520.sizes = ([4096, 4096], [])
buf519_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf520_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op520_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf519', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg299_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf519', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg299_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf520', get_index_4, mul_2, None)
        return store
op520 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op521: ExternKernelSchedulerNode(ExternKernelOut)
op521.writes = [StarDep(name='buf521', mode=None)]
op521.unmet_dependencies = [StarDep(name='buf520', mode=None)]
op521.met_dependencies = [StarDep(name='arg300_1', mode=None)]
op521.outputs = [
    buf521: ExternKernelOut
    buf521.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf521.users = [
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=True, is_weak=False),
    ]
]
op521.node.kernel = extern_kernels.mm


op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', c0, {c0: 4096}, None)]
op522.unmet_dependencies = 
    [   MemoryDep('buf518', c0, {c0: 4194304}, None),
        MemoryDep('buf521', c0, {c0: 4194304}, None)]
op522.met_dependencies = [MemoryDep('arg301_1', c1, {c0: 4096, c1: 1024}, None)]
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf522.users = [NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False)]
]
op522.group.device = cuda:0
op522.group.iteration = (4096, 1024)
op522.sizes = ([4096], [1024])
buf521_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf522_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op522_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf521', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg301_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf518', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf522', get_index_3, getitem)
        return store_reduction
op522 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op523: SchedulerNode(ComputedBuffer)
op523.writes = [MemoryDep('buf523', c0, {c0: 4096}, None)]
op523.unmet_dependencies = 
    [   MemoryDep('buf518', c0, {c0: 4194304}, None),
        MemoryDep('buf521', c0, {c0: 4194304}, None)]
op523.met_dependencies = [MemoryDep('arg301_1', c1, {c0: 4096, c1: 1024}, None)]
op523.outputs = [
    buf523: ComputedBuffer
    buf523.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf523.users = [NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False)]
]
op523.group.device = cuda:0
op523.group.iteration = (4096, 1024)
op523.sizes = ([4096], [1024])
buf521_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op523_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf521', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg301_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf518', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf523', get_index_3, getitem_1)
        return store_reduction
op523 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 4194304}, None)]
op525.unmet_dependencies = 
    [   MemoryDep('buf518', c0, {c0: 4194304}, None),
        MemoryDep('buf521', c0, {c0: 4194304}, None),
        MemoryDep('buf522', c0, {c0: 4096}, None),
        MemoryDep('buf523', c0, {c0: 4096}, None)]
op525.met_dependencies = 
    [   MemoryDep('arg296_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg297_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg301_1', c1, {c0: 4096, c1: 1024}, None)]
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf525.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op527'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op535'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op525.group.device = cuda:0
op525.group.iteration = (4194304, 1)
op525.sizes = ([4096, 1024], [])
buf521_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf522_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf523_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op525_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf521', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg301_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf518', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf522', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf523', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg296_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg297_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf525', get_index_7, add_3, None)
        return store
op525 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op526: ExternKernelSchedulerNode(ExternKernelOut)
op526.writes = [StarDep(name='buf526', mode=None)]
op526.unmet_dependencies = [StarDep(name='buf525', mode=None)]
op526.met_dependencies = [StarDep(name='arg302_1', mode=None)]
op526.outputs = [
    buf526: ExternKernelOut
    buf526.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf526.users = [
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False),
    ]
]
op526.node.kernel = extern_kernels.bmm


op527: ExternKernelSchedulerNode(ExternKernelOut)
op527.writes = [StarDep(name='buf527', mode=None)]
op527.unmet_dependencies = [StarDep(name='buf525', mode=None)]
op527.met_dependencies = [StarDep(name='arg303_1', mode=None)]
op527.outputs = [
    buf527: ExternKernelOut
    buf527.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf527.users = [NodeUser(node=ExternKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False)]
]
op527.node.kernel = extern_kernels.bmm


op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', c0, {c0: 4194304}, None)]
op528.unmet_dependencies = [MemoryDep('buf526', c0, {c0: 4194304}, None)]
op528.met_dependencies = [MemoryDep('arg308_1', c1, {c0: 4096, c1: 1024}, None)]
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf528.users = [NodeUser(node=ExternKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False)]
]
op528.group.device = cuda:0
op528.group.iteration = (4194304, 1)
op528.sizes = ([4096, 1024], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf528_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op528_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf528', get_index_2, add, None)
        return store
op528 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op529: ExternKernelSchedulerNode(ExternKernelOut)
op529.writes = [StarDep(name='buf529', mode=None)]
op529.unmet_dependencies = [StarDep(name='buf527', mode=None), StarDep(name='buf528', mode=None)]
op529.met_dependencies = []
op529.outputs = [
    buf529: ExternKernelOut
    buf529.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf529.users = [
        NodeUser(node=SchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=True, is_weak=False),
    ]
]
op529.node.kernel = extern_kernels.bmm


op530: ExternKernelSchedulerNode(ExternKernelOut)
op530.writes = [StarDep(name='buf530', mode=None)]
op530.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op530.met_dependencies = [StarDep(name='arg306_1', mode=None)]
op530.outputs = [
    buf530: ExternKernelOut
    buf530.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf530.users = [NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False)]
]
op530.node.kernel = extern_kernels.bmm


op531: SchedulerNode(ComputedBuffer)
op531.writes = [MemoryDep('buf531', c0, {c0: 4194304}, None)]
op531.unmet_dependencies = [MemoryDep('buf526', c0, {c0: 4194304}, None)]
op531.met_dependencies = [MemoryDep('arg307_1', c1, {c0: 4096, c1: 1024}, None)]
op531.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf531.users = [NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False)]
]
op531.group.device = cuda:0
op531.group.iteration = (4194304, 1)
op531.sizes = ([4096, 1024], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op531_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg307_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf531', get_index_2, add, None)
        return store
op531 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op532: ExternKernelSchedulerNode(ExternKernelOut)
op532.writes = [StarDep(name='buf532', mode=None)]
op532.unmet_dependencies = [StarDep(name='buf530', mode=None), StarDep(name='buf531', mode=None)]
op532.met_dependencies = []
op532.outputs = [
    buf532: ExternKernelOut
    buf532.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf532.users = [
        NodeUser(node=SchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=False, is_weak=False),
    ]
]
op532.node.kernel = extern_kernels.bmm


op533: SchedulerNode(ComputedBuffer)
op533.writes = [MemoryDep('buf533', c0, {c0: 65536}, None)]
op533.unmet_dependencies = 
    [   MemoryDep('buf529', c0, {c0: 33554432}, None),
        MemoryDep('buf532', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op533.met_dependencies = []
op533.outputs = [
    buf533: ComputedBuffer
    buf533.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf533.users = [
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=False, is_weak=False),
    ]
]
op533.group.device = cuda:0
op533.group.iteration = (65536, 512)
op533.sizes = ([8, 16, 512], [512])
buf529_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf532_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf533_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op533_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf529', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf532', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf533', get_index_4, reduction)
        return store_reduction
op533 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op534: SchedulerNode(ComputedBuffer)
op534.writes = [MemoryDep('buf534', c0, {c0: 65536}, None)]
op534.unmet_dependencies = 
    [   MemoryDep('buf529', c0, {c0: 33554432}, None),
        MemoryDep('buf532', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf533', c0, {c0: 65536}, None)]
op534.met_dependencies = []
op534.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf534.users = [NodeUser(node=SchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op534.group.device = cuda:0
op534.group.iteration = (65536, 512)
op534.sizes = ([8, 16, 512], [512])
buf529_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf532_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf533_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf534_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op534_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf529', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf532', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf533', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf534', get_index_5, reduction)
        return store_reduction
op534 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op535: ExternKernelSchedulerNode(ExternKernelOut)
op535.writes = [StarDep(name='buf535', mode=None)]
op535.unmet_dependencies = [StarDep(name='buf525', mode=None)]
op535.met_dependencies = [StarDep(name='arg304_1', mode=None)]
op535.outputs = [
    buf535: ExternKernelOut
    buf535.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf535.users = [NodeUser(node=ExternKernelSchedulerNode(name='op537'), can_inplace=False, is_weak=False)]
]
op535.node.kernel = extern_kernels.bmm


op536: SchedulerNode(ComputedBuffer)
op536.writes = [MemoryDep('buf536', c0, {c0: 33554432}, None)]
op536.unmet_dependencies = 
    [   MemoryDep('buf529', c0, {c0: 33554432}, None),
        MemoryDep('buf532', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf533', c0, {c0: 65536}, None),
        MemoryDep('buf534', c0, {c0: 65536}, None)]
op536.met_dependencies = []
op536.outputs = [
    buf536: ComputedBuffer
    buf536.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf536.users = [NodeUser(node=ExternKernelSchedulerNode(name='op537'), can_inplace=False, is_weak=False)]
]
op536.group.device = cuda:0
op536.group.iteration = (33554432, 1)
op536.sizes = ([8, 16, 512, 512], [])
buf529_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf532_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf533_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf534_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op536_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf529', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf532', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf533', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf534', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf536', get_index_6, truediv, None)
        return store
op536 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op537: ExternKernelSchedulerNode(ExternKernelOut)
op537.writes = [StarDep(name='buf537', mode=None)]
op537.unmet_dependencies = [StarDep(name='buf535', mode=None), StarDep(name='buf536', mode=None)]
op537.met_dependencies = []
op537.outputs = [
    buf537: ExternKernelOut
    buf537.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf537.users = [NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False)]
]
op537.node.kernel = extern_kernels.bmm


op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 4194304}, None)]
op538.unmet_dependencies = [   MemoryDep('buf537', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op538.met_dependencies = []
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf538.users = [NodeUser(node=ExternKernelSchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op538.group.device = cuda:0
op538.group.iteration = (4194304, 1)
op538.sizes = ([512, 8, 64, 16], [])
buf537_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf538_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op538_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf537', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf538', get_index_1, load, None)
        return store
op538 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op539: SchedulerNode(ComputedBuffer)
op539.writes = [MemoryDep('buf539', c0, {c0: 1048576}, None)]
op539.unmet_dependencies = []
op539.met_dependencies = [MemoryDep('arg305_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op539.outputs = [
    buf539: ComputedBuffer
    buf539.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf539.users = [NodeUser(node=ExternKernelSchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op539.group.device = cuda:0
op539.group.iteration = (1048576, 1)
op539.sizes = ([64, 16, 1024], [])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf539_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op539_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg305_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf539', get_index_1, load, None)
        return store
op539 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op540: ExternKernelSchedulerNode(ExternKernelOut)
op540.writes = [StarDep(name='buf540', mode=None)]
op540.unmet_dependencies = [StarDep(name='buf538', mode=None), StarDep(name='buf539', mode=None)]
op540.met_dependencies = []
op540.outputs = [
    buf540: ExternKernelOut
    buf540.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf540.users = [
        NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=True, is_weak=False),
    ]
]
op540.node.kernel = extern_kernels.bmm


op541: SchedulerNode(ComputedBuffer)
op541.writes = [MemoryDep('buf541', c0, {c0: 4096}, None)]
op541.unmet_dependencies = 
    [   MemoryDep('buf525', c0, {c0: 4194304}, None),
        MemoryDep('buf540', c0, {c0: 4194304}, None)]
op541.met_dependencies = []
op541.outputs = [
    buf541: ComputedBuffer
    buf541.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf541.users = [NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False)]
]
op541.group.device = cuda:0
op541.group.iteration = (4096, 1024)
op541.sizes = ([4096], [1024])
buf540_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op541_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf525', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf541', get_index_2, getitem)
        return store_reduction
op541 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 4096}, None)]
op542.unmet_dependencies = 
    [   MemoryDep('buf525', c0, {c0: 4194304}, None),
        MemoryDep('buf540', c0, {c0: 4194304}, None)]
op542.met_dependencies = []
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf542.users = [NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False)]
]
op542.group.device = cuda:0
op542.group.iteration = (4096, 1024)
op542.sizes = ([4096], [1024])
buf540_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op542_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf525', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf542', get_index_2, getitem_1)
        return store_reduction
op542 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 4194304}, None)]
op544.unmet_dependencies = 
    [   MemoryDep('buf525', c0, {c0: 4194304}, None),
        MemoryDep('buf540', c0, {c0: 4194304}, None),
        MemoryDep('buf541', c0, {c0: 4096}, None),
        MemoryDep('buf542', c0, {c0: 4096}, None)]
op544.met_dependencies = 
    [   MemoryDep('arg309_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg310_1', c1, {c0: 4096, c1: 1024}, None)]
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf544.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False),
    ]
]
op544.group.device = cuda:0
op544.group.iteration = (4194304, 1)
op544.sizes = ([4096, 1024], [])
buf540_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf542_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op544_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf525', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf541', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf542', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg309_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg310_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf544', get_index_6, add_2, None)
        return store
op544 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op545: ExternKernelSchedulerNode(ExternKernelOut)
op545.writes = [StarDep(name='buf545', mode=None)]
op545.unmet_dependencies = [StarDep(name='buf544', mode=None)]
op545.met_dependencies = [StarDep(name='arg313_1', mode=None)]
op545.outputs = [
    buf545: ExternKernelOut
    buf545.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf545.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False)]
]
op545.node.kernel = extern_kernels.mm


op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 16777216}, None)]
op546.unmet_dependencies = [MemoryDep('buf545', c0, {c0: 16777216}, None)]
op546.met_dependencies = [MemoryDep('arg314_1', c1, {c0: 4096, c1: 4096}, None)]
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf546.users = [NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op546.group.device = cuda:0
op546.group.iteration = (16777216, 1)
op546.sizes = ([4096, 4096], [])
buf545_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op546_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf545', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg314_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf545', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg314_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf546', get_index_4, mul_2, None)
        return store
op546 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op547: ExternKernelSchedulerNode(ExternKernelOut)
op547.writes = [StarDep(name='buf547', mode=None)]
op547.unmet_dependencies = [StarDep(name='buf546', mode=None)]
op547.met_dependencies = [StarDep(name='arg315_1', mode=None)]
op547.outputs = [
    buf547: ExternKernelOut
    buf547.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf547.users = [
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False),
    ]
]
op547.node.kernel = extern_kernels.mm


op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 4096}, None)]
op548.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 4194304}, None),
        MemoryDep('buf547', c0, {c0: 4194304}, None)]
op548.met_dependencies = [MemoryDep('arg316_1', c1, {c0: 4096, c1: 1024}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf548.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
]
op548.group.device = cuda:0
op548.group.iteration = (4096, 1024)
op548.sizes = ([4096], [1024])
buf547_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op548_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf547', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg316_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf544', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf548', get_index_3, getitem)
        return store_reduction
op548 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op549: SchedulerNode(ComputedBuffer)
op549.writes = [MemoryDep('buf549', c0, {c0: 4096}, None)]
op549.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 4194304}, None),
        MemoryDep('buf547', c0, {c0: 4194304}, None)]
op549.met_dependencies = [MemoryDep('arg316_1', c1, {c0: 4096, c1: 1024}, None)]
op549.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf549.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
]
op549.group.device = cuda:0
op549.group.iteration = (4096, 1024)
op549.sizes = ([4096], [1024])
buf547_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op549_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf547', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg316_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf544', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf549', get_index_3, getitem_1)
        return store_reduction
op549 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 4194304}, None)]
op551.unmet_dependencies = 
    [   MemoryDep('buf544', c0, {c0: 4194304}, None),
        MemoryDep('buf547', c0, {c0: 4194304}, None),
        MemoryDep('buf548', c0, {c0: 4096}, None),
        MemoryDep('buf549', c0, {c0: 4096}, None)]
op551.met_dependencies = 
    [   MemoryDep('arg311_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg312_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg316_1', c1, {c0: 4096, c1: 1024}, None)]
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf551.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op551.group.device = cuda:0
op551.group.iteration = (4194304, 1)
op551.sizes = ([4096, 1024], [])
buf547_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf549_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op551_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf547', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg316_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf544', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf548', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf549', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg311_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg312_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf551', get_index_7, add_3, None)
        return store
op551 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op552: ExternKernelSchedulerNode(ExternKernelOut)
op552.writes = [StarDep(name='buf552', mode=None)]
op552.unmet_dependencies = [StarDep(name='buf551', mode=None)]
op552.met_dependencies = [StarDep(name='arg317_1', mode=None)]
op552.outputs = [
    buf552: ExternKernelOut
    buf552.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf552.users = [
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op557'), can_inplace=True, is_weak=False),
    ]
]
op552.node.kernel = extern_kernels.bmm


op553: ExternKernelSchedulerNode(ExternKernelOut)
op553.writes = [StarDep(name='buf553', mode=None)]
op553.unmet_dependencies = [StarDep(name='buf551', mode=None)]
op553.met_dependencies = [StarDep(name='arg318_1', mode=None)]
op553.outputs = [
    buf553: ExternKernelOut
    buf553.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf553.users = [NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op553.node.kernel = extern_kernels.bmm


op554: SchedulerNode(ComputedBuffer)
op554.writes = [MemoryDep('buf554', c0, {c0: 4194304}, None)]
op554.unmet_dependencies = [MemoryDep('buf552', c0, {c0: 4194304}, None)]
op554.met_dependencies = [MemoryDep('arg323_1', c1, {c0: 4096, c1: 1024}, None)]
op554.outputs = [
    buf554: ComputedBuffer
    buf554.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf554.users = [NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op554.group.device = cuda:0
op554.group.iteration = (4194304, 1)
op554.sizes = ([4096, 1024], [])
buf552_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op554_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf552', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg323_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf554', get_index_2, add, None)
        return store
op554 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op555: ExternKernelSchedulerNode(ExternKernelOut)
op555.writes = [StarDep(name='buf555', mode=None)]
op555.unmet_dependencies = [StarDep(name='buf553', mode=None), StarDep(name='buf554', mode=None)]
op555.met_dependencies = []
op555.outputs = [
    buf555: ExternKernelOut
    buf555.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf555.users = [
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=True, is_weak=False),
    ]
]
op555.node.kernel = extern_kernels.bmm


op556: ExternKernelSchedulerNode(ExternKernelOut)
op556.writes = [StarDep(name='buf556', mode=None)]
op556.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op556.met_dependencies = [StarDep(name='arg321_1', mode=None)]
op556.outputs = [
    buf556: ExternKernelOut
    buf556.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf556.users = [NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op556.node.kernel = extern_kernels.bmm


op557: SchedulerNode(ComputedBuffer)
op557.writes = [MemoryDep('buf557', c0, {c0: 4194304}, None)]
op557.unmet_dependencies = [MemoryDep('buf552', c0, {c0: 4194304}, None)]
op557.met_dependencies = [MemoryDep('arg322_1', c1, {c0: 4096, c1: 1024}, None)]
op557.outputs = [
    buf557: ComputedBuffer
    buf557.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf557.users = [NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False)]
]
op557.group.device = cuda:0
op557.group.iteration = (4194304, 1)
op557.sizes = ([4096, 1024], [])
buf552_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf557_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op557_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf552', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg322_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf557', get_index_2, add, None)
        return store
op557 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op558: ExternKernelSchedulerNode(ExternKernelOut)
op558.writes = [StarDep(name='buf558', mode=None)]
op558.unmet_dependencies = [StarDep(name='buf556', mode=None), StarDep(name='buf557', mode=None)]
op558.met_dependencies = []
op558.outputs = [
    buf558: ExternKernelOut
    buf558.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf558.users = [
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
    ]
]
op558.node.kernel = extern_kernels.bmm


op559: SchedulerNode(ComputedBuffer)
op559.writes = [MemoryDep('buf559', c0, {c0: 65536}, None)]
op559.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 33554432}, None),
        MemoryDep('buf558', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op559.met_dependencies = []
op559.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf559.users = [
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
    ]
]
op559.group.device = cuda:0
op559.group.iteration = (65536, 512)
op559.sizes = ([8, 16, 512], [512])
buf555_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op559_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf558', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf559', get_index_4, reduction)
        return store_reduction
op559 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op560: SchedulerNode(ComputedBuffer)
op560.writes = [MemoryDep('buf560', c0, {c0: 65536}, None)]
op560.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 33554432}, None),
        MemoryDep('buf558', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf559', c0, {c0: 65536}, None)]
op560.met_dependencies = []
op560.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf560.users = [NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op560.group.device = cuda:0
op560.group.iteration = (65536, 512)
op560.sizes = ([8, 16, 512], [512])
buf555_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf560_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op560_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf558', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf559', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf560', get_index_5, reduction)
        return store_reduction
op560 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op561: ExternKernelSchedulerNode(ExternKernelOut)
op561.writes = [StarDep(name='buf561', mode=None)]
op561.unmet_dependencies = [StarDep(name='buf551', mode=None)]
op561.met_dependencies = [StarDep(name='arg319_1', mode=None)]
op561.outputs = [
    buf561: ExternKernelOut
    buf561.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf561.users = [NodeUser(node=ExternKernelSchedulerNode(name='op563'), can_inplace=False, is_weak=False)]
]
op561.node.kernel = extern_kernels.bmm


op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 33554432}, None)]
op562.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 33554432}, None),
        MemoryDep('buf558', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf559', c0, {c0: 65536}, None),
        MemoryDep('buf560', c0, {c0: 65536}, None)]
op562.met_dependencies = []
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf562.users = [NodeUser(node=ExternKernelSchedulerNode(name='op563'), can_inplace=False, is_weak=False)]
]
op562.group.device = cuda:0
op562.group.iteration = (33554432, 1)
op562.sizes = ([8, 16, 512, 512], [])
buf555_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf560_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op562_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf558', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf559', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf560', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf562', get_index_6, truediv, None)
        return store
op562 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op563: ExternKernelSchedulerNode(ExternKernelOut)
op563.writes = [StarDep(name='buf563', mode=None)]
op563.unmet_dependencies = [StarDep(name='buf561', mode=None), StarDep(name='buf562', mode=None)]
op563.met_dependencies = []
op563.outputs = [
    buf563: ExternKernelOut
    buf563.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf563.users = [NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False)]
]
op563.node.kernel = extern_kernels.bmm


op564: SchedulerNode(ComputedBuffer)
op564.writes = [MemoryDep('buf564', c0, {c0: 4194304}, None)]
op564.unmet_dependencies = [   MemoryDep('buf563', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op564.met_dependencies = []
op564.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf564.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op564.group.device = cuda:0
op564.group.iteration = (4194304, 1)
op564.sizes = ([512, 8, 64, 16], [])
buf563_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf564_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op564_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf564', get_index_1, load, None)
        return store
op564 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 1048576}, None)]
op565.unmet_dependencies = []
op565.met_dependencies = [MemoryDep('arg320_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf565.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op565.group.device = cuda:0
op565.group.iteration = (1048576, 1)
op565.sizes = ([64, 16, 1024], [])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op565_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg320_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf565', get_index_1, load, None)
        return store
op565 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op566: ExternKernelSchedulerNode(ExternKernelOut)
op566.writes = [StarDep(name='buf566', mode=None)]
op566.unmet_dependencies = [StarDep(name='buf564', mode=None), StarDep(name='buf565', mode=None)]
op566.met_dependencies = []
op566.outputs = [
    buf566: ExternKernelOut
    buf566.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf566.users = [
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=True, is_weak=False),
    ]
]
op566.node.kernel = extern_kernels.bmm


op567: SchedulerNode(ComputedBuffer)
op567.writes = [MemoryDep('buf567', c0, {c0: 4096}, None)]
op567.unmet_dependencies = 
    [   MemoryDep('buf551', c0, {c0: 4194304}, None),
        MemoryDep('buf566', c0, {c0: 4194304}, None)]
op567.met_dependencies = []
op567.outputs = [
    buf567: ComputedBuffer
    buf567.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf567.users = [NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False)]
]
op567.group.device = cuda:0
op567.group.iteration = (4096, 1024)
op567.sizes = ([4096], [1024])
buf566_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf567_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op567_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf566', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf551', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf567', get_index_2, getitem)
        return store_reduction
op567 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 4096}, None)]
op568.unmet_dependencies = 
    [   MemoryDep('buf551', c0, {c0: 4194304}, None),
        MemoryDep('buf566', c0, {c0: 4194304}, None)]
op568.met_dependencies = []
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf568.users = [NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False)]
]
op568.group.device = cuda:0
op568.group.iteration = (4096, 1024)
op568.sizes = ([4096], [1024])
buf566_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op568_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf566', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf551', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf568', get_index_2, getitem_1)
        return store_reduction
op568 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op570: SchedulerNode(ComputedBuffer)
op570.writes = [MemoryDep('buf570', c0, {c0: 4194304}, None)]
op570.unmet_dependencies = 
    [   MemoryDep('buf551', c0, {c0: 4194304}, None),
        MemoryDep('buf566', c0, {c0: 4194304}, None),
        MemoryDep('buf567', c0, {c0: 4096}, None),
        MemoryDep('buf568', c0, {c0: 4096}, None)]
op570.met_dependencies = 
    [   MemoryDep('arg324_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg325_1', c1, {c0: 4096, c1: 1024}, None)]
op570.outputs = [
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf570.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False),
    ]
]
op570.group.device = cuda:0
op570.group.iteration = (4194304, 1)
op570.sizes = ([4096, 1024], [])
buf566_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf567_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf568_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op570_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf566', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf551', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf567', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf568', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg324_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg325_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf570', get_index_6, add_2, None)
        return store
op570 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op571: ExternKernelSchedulerNode(ExternKernelOut)
op571.writes = [StarDep(name='buf571', mode=None)]
op571.unmet_dependencies = [StarDep(name='buf570', mode=None)]
op571.met_dependencies = [StarDep(name='arg328_1', mode=None)]
op571.outputs = [
    buf571: ExternKernelOut
    buf571.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf571.users = [NodeUser(node=SchedulerNode(name='op572'), can_inplace=True, is_weak=False)]
]
op571.node.kernel = extern_kernels.mm


op572: SchedulerNode(ComputedBuffer)
op572.writes = [MemoryDep('buf572', c0, {c0: 16777216}, None)]
op572.unmet_dependencies = [MemoryDep('buf571', c0, {c0: 16777216}, None)]
op572.met_dependencies = [MemoryDep('arg329_1', c1, {c0: 4096, c1: 4096}, None)]
op572.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf572.users = [NodeUser(node=ExternKernelSchedulerNode(name='op573'), can_inplace=False, is_weak=False)]
]
op572.group.device = cuda:0
op572.group.iteration = (16777216, 1)
op572.sizes = ([4096, 4096], [])
buf571_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op572_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf571', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg329_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf571', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg329_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf572', get_index_4, mul_2, None)
        return store
op572 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op573: ExternKernelSchedulerNode(ExternKernelOut)
op573.writes = [StarDep(name='buf573', mode=None)]
op573.unmet_dependencies = [StarDep(name='buf572', mode=None)]
op573.met_dependencies = [StarDep(name='arg330_1', mode=None)]
op573.outputs = [
    buf573: ExternKernelOut
    buf573.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf573.users = [
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False),
    ]
]
op573.node.kernel = extern_kernels.mm


op574: SchedulerNode(ComputedBuffer)
op574.writes = [MemoryDep('buf574', c0, {c0: 4096}, None)]
op574.unmet_dependencies = 
    [   MemoryDep('buf570', c0, {c0: 4194304}, None),
        MemoryDep('buf573', c0, {c0: 4194304}, None)]
op574.met_dependencies = [MemoryDep('arg331_1', c1, {c0: 4096, c1: 1024}, None)]
op574.outputs = [
    buf574: ComputedBuffer
    buf574.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf574.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op574.group.device = cuda:0
op574.group.iteration = (4096, 1024)
op574.sizes = ([4096], [1024])
buf573_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op574_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf573', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg331_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf570', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf574', get_index_3, getitem)
        return store_reduction
op574 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op575: SchedulerNode(ComputedBuffer)
op575.writes = [MemoryDep('buf575', c0, {c0: 4096}, None)]
op575.unmet_dependencies = 
    [   MemoryDep('buf570', c0, {c0: 4194304}, None),
        MemoryDep('buf573', c0, {c0: 4194304}, None)]
op575.met_dependencies = [MemoryDep('arg331_1', c1, {c0: 4096, c1: 1024}, None)]
op575.outputs = [
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf575.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False)]
]
op575.group.device = cuda:0
op575.group.iteration = (4096, 1024)
op575.sizes = ([4096], [1024])
buf573_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf575_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op575_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf573', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg331_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf570', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf575', get_index_3, getitem_1)
        return store_reduction
op575 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 4194304}, None)]
op577.unmet_dependencies = 
    [   MemoryDep('buf570', c0, {c0: 4194304}, None),
        MemoryDep('buf573', c0, {c0: 4194304}, None),
        MemoryDep('buf574', c0, {c0: 4096}, None),
        MemoryDep('buf575', c0, {c0: 4096}, None)]
op577.met_dependencies = 
    [   MemoryDep('arg326_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg327_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg331_1', c1, {c0: 4096, c1: 1024}, None)]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf577.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op579'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op577.group.device = cuda:0
op577.group.iteration = (4194304, 1)
op577.sizes = ([4096, 1024], [])
buf573_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf575_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op577_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf573', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg331_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf570', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf574', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf575', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg326_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg327_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf577', get_index_7, add_3, None)
        return store
op577 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op578: ExternKernelSchedulerNode(ExternKernelOut)
op578.writes = [StarDep(name='buf578', mode=None)]
op578.unmet_dependencies = [StarDep(name='buf577', mode=None)]
op578.met_dependencies = [StarDep(name='arg332_1', mode=None)]
op578.outputs = [
    buf578: ExternKernelOut
    buf578.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf578.users = [
        NodeUser(node=SchedulerNode(name='op580'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=True, is_weak=False),
    ]
]
op578.node.kernel = extern_kernels.bmm


op579: ExternKernelSchedulerNode(ExternKernelOut)
op579.writes = [StarDep(name='buf579', mode=None)]
op579.unmet_dependencies = [StarDep(name='buf577', mode=None)]
op579.met_dependencies = [StarDep(name='arg333_1', mode=None)]
op579.outputs = [
    buf579: ExternKernelOut
    buf579.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
]
op579.node.kernel = extern_kernels.bmm


op580: SchedulerNode(ComputedBuffer)
op580.writes = [MemoryDep('buf580', c0, {c0: 4194304}, None)]
op580.unmet_dependencies = [MemoryDep('buf578', c0, {c0: 4194304}, None)]
op580.met_dependencies = [MemoryDep('arg338_1', c1, {c0: 4096, c1: 1024}, None)]
op580.outputs = [
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf580.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
]
op580.group.device = cuda:0
op580.group.iteration = (4194304, 1)
op580.sizes = ([4096, 1024], [])
buf578_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op580_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg338_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf580', get_index_2, add, None)
        return store
op580 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op581: ExternKernelSchedulerNode(ExternKernelOut)
op581.writes = [StarDep(name='buf581', mode=None)]
op581.unmet_dependencies = [StarDep(name='buf579', mode=None), StarDep(name='buf580', mode=None)]
op581.met_dependencies = []
op581.outputs = [
    buf581: ExternKernelOut
    buf581.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf581.users = [
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
    ]
]
op581.node.kernel = extern_kernels.bmm


op582: ExternKernelSchedulerNode(ExternKernelOut)
op582.writes = [StarDep(name='buf582', mode=None)]
op582.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op582.met_dependencies = [StarDep(name='arg336_1', mode=None)]
op582.outputs = [
    buf582: ExternKernelOut
    buf582.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf582.users = [NodeUser(node=ExternKernelSchedulerNode(name='op584'), can_inplace=False, is_weak=False)]
]
op582.node.kernel = extern_kernels.bmm


op583: SchedulerNode(ComputedBuffer)
op583.writes = [MemoryDep('buf583', c0, {c0: 4194304}, None)]
op583.unmet_dependencies = [MemoryDep('buf578', c0, {c0: 4194304}, None)]
op583.met_dependencies = [MemoryDep('arg337_1', c1, {c0: 4096, c1: 1024}, None)]
op583.outputs = [
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf583.users = [NodeUser(node=ExternKernelSchedulerNode(name='op584'), can_inplace=False, is_weak=False)]
]
op583.group.device = cuda:0
op583.group.iteration = (4194304, 1)
op583.sizes = ([4096, 1024], [])
buf578_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op583_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg337_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf583', get_index_2, add, None)
        return store
op583 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op584: ExternKernelSchedulerNode(ExternKernelOut)
op584.writes = [StarDep(name='buf584', mode=None)]
op584.unmet_dependencies = [StarDep(name='buf582', mode=None), StarDep(name='buf583', mode=None)]
op584.met_dependencies = []
op584.outputs = [
    buf584: ExternKernelOut
    buf584.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf584.users = [
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
    ]
]
op584.node.kernel = extern_kernels.bmm


op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 65536}, None)]
op585.unmet_dependencies = 
    [   MemoryDep('buf581', c0, {c0: 33554432}, None),
        MemoryDep('buf584', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op585.met_dependencies = []
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf585.users = [
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
    ]
]
op585.group.device = cuda:0
op585.group.iteration = (65536, 512)
op585.sizes = ([8, 16, 512], [512])
buf581_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op585_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf581', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf584', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf585', get_index_4, reduction)
        return store_reduction
op585 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op586: SchedulerNode(ComputedBuffer)
op586.writes = [MemoryDep('buf586', c0, {c0: 65536}, None)]
op586.unmet_dependencies = 
    [   MemoryDep('buf581', c0, {c0: 33554432}, None),
        MemoryDep('buf584', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf585', c0, {c0: 65536}, None)]
op586.met_dependencies = []
op586.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf586.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
]
op586.group.device = cuda:0
op586.group.iteration = (65536, 512)
op586.sizes = ([8, 16, 512], [512])
buf581_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf586_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op586_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf581', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf584', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf585', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf586', get_index_5, reduction)
        return store_reduction
op586 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op587: ExternKernelSchedulerNode(ExternKernelOut)
op587.writes = [StarDep(name='buf587', mode=None)]
op587.unmet_dependencies = [StarDep(name='buf577', mode=None)]
op587.met_dependencies = [StarDep(name='arg334_1', mode=None)]
op587.outputs = [
    buf587: ExternKernelOut
    buf587.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf587.users = [NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op587.node.kernel = extern_kernels.bmm


op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', c0, {c0: 33554432}, None)]
op588.unmet_dependencies = 
    [   MemoryDep('buf581', c0, {c0: 33554432}, None),
        MemoryDep('buf584', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf585', c0, {c0: 65536}, None),
        MemoryDep('buf586', c0, {c0: 65536}, None)]
op588.met_dependencies = []
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf588.users = [NodeUser(node=ExternKernelSchedulerNode(name='op589'), can_inplace=False, is_weak=False)]
]
op588.group.device = cuda:0
op588.group.iteration = (33554432, 1)
op588.sizes = ([8, 16, 512, 512], [])
buf581_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf584_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf586_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op588_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf581', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf584', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf585', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf586', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf588', get_index_6, truediv, None)
        return store
op588 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op589: ExternKernelSchedulerNode(ExternKernelOut)
op589.writes = [StarDep(name='buf589', mode=None)]
op589.unmet_dependencies = [StarDep(name='buf587', mode=None), StarDep(name='buf588', mode=None)]
op589.met_dependencies = []
op589.outputs = [
    buf589: ExternKernelOut
    buf589.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf589.users = [NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op589.node.kernel = extern_kernels.bmm


op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 4194304}, None)]
op590.unmet_dependencies = [   MemoryDep('buf589', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op590.met_dependencies = []
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf590.users = [NodeUser(node=ExternKernelSchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
]
op590.group.device = cuda:0
op590.group.iteration = (4194304, 1)
op590.sizes = ([512, 8, 64, 16], [])
buf589_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op590_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf589', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf590', get_index_1, load, None)
        return store
op590 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op591: SchedulerNode(ComputedBuffer)
op591.writes = [MemoryDep('buf591', c0, {c0: 1048576}, None)]
op591.unmet_dependencies = []
op591.met_dependencies = [MemoryDep('arg335_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op591.outputs = [
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf591.users = [NodeUser(node=ExternKernelSchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
]
op591.group.device = cuda:0
op591.group.iteration = (1048576, 1)
op591.sizes = ([64, 16, 1024], [])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op591_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg335_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf591', get_index_1, load, None)
        return store
op591 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op592: ExternKernelSchedulerNode(ExternKernelOut)
op592.writes = [StarDep(name='buf592', mode=None)]
op592.unmet_dependencies = [StarDep(name='buf590', mode=None), StarDep(name='buf591', mode=None)]
op592.met_dependencies = []
op592.outputs = [
    buf592: ExternKernelOut
    buf592.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf592.users = [
        NodeUser(node=SchedulerNode(name='op593'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=True, is_weak=False),
    ]
]
op592.node.kernel = extern_kernels.bmm


op593: SchedulerNode(ComputedBuffer)
op593.writes = [MemoryDep('buf593', c0, {c0: 4096}, None)]
op593.unmet_dependencies = 
    [   MemoryDep('buf577', c0, {c0: 4194304}, None),
        MemoryDep('buf592', c0, {c0: 4194304}, None)]
op593.met_dependencies = []
op593.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf593.users = [NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False)]
]
op593.group.device = cuda:0
op593.group.iteration = (4096, 1024)
op593.sizes = ([4096], [1024])
buf592_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op593_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf577', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf593', get_index_2, getitem)
        return store_reduction
op593 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', c0, {c0: 4096}, None)]
op594.unmet_dependencies = 
    [   MemoryDep('buf577', c0, {c0: 4194304}, None),
        MemoryDep('buf592', c0, {c0: 4194304}, None)]
op594.met_dependencies = []
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf594.users = [NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False)]
]
op594.group.device = cuda:0
op594.group.iteration = (4096, 1024)
op594.sizes = ([4096], [1024])
buf592_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op594_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf577', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf594', get_index_2, getitem_1)
        return store_reduction
op594 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op596: SchedulerNode(ComputedBuffer)
op596.writes = [MemoryDep('buf596', c0, {c0: 4194304}, None)]
op596.unmet_dependencies = 
    [   MemoryDep('buf577', c0, {c0: 4194304}, None),
        MemoryDep('buf592', c0, {c0: 4194304}, None),
        MemoryDep('buf593', c0, {c0: 4096}, None),
        MemoryDep('buf594', c0, {c0: 4096}, None)]
op596.met_dependencies = 
    [   MemoryDep('arg339_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg340_1', c1, {c0: 4096, c1: 1024}, None)]
op596.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf596.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
]
op596.group.device = cuda:0
op596.group.iteration = (4194304, 1)
op596.sizes = ([4096, 1024], [])
buf592_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf594_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op596_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf577', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf593', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf594', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg339_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg340_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf596', get_index_6, add_2, None)
        return store
op596 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op597: ExternKernelSchedulerNode(ExternKernelOut)
op597.writes = [StarDep(name='buf597', mode=None)]
op597.unmet_dependencies = [StarDep(name='buf596', mode=None)]
op597.met_dependencies = [StarDep(name='arg343_1', mode=None)]
op597.outputs = [
    buf597: ExternKernelOut
    buf597.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf597.users = [NodeUser(node=SchedulerNode(name='op598'), can_inplace=True, is_weak=False)]
]
op597.node.kernel = extern_kernels.mm


op598: SchedulerNode(ComputedBuffer)
op598.writes = [MemoryDep('buf598', c0, {c0: 16777216}, None)]
op598.unmet_dependencies = [MemoryDep('buf597', c0, {c0: 16777216}, None)]
op598.met_dependencies = [MemoryDep('arg344_1', c1, {c0: 4096, c1: 4096}, None)]
op598.outputs = [
    buf598: ComputedBuffer
    buf598.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf598.users = [NodeUser(node=ExternKernelSchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op598.group.device = cuda:0
op598.group.iteration = (16777216, 1)
op598.sizes = ([4096, 4096], [])
buf597_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf598_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op598_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf597', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg344_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf597', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg344_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf598', get_index_4, mul_2, None)
        return store
op598 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op599: ExternKernelSchedulerNode(ExternKernelOut)
op599.writes = [StarDep(name='buf599', mode=None)]
op599.unmet_dependencies = [StarDep(name='buf598', mode=None)]
op599.met_dependencies = [StarDep(name='arg345_1', mode=None)]
op599.outputs = [
    buf599: ExternKernelOut
    buf599.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf599.users = [
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
]
op599.node.kernel = extern_kernels.mm


op600: SchedulerNode(ComputedBuffer)
op600.writes = [MemoryDep('buf600', c0, {c0: 4096}, None)]
op600.unmet_dependencies = 
    [   MemoryDep('buf596', c0, {c0: 4194304}, None),
        MemoryDep('buf599', c0, {c0: 4194304}, None)]
op600.met_dependencies = [MemoryDep('arg346_1', c1, {c0: 4096, c1: 1024}, None)]
op600.outputs = [
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf600.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False)]
]
op600.group.device = cuda:0
op600.group.iteration = (4096, 1024)
op600.sizes = ([4096], [1024])
buf599_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op600_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf599', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg346_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf596', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf600', get_index_3, getitem)
        return store_reduction
op600 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op601: SchedulerNode(ComputedBuffer)
op601.writes = [MemoryDep('buf601', c0, {c0: 4096}, None)]
op601.unmet_dependencies = 
    [   MemoryDep('buf596', c0, {c0: 4194304}, None),
        MemoryDep('buf599', c0, {c0: 4194304}, None)]
op601.met_dependencies = [MemoryDep('arg346_1', c1, {c0: 4096, c1: 1024}, None)]
op601.outputs = [
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf601.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False)]
]
op601.group.device = cuda:0
op601.group.iteration = (4096, 1024)
op601.sizes = ([4096], [1024])
buf599_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf601_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op601_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf599', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg346_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf596', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf601', get_index_3, getitem_1)
        return store_reduction
op601 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 4194304}, None)]
op603.unmet_dependencies = 
    [   MemoryDep('buf596', c0, {c0: 4194304}, None),
        MemoryDep('buf599', c0, {c0: 4194304}, None),
        MemoryDep('buf600', c0, {c0: 4096}, None),
        MemoryDep('buf601', c0, {c0: 4096}, None)]
op603.met_dependencies = 
    [   MemoryDep('arg341_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg342_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg346_1', c1, {c0: 4096, c1: 1024}, None)]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf603.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op613'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=True, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op603.group.device = cuda:0
op603.group.iteration = (4194304, 1)
op603.sizes = ([4096, 1024], [])
buf599_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf601_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op603_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf599', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg346_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf596', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf600', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf601', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg341_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg342_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf603', get_index_7, add_3, None)
        return store
op603 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        x1 = (xindex // 1024)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op604: ExternKernelSchedulerNode(ExternKernelOut)
op604.writes = [StarDep(name='buf604', mode=None)]
op604.unmet_dependencies = [StarDep(name='buf603', mode=None)]
op604.met_dependencies = [StarDep(name='arg347_1', mode=None)]
op604.outputs = [
    buf604: ExternKernelOut
    buf604.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf604.users = [
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False),
    ]
]
op604.node.kernel = extern_kernels.bmm


op605: ExternKernelSchedulerNode(ExternKernelOut)
op605.writes = [StarDep(name='buf605', mode=None)]
op605.unmet_dependencies = [StarDep(name='buf603', mode=None)]
op605.met_dependencies = [StarDep(name='arg348_1', mode=None)]
op605.outputs = [
    buf605: ExternKernelOut
    buf605.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf605.users = [NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op605.node.kernel = extern_kernels.bmm


op606: SchedulerNode(ComputedBuffer)
op606.writes = [MemoryDep('buf606', c0, {c0: 4194304}, None)]
op606.unmet_dependencies = [MemoryDep('buf604', c0, {c0: 4194304}, None)]
op606.met_dependencies = [MemoryDep('arg353_1', c1, {c0: 4096, c1: 1024}, None)]
op606.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf606.users = [NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op606.group.device = cuda:0
op606.group.iteration = (4194304, 1)
op606.sizes = ([4096, 1024], [])
buf604_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf606_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op606_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg353_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf606', get_index_2, add, None)
        return store
op606 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op607: ExternKernelSchedulerNode(ExternKernelOut)
op607.writes = [StarDep(name='buf607', mode=None)]
op607.unmet_dependencies = [StarDep(name='buf605', mode=None), StarDep(name='buf606', mode=None)]
op607.met_dependencies = []
op607.outputs = [
    buf607: ExternKernelOut
    buf607.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
    buf607.users = [
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False),
    ]
]
op607.node.kernel = extern_kernels.bmm


op608: ExternKernelSchedulerNode(ExternKernelOut)
op608.writes = [StarDep(name='buf608', mode=None)]
op608.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op608.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op608.outputs = [
    buf608: ExternKernelOut
    buf608.layout = FixedLayout('cuda', torch.float32, size=[1, 8192, 1024], stride=[8388608, 1024, 1])
    buf608.users = [NodeUser(node=ExternKernelSchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op608.node.kernel = extern_kernels.bmm


op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 4194304}, None)]
op609.unmet_dependencies = [MemoryDep('buf604', c0, {c0: 4194304}, None)]
op609.met_dependencies = [MemoryDep('arg352_1', c1, {c0: 4096, c1: 1024}, None)]
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
    buf609.users = [NodeUser(node=ExternKernelSchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op609.group.device = cuda:0
op609.group.iteration = (4194304, 1)
op609.sizes = ([4096, 1024], [])
buf604_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[16, 64], stride=[64, 1])
buf609_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 16, 64], stride=[8192, 1024, 64, 1])
class op609_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf604', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf609', get_index_2, add, None)
        return store
op609 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tl.store(out_ptr0 + (x2), tmp2, None)


op610: ExternKernelSchedulerNode(ExternKernelOut)
op610.writes = [StarDep(name='buf610', mode=None)]
op610.unmet_dependencies = [StarDep(name='buf608', mode=None), StarDep(name='buf609', mode=None)]
op610.met_dependencies = []
op610.outputs = [
    buf610: ExternKernelOut
    buf610.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
    buf610.users = [
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False),
    ]
]
op610.node.kernel = extern_kernels.bmm


op611: SchedulerNode(ComputedBuffer)
op611.writes = [MemoryDep('buf611', c0, {c0: 65536}, None)]
op611.unmet_dependencies = 
    [   MemoryDep('buf607', c0, {c0: 33554432}, None),
        MemoryDep('buf610', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None)]
op611.met_dependencies = []
op611.outputs = [
    buf611: ComputedBuffer
    buf611.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf611.users = [
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False),
    ]
]
op611.group.device = cuda:0
op611.group.iteration = (65536, 512)
op611.sizes = ([8, 16, 512], [512])
buf607_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf610_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf611_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op611_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf610', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf611', get_index_4, reduction)
        return store_reduction
op611 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        _tmp8 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = triton_helpers.maximum(_tmp8, tmp7)
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = triton_helpers.max2(_tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp8, None)


op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 65536}, None)]
op612.unmet_dependencies = 
    [   MemoryDep('buf607', c0, {c0: 33554432}, None),
        MemoryDep('buf610', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf611', c0, {c0: 65536}, None)]
op612.met_dependencies = []
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
    buf612.users = [NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op612.group.device = cuda:0
op612.group.iteration = (65536, 512)
op612.sizes = ([8, 16, 512], [512])
buf607_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf610_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf611_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
class op612_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf610', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf611', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf612', get_index_5, reduction)
        return store_reduction
op612 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[65536, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 65536
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 16
        x2 = (xindex // 8192)
        tmp7 = tl.load(in_ptr2 + (x4), None, eviction_policy='evict_last')
        _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r3 = rindex
            tmp0 = tl.load(in_ptr0 + (r3 + (512*x4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.load(in_ptr1 + (512 + r3 + (1023*x0) + (524288*x1) + (524288*((r3 + (1023*x0)) // 523776)) + (8388608*x2) + (8388608*((r3 + (1023*x0) + (523776*x1)) // 8380416))), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 + tmp1
            tmp3 = 0.0
            tmp4 = tmp2 + tmp3
            tmp5 = 1.0
            tmp6 = tmp4 * tmp5
            tmp8 = tmp6 - tmp7
            tmp9 = 0.125
            tmp10 = tmp8 * tmp9
            tmp11 = tl_math.exp(tmp10)
            tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
            tmp14 = _tmp13 + tmp12
            _tmp13 = tl.where(rmask, tmp14, _tmp13)
        tmp13 = tl.sum(_tmp13, 1)[:, None]
        tl.store(out_ptr0 + (x4), tmp13, None)


op613: ExternKernelSchedulerNode(ExternKernelOut)
op613.writes = [StarDep(name='buf613', mode=None)]
op613.unmet_dependencies = [StarDep(name='buf603', mode=None)]
op613.met_dependencies = [StarDep(name='arg349_1', mode=None)]
op613.outputs = [
    buf613: ExternKernelOut
    buf613.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf613.users = [NodeUser(node=ExternKernelSchedulerNode(name='op615'), can_inplace=False, is_weak=False)]
]
op613.node.kernel = extern_kernels.bmm


op614: SchedulerNode(ComputedBuffer)
op614.writes = [MemoryDep('buf614', c0, {c0: 33554432}, None)]
op614.unmet_dependencies = 
    [   MemoryDep('buf607', c0, {c0: 33554432}, None),
        MemoryDep('buf610', 8388608*c0 + 524288*c1 + 1023*c2 + c3 + 524288*(((1023*c2 + c3)//523776)) + 8388608*(((523776*c1 + 1023*c2 + c3)//8380416)) + 512, {c0: 8, c1: 16, c2: 512, c3: 512}, None),
        MemoryDep('buf611', c0, {c0: 65536}, None),
        MemoryDep('buf612', c0, {c0: 65536}, None)]
op614.met_dependencies = []
op614.outputs = [
    buf614: ComputedBuffer
    buf614.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
    buf614.users = [NodeUser(node=ExternKernelSchedulerNode(name='op615'), can_inplace=False, is_weak=False)]
]
op614.group.device = cuda:0
op614.group.iteration = (33554432, 1)
op614.sizes = ([8, 16, 512, 512], [])
buf607_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 512], stride=[262144, 512, 1])
buf610_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 1024], stride=[524288, 1024, 1])
buf611_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf612_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 1], stride=[8192, 512, 1, 65536])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 512, 512], stride=[4194304, 262144, 512, 1])
class op614_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 512, z3: 512}
    index0 = 4194304*z0 + 262144*z1 + 512*z2 + z3
    index1 = z3
    index2 = 1023
    index3 = 8388608*z0 + 524288*z1 + 1023*z2 + z3 + 524288*(((1023*z2 + z3)//523776)) + 8388608*(((523776*z1 + 1023*z2 + z3)//8380416)) + 512
    index4 = 8192*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index1')
        get_index_2 = self.get_index('index2')
        check_bounds = ops.check_bounds(get_index_1, get_index_2, False, False)
        get_index_3 = self.get_index('index3')
        load_1 = ops.load('buf610', get_index_3)
        add = ops.add(load, load_1)
        constant = ops.constant(0.0, torch.float32)
        add_1 = ops.add(add, constant)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(add_1, constant_1)
        get_index_4 = self.get_index('index4')
        load_2 = ops.load('buf611', get_index_4)
        sub = ops.sub(mul, load_2)
        constant_2 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_2)
        exp = ops.exp(mul_1)
        get_index_5 = self.get_index('index4')
        load_3 = ops.load('buf612', get_index_5)
        truediv = ops.truediv(exp, load_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf614', get_index_6, truediv, None)
        return store
op614 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 33554432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 512
        x2 = (xindex // 262144) % 16
        x3 = (xindex // 4194304)
        x5 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x4), None)
        tmp1 = tl.load(in_ptr1 + (512 + x0 + (1023*x1) + (524288*x2) + (524288*((x0 + (1023*x1)) // 523776)) + (8388608*x3) + (8388608*((x0 + (1023*x1) + (523776*x2)) // 8380416))), None)
        tmp7 = tl.load(in_ptr2 + (x5), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr3 + (x5), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.0
        tmp4 = tmp2 + tmp3
        tmp5 = 1.0
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 - tmp7
        tmp9 = 0.125
        tmp10 = tmp8 * tmp9
        tmp11 = tl_math.exp(tmp10)
        tmp13 = tmp11 / tmp12
        tl.store(out_ptr0 + (x4), tmp13, None)


op615: ExternKernelSchedulerNode(ExternKernelOut)
op615.writes = [StarDep(name='buf615', mode=None)]
op615.unmet_dependencies = [StarDep(name='buf613', mode=None), StarDep(name='buf614', mode=None)]
op615.met_dependencies = []
op615.outputs = [
    buf615: ExternKernelOut
    buf615.layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
    buf615.users = [NodeUser(node=SchedulerNode(name='op616'), can_inplace=False, is_weak=False)]
]
op615.node.kernel = extern_kernels.bmm


op616: SchedulerNode(ComputedBuffer)
op616.writes = [MemoryDep('buf616', c0, {c0: 4194304}, None)]
op616.unmet_dependencies = [   MemoryDep('buf615', 64*c0 + 524288*c1 + c2 + 32768*c3, {c0: 512, c1: 8, c2: 64, c3: 16}, None)]
op616.met_dependencies = []
op616.outputs = [
    buf616: ComputedBuffer
    buf616.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
    buf616.users = [NodeUser(node=ExternKernelSchedulerNode(name='op618'), can_inplace=False, is_weak=False)]
]
op616.group.device = cuda:0
op616.group.iteration = (4194304, 1)
op616.sizes = ([512, 8, 64, 16], [])
buf615_layout = FixedLayout('cuda', torch.float32, size=[128, 512, 64], stride=[32768, 64, 1])
buf616_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 64, 16, 1], stride=[8192, 1024, 16, 1, 1])
class op616_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 64, z3: 16}
    index0 = 64*z0 + 524288*z1 + z2 + 32768*z3
    index1 = 8192*z0 + 1024*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf615', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf616', get_index_1, load, None)
        return store
op616 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[262144, 16], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 262144
        xnumel = 16
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y0 = yindex % 64
        y1 = (yindex // 64) % 8
        y2 = (yindex // 512)
        y4 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*y2) + (32768*x3) + (524288*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16*y4)), tmp0, xmask)


op617: SchedulerNode(ComputedBuffer)
op617.writes = [MemoryDep('buf617', c0, {c0: 1048576}, None)]
op617.unmet_dependencies = []
op617.met_dependencies = [MemoryDep('arg350_1', c0 + 64*c1 + 1024*c2, {c0: 64, c1: 16, c2: 1024}, None)]
op617.outputs = [
    buf617: ComputedBuffer
    buf617.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
    buf617.users = [NodeUser(node=ExternKernelSchedulerNode(name='op618'), can_inplace=False, is_weak=False)]
]
op617.group.device = cuda:0
op617.group.iteration = (1048576, 1)
op617.sizes = ([64, 16, 1024], [])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 16, 64], stride=[1024, 64, 1])
buf617_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 1024, 1, 1], stride=[16384, 1024, 1, 1, 1])
class op617_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 1024}
    index0 = z0 + 64*z1 + 1024*z2
    index1 = 16384*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg350_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf617', get_index_1, load, None)
        return store
op617 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[64, 16384], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 64
        xnumel = 16384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = yindex < ynumel
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        x1 = xindex % 1024
        x2 = (xindex // 1024)
        y0 = yindex
        x3 = xindex
        tmp0 = tl.load(in_ptr0 + (y0 + (64*x2) + (1024*x1)), ymask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x3 + (16384*y0)), tmp0, ymask)


op618: ExternKernelSchedulerNode(ExternKernelOut)
op618.writes = [StarDep(name='buf618', mode=None)]
op618.unmet_dependencies = [StarDep(name='buf616', mode=None), StarDep(name='buf617', mode=None)]
op618.met_dependencies = []
op618.outputs = [
    buf618: ExternKernelOut
    buf618.layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
    buf618.users = [
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=True, is_weak=False),
    ]
]
op618.node.kernel = extern_kernels.bmm


op619: SchedulerNode(ComputedBuffer)
op619.writes = [MemoryDep('buf619', c0, {c0: 4096}, None)]
op619.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 4194304}, None),
        MemoryDep('buf618', c0, {c0: 4194304}, None)]
op619.met_dependencies = []
op619.outputs = [
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf619.users = [NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False)]
]
op619.group.device = cuda:0
op619.group.iteration = (4096, 1024)
op619.sizes = ([4096], [1024])
buf618_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op619_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf618', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf603', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf619', get_index_2, getitem)
        return store_reduction
op619 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op620: SchedulerNode(ComputedBuffer)
op620.writes = [MemoryDep('buf620', c0, {c0: 4096}, None)]
op620.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 4194304}, None),
        MemoryDep('buf618', c0, {c0: 4194304}, None)]
op620.met_dependencies = []
op620.outputs = [
    buf620: ComputedBuffer
    buf620.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf620.users = [NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False)]
]
op620.group.device = cuda:0
op620.group.iteration = (4096, 1024)
op620.sizes = ([4096], [1024])
buf618_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf620_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op620_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf618', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf603', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf620', get_index_2, getitem_1)
        return store_reduction
op620 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [RBLOCK])
        tmp5 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp5, 0))
        tmp8 = tl.full([1], 1024, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp3 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = triton_helpers.promote_to_tensor(tl.sum(tmp13, 0))
        tl.store(out_ptr0 + (x0), tmp15, None)


op622: SchedulerNode(ComputedBuffer)
op622.writes = [MemoryDep('buf622', c0, {c0: 4194304}, None)]
op622.unmet_dependencies = 
    [   MemoryDep('buf603', c0, {c0: 4194304}, None),
        MemoryDep('buf618', c0, {c0: 4194304}, None),
        MemoryDep('buf619', c0, {c0: 4096}, None),
        MemoryDep('buf620', c0, {c0: 4096}, None)]
op622.met_dependencies = 
    [   MemoryDep('arg354_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg355_1', c1, {c0: 4096, c1: 1024}, None)]
op622.outputs = [
    buf622: ComputedBuffer
    buf622.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
    buf622.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op623'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
    ]
]
op622.group.device = cuda:0
op622.group.iteration = (4194304, 1)
op622.sizes = ([4096, 1024], [])
buf618_layout = FixedLayout('cuda', torch.float32, size=[1, 4096, 1024], stride=[4194304, 1024, 1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf620_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf622_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
class op622_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf618', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf603', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf619', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf620', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg354_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('arg355_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf622', get_index_6, add_2, None)
        return store
op622 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 1024)
        x0 = xindex % 1024
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp6 = 1024.0
        tmp7 = tmp5 / tmp6
        tmp8 = 1e-12
        tmp9 = tmp7 + tmp8
        tmp10 = libdevice.rsqrt(tmp9)
        tmp11 = tmp4 * tmp10
        tmp13 = tmp11 * tmp12
        tmp15 = tmp13 + tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)


op623: ExternKernelSchedulerNode(ExternKernelOut)
op623.writes = [StarDep(name='buf623', mode=None)]
op623.unmet_dependencies = [StarDep(name='buf622', mode=None)]
op623.met_dependencies = [StarDep(name='arg358_1', mode=None)]
op623.outputs = [
    buf623: ExternKernelOut
    buf623.layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
    buf623.users = [NodeUser(node=SchedulerNode(name='op624'), can_inplace=True, is_weak=False)]
]
op623.node.kernel = extern_kernels.mm


op624: SchedulerNode(ComputedBuffer)
op624.writes = [MemoryDep('buf624', c0, {c0: 16777216}, None)]
op624.unmet_dependencies = [MemoryDep('buf623', c0, {c0: 16777216}, None)]
op624.met_dependencies = [MemoryDep('arg359_1', c1, {c0: 4096, c1: 4096}, None)]
op624.outputs = [
    buf624: ComputedBuffer
    buf624.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
    buf624.users = [NodeUser(node=ExternKernelSchedulerNode(name='op625'), can_inplace=False, is_weak=False)]
]
op624.group.device = cuda:0
op624.group.iteration = (16777216, 1)
op624.sizes = ([4096, 4096], [])
buf623_layout = FixedLayout('cuda', torch.float32, size=[4096, 4096], stride=[4096, 1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 4096], stride=[32768, 4096, 1])
class op624_loop_body:
    var_ranges = {z0: 4096, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf623', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg359_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf623', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg359_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf624', get_index_4, mul_2, None)
        return store
op624 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16777216
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 4096
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op625: ExternKernelSchedulerNode(ExternKernelOut)
op625.writes = [StarDep(name='buf625', mode=None)]
op625.unmet_dependencies = [StarDep(name='buf624', mode=None)]
op625.met_dependencies = [StarDep(name='arg360_1', mode=None)]
op625.outputs = [
    buf625: ExternKernelOut
    buf625.layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
    buf625.users = [
        NodeUser(node=SchedulerNode(name='op626'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
    ]
]
op625.node.kernel = extern_kernels.mm


op626: SchedulerNode(ComputedBuffer)
op626.writes = [MemoryDep('buf626', c0, {c0: 4096}, None)]
op626.unmet_dependencies = 
    [   MemoryDep('buf622', c0, {c0: 4194304}, None),
        MemoryDep('buf625', c0, {c0: 4194304}, None)]
op626.met_dependencies = [MemoryDep('arg361_1', c1, {c0: 4096, c1: 1024}, None)]
op626.outputs = [
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf626.users = [NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op626.group.device = cuda:0
op626.group.iteration = (4096, 1024)
op626.sizes = ([4096], [1024])
buf625_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf622_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op626_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg361_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf622', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf626', get_index_3, getitem)
        return store_reduction
op626 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)


op627: SchedulerNode(ComputedBuffer)
op627.writes = [MemoryDep('buf627', c0, {c0: 4096}, None)]
op627.unmet_dependencies = 
    [   MemoryDep('buf622', c0, {c0: 4194304}, None),
        MemoryDep('buf625', c0, {c0: 4194304}, None)]
op627.met_dependencies = [MemoryDep('arg361_1', c1, {c0: 4096, c1: 1024}, None)]
op627.outputs = [
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
    buf627.users = [NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False)]
]
op627.group.device = cuda:0
op627.group.iteration = (4096, 1024)
op627.sizes = ([4096], [1024])
buf625_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf622_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
class op627_loop_body:
    var_ranges = {z0: 4096, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg361_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf622', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf627', get_index_3, getitem_1)
        return store_reduction
op627 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[4096, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 4096
        XBLOCK: tl.constexpr = 1
        rnumel = 1024
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (1024*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (r1 + (1024*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp9 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
        tmp10 = tl.full([1], 1024, tl.int32)
        tmp11 = tmp10.to(tl.float32)
        tmp12 = tmp9 / tmp11
        tmp13 = tmp5 - tmp12
        tmp14 = tmp13 * tmp13
        tmp15 = tl.broadcast_to(tmp14, [RBLOCK])
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp17, None)


op629: SchedulerNode(ComputedBuffer)
op629.writes = [   MemoryDep('buf629', 1024*c0 + 524288*c1 + c2, {c0: 512, c1: 8, c2: 1024}, None)]
op629.unmet_dependencies = 
    [   MemoryDep('buf622', c0, {c0: 4194304}, None),
        MemoryDep('buf625', c0, {c0: 4194304}, None),
        MemoryDep('buf626', c0, {c0: 4096}, None),
        MemoryDep('buf627', c0, {c0: 4096}, None)]
op629.met_dependencies = 
    [   MemoryDep('arg356_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg357_1', c1, {c0: 4096, c1: 1024}, None),
        MemoryDep('arg361_1', c1, {c0: 4096, c1: 1024}, None)]
op629.outputs = [
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1024], stride=[524288, 1024, 1])
    buf629.users = [NodeUser(node=ExternKernelSchedulerNode(name='op630'), can_inplace=False, is_weak=False)]
]
op629.group.device = cuda:0
op629.group.iteration = (4194304, 1)
op629.sizes = ([512, 8, 1024], [])
buf625_layout = FixedLayout('cuda', torch.float32, size=[4096, 1024], stride=[1024, 1])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf622_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1024], stride=[8192, 1024, 1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
buf627_layout = FixedLayout('cuda', torch.float32, size=[512, 8, 1], stride=[8, 1, 4096])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf629_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1024], stride=[524288, 1024, 1])
class op629_loop_body:
    var_ranges = {z0: 512, z1: 8, z2: 1024}
    index0 = 8192*z0 + 1024*z1 + z2
    index1 = z2
    index2 = 8*z0 + z1
    index3 = 1024*z0 + 524288*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf625', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg361_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf622', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf626', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf627', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg356_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg357_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf629', get_index_7, add_3, None)
        return store
op629 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[4194304], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 4194304
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 1024
        x4 = (xindex // 1024)
        x1 = (xindex // 1024) % 8
        x2 = (xindex // 8192)
        tmp0 = tl.load(in_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x3), None)
        tmp5 = tl.load(in_ptr3 + (x4), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x4), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 1024.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x0 + (1024*x2) + (524288*x1)), tmp17, None)


op630: ExternKernelSchedulerNode(ExternKernelOut)
op630.writes = [StarDep(name='buf630', mode=None)]
op630.unmet_dependencies = [StarDep(name='buf629', mode=None)]
op630.met_dependencies = [StarDep(name='arg1_1', mode=None), StarDep(name='arg362_1', mode=None)]
op630.outputs = [
    buf630: ExternKernelOut
    buf630.layout = FixedLayout('cuda', torch.float32, size=[4096, 32000], stride=[32000, 1])
    buf630.users = [
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op632'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op630.node.kernel = extern_kernels.addmm


op631: SchedulerNode(ComputedBuffer)
op631.writes = [MemoryDep('buf631', c0, {c0: 4096}, None)]
op631.unmet_dependencies = [MemoryDep('buf630', c0, {c0: 131072000}, None)]
op631.met_dependencies = []
op631.outputs = [
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf631.users = [
        NodeUser(node=SchedulerNode(name='op632'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
]
op631.group.device = cuda:0
op631.group.iteration = (4096, 32000)
op631.sizes = ([4096], [32000])
buf630_layout = FixedLayout('cuda', torch.float32, size=[4096, 32000], stride=[32000, 1])
buf631_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
class op631_loop_body:
    var_ranges = {z0: 4096, z1: 32000}
    index0 = 32000*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf630', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf631', get_index_1, reduction)
        return store_reduction
op631 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 32768],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 32000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (32000*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)


op632: SchedulerNode(ComputedBuffer)
op632.writes = [MemoryDep('buf632', c0, {c0: 4096}, None)]
op632.unmet_dependencies = 
    [   MemoryDep('buf630', c0, {c0: 131072000}, None),
        MemoryDep('buf631', c0, {c0: 4096}, None)]
op632.met_dependencies = []
op632.outputs = [
    buf632: ComputedBuffer
    buf632.layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
    buf632.users = [NodeUser(node=SchedulerNode(name='op633'), can_inplace=False, is_weak=False)]
]
op632.group.device = cuda:0
op632.group.iteration = (4096, 32000)
op632.sizes = ([4096], [32000])
buf630_layout = FixedLayout('cuda', torch.float32, size=[4096, 32000], stride=[32000, 1])
buf631_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf632_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
class op632_loop_body:
    var_ranges = {z0: 4096, z1: 32000}
    index0 = 32000*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf630', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf631', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf632', get_index_2, reduction)
        return store_reduction
op632 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[4096, 32768],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 4096
        rnumel = 32000
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (32000*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op633: SchedulerNode(ComputedBuffer)
op633.writes = [MemoryDep('buf633', 0, {}, None)]
op633.unmet_dependencies = 
    [   MemoryDep('buf630', 32000*c0 + tmp8, {c0: 4096}, None),
        MemoryDep('buf631', c0, {c0: 4096}, None),
        MemoryDep('buf632', c0, {c0: 4096}, None)]
op633.met_dependencies = [MemoryDep('arg363_1', c0, {c0: 4096}, None)]
op633.outputs = [
    buf633: ComputedBuffer
    buf633.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf633.users = [NodeUser(node=SchedulerNode(name='op635'), can_inplace=True, is_weak=False)]
]
op633.group.device = cuda:0
op633.group.iteration = (1, 4096)
op633.sizes = ([], [4096])
arg363_1_layout = FixedLayout('cuda', torch.int64, size=[8, 512], stride=[512, 1])
buf630_layout = FixedLayout('cuda', torch.float32, size=[4096, 32000], stride=[32000, 1])
buf631_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf632_layout = FixedLayout('cuda', torch.float32, size=[4096, 1], stride=[1, 4096])
buf633_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op633_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    index1 = indirect0 + 32000*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg363_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg363_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg363_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf630', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf631', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf632', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf633', get_index_6, reduction)
        return store_reduction
op633 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 32000, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 32000)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 32000")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (32000*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp20, None)


op634: SchedulerNode(ComputedBuffer)
op634.writes = [MemoryDep('buf634', 0, {}, None)]
op634.unmet_dependencies = []
op634.met_dependencies = [MemoryDep('arg363_1', c0, {c0: 4096}, None)]
op634.outputs = [
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf634.users = [NodeUser(node=SchedulerNode(name='op635'), can_inplace=True, is_weak=False)]
]
op634.group.device = cuda:0
op634.group.iteration = (1, 4096)
op634.sizes = ([], [4096])
arg363_1_layout = FixedLayout('cuda', torch.int64, size=[8, 512], stride=[512, 1])
buf634_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op634_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg363_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf634', get_index_1, reduction)
        return store_reduction
op634 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 4096],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 4096
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp5, None)


op635: SchedulerNode(ComputedBuffer)
op635.writes = [MemoryDep('buf635', 0, {}, None)]
op635.unmet_dependencies = [MemoryDep('buf633', 0, {}, None), MemoryDep('buf634', 0, {}, None)]
op635.met_dependencies = []
op635.outputs = [
    buf635: ComputedBuffer
    buf635.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf635.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op635.group.device = cuda:0
op635.group.iteration = (1, 1)
op635.sizes = ([], [])
buf633_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf634_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf635_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op635_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf634', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf635', get_index_2, truediv, None)
        return store
op635 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)



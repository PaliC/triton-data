op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op1.unmet_dependencies = [   MemoryDep('buf0', 150528*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 768}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 151296}, None),
        MemoryDep('arg4_1', c1, {c0: 1576, c1: 768}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (9456, 128)
op1.sizes = ([8, 197, 6], [128])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 768], stride=[151296, 768, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 128}
    index0 = z1
    index1 = 128*z2 + z3
    index2 = 150528*z0 + 25088*z2 + 196*z3 + ModularIndexing(I, 1, 196)
    index3 = 768*z1 + 128*z2 + z3
    index4 = 1184*z0 + 6*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg3_1', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf1', get_index_5, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op2.unmet_dependencies = [   MemoryDep('buf0', 150528*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 768}, None)]
op2.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 151296}, None),
        MemoryDep('arg4_1', c1, {c0: 1576, c1: 768}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (9456, 128)
op2.sizes = ([8, 197, 6], [128])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 768], stride=[151296, 768, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
class op2_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 128}
    index0 = z1
    index1 = 128*z2 + z3
    index2 = 150528*z0 + 25088*z2 + 196*z3 + ModularIndexing(I, 1, 196)
    index3 = 768*z1 + 128*z2 + z3
    index4 = 1184*z0 + 6*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg3_1', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf2', get_index_5, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op3.unmet_dependencies = [   MemoryDep('buf0', 150528*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 768}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 151296}, None),
        MemoryDep('arg4_1', c1, {c0: 1576, c1: 768}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (9456, 128)
op3.sizes = ([8, 197, 6], [128])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 768], stride=[151296, 768, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 128}
    index0 = z1
    index1 = 128*z2 + z3
    index2 = 150528*z0 + 25088*z2 + 196*z3 + ModularIndexing(I, 1, 196)
    index3 = 768*z1 + 128*z2 + z3
    index4 = 1184*z0 + 6*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg3_1', get_index_4)
        add = ops.add(where, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_5 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf3', get_index_5, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 1576}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf1', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf2', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf3', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (1576, 6)
op4.sizes = ([8, 197], [6])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6}
    index0 = 1184*z0 + 6*z1 + z2
    index1 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_3, getitem)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 1576}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf2', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf3', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (1576, 6)
op5.sizes = ([8, 197], [6])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1, 6], stride=[1184, 6, 9472, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op5_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6}
    index0 = 1184*z0 + 6*z1 + z2
    index1 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_3, getitem_1)
        return store_reduction


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 1210368}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf0', 150528*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 768}, None),
        MemoryDep('buf4', c0, {c0: 1576}, None),
        MemoryDep('buf5', c0, {c0: 1576}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 151296}, None),
        MemoryDep('arg4_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg5_1', c1, {c0: 1576, c1: 768}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (1210368, 1)
op7.sizes = ([8, 197, 768], [])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 768], stride=[151296, 768, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 768}
    index0 = z1
    index1 = z2
    index2 = 150528*z0 + 196*z2 + ModularIndexing(I, 1, 196)
    index3 = 768*z1 + z2
    index4 = 197*z0 + z1
    index5 = 151296*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg3_1', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf4', get_index_5)
        sub = ops.sub(add, load_1)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('buf5', get_index_6)
        constant_4 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_7 = self.get_index('index1')
        load_3 = ops.load('arg5_1', get_index_7)
        mul_1 = ops.mul(mul, load_3)
        get_index_8 = self.get_index('index5')
        store = ops.store('buf7', get_index_8, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 1210368}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 1210368}, None)]
op8.met_dependencies = [MemoryDep('arg6_1', c1, {c0: 1576, c1: 768}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (1210368, 1)
op8.sizes = ([1576, 768], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op8_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf8', get_index_2, add, None)
        return store


op9: ExternKernelSchedulerNode(ExternKernelOut)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = [StarDep(name='arg7_1', mode=None), StarDep(name='arg8_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelOut
    buf9.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.node.kernel = extern_kernels.addmm


op10: ExternKernelSchedulerNode(FallbackKernel)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: FallbackKernel
    buf10.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf10.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op10.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op11: ExternKernelSchedulerNode(MultiOutput)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: MultiOutput
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = None


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op15.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
]
op15.node.kernel = extern_kernels.mm


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 1210368}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf0', 150528*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 197, c2: 768}, None),
        MemoryDep('buf15', c0, {c0: 1210368}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg2_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 151296}, None),
        MemoryDep('arg4_1', c1, {c0: 1576, c1: 768}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (1210368, 1)
op16.sizes = ([8, 197, 768], [])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 768], stride=[151296, 768, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op16_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 768}
    index0 = z1
    index1 = z2
    index2 = 150528*z0 + 196*z2 + ModularIndexing(I, 1, 196)
    index3 = 768*z1 + z2
    index4 = 151296*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        load = ops.load('arg3_1', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf15', get_index_5)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('arg10_1', get_index_6)
        add_1 = ops.add(load_1, load_2)
        add_2 = ops.add(add, add_1)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf16', get_index_7, add_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 1576}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 1210368}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf17.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (1576, 768)
op17.sizes = ([1576], [768])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op17_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf17', get_index_1, getitem)
        return store_reduction


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 1576}, None)]
op18.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 1210368}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf18.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (1576, 768)
op18.sizes = ([1576], [768])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op18_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, getitem_1)
        return store_reduction


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 1210368}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1210368}, None),
        MemoryDep('buf17', c0, {c0: 1576}, None),
        MemoryDep('buf18', c0, {c0: 1576}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg12_1', c1, {c0: 1576, c1: 768}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (1210368, 1)
op20.sizes = ([1576, 768], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op20_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf18', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg11_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg12_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf20', get_index_5, add_1, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelOut)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelOut
    buf21.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.mm


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 4841472}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 4841472}, None)]
op22.met_dependencies = [MemoryDep('arg14_1', c1, {c0: 1576, c1: 3072}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (4841472, 1)
op22.sizes = ([1576, 3072], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op22_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf21', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf22', get_index_4, mul_2, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
    ]
]
op23.node.kernel = extern_kernels.mm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 1576}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1210368}, None),
        MemoryDep('buf23', c0, {c0: 1210368}, None)]
op24.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 1576, c1: 768}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf24.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (1576, 768)
op24.sizes = ([1576], [768])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op24_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf24', get_index_3, getitem)
        return store_reduction


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 1576}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1210368}, None),
        MemoryDep('buf23', c0, {c0: 1210368}, None)]
op25.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 1576, c1: 768}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf25.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (1576, 768)
op25.sizes = ([1576], [768])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op25_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem_1)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 1210368}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1210368}, None),
        MemoryDep('buf23', c0, {c0: 1210368}, None),
        MemoryDep('buf24', c0, {c0: 1576}, None),
        MemoryDep('buf25', c0, {c0: 1576}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg17_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg18_1', c1, {c0: 1576, c1: 768}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (1210368, 1)
op27.sizes = ([1576, 768], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op27_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf24', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf25', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg17_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg18_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf27', get_index_7, add_3, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelOut)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg19_1', mode=None), StarDep(name='arg20_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelOut
    buf28.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = extern_kernels.addmm


op29: ExternKernelSchedulerNode(FallbackKernel)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: FallbackKernel
    buf29.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
]
op29.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op30: ExternKernelSchedulerNode(MultiOutput)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: MultiOutput
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = None


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op34.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op34.node.kernel = extern_kernels.mm


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1210368}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1210368}, None),
        MemoryDep('buf23', c0, {c0: 1210368}, None),
        MemoryDep('buf34', c0, {c0: 1210368}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg22_1', c1, {c0: 1576, c1: 768}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
    ]
]
op35.group.device = cuda:0
op35.group.iteration = (1210368, 1)
op35.sizes = ([1576, 768], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op35_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf34', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg22_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf35', get_index_5, add_3, None)
        return store


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 1576}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 1210368}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf36.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (1576, 768)
op36.sizes = ([1576], [768])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op36_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf36', get_index_1, getitem)
        return store_reduction


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 1576}, None)]
op37.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 1210368}, None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf37.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (1576, 768)
op37.sizes = ([1576], [768])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op37_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf37', get_index_1, getitem_1)
        return store_reduction


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 1210368}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1210368}, None),
        MemoryDep('buf36', c0, {c0: 1576}, None),
        MemoryDep('buf37', c0, {c0: 1576}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg24_1', c1, {c0: 1576, c1: 768}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (1210368, 1)
op39.sizes = ([1576, 768], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op39_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf37', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg23_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg24_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf39', get_index_5, add_1, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.node.kernel = extern_kernels.mm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 4841472}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 4841472}, None)]
op41.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 1576, c1: 3072}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (4841472, 1)
op41.sizes = ([1576, 3072], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op41_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf40', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg26_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf41', get_index_4, mul_2, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelOut)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelOut
    buf42.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
    ]
]
op42.node.kernel = extern_kernels.mm


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 1576}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1210368}, None),
        MemoryDep('buf42', c0, {c0: 1210368}, None)]
op43.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 1576, c1: 768}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (1576, 768)
op43.sizes = ([1576], [768])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op43_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf43', get_index_3, getitem)
        return store_reduction


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 1576}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1210368}, None),
        MemoryDep('buf42', c0, {c0: 1210368}, None)]
op44.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 1576, c1: 768}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (1576, 768)
op44.sizes = ([1576], [768])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op44_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf44', get_index_3, getitem_1)
        return store_reduction


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 1210368}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1210368}, None),
        MemoryDep('buf42', c0, {c0: 1210368}, None),
        MemoryDep('buf43', c0, {c0: 1576}, None),
        MemoryDep('buf44', c0, {c0: 1576}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg28_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg29_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg30_1', c1, {c0: 1576, c1: 768}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (1210368, 1)
op46.sizes = ([1576, 768], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op46_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf43', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf44', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg29_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg30_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf46', get_index_7, add_3, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg31_1', mode=None), StarDep(name='arg32_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.node.kernel = extern_kernels.addmm


op48: ExternKernelSchedulerNode(FallbackKernel)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: FallbackKernel
    buf48.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf48.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op48.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op49: ExternKernelSchedulerNode(MultiOutput)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: MultiOutput
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op49.node.kernel = None


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op53.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.mm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 1210368}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1210368}, None),
        MemoryDep('buf42', c0, {c0: 1210368}, None),
        MemoryDep('buf53', c0, {c0: 1210368}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg28_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg34_1', c1, {c0: 1576, c1: 768}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (1210368, 1)
op54.sizes = ([1576, 768], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op54_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf53', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg34_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf54', get_index_5, add_3, None)
        return store


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 1576}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 1210368}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf55.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (1576, 768)
op55.sizes = ([1576], [768])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op55_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf55', get_index_1, getitem)
        return store_reduction


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 1576}, None)]
op56.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 1210368}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf56.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (1576, 768)
op56.sizes = ([1576], [768])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op56_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf56', get_index_1, getitem_1)
        return store_reduction


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 1210368}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 1210368}, None),
        MemoryDep('buf55', c0, {c0: 1576}, None),
        MemoryDep('buf56', c0, {c0: 1576}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg36_1', c1, {c0: 1576, c1: 768}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (1210368, 1)
op58.sizes = ([1576, 768], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op58_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf55', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf56', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg35_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg36_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf58', get_index_5, add_1, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.mm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 4841472}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 4841472}, None)]
op60.met_dependencies = [MemoryDep('arg38_1', c1, {c0: 1576, c1: 3072}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (4841472, 1)
op60.sizes = ([1576, 3072], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op60_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf59', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg38_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf60', get_index_4, mul_2, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf61.users = [
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
    ]
]
op61.node.kernel = extern_kernels.mm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1576}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 1210368}, None),
        MemoryDep('buf61', c0, {c0: 1210368}, None)]
op62.met_dependencies = [MemoryDep('arg40_1', c1, {c0: 1576, c1: 768}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf62.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (1576, 768)
op62.sizes = ([1576], [768])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op62_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg40_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf62', get_index_3, getitem)
        return store_reduction


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 1576}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 1210368}, None),
        MemoryDep('buf61', c0, {c0: 1210368}, None)]
op63.met_dependencies = [MemoryDep('arg40_1', c1, {c0: 1576, c1: 768}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf63.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (1576, 768)
op63.sizes = ([1576], [768])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op63_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg40_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf63', get_index_3, getitem_1)
        return store_reduction


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 1210368}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 1210368}, None),
        MemoryDep('buf61', c0, {c0: 1210368}, None),
        MemoryDep('buf62', c0, {c0: 1576}, None),
        MemoryDep('buf63', c0, {c0: 1576}, None)]
op65.met_dependencies = 
    [   MemoryDep('arg40_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg41_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg42_1', c1, {c0: 1576, c1: 768}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (1210368, 1)
op65.sizes = ([1576, 768], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op65_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg40_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf62', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf63', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg41_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg42_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf65', get_index_7, add_3, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg43_1', mode=None), StarDep(name='arg44_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.node.kernel = extern_kernels.addmm


op67: ExternKernelSchedulerNode(FallbackKernel)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: FallbackKernel
    buf67.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf67.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
    ]
]
op67.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op68: ExternKernelSchedulerNode(MultiOutput)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: MultiOutput
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op68.node.kernel = None


op72: ExternKernelSchedulerNode(ExternKernelOut)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op72.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelOut
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.mm


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 1210368}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 1210368}, None),
        MemoryDep('buf61', c0, {c0: 1210368}, None),
        MemoryDep('buf72', c0, {c0: 1210368}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg40_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg46_1', c1, {c0: 1576, c1: 768}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (1210368, 1)
op73.sizes = ([1576, 768], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op73_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg40_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf72', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg46_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, add_3, None)
        return store


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 1576}, None)]
op74.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 1210368}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (1576, 768)
op74.sizes = ([1576], [768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op74_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf74', get_index_1, getitem)
        return store_reduction


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 1576}, None)]
op75.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 1210368}, None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (1576, 768)
op75.sizes = ([1576], [768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op75_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf75', get_index_1, getitem_1)
        return store_reduction


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 1210368}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 1210368}, None),
        MemoryDep('buf74', c0, {c0: 1576}, None),
        MemoryDep('buf75', c0, {c0: 1576}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg48_1', c1, {c0: 1576, c1: 768}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (1210368, 1)
op77.sizes = ([1576, 768], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op77_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf74', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf75', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg47_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg48_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf77', get_index_5, add_1, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 4841472}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 4841472}, None)]
op79.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 1576, c1: 3072}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (4841472, 1)
op79.sizes = ([1576, 3072], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op79_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf78', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg50_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf79', get_index_4, mul_2, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf80.users = [
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 1576}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 1210368}, None),
        MemoryDep('buf80', c0, {c0: 1210368}, None)]
op81.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 1576, c1: 768}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf81.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (1576, 768)
op81.sizes = ([1576], [768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op81_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg52_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf81', get_index_3, getitem)
        return store_reduction


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 1576}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 1210368}, None),
        MemoryDep('buf80', c0, {c0: 1210368}, None)]
op82.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 1576, c1: 768}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf82.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (1576, 768)
op82.sizes = ([1576], [768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op82_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg52_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf82', get_index_3, getitem_1)
        return store_reduction


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 1210368}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 1210368}, None),
        MemoryDep('buf80', c0, {c0: 1210368}, None),
        MemoryDep('buf81', c0, {c0: 1576}, None),
        MemoryDep('buf82', c0, {c0: 1576}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg53_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg54_1', c1, {c0: 1576, c1: 768}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (1210368, 1)
op84.sizes = ([1576, 768], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op84_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg52_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf81', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf82', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg53_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg54_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf84', get_index_7, add_3, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg55_1', mode=None), StarDep(name='arg56_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = extern_kernels.addmm


op86: ExternKernelSchedulerNode(FallbackKernel)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: FallbackKernel
    buf86.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
    ]
]
op86.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op87: ExternKernelSchedulerNode(MultiOutput)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: MultiOutput
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op87.node.kernel = None


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op91.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 1210368}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 1210368}, None),
        MemoryDep('buf80', c0, {c0: 1210368}, None),
        MemoryDep('buf91', c0, {c0: 1210368}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg58_1', c1, {c0: 1576, c1: 768}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (1210368, 1)
op92.sizes = ([1576, 768], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op92_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf80', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg52_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf91', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg58_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf92', get_index_5, add_3, None)
        return store


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 1576}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 1210368}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (1576, 768)
op93.sizes = ([1576], [768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op93_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
        return store_reduction


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 1576}, None)]
op94.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 1210368}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (1576, 768)
op94.sizes = ([1576], [768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op94_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1210368}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 1210368}, None),
        MemoryDep('buf93', c0, {c0: 1576}, None),
        MemoryDep('buf94', c0, {c0: 1576}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg60_1', c1, {c0: 1576, c1: 768}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (1210368, 1)
op96.sizes = ([1576, 768], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op96_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg59_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg60_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelOut)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelOut
    buf97.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 4841472}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 4841472}, None)]
op98.met_dependencies = [MemoryDep('arg62_1', c1, {c0: 1576, c1: 3072}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (4841472, 1)
op98.sizes = ([1576, 3072], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op98_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg62_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf98', get_index_4, mul_2, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op99.node.kernel = extern_kernels.mm


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 1576}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 1210368}, None),
        MemoryDep('buf99', c0, {c0: 1210368}, None)]
op100.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 1576, c1: 768}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf100.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (1576, 768)
op100.sizes = ([1576], [768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op100_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_3, getitem)
        return store_reduction


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 1576}, None)]
op101.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 1210368}, None),
        MemoryDep('buf99', c0, {c0: 1210368}, None)]
op101.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 1576, c1: 768}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf101.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (1576, 768)
op101.sizes = ([1576], [768])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op101_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_3, getitem_1)
        return store_reduction


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 1210368}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 1576}, None),
        MemoryDep('buf101', c0, {c0: 1576}, None),
        MemoryDep('buf92', c0, {c0: 1210368}, None),
        MemoryDep('buf99', c0, {c0: 1210368}, None)]
op103.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg65_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg66_1', c1, {c0: 1576, c1: 768}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (1210368, 1)
op103.sizes = ([1576, 768], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op103_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf101', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg65_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg66_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf103', get_index_7, add_3, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg67_1', mode=None), StarDep(name='arg68_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.addmm


op105: ExternKernelSchedulerNode(FallbackKernel)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: FallbackKernel
    buf105.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf105.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
    ]
]
op105.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op106: ExternKernelSchedulerNode(MultiOutput)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: MultiOutput
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = None


op110: ExternKernelSchedulerNode(ExternKernelOut)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op110.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelOut
    buf110.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False)]
]
op110.node.kernel = extern_kernels.mm


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 1210368}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 1210368}, None),
        MemoryDep('buf92', c0, {c0: 1210368}, None),
        MemoryDep('buf99', c0, {c0: 1210368}, None)]
op111.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg70_1', c1, {c0: 1576, c1: 768}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf111.users = [
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False),
    ]
]
op111.group.device = cuda:0
op111.group.iteration = (1210368, 1)
op111.sizes = ([1576, 768], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op111_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf99', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg64_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf110', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg70_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf111', get_index_5, add_3, None)
        return store


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 1576}, None)]
op112.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 1210368}, None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf112.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (1576, 768)
op112.sizes = ([1576], [768])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op112_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf112', get_index_1, getitem)
        return store_reduction


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 1576}, None)]
op113.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 1210368}, None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf113.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (1576, 768)
op113.sizes = ([1576], [768])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op113_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf113', get_index_1, getitem_1)
        return store_reduction


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 1210368}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 1210368}, None),
        MemoryDep('buf112', c0, {c0: 1576}, None),
        MemoryDep('buf113', c0, {c0: 1576}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg72_1', c1, {c0: 1576, c1: 768}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (1210368, 1)
op115.sizes = ([1576, 768], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op115_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf112', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf113', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg71_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg72_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf115', get_index_5, add_1, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 4841472}, None)]
op117.unmet_dependencies = [MemoryDep('buf116', c0, {c0: 4841472}, None)]
op117.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 1576, c1: 3072}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (4841472, 1)
op117.sizes = ([1576, 3072], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op117_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf117', get_index_4, mul_2, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelOut)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelOut
    buf118.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False),
    ]
]
op118.node.kernel = extern_kernels.mm


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 1576}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 1210368}, None),
        MemoryDep('buf118', c0, {c0: 1210368}, None)]
op119.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 1576, c1: 768}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (1576, 768)
op119.sizes = ([1576], [768])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op119_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf119', get_index_3, getitem)
        return store_reduction


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 1576}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 1210368}, None),
        MemoryDep('buf118', c0, {c0: 1210368}, None)]
op120.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 1576, c1: 768}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (1576, 768)
op120.sizes = ([1576], [768])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op120_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem_1)
        return store_reduction


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 1210368}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 1210368}, None),
        MemoryDep('buf118', c0, {c0: 1210368}, None),
        MemoryDep('buf119', c0, {c0: 1576}, None),
        MemoryDep('buf120', c0, {c0: 1576}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg77_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg78_1', c1, {c0: 1576, c1: 768}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (1210368, 1)
op122.sizes = ([1576, 768], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op122_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf119', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf120', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg77_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg78_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf122', get_index_7, add_3, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg79_1', mode=None), StarDep(name='arg80_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.node.kernel = extern_kernels.addmm


op124: ExternKernelSchedulerNode(FallbackKernel)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: FallbackKernel
    buf124.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf124.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op124.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op125: ExternKernelSchedulerNode(MultiOutput)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: MultiOutput
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op125.node.kernel = None


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op129.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
]
op129.node.kernel = extern_kernels.mm


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 1210368}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 1210368}, None),
        MemoryDep('buf118', c0, {c0: 1210368}, None),
        MemoryDep('buf129', c0, {c0: 1210368}, None)]
op130.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg82_1', c1, {c0: 1576, c1: 768}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op130.group.device = cuda:0
op130.group.iteration = (1210368, 1)
op130.sizes = ([1576, 768], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op130_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf129', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg82_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf130', get_index_5, add_3, None)
        return store


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 1576}, None)]
op131.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 1210368}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf131.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (1576, 768)
op131.sizes = ([1576], [768])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op131_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf131', get_index_1, getitem)
        return store_reduction


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 1576}, None)]
op132.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 1210368}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf132.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (1576, 768)
op132.sizes = ([1576], [768])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op132_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf132', get_index_1, getitem_1)
        return store_reduction


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 1210368}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf130', c0, {c0: 1210368}, None),
        MemoryDep('buf131', c0, {c0: 1576}, None),
        MemoryDep('buf132', c0, {c0: 1576}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg84_1', c1, {c0: 1576, c1: 768}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (1210368, 1)
op134.sizes = ([1576, 768], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op134_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf131', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf132', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg83_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg84_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf134', get_index_5, add_1, None)
        return store


op135: ExternKernelSchedulerNode(ExternKernelOut)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf134', mode=None)]
op135.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op135.outputs = [
    buf135: ExternKernelOut
    buf135.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf135.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False)]
]
op135.node.kernel = extern_kernels.mm


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 4841472}, None)]
op136.unmet_dependencies = [MemoryDep('buf135', c0, {c0: 4841472}, None)]
op136.met_dependencies = [MemoryDep('arg86_1', c1, {c0: 1576, c1: 3072}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (4841472, 1)
op136.sizes = ([1576, 3072], [])
buf135_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op136_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf135', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg86_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf136', get_index_4, mul_2, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op137.node.kernel = extern_kernels.mm


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 1576}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf130', c0, {c0: 1210368}, None),
        MemoryDep('buf137', c0, {c0: 1210368}, None)]
op138.met_dependencies = [MemoryDep('arg88_1', c1, {c0: 1576, c1: 768}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf138.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (1576, 768)
op138.sizes = ([1576], [768])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op138_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg88_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf138', get_index_3, getitem)
        return store_reduction


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 1576}, None)]
op139.unmet_dependencies = 
    [   MemoryDep('buf130', c0, {c0: 1210368}, None),
        MemoryDep('buf137', c0, {c0: 1210368}, None)]
op139.met_dependencies = [MemoryDep('arg88_1', c1, {c0: 1576, c1: 768}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf139.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (1576, 768)
op139.sizes = ([1576], [768])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op139_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg88_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf139', get_index_3, getitem_1)
        return store_reduction


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 1210368}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf130', c0, {c0: 1210368}, None),
        MemoryDep('buf137', c0, {c0: 1210368}, None),
        MemoryDep('buf138', c0, {c0: 1576}, None),
        MemoryDep('buf139', c0, {c0: 1576}, None)]
op141.met_dependencies = 
    [   MemoryDep('arg88_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg89_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg90_1', c1, {c0: 1576, c1: 768}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (1210368, 1)
op141.sizes = ([1576, 768], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op141_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg88_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf138', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf139', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg89_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg90_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf141', get_index_7, add_3, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg91_1', mode=None), StarDep(name='arg92_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.node.kernel = extern_kernels.addmm


op143: ExternKernelSchedulerNode(FallbackKernel)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: FallbackKernel
    buf143.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf143.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False),
    ]
]
op143.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op144: ExternKernelSchedulerNode(MultiOutput)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: MultiOutput
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op144.node.kernel = None


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op148.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False)]
]
op148.node.kernel = extern_kernels.mm


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 1210368}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf130', c0, {c0: 1210368}, None),
        MemoryDep('buf137', c0, {c0: 1210368}, None),
        MemoryDep('buf148', c0, {c0: 1210368}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg88_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg94_1', c1, {c0: 1576, c1: 768}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (1210368, 1)
op149.sizes = ([1576, 768], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op149_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg88_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf148', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg94_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf149', get_index_5, add_3, None)
        return store


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 1576}, None)]
op150.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 1210368}, None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (1576, 768)
op150.sizes = ([1576], [768])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op150_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf150', get_index_1, getitem)
        return store_reduction


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 1576}, None)]
op151.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 1210368}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (1576, 768)
op151.sizes = ([1576], [768])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op151_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf151', get_index_1, getitem_1)
        return store_reduction


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 1210368}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 1210368}, None),
        MemoryDep('buf150', c0, {c0: 1576}, None),
        MemoryDep('buf151', c0, {c0: 1576}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg96_1', c1, {c0: 1576, c1: 768}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (1210368, 1)
op153.sizes = ([1576, 768], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op153_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf150', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf151', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg95_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg96_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf153', get_index_5, add_1, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 4841472}, None)]
op155.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 4841472}, None)]
op155.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 1576, c1: 3072}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (4841472, 1)
op155.sizes = ([1576, 3072], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op155_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf154', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg98_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf155', get_index_4, mul_2, None)
        return store


op156: ExternKernelSchedulerNode(ExternKernelOut)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelOut
    buf156.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf156.users = [
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
    ]
]
op156.node.kernel = extern_kernels.mm


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 1576}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 1210368}, None),
        MemoryDep('buf156', c0, {c0: 1210368}, None)]
op157.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 1576, c1: 768}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf157.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (1576, 768)
op157.sizes = ([1576], [768])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op157_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg100_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf157', get_index_3, getitem)
        return store_reduction


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 1576}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 1210368}, None),
        MemoryDep('buf156', c0, {c0: 1210368}, None)]
op158.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 1576, c1: 768}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf158.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (1576, 768)
op158.sizes = ([1576], [768])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op158_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg100_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf158', get_index_3, getitem_1)
        return store_reduction


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 1210368}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 1210368}, None),
        MemoryDep('buf156', c0, {c0: 1210368}, None),
        MemoryDep('buf157', c0, {c0: 1576}, None),
        MemoryDep('buf158', c0, {c0: 1576}, None)]
op160.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg101_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg102_1', c1, {c0: 1576, c1: 768}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (1210368, 1)
op160.sizes = ([1576, 768], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op160_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg100_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf157', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf158', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg101_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg102_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf160', get_index_7, add_3, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op161.met_dependencies = [StarDep(name='arg103_1', mode=None), StarDep(name='arg104_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.node.kernel = extern_kernels.addmm


op162: ExternKernelSchedulerNode(FallbackKernel)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf161', mode=None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: FallbackKernel
    buf162.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf162.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
    ]
]
op162.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op163: ExternKernelSchedulerNode(MultiOutput)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: MultiOutput
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op163.node.kernel = None


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op167.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False)]
]
op167.node.kernel = extern_kernels.mm


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 1210368}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf149', c0, {c0: 1210368}, None),
        MemoryDep('buf156', c0, {c0: 1210368}, None),
        MemoryDep('buf167', c0, {c0: 1210368}, None)]
op168.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg106_1', c1, {c0: 1576, c1: 768}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf168.users = [
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op168.group.device = cuda:0
op168.group.iteration = (1210368, 1)
op168.sizes = ([1576, 768], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op168_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf156', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg100_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf167', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg106_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf168', get_index_5, add_3, None)
        return store


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 1576}, None)]
op169.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 1210368}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf169.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (1576, 768)
op169.sizes = ([1576], [768])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op169_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_1, getitem)
        return store_reduction


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 1576}, None)]
op170.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 1210368}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf170.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (1576, 768)
op170.sizes = ([1576], [768])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op170_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf170', get_index_1, getitem_1)
        return store_reduction


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 1210368}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 1210368}, None),
        MemoryDep('buf169', c0, {c0: 1576}, None),
        MemoryDep('buf170', c0, {c0: 1576}, None)]
op172.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg108_1', c1, {c0: 1576, c1: 768}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (1210368, 1)
op172.sizes = ([1576, 768], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op172_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf169', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf170', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg107_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg108_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf172', get_index_5, add_1, None)
        return store


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op173.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.mm


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 4841472}, None)]
op174.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 4841472}, None)]
op174.met_dependencies = [MemoryDep('arg110_1', c1, {c0: 1576, c1: 3072}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (4841472, 1)
op174.sizes = ([1576, 3072], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op174_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg110_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf174', get_index_4, mul_2, None)
        return store


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op175.node.kernel = extern_kernels.mm


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 1576}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 1210368}, None),
        MemoryDep('buf175', c0, {c0: 1210368}, None)]
op176.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 1576, c1: 768}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf176.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (1576, 768)
op176.sizes = ([1576], [768])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op176_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf176', get_index_3, getitem)
        return store_reduction


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 1576}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 1210368}, None),
        MemoryDep('buf175', c0, {c0: 1210368}, None)]
op177.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 1576, c1: 768}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf177.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (1576, 768)
op177.sizes = ([1576], [768])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op177_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf177', get_index_3, getitem_1)
        return store_reduction


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 1210368}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 1210368}, None),
        MemoryDep('buf175', c0, {c0: 1210368}, None),
        MemoryDep('buf176', c0, {c0: 1576}, None),
        MemoryDep('buf177', c0, {c0: 1576}, None)]
op179.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg113_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg114_1', c1, {c0: 1576, c1: 768}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (1210368, 1)
op179.sizes = ([1576, 768], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op179_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf176', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf177', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg113_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg114_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf179', get_index_7, add_3, None)
        return store


op180: ExternKernelSchedulerNode(ExternKernelOut)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg115_1', mode=None), StarDep(name='arg116_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelOut
    buf180.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.node.kernel = extern_kernels.addmm


op181: ExternKernelSchedulerNode(FallbackKernel)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: FallbackKernel
    buf181.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf181.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
    ]
]
op181.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op182: ExternKernelSchedulerNode(MultiOutput)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf181', mode=None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: MultiOutput
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op182.node.kernel = None


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op186.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.node.kernel = extern_kernels.mm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 1210368}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 1210368}, None),
        MemoryDep('buf175', c0, {c0: 1210368}, None),
        MemoryDep('buf186', c0, {c0: 1210368}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg118_1', c1, {c0: 1576, c1: 768}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (1210368, 1)
op187.sizes = ([1576, 768], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op187_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf186', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg118_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf187', get_index_5, add_3, None)
        return store


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 1576}, None)]
op188.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 1210368}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (1576, 768)
op188.sizes = ([1576], [768])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op188_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf188', get_index_1, getitem)
        return store_reduction


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 1576}, None)]
op189.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 1210368}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf189.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (1576, 768)
op189.sizes = ([1576], [768])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op189_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf189', get_index_1, getitem_1)
        return store_reduction


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 1210368}, None)]
op191.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 1210368}, None),
        MemoryDep('buf188', c0, {c0: 1576}, None),
        MemoryDep('buf189', c0, {c0: 1576}, None)]
op191.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg120_1', c1, {c0: 1576, c1: 768}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (1210368, 1)
op191.sizes = ([1576, 768], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op191_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf188', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf189', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg119_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg120_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf191', get_index_5, add_1, None)
        return store


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
]
op192.node.kernel = extern_kernels.mm


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 4841472}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 4841472}, None)]
op193.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 1576, c1: 3072}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (4841472, 1)
op193.sizes = ([1576, 3072], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op193_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg122_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf193', get_index_4, mul_2, None)
        return store


op194: ExternKernelSchedulerNode(ExternKernelOut)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelOut
    buf194.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
    ]
]
op194.node.kernel = extern_kernels.mm


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 1576}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 1210368}, None),
        MemoryDep('buf194', c0, {c0: 1210368}, None)]
op195.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 1576, c1: 768}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf195.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (1576, 768)
op195.sizes = ([1576], [768])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op195_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_3, getitem)
        return store_reduction


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 1576}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 1210368}, None),
        MemoryDep('buf194', c0, {c0: 1210368}, None)]
op196.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 1576, c1: 768}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf196.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (1576, 768)
op196.sizes = ([1576], [768])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op196_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf196', get_index_3, getitem_1)
        return store_reduction


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 1210368}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 1210368}, None),
        MemoryDep('buf194', c0, {c0: 1210368}, None),
        MemoryDep('buf195', c0, {c0: 1576}, None),
        MemoryDep('buf196', c0, {c0: 1576}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg125_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg126_1', c1, {c0: 1576, c1: 768}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (1210368, 1)
op198.sizes = ([1576, 768], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op198_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf195', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf196', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg125_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg126_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf198', get_index_7, add_3, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg127_1', mode=None), StarDep(name='arg128_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.node.kernel = extern_kernels.addmm


op200: ExternKernelSchedulerNode(FallbackKernel)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: FallbackKernel
    buf200.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf200.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
]
op200.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op201: ExternKernelSchedulerNode(MultiOutput)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: MultiOutput
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op201.node.kernel = None


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op205.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
]
op205.node.kernel = extern_kernels.mm


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 1210368}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 1210368}, None),
        MemoryDep('buf194', c0, {c0: 1210368}, None),
        MemoryDep('buf205', c0, {c0: 1210368}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg130_1', c1, {c0: 1576, c1: 768}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf206.users = [
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
    ]
]
op206.group.device = cuda:0
op206.group.iteration = (1210368, 1)
op206.sizes = ([1576, 768], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op206_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg124_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf205', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg130_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf206', get_index_5, add_3, None)
        return store


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 1576}, None)]
op207.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 1210368}, None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf207.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (1576, 768)
op207.sizes = ([1576], [768])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op207_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf207', get_index_1, getitem)
        return store_reduction


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 1576}, None)]
op208.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 1210368}, None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf208.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (1576, 768)
op208.sizes = ([1576], [768])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op208_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf208', get_index_1, getitem_1)
        return store_reduction


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 1210368}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 1210368}, None),
        MemoryDep('buf207', c0, {c0: 1576}, None),
        MemoryDep('buf208', c0, {c0: 1576}, None)]
op210.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg132_1', c1, {c0: 1576, c1: 768}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (1210368, 1)
op210.sizes = ([1576, 768], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op210_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf207', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf208', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg131_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg132_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf210', get_index_5, add_1, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.mm


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 4841472}, None)]
op212.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 4841472}, None)]
op212.met_dependencies = [MemoryDep('arg134_1', c1, {c0: 1576, c1: 3072}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (4841472, 1)
op212.sizes = ([1576, 3072], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op212_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf211', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf212', get_index_4, mul_2, None)
        return store


op213: ExternKernelSchedulerNode(ExternKernelOut)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf212', mode=None)]
op213.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op213.outputs = [
    buf213: ExternKernelOut
    buf213.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
    ]
]
op213.node.kernel = extern_kernels.mm


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 1576}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 1210368}, None),
        MemoryDep('buf213', c0, {c0: 1210368}, None)]
op214.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 1576, c1: 768}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf214.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (1576, 768)
op214.sizes = ([1576], [768])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op214_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf213', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg136_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf214', get_index_3, getitem)
        return store_reduction


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 1576}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 1210368}, None),
        MemoryDep('buf213', c0, {c0: 1210368}, None)]
op215.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 1576, c1: 768}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf215.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (1576, 768)
op215.sizes = ([1576], [768])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op215_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf213', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg136_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf215', get_index_3, getitem_1)
        return store_reduction


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 1210368}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 1210368}, None),
        MemoryDep('buf213', c0, {c0: 1210368}, None),
        MemoryDep('buf214', c0, {c0: 1576}, None),
        MemoryDep('buf215', c0, {c0: 1576}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg136_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg137_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg138_1', c1, {c0: 1576, c1: 768}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (1210368, 1)
op217.sizes = ([1576, 768], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op217_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf213', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg136_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf214', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf215', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg137_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg138_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf217', get_index_7, add_3, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg139_1', mode=None), StarDep(name='arg140_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[1576, 2304], stride=[2304, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = extern_kernels.addmm


op219: ExternKernelSchedulerNode(FallbackKernel)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: FallbackKernel
    buf219.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf219.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
    ]
]
op219.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op220: ExternKernelSchedulerNode(MultiOutput)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: MultiOutput
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 197, 64], stride=[151296, 64, 768, 1])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op220.node.kernel = None


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op224.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf224.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False)]
]
op224.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 1210368}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf206', c0, {c0: 1210368}, None),
        MemoryDep('buf213', c0, {c0: 1210368}, None),
        MemoryDep('buf224', c0, {c0: 1210368}, None)]
op225.met_dependencies = 
    [   MemoryDep('arg136_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg142_1', c1, {c0: 1576, c1: 768}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op225.group.device = cuda:0
op225.group.iteration = (1210368, 1)
op225.sizes = ([1576, 768], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op225_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf213', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg136_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf224', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg142_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf225', get_index_5, add_3, None)
        return store


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 1576}, None)]
op226.unmet_dependencies = [MemoryDep('buf225', c0, {c0: 1210368}, None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf226.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (1576, 768)
op226.sizes = ([1576], [768])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op226_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf226', get_index_1, getitem)
        return store_reduction


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 1576}, None)]
op227.unmet_dependencies = [MemoryDep('buf225', c0, {c0: 1210368}, None)]
op227.met_dependencies = []
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf227.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (1576, 768)
op227.sizes = ([1576], [768])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op227_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf227', get_index_1, getitem_1)
        return store_reduction


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 1210368}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf225', c0, {c0: 1210368}, None),
        MemoryDep('buf226', c0, {c0: 1576}, None),
        MemoryDep('buf227', c0, {c0: 1576}, None)]
op229.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 1576, c1: 768}, None),
        MemoryDep('arg144_1', c1, {c0: 1576, c1: 768}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (1210368, 1)
op229.sizes = ([1576, 768], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
class op229_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf226', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf227', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg143_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg144_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf229', get_index_5, add_1, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 4841472}, None)]
op231.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 4841472}, None)]
op231.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 1576, c1: 3072}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (4841472, 1)
op231.sizes = ([1576, 3072], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[1576, 3072], stride=[3072, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 3072], stride=[605184, 3072, 1])
class op231_loop_body:
    var_ranges = {z0: 1576, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf230', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf231', get_index_4, mul_2, None)
        return store


op232: ExternKernelSchedulerNode(ExternKernelOut)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf231', mode=None)]
op232.met_dependencies = [StarDep(name='arg147_1', mode=None)]
op232.outputs = [
    buf232: ExternKernelOut
    buf232.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op232.node.kernel = extern_kernels.mm


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 1576}, None)]
op233.unmet_dependencies = 
    [   MemoryDep('buf225', c0, {c0: 1210368}, None),
        MemoryDep('buf232', c0, {c0: 1210368}, None)]
op233.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 1576, c1: 768}, None)]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf233.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (1576, 768)
op233.sizes = ([1576], [768])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op233_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf232', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf233', get_index_3, getitem)
        return store_reduction


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 1576}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf225', c0, {c0: 1210368}, None),
        MemoryDep('buf232', c0, {c0: 1210368}, None)]
op234.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 1576, c1: 768}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (1576, 768)
op234.sizes = ([1576], [768])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op234_loop_body:
    var_ranges = {z0: 1576, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf232', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf234', get_index_3, getitem_1)
        return store_reduction


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 6144}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf225', 151296*c0 + c1, {c0: 8, c1: 768}, None),
        MemoryDep('buf232', 151296*c0 + c1, {c0: 8, c1: 768}, None),
        MemoryDep('buf233', 197*c0, {c0: 8}, None),
        MemoryDep('buf234', 197*c0, {c0: 8}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg148_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg149_1', c1, {c0: 8, c1: 768}, None),
        MemoryDep('arg150_1', c1, {c0: 8, c1: 768}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (6144, 1)
op236.sizes = ([8, 768], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 768], stride=[151296, 768, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 768], stride=[768, 1])
class op236_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 151296*z0 + z1
    index1 = z1
    index2 = 197*z0
    index3 = 768*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf232', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf233', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf234', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg149_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg150_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf236', get_index_7, add_3, None)
        return store


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg151_1', mode=None), StarDep(name='arg152_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf237.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op237.node.kernel = extern_kernels.addmm



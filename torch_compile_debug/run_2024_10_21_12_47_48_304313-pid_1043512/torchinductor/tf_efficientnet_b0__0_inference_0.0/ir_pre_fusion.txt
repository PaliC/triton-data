op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 151875*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50625}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', 50176*c0 + 224*c1 + c2, {c0: 24, c1: 225, c2: 225}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 225, 225], stride=[151875, 1, 675, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1215000, 1)
op0.sizes = ([8, 3, 225, 225], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 225, 225], stride=[151875, 1, 675, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 225, z3: 225}
    index0 = z2
    index1 = z3
    index2 = 150528*z0 + 50176*z1 + 224*z2 + z3
    index3 = 151875*z0 + z1 + 675*z2 + 3*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(224, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(224, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf0', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('arg1_1', get_index)
        return load


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 32, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 864}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (864, 1)
op1.sizes = ([32, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 32, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 3211264}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 3211264}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg3_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg4_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg5_1', c1, {c0: 100352, c1: 32}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (3211264, 1)
op3.sizes = ([100352, 32], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op3_loop_body:
    var_ranges = {z0: 100352, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, add_1, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 3211264}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 3211264}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (3211264, 1)
op4.sizes = ([3211264], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op4_loop_body:
    var_ranges = {z0: 3211264}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf4', get_index_2, mul, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 3211264}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 3211264}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg7_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg8_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg9_1', c1, {c0: 100352, c1: 32}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (3211264, 1)
op6.sizes = ([100352, 32], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op6_loop_body:
    var_ranges = {z0: 100352, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, add_1, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 25088}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', 4096*c0 + c1 + 32*c2, {c0: 784, c1: 32, c2: 128}, None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1, 98], stride=[3136, 1, 25088, 25088, 32])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (25088, 128)
op7.sizes = ([784, 32], [128])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1, 98], stride=[3136, 1, 25088, 25088, 32])
class op7_loop_body:
    var_ranges = {z0: 784, z1: 32, z2: 128}
    index0 = 4096*z0 + z1 + 32*z2
    index1 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf6', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf7', get_index_2, reduction)
        return store_reduction


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 256}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', 3136*c0 + c1 + 32*c2, {c0: 8, c1: 32, c2: 98}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 256, 256])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (256, 98)
op8.sizes = ([8, 32], [98])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1, 98], stride=[3136, 1, 25088, 25088, 32])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 256, 256])
class op8_loop_body:
    var_ranges = {z0: 8, z1: 32, z2: 98}
    index0 = 3136*z0 + z1 + 32*z2
    index1 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf8', get_index_1, reduction)
        return store_reduction


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 256}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 256}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (256, 1)
op9.sizes = ([256], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 256, 256])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op9_loop_body:
    var_ranges = {z0: 256}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        constant = ops.constant(12544.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf9', get_index_1, truediv, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 64}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 64}, None)]
op11.met_dependencies = [MemoryDep('arg12_1', c1, {c0: 8, c1: 8}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (64, 1)
op11.sizes = ([8, 8], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
class op11_loop_body:
    var_ranges = {z0: 8, z1: 8}
    index0 = 8*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf10', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg12_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf11', get_index_4, mul, None)
        return store


op12: ExternKernelSchedulerNode(ExternKernelAlloc)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op12.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op12.outputs = [
    buf12: ExternKernelAlloc
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.node.kernel = extern_kernels.convolution


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 3211264}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf12', 32*c0 + c2, {c0: 8, c1: 12544, c2: 32}, None),
        MemoryDep('buf6', c0, {c0: 3211264}, None)]
op13.met_dependencies = [MemoryDep('arg14_1', c1, {c0: 100352, c1: 32}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (3211264, 1)
op13.sizes = ([8, 12544, 32], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 12544, z2: 32}
    index0 = 401408*z0 + 32*z1 + z2
    index1 = 32*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf6', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf12', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg14_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf13', get_index_4, mul_1, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelAlloc)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op14.outputs = [
    buf14: ExternKernelAlloc
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.node.kernel = extern_kernels.convolution


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 1605632}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 1605632}, None)]
op15.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg17_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg18_1', c1, {c0: 100352, c1: 16}, None),
        MemoryDep('arg19_1', c1, {c0: 100352, c1: 16}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (1605632, 1)
op15.sizes = ([100352, 16], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 112, 112], stride=[200704, 1, 1792, 16])
class op15_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg16_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg17_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg18_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg19_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf15', get_index_5, add_1, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.convolution


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 9633792}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 9633792}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 100352, c1: 96}, None),
        MemoryDep('arg22_1', c1, {c0: 100352, c1: 96}, None),
        MemoryDep('arg23_1', c1, {c0: 100352, c1: 96}, None),
        MemoryDep('arg24_1', c1, {c0: 100352, c1: 96}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (9633792, 1)
op17.sizes = ([100352, 96], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
class op17_loop_body:
    var_ranges = {z0: 100352, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg22_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg23_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg24_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf17', get_index_5, add_1, None)
        return store


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 9806592}, None)]
op18.unmet_dependencies = [   MemoryDep('buf17', 1204224*c0 + 10752*c1 + c2, {c0: 8, c1: 113, c2: 10848}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 113, 113], stride=[1225824, 1, 10848, 96])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (9806592, 1)
op18.sizes = ([8, 113, 113, 96], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 112, 112], stride=[1204224, 1, 10752, 96])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 113, 113], stride=[1225824, 1, 10848, 96])
class op18_loop_body:
    var_ranges = {z0: 8, z1: 113, z2: 113, z3: 96}
    index0 = z1
    index1 = z2
    index2 = 1204224*z0 + 10752*z1 + 96*z2 + z3
    index3 = 1225824*z0 + 10848*z1 + 96*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(112, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(112, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf18', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf17', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op19: ExternKernelSchedulerNode(ExternKernelAlloc)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None)]
op19.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelAlloc
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.convolution


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 2408448}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 2408448}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg26_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg27_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg28_1', c1, {c0: 25088, c1: 96}, None),
        MemoryDep('arg29_1', c1, {c0: 25088, c1: 96}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (2408448, 1)
op20.sizes = ([25088, 96], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op20_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg27_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg28_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg29_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf20', get_index_5, add_1, None)
        return store


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 19200}, None)]
op21.unmet_dependencies = [   MemoryDep('buf20', 301056*c0 + c2 + 96*ModularIndexing(126*c1 + c3, 1, 3136), {c0: 8, c1: 25, c2: 96, c3: 126}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 1, 1, 25], stride=[2400, 1, 19200, 19200, 96])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (19200, 126)
op21.sizes = ([8, 25, 96], [126])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 1, 1, 25], stride=[2400, 1, 19200, 19200, 96])
class op21_loop_body:
    var_ranges = {z0: 8, z1: 25, z2: 96, z3: 126}
    index0 = 126*z1 + z3
    index1 = 301056*z0 + z2 + 96*ModularIndexing(126*z1 + z3, 1, 3136)
    index2 = 2400*z0 + 96*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3136, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', masked_subblock1)
        get_index_1 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf21', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf20', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 768}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', 2400*c0 + c1 + 96*c2, {c0: 8, c1: 96, c2: 25}, None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 1, 1], stride=[96, 1, 768, 768])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (768, 25)
op22.sizes = ([8, 96], [25])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 1, 1, 25], stride=[2400, 1, 19200, 19200, 96])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 1, 1], stride=[96, 1, 768, 768])
class op22_loop_body:
    var_ranges = {z0: 8, z1: 96, z2: 25}
    index0 = 2400*z0 + z1 + 96*z2
    index1 = 96*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf22', get_index_1, reduction)
        return store_reduction


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 768}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 768}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 1, 1], stride=[96, 1, 1, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (768, 1)
op23.sizes = ([768], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 1, 1], stride=[96, 1, 768, 768])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 1, 1], stride=[96, 1, 1, 1])
class op23_loop_body:
    var_ranges = {z0: 768}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        constant = ops.constant(3136.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf23', get_index_1, truediv, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 1, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.convolution


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 32}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 32}, None)]
op25.met_dependencies = [MemoryDep('arg31_1', c1, {c0: 8, c1: 4}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 1, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (32, 1)
op25.sizes = ([8, 4], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 1, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[4], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 1, 1], stride=[4, 1, 1, 1])
class op25_loop_body:
    var_ranges = {z0: 8, z1: 4}
    index0 = 4*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg31_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf24', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg31_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf25', get_index_4, mul, None)
        return store


op26: ExternKernelSchedulerNode(ExternKernelAlloc)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelAlloc
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 1, 1], stride=[96, 1, 1, 1])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.node.kernel = extern_kernels.convolution


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 2408448}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 2408448}, None),
        MemoryDep('buf26', 96*c0 + c2, {c0: 8, c1: 3136, c2: 96}, None)]
op27.met_dependencies = [MemoryDep('arg33_1', c1, {c0: 25088, c1: 96}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (2408448, 1)
op27.sizes = ([8, 3136, 96], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 1, 1], stride=[96, 1, 1, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 96, 56, 56], stride=[301056, 1, 5376, 96])
class op27_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 96}
    index0 = 301056*z0 + 96*z1 + z2
    index1 = 96*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf20', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf26', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg33_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf27', get_index_4, mul_1, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelAlloc)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelAlloc
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.node.kernel = extern_kernels.convolution


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 602112}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 602112}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg36_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg37_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 24}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (602112, 1)
op29.sizes = ([25088, 24], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
class op29_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg36_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg37_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg38_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf29', get_index_5, add_1, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelAlloc)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelAlloc
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.convolution


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 3612672}, None)]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 3612672}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg40_1', c1, {c0: 25088, c1: 144}, None),
        MemoryDep('arg41_1', c1, {c0: 25088, c1: 144}, None),
        MemoryDep('arg42_1', c1, {c0: 25088, c1: 144}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 144}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (3612672, 1)
op31.sizes = ([25088, 144], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
class op31_loop_body:
    var_ranges = {z0: 25088, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg41_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg42_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg43_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf31', get_index_5, add_1, None)
        return store


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 3612672}, None)]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 3612672}, None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (3612672, 1)
op32.sizes = ([3612672], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
class op32_loop_body:
    var_ranges = {z0: 3612672}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf32', get_index_2, mul, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelAlloc)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelAlloc
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.node.kernel = extern_kernels.convolution


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 3612672}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 3612672}, None)]
op34.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 25088, c1: 144}, None),
        MemoryDep('arg46_1', c1, {c0: 25088, c1: 144}, None),
        MemoryDep('arg47_1', c1, {c0: 25088, c1: 144}, None),
        MemoryDep('arg48_1', c1, {c0: 25088, c1: 144}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (3612672, 1)
op34.sizes = ([25088, 144], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
class op34_loop_body:
    var_ranges = {z0: 25088, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg45_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg46_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg47_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg48_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf34', get_index_5, add_1, None)
        return store


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 28800}, None)]
op35.unmet_dependencies = [   MemoryDep('buf34', 451584*c0 + c2 + 144*ModularIndexing(126*c1 + c3, 1, 3136), {c0: 8, c1: 25, c2: 144, c3: 126}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1, 25], stride=[3600, 1, 28800, 28800, 144])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (28800, 126)
op35.sizes = ([8, 25, 144], [126])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1, 25], stride=[3600, 1, 28800, 28800, 144])
class op35_loop_body:
    var_ranges = {z0: 8, z1: 25, z2: 144, z3: 126}
    index0 = 126*z1 + z3
    index1 = 451584*z0 + z2 + 144*ModularIndexing(126*z1 + z3, 1, 3136)
    index2 = 3600*z0 + 144*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int32)
        constant = ops.constant(3136, torch.int32)
        lt = ops.lt(index_expr, constant)
        masked_subblock1 = self.masked_subblock1(lt, 0)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', masked_subblock1)
        get_index_1 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf35', get_index_1, reduction)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf34', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 1152}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', 3600*c0 + c1 + 144*c2, {c0: 8, c1: 144, c2: 25}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1152, 1152])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (1152, 25)
op36.sizes = ([8, 144], [25])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1, 25], stride=[3600, 1, 28800, 28800, 144])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1152, 1152])
class op36_loop_body:
    var_ranges = {z0: 8, z1: 144, z2: 25}
    index0 = 3600*z0 + z1 + 144*z2
    index1 = 144*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf36', get_index_1, reduction)
        return store_reduction


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 1152}, None)]
op37.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 1152}, None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (1152, 1)
op37.sizes = ([1152], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1152, 1152])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1, 1])
class op37_loop_body:
    var_ranges = {z0: 1152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        constant = ops.constant(3136.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf37', get_index_1, truediv, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelAlloc)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelAlloc
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 1, 1], stride=[6, 1, 1, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.convolution


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 48}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 48}, None)]
op39.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 8, c1: 6}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 1, 1], stride=[6, 1, 1, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (48, 1)
op39.sizes = ([8, 6], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 1, 1], stride=[6, 1, 1, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[6], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 1, 1], stride=[6, 1, 1, 1])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 6}
    index0 = 6*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf38', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg50_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf39', get_index_4, mul, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelAlloc)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelAlloc
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.node.kernel = extern_kernels.convolution


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 3612672}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 3612672}, None),
        MemoryDep('buf40', 144*c0 + c2, {c0: 8, c1: 3136, c2: 144}, None)]
op41.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 25088, c1: 144}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (3612672, 1)
op41.sizes = ([8, 3136, 144], [])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
class op41_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 144}
    index0 = 451584*z0 + 144*z1 + z2
    index1 = 144*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf34', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf40', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg52_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf41', get_index_4, mul_1, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelAlloc)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelAlloc
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.node.kernel = extern_kernels.convolution


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 602112}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf29', c0, {c0: 602112}, None),
        MemoryDep('buf42', c0, {c0: 602112}, None)]
op43.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg55_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg56_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg57_1', c1, {c0: 25088, c1: 24}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (602112, 1)
op43.sizes = ([25088, 24], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 1, 1344, 24])
class op43_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg55_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg56_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg57_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf29', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf43', get_index_6, add_2, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelAlloc)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelAlloc
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
    buf44.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.convolution


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 3612672}, None)]
op45.unmet_dependencies = [MemoryDep('buf44', c0, {c0: 3612672}, None)]
op45.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 25088, c1: 144}, None),
        MemoryDep('arg60_1', c1, {c0: 25088, c1: 144}, None),
        MemoryDep('arg61_1', c1, {c0: 25088, c1: 144}, None),
        MemoryDep('arg62_1', c1, {c0: 25088, c1: 144}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (3612672, 1)
op45.sizes = ([25088, 144], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
class op45_loop_body:
    var_ranges = {z0: 25088, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg60_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg61_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg62_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf45', get_index_5, add_1, None)
        return store


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 4010112}, None)]
op46.unmet_dependencies = [   MemoryDep('buf45', 451584*c0 + 8064*c1 + c2 - 8208, {c0: 8, c1: 59, c2: 8496}, None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 59, 59], stride=[501264, 1, 8496, 144])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (4010112, 1)
op46.sizes = ([8, 59, 59, 144], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 56, 56], stride=[451584, 1, 8064, 144])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 59, 59], stride=[501264, 1, 8496, 144])
class op46_loop_body:
    var_ranges = {z0: 8, z1: 59, z2: 59, z3: 144}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 451584*z0 + 8064*z1 + 144*z2 + z3 - 8208
    index3 = 501264*z0 + 8496*z1 + 144*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf46', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf45', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op47: ExternKernelSchedulerNode(ExternKernelAlloc)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelAlloc
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.convolution


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 903168}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 903168}, None)]
op48.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg65_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg66_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg67_1', c1, {c0: 6272, c1: 144}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (903168, 1)
op48.sizes = ([6272, 144], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
class op48_loop_body:
    var_ranges = {z0: 6272, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg65_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg66_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg67_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf48', get_index_5, add_1, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 8064}, None)]
op49.unmet_dependencies = [MemoryDep('buf48', 16128*c0 + c1 + 144*c2, {c0: 56, c1: 144, c2: 112}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1, 7], stride=[1008, 1, 8064, 8064, 144])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (8064, 112)
op49.sizes = ([56, 144], [112])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1, 7], stride=[1008, 1, 8064, 8064, 144])
class op49_loop_body:
    var_ranges = {z0: 56, z1: 144, z2: 112}
    index0 = 16128*z0 + z1 + 144*z2
    index1 = 144*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_2, reduction)
        return store_reduction


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 1152}, None)]
op50.unmet_dependencies = [MemoryDep('buf49', 1008*c0 + c1 + 144*c2, {c0: 8, c1: 144, c2: 7}, None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1152, 1152])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (1152, 7)
op50.sizes = ([8, 144], [7])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1, 7], stride=[1008, 1, 8064, 8064, 144])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1152, 1152])
class op50_loop_body:
    var_ranges = {z0: 8, z1: 144, z2: 7}
    index0 = 1008*z0 + z1 + 144*z2
    index1 = 144*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf50', get_index_1, reduction)
        return store_reduction


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 1152}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 1152}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1, 1])
    buf51.users = [NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (1152, 1)
op51.sizes = ([1152], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1152, 1152])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1, 1])
class op51_loop_body:
    var_ranges = {z0: 1152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf51', get_index_1, truediv, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelAlloc)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op52.outputs = [
    buf52: ExternKernelAlloc
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 1, 1], stride=[6, 1, 1, 1])
    buf52.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False)]
]
op52.node.kernel = extern_kernels.convolution


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 48}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 48}, None)]
op53.met_dependencies = [MemoryDep('arg69_1', c1, {c0: 8, c1: 6}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 1, 1], stride=[6, 1, 1, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (48, 1)
op53.sizes = ([8, 6], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 1, 1], stride=[6, 1, 1, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[6], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 1, 1], stride=[6, 1, 1, 1])
class op53_loop_body:
    var_ranges = {z0: 8, z1: 6}
    index0 = 6*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg69_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf52', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf53', get_index_4, mul, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelAlloc)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelAlloc
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.convolution


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 903168}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf48', c0, {c0: 903168}, None),
        MemoryDep('buf54', 144*c0 + c2, {c0: 8, c1: 784, c2: 144}, None)]
op55.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 6272, c1: 144}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (903168, 1)
op55.sizes = ([8, 784, 144], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 1, 1], stride=[144, 1, 1, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
class op55_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 144}
    index0 = 112896*z0 + 144*z1 + z2
    index1 = 144*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf54', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg71_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf55', get_index_4, mul_1, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelAlloc)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelAlloc
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.node.kernel = extern_kernels.convolution


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 250880}, None)]
op57.unmet_dependencies = [MemoryDep('buf56', c0, {c0: 250880}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg74_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg75_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg76_1', c1, {c0: 6272, c1: 40}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf57.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (250880, 1)
op57.sizes = ([6272, 40], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
class op57_loop_body:
    var_ranges = {z0: 6272, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg74_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg75_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg76_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf57', get_index_5, add_1, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelAlloc)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op58.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelAlloc
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False)]
]
op58.node.kernel = extern_kernels.convolution


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 1505280}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 1505280}, None)]
op59.met_dependencies = 
    [   MemoryDep('arg78_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg79_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg80_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg81_1', c1, {c0: 6272, c1: 240}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (1505280, 1)
op59.sizes = ([6272, 240], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
class op59_loop_body:
    var_ranges = {z0: 6272, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg80_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg81_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf59', get_index_5, add_1, None)
        return store


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 1505280}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 1505280}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (1505280, 1)
op60.sizes = ([1505280], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
class op60_loop_body:
    var_ranges = {z0: 1505280}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf59', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf60', get_index_2, mul, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelAlloc)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelAlloc
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.convolution


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1505280}, None)]
op62.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 1505280}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg84_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg85_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg86_1', c1, {c0: 6272, c1: 240}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op62.group.device = cuda:0
op62.group.iteration = (1505280, 1)
op62.sizes = ([6272, 240], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
class op62_loop_body:
    var_ranges = {z0: 6272, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg84_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg85_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg86_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf62', get_index_5, add_1, None)
        return store


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 13440}, None)]
op63.unmet_dependencies = [MemoryDep('buf62', 26880*c0 + c1 + 240*c2, {c0: 56, c1: 240, c2: 112}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1, 7], stride=[1680, 1, 13440, 13440, 240])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (13440, 112)
op63.sizes = ([56, 240], [112])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1, 7], stride=[1680, 1, 13440, 13440, 240])
class op63_loop_body:
    var_ranges = {z0: 56, z1: 240, z2: 112}
    index0 = 26880*z0 + z1 + 240*z2
    index1 = 240*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf63', get_index_2, reduction)
        return store_reduction


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 1920}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', 1680*c0 + c1 + 240*c2, {c0: 8, c1: 240, c2: 7}, None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1920, 1920])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (1920, 7)
op64.sizes = ([8, 240], [7])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1, 7], stride=[1680, 1, 13440, 13440, 240])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1920, 1920])
class op64_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 7}
    index0 = 1680*z0 + z1 + 240*z2
    index1 = 240*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf64', get_index_1, reduction)
        return store_reduction


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 1920}, None)]
op65.unmet_dependencies = [MemoryDep('buf64', c0, {c0: 1920}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (1920, 1)
op65.sizes = ([1920], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1920, 1920])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
class op65_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        constant = ops.constant(784.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf65', get_index_1, truediv, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelAlloc)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelAlloc
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 10, 1, 1], stride=[10, 1, 1, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False)]
]
op66.node.kernel = extern_kernels.convolution


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 80}, None)]
op67.unmet_dependencies = [MemoryDep('buf66', c0, {c0: 80}, None)]
op67.met_dependencies = [MemoryDep('arg88_1', c1, {c0: 8, c1: 10}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 10, 1, 1], stride=[10, 1, 1, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (80, 1)
op67.sizes = ([8, 10], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 10, 1, 1], stride=[10, 1, 1, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[10], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 10, 1, 1], stride=[10, 1, 1, 1])
class op67_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf66', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg88_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf67', get_index_4, mul, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelAlloc)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelAlloc
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.node.kernel = extern_kernels.convolution


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 1505280}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf62', c0, {c0: 1505280}, None),
        MemoryDep('buf68', 240*c0 + c2, {c0: 8, c1: 784, c2: 240}, None)]
op69.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 6272, c1: 240}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (1505280, 1)
op69.sizes = ([8, 784, 240], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
class op69_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 240}
    index0 = 188160*z0 + 240*z1 + z2
    index1 = 240*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf68', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg90_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf69', get_index_4, mul_1, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelAlloc)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelAlloc
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.convolution


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 250880}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 250880}, None),
        MemoryDep('buf70', c0, {c0: 250880}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg93_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg94_1', c1, {c0: 6272, c1: 40}, None),
        MemoryDep('arg95_1', c1, {c0: 6272, c1: 40}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (250880, 1)
op71.sizes = ([6272, 40], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 28, 28], stride=[31360, 1, 1120, 40])
class op71_loop_body:
    var_ranges = {z0: 6272, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf57', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf71', get_index_6, add_2, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelAlloc)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelAlloc
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.convolution


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 1505280}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 1505280}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg97_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg98_1', c1, {c0: 6272, c1: 240}, None),
        MemoryDep('arg99_1', c1, {c0: 6272, c1: 240}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (1505280, 1)
op73.sizes = ([6272, 240], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
class op73_loop_body:
    var_ranges = {z0: 6272, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, add_1, None)
        return store


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 1614720}, None)]
op74.unmet_dependencies = [MemoryDep('buf73', 188160*c0 + 6720*c1 + c2, {c0: 8, c1: 29, c2: 6960}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 29, 29], stride=[201840, 1, 6960, 240])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (1614720, 1)
op74.sizes = ([8, 29, 29, 240], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 28, 28], stride=[188160, 1, 6720, 240])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 29, 29], stride=[201840, 1, 6960, 240])
class op74_loop_body:
    var_ranges = {z0: 8, z1: 29, z2: 29, z3: 240}
    index0 = z1
    index1 = z2
    index2 = 188160*z0 + 6720*z1 + 240*z2 + z3
    index3 = 201840*z0 + 6960*z1 + 240*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf74', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf73', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op75.node.kernel = extern_kernels.convolution


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 376320}, None)]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 376320}, None)]
op76.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg103_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg104_1', c1, {c0: 1568, c1: 240}, None),
        MemoryDep('arg105_1', c1, {c0: 1568, c1: 240}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (376320, 1)
op76.sizes = ([1568, 240], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op76_loop_body:
    var_ranges = {z0: 1568, z1: 240}
    index0 = 240*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg105_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf76', get_index_5, add_1, None)
        return store


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 3840}, None)]
op77.unmet_dependencies = [MemoryDep('buf76', 23520*c0 + c1 + 240*c2, {c0: 16, c1: 240, c2: 98}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1, 2], stride=[480, 1, 3840, 3840, 240])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (3840, 98)
op77.sizes = ([16, 240], [98])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1, 2], stride=[480, 1, 3840, 3840, 240])
class op77_loop_body:
    var_ranges = {z0: 16, z1: 240, z2: 98}
    index0 = 23520*z0 + z1 + 240*z2
    index1 = 240*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf76', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf77', get_index_2, reduction)
        return store_reduction


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 1920}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', 480*c0 + c1 + 240*c2, {c0: 8, c1: 240, c2: 2}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1920, 1920])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (1920, 2)
op78.sizes = ([8, 240], [2])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1, 2], stride=[480, 1, 3840, 3840, 240])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1920, 1920])
class op78_loop_body:
    var_ranges = {z0: 8, z1: 240, z2: 2}
    index0 = 480*z0 + z1 + 240*z2
    index1 = 240*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf78', get_index_1, reduction)
        return store_reduction


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 1920}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 1920}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1920, 1)
op79.sizes = ([1920], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1920, 1920])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
class op79_loop_body:
    var_ranges = {z0: 1920}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf79', get_index_1, truediv, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 10, 1, 1], stride=[10, 1, 1, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 80}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 80}, None)]
op81.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 8, c1: 10}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 10, 1, 1], stride=[10, 1, 1, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (80, 1)
op81.sizes = ([8, 10], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 10, 1, 1], stride=[10, 1, 1, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[10], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 10, 1, 1], stride=[10, 1, 1, 1])
class op81_loop_body:
    var_ranges = {z0: 8, z1: 10}
    index0 = 10*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf80', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg107_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf81', get_index_4, mul, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelAlloc)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelAlloc
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.node.kernel = extern_kernels.convolution


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 376320}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 376320}, None),
        MemoryDep('buf82', 240*c0 + c2, {c0: 8, c1: 196, c2: 240}, None)]
op83.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 1568, c1: 240}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (376320, 1)
op83.sizes = ([8, 196, 240], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 1, 1], stride=[240, 1, 1, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[240], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 240, 14, 14], stride=[47040, 1, 3360, 240])
class op83_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 240}
    index0 = 47040*z0 + 240*z1 + z2
    index1 = 240*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf76', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf82', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg109_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf83', get_index_4, mul_1, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelAlloc)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelAlloc
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.convolution


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 125440}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 125440}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg112_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg113_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg114_1', c1, {c0: 1568, c1: 80}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf85.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op85.group.device = cuda:0
op85.group.iteration = (125440, 1)
op85.sizes = ([1568, 80], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op85_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg113_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg114_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf85', get_index_5, add_1, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelAlloc)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelAlloc
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False)]
]
op86.node.kernel = extern_kernels.convolution


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 752640}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 752640}, None)]
op87.met_dependencies = 
    [   MemoryDep('arg116_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg117_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg118_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg119_1', c1, {c0: 1568, c1: 480}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (752640, 1)
op87.sizes = ([1568, 480], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op87_loop_body:
    var_ranges = {z0: 1568, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg117_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg118_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg119_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf87', get_index_5, add_1, None)
        return store


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 752640}, None)]
op88.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 752640}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (752640, 1)
op88.sizes = ([752640], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op88_loop_body:
    var_ranges = {z0: 752640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf88', get_index_2, mul, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelAlloc)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelAlloc
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False)]
]
op89.node.kernel = extern_kernels.convolution


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 752640}, None)]
op90.unmet_dependencies = [MemoryDep('buf89', c0, {c0: 752640}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg121_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg122_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg123_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg124_1', c1, {c0: 1568, c1: 480}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf90.users = [
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (752640, 1)
op90.sizes = ([1568, 480], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op90_loop_body:
    var_ranges = {z0: 1568, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg122_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg123_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg124_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf90', get_index_5, add_1, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 7680}, None)]
op91.unmet_dependencies = [MemoryDep('buf90', 47040*c0 + c1 + 480*c2, {c0: 16, c1: 480, c2: 98}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (7680, 98)
op91.sizes = ([16, 480], [98])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
class op91_loop_body:
    var_ranges = {z0: 16, z1: 480, z2: 98}
    index0 = 47040*z0 + z1 + 480*z2
    index1 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf90', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf91', get_index_2, reduction)
        return store_reduction


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 3840}, None)]
op92.unmet_dependencies = [MemoryDep('buf91', 960*c0 + c1 + 480*c2, {c0: 8, c1: 480, c2: 2}, None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (3840, 2)
op92.sizes = ([8, 480], [2])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
class op92_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 2}
    index0 = 960*z0 + z1 + 480*z2
    index1 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf92', get_index_1, reduction)
        return store_reduction


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 3840}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 3840}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (3840, 1)
op93.sizes = ([3840], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
class op93_loop_body:
    var_ranges = {z0: 3840}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf93', get_index_1, truediv, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelAlloc)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelAlloc
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False)]
]
op94.node.kernel = extern_kernels.convolution


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 160}, None)]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 160}, None)]
op95.met_dependencies = [MemoryDep('arg126_1', c1, {c0: 8, c1: 20}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (160, 1)
op95.sizes = ([8, 20], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
class op95_loop_body:
    var_ranges = {z0: 8, z1: 20}
    index0 = 20*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf94', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf95', get_index_4, mul, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelAlloc)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelAlloc
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.node.kernel = extern_kernels.convolution


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 752640}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf90', c0, {c0: 752640}, None),
        MemoryDep('buf96', 480*c0 + c2, {c0: 8, c1: 196, c2: 480}, None)]
op97.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 1568, c1: 480}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (752640, 1)
op97.sizes = ([8, 196, 480], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op97_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 480}
    index0 = 94080*z0 + 480*z1 + z2
    index1 = 480*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf90', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf96', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg128_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf97', get_index_4, mul_1, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelAlloc)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelAlloc
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.node.kernel = extern_kernels.convolution


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 125440}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf85', c0, {c0: 125440}, None),
        MemoryDep('buf98', c0, {c0: 125440}, None)]
op99.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg131_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg132_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg133_1', c1, {c0: 1568, c1: 80}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (125440, 1)
op99.sizes = ([1568, 80], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op99_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg130_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg132_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg133_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf85', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf99', get_index_6, add_2, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=True, is_weak=False)]
]
op100.node.kernel = extern_kernels.convolution


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 752640}, None)]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 752640}, None)]
op101.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg136_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg137_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg138_1', c1, {c0: 1568, c1: 480}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (752640, 1)
op101.sizes = ([1568, 480], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op101_loop_body:
    var_ranges = {z0: 1568, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg136_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg137_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg138_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf101', get_index_5, add_1, None)
        return store


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 752640}, None)]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 752640}, None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (752640, 1)
op102.sizes = ([752640], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op102_loop_body:
    var_ranges = {z0: 752640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf101', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf102', get_index_2, mul, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelAlloc)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelAlloc
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.node.kernel = extern_kernels.convolution


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 752640}, None)]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 752640}, None)]
op104.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg141_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg142_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg143_1', c1, {c0: 1568, c1: 480}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (752640, 1)
op104.sizes = ([1568, 480], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op104_loop_body:
    var_ranges = {z0: 1568, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg141_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg142_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg143_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf104', get_index_5, add_1, None)
        return store


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 7680}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', 47040*c0 + c1 + 480*c2, {c0: 16, c1: 480, c2: 98}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (7680, 98)
op105.sizes = ([16, 480], [98])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
class op105_loop_body:
    var_ranges = {z0: 16, z1: 480, z2: 98}
    index0 = 47040*z0 + z1 + 480*z2
    index1 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf105', get_index_2, reduction)
        return store_reduction


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 3840}, None)]
op106.unmet_dependencies = [MemoryDep('buf105', 960*c0 + c1 + 480*c2, {c0: 8, c1: 480, c2: 2}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (3840, 2)
op106.sizes = ([8, 480], [2])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
class op106_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 2}
    index0 = 960*z0 + z1 + 480*z2
    index1 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_1, reduction)
        return store_reduction


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 3840}, None)]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 3840}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (3840, 1)
op107.sizes = ([3840], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
class op107_loop_body:
    var_ranges = {z0: 3840}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf107', get_index_1, truediv, None)
        return store


op108: ExternKernelSchedulerNode(ExternKernelAlloc)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op108.outputs = [
    buf108: ExternKernelAlloc
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
]
op108.node.kernel = extern_kernels.convolution


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 160}, None)]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 160}, None)]
op109.met_dependencies = [MemoryDep('arg145_1', c1, {c0: 8, c1: 20}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (160, 1)
op109.sizes = ([8, 20], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
class op109_loop_body:
    var_ranges = {z0: 8, z1: 20}
    index0 = 20*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg145_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg145_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf109', get_index_4, mul, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.node.kernel = extern_kernels.convolution


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 752640}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 752640}, None),
        MemoryDep('buf110', 480*c0 + c2, {c0: 8, c1: 196, c2: 480}, None)]
op111.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 1568, c1: 480}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (752640, 1)
op111.sizes = ([8, 196, 480], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op111_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 480}
    index0 = 94080*z0 + 480*z1 + z2
    index1 = 480*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf110', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg147_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf111', get_index_4, mul_1, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False)]
]
op112.node.kernel = extern_kernels.convolution


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 125440}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 125440}, None),
        MemoryDep('buf99', c0, {c0: 125440}, None)]
op113.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg150_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg151_1', c1, {c0: 1568, c1: 80}, None),
        MemoryDep('arg152_1', c1, {c0: 1568, c1: 80}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (125440, 1)
op113.sizes = ([1568, 80], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[80], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 80, 14, 14], stride=[15680, 1, 1120, 80])
class op113_loop_body:
    var_ranges = {z0: 1568, z1: 80}
    index0 = 80*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg150_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg152_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf99', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf113', get_index_6, add_2, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelAlloc)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelAlloc
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op114.node.kernel = extern_kernels.convolution


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 752640}, None)]
op115.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 752640}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg155_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg156_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg157_1', c1, {c0: 1568, c1: 480}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (752640, 1)
op115.sizes = ([1568, 480], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op115_loop_body:
    var_ranges = {z0: 1568, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg155_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg156_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg157_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf115', get_index_5, add_1, None)
        return store


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 752640}, None)]
op116.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 752640}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (752640, 1)
op116.sizes = ([752640], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op116_loop_body:
    var_ranges = {z0: 752640}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf115', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf116', get_index_2, mul, None)
        return store


op117: ExternKernelSchedulerNode(ExternKernelAlloc)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelAlloc
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.convolution


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 752640}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 752640}, None)]
op118.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg160_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg161_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg162_1', c1, {c0: 1568, c1: 480}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (752640, 1)
op118.sizes = ([1568, 480], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op118_loop_body:
    var_ranges = {z0: 1568, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg160_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg161_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg162_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf118', get_index_5, add_1, None)
        return store


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 7680}, None)]
op119.unmet_dependencies = [MemoryDep('buf118', 47040*c0 + c1 + 480*c2, {c0: 16, c1: 480, c2: 98}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (7680, 98)
op119.sizes = ([16, 480], [98])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
class op119_loop_body:
    var_ranges = {z0: 16, z1: 480, z2: 98}
    index0 = 47040*z0 + z1 + 480*z2
    index1 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf119', get_index_2, reduction)
        return store_reduction


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 3840}, None)]
op120.unmet_dependencies = [MemoryDep('buf119', 960*c0 + c1 + 480*c2, {c0: 8, c1: 480, c2: 2}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (3840, 2)
op120.sizes = ([8, 480], [2])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1, 2], stride=[960, 1, 7680, 7680, 480])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 480, z2: 2}
    index0 = 960*z0 + z1 + 480*z2
    index1 = 480*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf120', get_index_1, reduction)
        return store_reduction


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 3840}, None)]
op121.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 3840}, None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (3840, 1)
op121.sizes = ([3840], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 3840, 3840])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
class op121_loop_body:
    var_ranges = {z0: 3840}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf121', get_index_1, truediv, None)
        return store


op122: ExternKernelSchedulerNode(ExternKernelAlloc)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg163_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelAlloc
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False)]
]
op122.node.kernel = extern_kernels.convolution


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 160}, None)]
op123.unmet_dependencies = [MemoryDep('buf122', c0, {c0: 160}, None)]
op123.met_dependencies = [MemoryDep('arg164_1', c1, {c0: 8, c1: 20}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (160, 1)
op123.sizes = ([8, 20], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[20], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 20, 1, 1], stride=[20, 1, 1, 1])
class op123_loop_body:
    var_ranges = {z0: 8, z1: 20}
    index0 = 20*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf122', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg164_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf123', get_index_4, mul, None)
        return store


op124: ExternKernelSchedulerNode(ExternKernelAlloc)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelAlloc
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
    buf124.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.node.kernel = extern_kernels.convolution


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 752640}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 752640}, None),
        MemoryDep('buf124', 480*c0 + c2, {c0: 8, c1: 196, c2: 480}, None)]
op125.met_dependencies = [MemoryDep('arg166_1', c1, {c0: 1568, c1: 480}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf125.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (752640, 1)
op125.sizes = ([8, 196, 480], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 1, 1], stride=[480, 1, 1, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op125_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 480}
    index0 = 94080*z0 + 480*z1 + z2
    index1 = 480*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf124', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg166_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf125', get_index_4, mul_1, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelAlloc)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelAlloc
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op126.node.kernel = extern_kernels.convolution


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 175616}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 175616}, None)]
op127.met_dependencies = 
    [   MemoryDep('arg168_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg169_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg170_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg171_1', c1, {c0: 1568, c1: 112}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf127.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
    ]
]
op127.group.device = cuda:0
op127.group.iteration = (175616, 1)
op127.sizes = ([1568, 112], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
class op127_loop_body:
    var_ranges = {z0: 1568, z1: 112}
    index0 = 112*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg169_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg170_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg171_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf127', get_index_5, add_1, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelAlloc)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelAlloc
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op128.node.kernel = extern_kernels.convolution


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 1053696}, None)]
op129.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 1053696}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg174_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg175_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg176_1', c1, {c0: 1568, c1: 672}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (1053696, 1)
op129.sizes = ([1568, 672], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op129_loop_body:
    var_ranges = {z0: 1568, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg174_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg175_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg176_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf129', get_index_5, add_1, None)
        return store


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 1053696}, None)]
op130.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 1053696}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (1053696, 1)
op130.sizes = ([1053696], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op130_loop_body:
    var_ranges = {z0: 1053696}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf129', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf130', get_index_2, mul, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelAlloc)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelAlloc
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.node.kernel = extern_kernels.convolution


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 1053696}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 1053696}, None)]
op132.met_dependencies = 
    [   MemoryDep('arg178_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg179_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg180_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg181_1', c1, {c0: 1568, c1: 672}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf132.users = [
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (1053696, 1)
op132.sizes = ([1568, 672], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op132_loop_body:
    var_ranges = {z0: 1568, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg178_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg179_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg180_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg181_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf132', get_index_5, add_1, None)
        return store


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 10752}, None)]
op133.unmet_dependencies = [MemoryDep('buf132', 65856*c0 + c1 + 672*c2, {c0: 16, c1: 672, c2: 98}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1, 2], stride=[1344, 1, 10752, 10752, 672])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (10752, 98)
op133.sizes = ([16, 672], [98])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1, 2], stride=[1344, 1, 10752, 10752, 672])
class op133_loop_body:
    var_ranges = {z0: 16, z1: 672, z2: 98}
    index0 = 65856*z0 + z1 + 672*z2
    index1 = 672*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf132', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf133', get_index_2, reduction)
        return store_reduction


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 5376}, None)]
op134.unmet_dependencies = [MemoryDep('buf133', 1344*c0 + c1 + 672*c2, {c0: 8, c1: 672, c2: 2}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (5376, 2)
op134.sizes = ([8, 672], [2])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1, 2], stride=[1344, 1, 10752, 10752, 672])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
class op134_loop_body:
    var_ranges = {z0: 8, z1: 672, z2: 2}
    index0 = 1344*z0 + z1 + 672*z2
    index1 = 672*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf134', get_index_1, reduction)
        return store_reduction


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 5376}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 5376}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (5376, 1)
op135.sizes = ([5376], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
class op135_loop_body:
    var_ranges = {z0: 5376}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf135', get_index_1, truediv, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False)]
]
op136.node.kernel = extern_kernels.convolution


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 224}, None)]
op137.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 224}, None)]
op137.met_dependencies = [MemoryDep('arg183_1', c1, {c0: 8, c1: 28}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf137.users = [NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (224, 1)
op137.sizes = ([8, 28], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
class op137_loop_body:
    var_ranges = {z0: 8, z1: 28}
    index0 = 28*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg183_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf137', get_index_4, mul, None)
        return store


op138: ExternKernelSchedulerNode(ExternKernelAlloc)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf137', mode=None)]
op138.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op138.outputs = [
    buf138: ExternKernelAlloc
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf138.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.node.kernel = extern_kernels.convolution


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 1053696}, None)]
op139.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 1053696}, None),
        MemoryDep('buf138', 672*c0 + c2, {c0: 8, c1: 196, c2: 672}, None)]
op139.met_dependencies = [MemoryDep('arg185_1', c1, {c0: 1568, c1: 672}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (1053696, 1)
op139.sizes = ([8, 196, 672], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op139_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 672}
    index0 = 131712*z0 + 672*z1 + z2
    index1 = 672*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf132', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf138', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg185_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf139', get_index_4, mul_1, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelAlloc)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelAlloc
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.convolution


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 175616}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 175616}, None),
        MemoryDep('buf140', c0, {c0: 175616}, None)]
op141.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg188_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg189_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg190_1', c1, {c0: 1568, c1: 112}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf141.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
    ]
]
op141.group.device = cuda:0
op141.group.iteration = (175616, 1)
op141.sizes = ([1568, 112], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
class op141_loop_body:
    var_ranges = {z0: 1568, z1: 112}
    index0 = 112*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg190_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf127', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf141', get_index_6, add_2, None)
        return store


op142: ExternKernelSchedulerNode(ExternKernelAlloc)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelAlloc
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False)]
]
op142.node.kernel = extern_kernels.convolution


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 1053696}, None)]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 1053696}, None)]
op143.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg193_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg194_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg195_1', c1, {c0: 1568, c1: 672}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (1053696, 1)
op143.sizes = ([1568, 672], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op143_loop_body:
    var_ranges = {z0: 1568, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg194_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg195_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf143', get_index_5, add_1, None)
        return store


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 1053696}, None)]
op144.unmet_dependencies = [MemoryDep('buf143', c0, {c0: 1053696}, None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (1053696, 1)
op144.sizes = ([1053696], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op144_loop_body:
    var_ranges = {z0: 1053696}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf143', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf144', get_index_2, mul, None)
        return store


op145: ExternKernelSchedulerNode(ExternKernelAlloc)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelAlloc
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False)]
]
op145.node.kernel = extern_kernels.convolution


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 1053696}, None)]
op146.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 1053696}, None)]
op146.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg198_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg199_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg200_1', c1, {c0: 1568, c1: 672}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
    ]
]
op146.group.device = cuda:0
op146.group.iteration = (1053696, 1)
op146.sizes = ([1568, 672], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op146_loop_body:
    var_ranges = {z0: 1568, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf146', get_index_5, add_1, None)
        return store


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 10752}, None)]
op147.unmet_dependencies = [MemoryDep('buf146', 65856*c0 + c1 + 672*c2, {c0: 16, c1: 672, c2: 98}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1, 2], stride=[1344, 1, 10752, 10752, 672])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (10752, 98)
op147.sizes = ([16, 672], [98])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1, 2], stride=[1344, 1, 10752, 10752, 672])
class op147_loop_body:
    var_ranges = {z0: 16, z1: 672, z2: 98}
    index0 = 65856*z0 + z1 + 672*z2
    index1 = 672*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf146', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf147', get_index_2, reduction)
        return store_reduction


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 5376}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', 1344*c0 + c1 + 672*c2, {c0: 8, c1: 672, c2: 2}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (5376, 2)
op148.sizes = ([8, 672], [2])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1, 2], stride=[1344, 1, 10752, 10752, 672])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
class op148_loop_body:
    var_ranges = {z0: 8, z1: 672, z2: 2}
    index0 = 1344*z0 + z1 + 672*z2
    index1 = 672*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_1, reduction)
        return store_reduction


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 5376}, None)]
op149.unmet_dependencies = [MemoryDep('buf148', c0, {c0: 5376}, None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (5376, 1)
op149.sizes = ([5376], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
class op149_loop_body:
    var_ranges = {z0: 5376}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf149', get_index_1, truediv, None)
        return store


op150: ExternKernelSchedulerNode(ExternKernelAlloc)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelAlloc
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False)]
]
op150.node.kernel = extern_kernels.convolution


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 224}, None)]
op151.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 224}, None)]
op151.met_dependencies = [MemoryDep('arg202_1', c1, {c0: 8, c1: 28}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (224, 1)
op151.sizes = ([8, 28], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
class op151_loop_body:
    var_ranges = {z0: 8, z1: 28}
    index0 = 28*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf150', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg202_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf151', get_index_4, mul, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelAlloc)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg203_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelAlloc
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.node.kernel = extern_kernels.convolution


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 1053696}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 1053696}, None),
        MemoryDep('buf152', 672*c0 + c2, {c0: 8, c1: 196, c2: 672}, None)]
op153.met_dependencies = [MemoryDep('arg204_1', c1, {c0: 1568, c1: 672}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (1053696, 1)
op153.sizes = ([8, 196, 672], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op153_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 672}
    index0 = 131712*z0 + 672*z1 + z2
    index1 = 672*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf146', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf152', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg204_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf153', get_index_4, mul_1, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelAlloc)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg205_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelAlloc
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op154.node.kernel = extern_kernels.convolution


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 175616}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 175616}, None),
        MemoryDep('buf154', c0, {c0: 175616}, None)]
op155.met_dependencies = 
    [   MemoryDep('arg206_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg207_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg208_1', c1, {c0: 1568, c1: 112}, None),
        MemoryDep('arg209_1', c1, {c0: 1568, c1: 112}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (175616, 1)
op155.sizes = ([1568, 112], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 14, 14], stride=[21952, 1, 1568, 112])
class op155_loop_body:
    var_ranges = {z0: 1568, z1: 112}
    index0 = 112*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg207_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg208_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg209_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf141', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf155', get_index_6, add_2, None)
        return store


op156: ExternKernelSchedulerNode(ExternKernelAlloc)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg210_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelAlloc
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False)]
]
op156.node.kernel = extern_kernels.convolution


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 1053696}, None)]
op157.unmet_dependencies = [MemoryDep('buf156', c0, {c0: 1053696}, None)]
op157.met_dependencies = 
    [   MemoryDep('arg211_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg212_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg213_1', c1, {c0: 1568, c1: 672}, None),
        MemoryDep('arg214_1', c1, {c0: 1568, c1: 672}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (1053696, 1)
op157.sizes = ([1568, 672], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
class op157_loop_body:
    var_ranges = {z0: 1568, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg211_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg212_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg213_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg214_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf157', get_index_5, add_1, None)
        return store


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 1553664}, None)]
op158.unmet_dependencies = [   MemoryDep('buf157', 131712*c0 + 9408*c1 + c2 - 10080, {c0: 8, c1: 17, c2: 11424}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 17, 17], stride=[194208, 1, 11424, 672])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (1553664, 1)
op158.sizes = ([8, 17, 17, 672], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 14, 14], stride=[131712, 1, 9408, 672])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 17, 17], stride=[194208, 1, 11424, 672])
class op158_loop_body:
    var_ranges = {z0: 8, z1: 17, z2: 17, z3: 672}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 131712*z0 + 9408*z1 + 672*z2 + z3 - 10080
    index3 = 194208*z0 + 11424*z1 + 672*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge, lt)
        and__1 = ops.and_(and_, ge_1)
        and__2 = ops.and_(and__1, lt_1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf158', get_index_4, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf157', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op159: ExternKernelSchedulerNode(ExternKernelAlloc)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op159.outputs = [
    buf159: ExternKernelAlloc
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False)]
]
op159.node.kernel = extern_kernels.convolution


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 263424}, None)]
op160.unmet_dependencies = [MemoryDep('buf159', c0, {c0: 263424}, None)]
op160.met_dependencies = 
    [   MemoryDep('arg216_1', c1, {c0: 392, c1: 672}, None),
        MemoryDep('arg217_1', c1, {c0: 392, c1: 672}, None),
        MemoryDep('arg218_1', c1, {c0: 392, c1: 672}, None),
        MemoryDep('arg219_1', c1, {c0: 392, c1: 672}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op160.group.device = cuda:0
op160.group.iteration = (263424, 1)
op160.sizes = ([392, 672], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
class op160_loop_body:
    var_ranges = {z0: 392, z1: 672}
    index0 = 672*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg217_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg218_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg219_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf160', get_index_5, add_1, None)
        return store


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 5376}, None)]
op161.unmet_dependencies = [MemoryDep('buf160', 32928*c0 + c1 + 672*c2, {c0: 8, c1: 672, c2: 49}, None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (5376, 49)
op161.sizes = ([8, 672], [49])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
class op161_loop_body:
    var_ranges = {z0: 8, z1: 672, z2: 49}
    index0 = 32928*z0 + z1 + 672*z2
    index1 = 672*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf160', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf161', get_index_2, reduction)
        return store_reduction


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 5376}, None)]
op162.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 5376}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (5376, 1)
op162.sizes = ([5376], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 5376, 5376])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
class op162_loop_body:
    var_ranges = {z0: 5376}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf162', get_index_1, truediv, None)
        return store


op163: ExternKernelSchedulerNode(ExternKernelAlloc)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = [StarDep(name='arg220_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelAlloc
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf163.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False)]
]
op163.node.kernel = extern_kernels.convolution


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 224}, None)]
op164.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 224}, None)]
op164.met_dependencies = [MemoryDep('arg221_1', c1, {c0: 8, c1: 28}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (224, 1)
op164.sizes = ([8, 28], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 1, 1], stride=[28, 1, 1, 1])
class op164_loop_body:
    var_ranges = {z0: 8, z1: 28}
    index0 = 28*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf163', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg221_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf164', get_index_4, mul, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelAlloc)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg222_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelAlloc
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
    buf165.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.node.kernel = extern_kernels.convolution


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 263424}, None)]
op166.unmet_dependencies = 
    [   MemoryDep('buf160', c0, {c0: 263424}, None),
        MemoryDep('buf165', 672*c0 + c2, {c0: 8, c1: 49, c2: 672}, None)]
op166.met_dependencies = [MemoryDep('arg223_1', c1, {c0: 392, c1: 672}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (263424, 1)
op166.sizes = ([8, 49, 672], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 1, 1], stride=[672, 1, 1, 1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[672], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 672, 7, 7], stride=[32928, 1, 4704, 672])
class op166_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 672}
    index0 = 32928*z0 + 672*z1 + z2
    index1 = 672*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf160', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg223_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf166', get_index_4, mul_1, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelAlloc)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg224_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelAlloc
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False)]
]
op167.node.kernel = extern_kernels.convolution


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 75264}, None)]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 75264}, None)]
op168.met_dependencies = 
    [   MemoryDep('arg225_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg226_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg227_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg228_1', c1, {c0: 392, c1: 192}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf168.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False),
    ]
]
op168.group.device = cuda:0
op168.group.iteration = (75264, 1)
op168.sizes = ([392, 192], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
class op168_loop_body:
    var_ranges = {z0: 392, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg225_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg226_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg227_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg228_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf168', get_index_5, add_1, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelAlloc)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelAlloc
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
]
op169.node.kernel = extern_kernels.convolution


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 451584}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 451584}, None)]
op170.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg231_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg232_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg233_1', c1, {c0: 392, c1: 1152}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (451584, 1)
op170.sizes = ([392, 1152], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op170_loop_body:
    var_ranges = {z0: 392, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg230_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg231_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg232_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg233_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf170', get_index_5, add_1, None)
        return store


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 451584}, None)]
op171.unmet_dependencies = [MemoryDep('buf170', c0, {c0: 451584}, None)]
op171.met_dependencies = []
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (451584, 1)
op171.sizes = ([451584], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op171_loop_body:
    var_ranges = {z0: 451584}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf170', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf171', get_index_2, mul, None)
        return store


op172: ExternKernelSchedulerNode(ExternKernelAlloc)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg234_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelAlloc
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.convolution


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 451584}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 451584}, None)]
op173.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg236_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg237_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg238_1', c1, {c0: 392, c1: 1152}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf173.users = [
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=True, is_weak=False),
    ]
]
op173.group.device = cuda:0
op173.group.iteration = (451584, 1)
op173.sizes = ([392, 1152], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op173_loop_body:
    var_ranges = {z0: 392, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg235_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg236_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg237_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg238_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf173', get_index_5, add_1, None)
        return store


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 9216}, None)]
op174.unmet_dependencies = [MemoryDep('buf173', 56448*c0 + c1 + 1152*c2, {c0: 8, c1: 1152, c2: 49}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (9216, 49)
op174.sizes = ([8, 1152], [49])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
class op174_loop_body:
    var_ranges = {z0: 8, z1: 1152, z2: 49}
    index0 = 56448*z0 + z1 + 1152*z2
    index1 = 1152*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf173', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf174', get_index_2, reduction)
        return store_reduction


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 9216}, None)]
op175.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 9216}, None)]
op175.met_dependencies = []
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (9216, 1)
op175.sizes = ([9216], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
class op175_loop_body:
    var_ranges = {z0: 9216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf175', get_index_1, truediv, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelAlloc)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg239_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelAlloc
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.node.kernel = extern_kernels.convolution


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 384}, None)]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 384}, None)]
op177.met_dependencies = [MemoryDep('arg240_1', c1, {c0: 8, c1: 48}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (384, 1)
op177.sizes = ([8, 48], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
class op177_loop_body:
    var_ranges = {z0: 8, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf176', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg240_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf177', get_index_4, mul, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelAlloc)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelAlloc
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.convolution


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 451584}, None)]
op179.unmet_dependencies = 
    [   MemoryDep('buf173', c0, {c0: 451584}, None),
        MemoryDep('buf178', 1152*c0 + c2, {c0: 8, c1: 49, c2: 1152}, None)]
op179.met_dependencies = [MemoryDep('arg242_1', c1, {c0: 392, c1: 1152}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (451584, 1)
op179.sizes = ([8, 49, 1152], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op179_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 1152}
    index0 = 56448*z0 + 1152*z1 + z2
    index1 = 1152*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf173', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf178', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg242_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf179', get_index_4, mul_1, None)
        return store


op180: ExternKernelSchedulerNode(ExternKernelAlloc)
op180.writes = [StarDep(name='buf180', mode=None)]
op180.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op180.met_dependencies = [StarDep(name='arg243_1', mode=None)]
op180.outputs = [
    buf180: ExternKernelAlloc
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf180.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False)]
]
op180.node.kernel = extern_kernels.convolution


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 75264}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 75264}, None),
        MemoryDep('buf180', c0, {c0: 75264}, None)]
op181.met_dependencies = 
    [   MemoryDep('arg244_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg245_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg246_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg247_1', c1, {c0: 392, c1: 192}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf181.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (75264, 1)
op181.sizes = ([392, 192], [])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
class op181_loop_body:
    var_ranges = {z0: 392, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg244_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg245_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg246_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg247_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf168', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf181', get_index_6, add_2, None)
        return store


op182: ExternKernelSchedulerNode(ExternKernelAlloc)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf181', mode=None)]
op182.met_dependencies = [StarDep(name='arg248_1', mode=None)]
op182.outputs = [
    buf182: ExternKernelAlloc
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
]
op182.node.kernel = extern_kernels.convolution


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 451584}, None)]
op183.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 451584}, None)]
op183.met_dependencies = 
    [   MemoryDep('arg249_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg250_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg251_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg252_1', c1, {c0: 392, c1: 1152}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf183.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (451584, 1)
op183.sizes = ([392, 1152], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op183_loop_body:
    var_ranges = {z0: 392, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg249_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg250_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg251_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg252_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf183', get_index_5, add_1, None)
        return store


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 451584}, None)]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 451584}, None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (451584, 1)
op184.sizes = ([451584], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op184_loop_body:
    var_ranges = {z0: 451584}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf184', get_index_2, mul, None)
        return store


op185: ExternKernelSchedulerNode(ExternKernelAlloc)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op185.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op185.outputs = [
    buf185: ExternKernelAlloc
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf185.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False)]
]
op185.node.kernel = extern_kernels.convolution


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 451584}, None)]
op186.unmet_dependencies = [MemoryDep('buf185', c0, {c0: 451584}, None)]
op186.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg255_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg256_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg257_1', c1, {c0: 392, c1: 1152}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf186.users = [
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op186.group.device = cuda:0
op186.group.iteration = (451584, 1)
op186.sizes = ([392, 1152], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op186_loop_body:
    var_ranges = {z0: 392, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg254_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg255_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg256_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg257_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf186', get_index_5, add_1, None)
        return store


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 9216}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', 56448*c0 + c1 + 1152*c2, {c0: 8, c1: 1152, c2: 49}, None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
    buf187.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (9216, 49)
op187.sizes = ([8, 1152], [49])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
class op187_loop_body:
    var_ranges = {z0: 8, z1: 1152, z2: 49}
    index0 = 56448*z0 + z1 + 1152*z2
    index1 = 1152*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf187', get_index_2, reduction)
        return store_reduction


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 9216}, None)]
op188.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 9216}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (9216, 1)
op188.sizes = ([9216], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
class op188_loop_body:
    var_ranges = {z0: 9216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf188', get_index_1, truediv, None)
        return store


op189: ExternKernelSchedulerNode(ExternKernelAlloc)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op189.outputs = [
    buf189: ExternKernelAlloc
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False)]
]
op189.node.kernel = extern_kernels.convolution


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 384}, None)]
op190.unmet_dependencies = [MemoryDep('buf189', c0, {c0: 384}, None)]
op190.met_dependencies = [MemoryDep('arg259_1', c1, {c0: 8, c1: 48}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (384, 1)
op190.sizes = ([8, 48], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
class op190_loop_body:
    var_ranges = {z0: 8, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg259_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf189', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg259_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf190', get_index_4, mul, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelAlloc)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg260_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelAlloc
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.node.kernel = extern_kernels.convolution


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 451584}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf186', c0, {c0: 451584}, None),
        MemoryDep('buf191', 1152*c0 + c2, {c0: 8, c1: 49, c2: 1152}, None)]
op192.met_dependencies = [MemoryDep('arg261_1', c1, {c0: 392, c1: 1152}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (451584, 1)
op192.sizes = ([8, 49, 1152], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op192_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 1152}
    index0 = 56448*z0 + 1152*z1 + z2
    index1 = 1152*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf191', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg261_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf192', get_index_4, mul_1, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelAlloc)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg262_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelAlloc
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False)]
]
op193.node.kernel = extern_kernels.convolution


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 75264}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 75264}, None),
        MemoryDep('buf193', c0, {c0: 75264}, None)]
op194.met_dependencies = 
    [   MemoryDep('arg263_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg264_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg265_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg266_1', c1, {c0: 392, c1: 192}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf194.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=True, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (75264, 1)
op194.sizes = ([392, 192], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
class op194_loop_body:
    var_ranges = {z0: 392, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg263_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg264_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg265_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg266_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf181', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf194', get_index_6, add_2, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelAlloc)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg267_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelAlloc
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
]
op195.node.kernel = extern_kernels.convolution


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 451584}, None)]
op196.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 451584}, None)]
op196.met_dependencies = 
    [   MemoryDep('arg268_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg269_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg270_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg271_1', c1, {c0: 392, c1: 1152}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf196.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (451584, 1)
op196.sizes = ([392, 1152], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op196_loop_body:
    var_ranges = {z0: 392, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg268_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg269_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg270_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg271_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf196', get_index_5, add_1, None)
        return store


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 451584}, None)]
op197.unmet_dependencies = [MemoryDep('buf196', c0, {c0: 451584}, None)]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (451584, 1)
op197.sizes = ([451584], [])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op197_loop_body:
    var_ranges = {z0: 451584}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf196', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf197', get_index_2, mul, None)
        return store


op198: ExternKernelSchedulerNode(ExternKernelAlloc)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg272_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelAlloc
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf198.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False)]
]
op198.node.kernel = extern_kernels.convolution


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 451584}, None)]
op199.unmet_dependencies = [MemoryDep('buf198', c0, {c0: 451584}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg273_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg274_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg275_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg276_1', c1, {c0: 392, c1: 1152}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
    ]
]
op199.group.device = cuda:0
op199.group.iteration = (451584, 1)
op199.sizes = ([392, 1152], [])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op199_loop_body:
    var_ranges = {z0: 392, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf198', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg273_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg274_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg275_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg276_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf199', get_index_5, add_1, None)
        return store


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 9216}, None)]
op200.unmet_dependencies = [MemoryDep('buf199', 56448*c0 + c1 + 1152*c2, {c0: 8, c1: 1152, c2: 49}, None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (9216, 49)
op200.sizes = ([8, 1152], [49])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
class op200_loop_body:
    var_ranges = {z0: 8, z1: 1152, z2: 49}
    index0 = 56448*z0 + z1 + 1152*z2
    index1 = 1152*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf200', get_index_2, reduction)
        return store_reduction


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 9216}, None)]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 9216}, None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (9216, 1)
op201.sizes = ([9216], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
class op201_loop_body:
    var_ranges = {z0: 9216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf201', get_index_1, truediv, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelAlloc)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op202.met_dependencies = [StarDep(name='arg277_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelAlloc
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False)]
]
op202.node.kernel = extern_kernels.convolution


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 384}, None)]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 384}, None)]
op203.met_dependencies = [MemoryDep('arg278_1', c1, {c0: 8, c1: 48}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (384, 1)
op203.sizes = ([8, 48], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
class op203_loop_body:
    var_ranges = {z0: 8, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg278_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf202', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg278_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf203', get_index_4, mul, None)
        return store


op204: ExternKernelSchedulerNode(ExternKernelAlloc)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg279_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelAlloc
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.node.kernel = extern_kernels.convolution


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 451584}, None)]
op205.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 451584}, None),
        MemoryDep('buf204', 1152*c0 + c2, {c0: 8, c1: 49, c2: 1152}, None)]
op205.met_dependencies = [MemoryDep('arg280_1', c1, {c0: 392, c1: 1152}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (451584, 1)
op205.sizes = ([8, 49, 1152], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op205_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 1152}
    index0 = 56448*z0 + 1152*z1 + z2
    index1 = 1152*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf199', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf204', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg280_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf205', get_index_4, mul_1, None)
        return store


op206: ExternKernelSchedulerNode(ExternKernelAlloc)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelAlloc
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf206.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=True, is_weak=False)]
]
op206.node.kernel = extern_kernels.convolution


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 75264}, None)]
op207.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 75264}, None),
        MemoryDep('buf206', c0, {c0: 75264}, None)]
op207.met_dependencies = 
    [   MemoryDep('arg282_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg283_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg284_1', c1, {c0: 392, c1: 192}, None),
        MemoryDep('arg285_1', c1, {c0: 392, c1: 192}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (75264, 1)
op207.sizes = ([392, 192], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[192], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 7, 7], stride=[9408, 1, 1344, 192])
class op207_loop_body:
    var_ranges = {z0: 392, z1: 192}
    index0 = 192*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg284_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg285_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf194', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf207', get_index_6, add_2, None)
        return store


op208: ExternKernelSchedulerNode(ExternKernelAlloc)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf207', mode=None)]
op208.met_dependencies = [StarDep(name='arg286_1', mode=None)]
op208.outputs = [
    buf208: ExternKernelAlloc
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False)]
]
op208.node.kernel = extern_kernels.convolution


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 451584}, None)]
op209.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 451584}, None)]
op209.met_dependencies = 
    [   MemoryDep('arg287_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg288_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg289_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg290_1', c1, {c0: 392, c1: 1152}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (451584, 1)
op209.sizes = ([392, 1152], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op209_loop_body:
    var_ranges = {z0: 392, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg287_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg288_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg289_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg290_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf209', get_index_5, add_1, None)
        return store


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 451584}, None)]
op210.unmet_dependencies = [MemoryDep('buf209', c0, {c0: 451584}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (451584, 1)
op210.sizes = ([451584], [])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op210_loop_body:
    var_ranges = {z0: 451584}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf209', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf210', get_index_2, mul, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelAlloc)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg291_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelAlloc
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.convolution


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 451584}, None)]
op212.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 451584}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg292_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg293_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg294_1', c1, {c0: 392, c1: 1152}, None),
        MemoryDep('arg295_1', c1, {c0: 392, c1: 1152}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (451584, 1)
op212.sizes = ([392, 1152], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op212_loop_body:
    var_ranges = {z0: 392, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg292_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg293_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg294_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg295_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf212', get_index_5, add_1, None)
        return store


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 9216}, None)]
op213.unmet_dependencies = [MemoryDep('buf212', 56448*c0 + c1 + 1152*c2, {c0: 8, c1: 1152, c2: 49}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (9216, 49)
op213.sizes = ([8, 1152], [49])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
class op213_loop_body:
    var_ranges = {z0: 8, z1: 1152, z2: 49}
    index0 = 56448*z0 + z1 + 1152*z2
    index1 = 1152*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf213', get_index_2, reduction)
        return store_reduction


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 9216}, None)]
op214.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 9216}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (9216, 1)
op214.sizes = ([9216], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 9216, 9216])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
class op214_loop_body:
    var_ranges = {z0: 9216}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf214', get_index_1, truediv, None)
        return store


op215: ExternKernelSchedulerNode(ExternKernelAlloc)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg296_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelAlloc
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf215.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False)]
]
op215.node.kernel = extern_kernels.convolution


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 384}, None)]
op216.unmet_dependencies = [MemoryDep('buf215', c0, {c0: 384}, None)]
op216.met_dependencies = [MemoryDep('arg297_1', c1, {c0: 8, c1: 48}, None)]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (384, 1)
op216.sizes = ([8, 48], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
class op216_loop_body:
    var_ranges = {z0: 8, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg297_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg297_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf216', get_index_4, mul, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelAlloc)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = [StarDep(name='arg298_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelAlloc
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
    buf217.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.node.kernel = extern_kernels.convolution


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 451584}, None)]
op218.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 451584}, None),
        MemoryDep('buf217', 1152*c0 + c2, {c0: 8, c1: 49, c2: 1152}, None)]
op218.met_dependencies = [MemoryDep('arg299_1', c1, {c0: 392, c1: 1152}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (451584, 1)
op218.sizes = ([8, 49, 1152], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 1, 1], stride=[1152, 1, 1, 1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[1152], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 1152, 7, 7], stride=[56448, 1, 8064, 1152])
class op218_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 1152}
    index0 = 56448*z0 + 1152*z1 + z2
    index1 = 1152*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf212', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf217', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg299_1', get_index_3)
        add = ops.add(load_2, load_3)
        sigmoid_1 = ops.sigmoid(add)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf218', get_index_4, mul_1, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelAlloc)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg300_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelAlloc
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf219.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False)]
]
op219.node.kernel = extern_kernels.convolution


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 125440}, None)]
op220.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 125440}, None)]
op220.met_dependencies = 
    [   MemoryDep('arg301_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg302_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg303_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg304_1', c1, {c0: 392, c1: 320}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (125440, 1)
op220.sizes = ([392, 320], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
class op220_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg301_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg302_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg303_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg304_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf220', get_index_5, add_1, None)
        return store


op221: ExternKernelSchedulerNode(ExternKernelAlloc)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op221.met_dependencies = [StarDep(name='arg305_1', mode=None)]
op221.outputs = [
    buf221: ExternKernelAlloc
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 7, 7], stride=[62720, 1, 8960, 1280])
    buf221.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False)]
]
op221.node.kernel = extern_kernels.convolution


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 501760}, None)]
op222.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 501760}, None)]
op222.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 392, c1: 1280}, None),
        MemoryDep('arg307_1', c1, {c0: 392, c1: 1280}, None),
        MemoryDep('arg308_1', c1, {c0: 392, c1: 1280}, None),
        MemoryDep('arg309_1', c1, {c0: 392, c1: 1280}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 7, 7], stride=[62720, 1, 8960, 1280])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (501760, 1)
op222.sizes = ([392, 1280], [])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 7, 7], stride=[62720, 1, 8960, 1280])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 7, 7], stride=[62720, 1, 8960, 1280])
class op222_loop_body:
    var_ranges = {z0: 392, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg306_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg307_1', get_index_2)
        constant = ops.constant(0.001, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg308_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg309_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf222', get_index_5, add_1, None)
        return store


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 10240}, None)]
op223.unmet_dependencies = [MemoryDep('buf222', 62720*c0 + c1 + 1280*c2, {c0: 8, c1: 1280, c2: 49}, None)]
op223.met_dependencies = []
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf223.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (10240, 49)
op223.sizes = ([8, 1280], [49])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 7, 7], stride=[62720, 1, 8960, 1280])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
class op223_loop_body:
    var_ranges = {z0: 8, z1: 1280, z2: 49}
    index0 = 62720*z0 + z1 + 1280*z2
    index1 = 1280*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf223', get_index_2, reduction)
        return store_reduction


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 10240}, None)]
op224.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 10240}, None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (10240, 1)
op224.sizes = ([10240], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 1, 1], stride=[1280, 1, 10240, 10240])
class op224_loop_body:
    var_ranges = {z0: 10240}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf224', get_index_1, truediv, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelOut)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = [StarDep(name='arg310_1', mode=None), StarDep(name='arg311_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelOut
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf225.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op225.node.kernel = extern_kernels.addmm



op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg2_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 31, 31], stride=[246016, 961, 31, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 1952*c0 + c1, {c0: 8, c1: 1924}, None)]
op1.unmet_dependencies = [   MemoryDep('buf0', 246016*c0 + 961*c2 + ModularIndexing(I, 1, 961), {c0: 8, c1: 962, c2: 256}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg1_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg3_1', 961*c2 + ModularIndexing(I, 1, 961), {c0: 8, c1: 962, c2: 256}, None),
        MemoryDep('arg4_1', c1, {c0: 7696, c1: 256}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (15392, 128)
op1.sizes = ([8, 962, 2], [128])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 256], stride=[256, 256, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 31, 31], stride=[246016, 961, 31, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 31, 31], stride=[246016, 961, 31, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 962, z2: 2, z3: 128}
    index0 = z1
    index1 = 128*z2 + z3
    index2 = 246016*z0 + 123008*z2 + 961*z3 + ModularIndexing(I, 1, 961)
    index3 = 123008*z2 + 961*z3 + ModularIndexing(I, 1, 961)
    index4 = 1952*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(962, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf1', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', 1952*c0 + c1, {c0: 8, c1: 1924}, None)]
op2.unmet_dependencies = [   MemoryDep('buf0', 246016*c0 + 961*c2 + ModularIndexing(I, 1, 961), {c0: 8, c1: 962, c2: 256}, None)]
op2.met_dependencies = 
    [   MemoryDep('arg1_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg3_1', 961*c2 + ModularIndexing(I, 1, 961), {c0: 8, c1: 962, c2: 256}, None),
        MemoryDep('arg4_1', c1, {c0: 7696, c1: 256}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (15392, 128)
op2.sizes = ([8, 962, 2], [128])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 256], stride=[256, 256, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 31, 31], stride=[246016, 961, 31, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 31, 31], stride=[246016, 961, 31, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
class op2_loop_body:
    var_ranges = {z0: 8, z1: 962, z2: 2, z3: 128}
    index0 = z1
    index1 = 128*z2 + z3
    index2 = 246016*z0 + 123008*z2 + 961*z3 + ModularIndexing(I, 1, 961)
    index3 = 123008*z2 + 961*z3 + ModularIndexing(I, 1, 961)
    index4 = 1952*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(962, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf2', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', 1952*c0 + c1, {c0: 8, c1: 1924}, None)]
op3.unmet_dependencies = [   MemoryDep('buf0', 246016*c0 + 961*c2 + ModularIndexing(I, 1, 961), {c0: 8, c1: 962, c2: 256}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg1_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg3_1', 961*c2 + ModularIndexing(I, 1, 961), {c0: 8, c1: 962, c2: 256}, None),
        MemoryDep('arg4_1', c1, {c0: 7696, c1: 256}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (15392, 128)
op3.sizes = ([8, 962, 2], [128])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 256], stride=[256, 256, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 31, 31], stride=[246016, 961, 31, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 31, 31], stride=[246016, 961, 31, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 962, z2: 2, z3: 128}
    index0 = z1
    index1 = 128*z2 + z3
    index2 = 246016*z0 + 123008*z2 + 961*z3 + ModularIndexing(I, 1, 961)
    index3 = 123008*z2 + 961*z3 + ModularIndexing(I, 1, 961)
    index4 = 1952*z0 + 2*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(962, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf3', get_index_4, getitem_2)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 7696}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf1', 1952*c0 + c1, {c0: 8, c1: 1924}, None),
        MemoryDep('buf2', 1952*c0 + c1, {c0: 8, c1: 1924}, None),
        MemoryDep('buf3', 1952*c0 + c1, {c0: 8, c1: 1924}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (7696, 2)
op4.sizes = ([8, 962], [2])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 962, z2: 2}
    index0 = 1952*z0 + 2*z1 + z2
    index1 = 962*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_3, getitem)
        return store_reduction


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 7696}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', 1952*c0 + c1, {c0: 8, c1: 1924}, None),
        MemoryDep('buf2', 1952*c0 + c1, {c0: 8, c1: 1924}, None),
        MemoryDep('buf3', 1952*c0 + c1, {c0: 8, c1: 1924}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (7696, 2)
op5.sizes = ([8, 962], [2])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1, 2], stride=[1952, 2, 15616, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
class op5_loop_body:
    var_ranges = {z0: 8, z1: 962, z2: 2}
    index0 = 1952*z0 + 2*z1 + z2
    index1 = 962*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_3, getitem_1)
        return store_reduction


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 1970176}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf0', 246016*c0 + 961*c2 + ModularIndexing(I, 1, 961), {c0: 8, c1: 962, c2: 256}, None),
        MemoryDep('buf4', c0, {c0: 7696}, None),
        MemoryDep('buf5', c0, {c0: 7696}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg1_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg3_1', 961*c2 + ModularIndexing(I, 1, 961), {c0: 8, c1: 962, c2: 256}, None),
        MemoryDep('arg4_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg5_1', c1, {c0: 7696, c1: 256}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (1970176, 1)
op7.sizes = ([8, 962, 256], [])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 256], stride=[256, 256, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 31, 31], stride=[246016, 961, 31, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 31, 31], stride=[246016, 961, 31, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 962, z2: 256}
    index0 = z1
    index1 = z2
    index2 = 246016*z0 + 961*z2 + ModularIndexing(I, 1, 961)
    index3 = 961*z2 + ModularIndexing(I, 1, 961)
    index4 = 962*z0 + z1
    index5 = 246272*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(962, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf4', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf5', get_index_5)
        constant_4 = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_2 = ops.load('arg5_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf7', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 1970176}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 1970176}, None)]
op8.met_dependencies = [MemoryDep('arg6_1', c1, {c0: 7696, c1: 256}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (1970176, 1)
op8.sizes = ([7696, 256], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op8_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf8', get_index_2, add, None)
        return store


op9: ExternKernelSchedulerNode(ExternKernelOut)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = [StarDep(name='arg7_1', mode=None), StarDep(name='arg8_1', mode=None)]
op9.outputs = [
    buf9: ExternKernelOut
    buf9.layout = FixedLayout('cuda', torch.float32, size=[7696, 768], stride=[768, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.node.kernel = extern_kernels.addmm


op10: ExternKernelSchedulerNode(FallbackKernel)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: FallbackKernel
    buf10.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf10.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
    ]
]
op10.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op11: ExternKernelSchedulerNode(MultiOutput)
op11.writes = [StarDep(name='buf11', mode=None)]
op11.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: MultiOutput
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 962, 64], stride=[246272, 64, 256, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op11.node.kernel = None


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op15.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
]
op15.node.kernel = extern_kernels.mm


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 1970176}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf0', 246016*c0 + 961*c2 + ModularIndexing(I, 1, 961), {c0: 8, c1: 962, c2: 256}, None),
        MemoryDep('buf15', c0, {c0: 1970176}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg1_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg3_1', 961*c2 + ModularIndexing(I, 1, 961), {c0: 8, c1: 962, c2: 256}, None),
        MemoryDep('arg4_1', c1, {c0: 7696, c1: 256}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
    ]
]
op16.group.device = cuda:0
op16.group.iteration = (1970176, 1)
op16.sizes = ([8, 962, 256], [])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 256], stride=[256, 256, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 31, 31], stride=[246016, 961, 31, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 31, 31], stride=[246016, 961, 31, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op16_loop_body:
    var_ranges = {z0: 8, z1: 962, z2: 256}
    index0 = z1
    index1 = z2
    index2 = 246016*z0 + 961*z2 + ModularIndexing(I, 1, 961)
    index3 = 961*z2 + ModularIndexing(I, 1, 961)
    index4 = 246272*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(962, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf15', get_index_4)
        get_index_5 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf16', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        return add_1


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 7696}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 1970176}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7696])
    buf17.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (7696, 256)
op17.sizes = ([7696], [256])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7696])
class op17_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf17', get_index_1, getitem)
        return store_reduction


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 7696}, None)]
op18.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 1970176}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
    buf18.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (7696, 256)
op18.sizes = ([7696], [256])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
class op18_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, getitem_1)
        return store_reduction


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 1970176}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1970176}, None),
        MemoryDep('buf17', c0, {c0: 7696}, None),
        MemoryDep('buf18', c0, {c0: 7696}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg12_1', c1, {c0: 7696, c1: 256}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (1970176, 1)
op20.sizes = ([7696, 256], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7696])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op20_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf17', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf18', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg11_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg12_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf20', get_index_5, add_1, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelOut)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelOut
    buf21.layout = FixedLayout('cuda', torch.float32, size=[7696, 1024], stride=[1024, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.mm


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 7880704}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 7880704}, None)]
op22.met_dependencies = [MemoryDep('arg14_1', c1, {c0: 7696, c1: 1024}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1024], stride=[985088, 1024, 1])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (7880704, 1)
op22.sizes = ([7696, 1024], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[7696, 1024], stride=[1024, 1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1024], stride=[985088, 1024, 1])
class op22_loop_body:
    var_ranges = {z0: 7696, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg14_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf21', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf22', get_index_4, mul_2, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
    buf23.users = [
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
    ]
]
op23.node.kernel = extern_kernels.mm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 7696}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1970176}, None),
        MemoryDep('buf23', c0, {c0: 1970176}, None)]
op24.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 7696, c1: 256}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
    buf24.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (7696, 256)
op24.sizes = ([7696], [256])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
class op24_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf24', get_index_3, getitem)
        return store_reduction


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 7696}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1970176}, None),
        MemoryDep('buf23', c0, {c0: 1970176}, None)]
op25.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 7696, c1: 256}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
    buf25.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (7696, 256)
op25.sizes = ([7696], [256])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
class op25_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem_1)
        return store_reduction


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 1970176}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1970176}, None),
        MemoryDep('buf23', c0, {c0: 1970176}, None),
        MemoryDep('buf24', c0, {c0: 7696}, None),
        MemoryDep('buf25', c0, {c0: 7696}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg17_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg18_1', c1, {c0: 7696, c1: 256}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (1970176, 1)
op27.sizes = ([7696, 256], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op27_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf24', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf25', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg17_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg18_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf27', get_index_7, add_3, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelOut)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg19_1', mode=None), StarDep(name='arg20_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelOut
    buf28.layout = FixedLayout('cuda', torch.float32, size=[7696, 768], stride=[768, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.node.kernel = extern_kernels.addmm


op29: ExternKernelSchedulerNode(FallbackKernel)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: FallbackKernel
    buf29.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
    ]
]
op29.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op30: ExternKernelSchedulerNode(MultiOutput)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: MultiOutput
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 962, 64], stride=[246272, 64, 256, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = None


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op34.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op34.node.kernel = extern_kernels.mm


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1970176}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 1970176}, None),
        MemoryDep('buf23', c0, {c0: 1970176}, None),
        MemoryDep('buf34', c0, {c0: 1970176}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg22_1', c1, {c0: 7696, c1: 256}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
    ]
]
op35.group.device = cuda:0
op35.group.iteration = (1970176, 1)
op35.sizes = ([7696, 256], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op35_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf23', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf34', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg22_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf35', get_index_5, add_3, None)
        return store


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 7696}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 1970176}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7696])
    buf36.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (7696, 256)
op36.sizes = ([7696], [256])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7696])
class op36_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf36', get_index_1, getitem)
        return store_reduction


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 7696}, None)]
op37.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 1970176}, None)]
op37.met_dependencies = []
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
    buf37.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (7696, 256)
op37.sizes = ([7696], [256])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
class op37_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf37', get_index_1, getitem_1)
        return store_reduction


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 1970176}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1970176}, None),
        MemoryDep('buf36', c0, {c0: 7696}, None),
        MemoryDep('buf37', c0, {c0: 7696}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg24_1', c1, {c0: 7696, c1: 256}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (1970176, 1)
op39.sizes = ([7696, 256], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7696])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op39_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf37', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg23_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg24_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf39', get_index_5, add_1, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg25_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[7696, 1024], stride=[1024, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.node.kernel = extern_kernels.mm


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 7880704}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 7880704}, None)]
op41.met_dependencies = [MemoryDep('arg26_1', c1, {c0: 7696, c1: 1024}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1024], stride=[985088, 1024, 1])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (7880704, 1)
op41.sizes = ([7696, 1024], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[7696, 1024], stride=[1024, 1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1024], stride=[985088, 1024, 1])
class op41_loop_body:
    var_ranges = {z0: 7696, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg26_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf40', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg26_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf41', get_index_4, mul_2, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelOut)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelOut
    buf42.layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
    buf42.users = [
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
    ]
]
op42.node.kernel = extern_kernels.mm


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 7696}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1970176}, None),
        MemoryDep('buf42', c0, {c0: 1970176}, None)]
op43.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 7696, c1: 256}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
    buf43.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (7696, 256)
op43.sizes = ([7696], [256])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
class op43_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf43', get_index_3, getitem)
        return store_reduction


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 7696}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1970176}, None),
        MemoryDep('buf42', c0, {c0: 1970176}, None)]
op44.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 7696, c1: 256}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (7696, 256)
op44.sizes = ([7696], [256])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
class op44_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf44', get_index_3, getitem_1)
        return store_reduction


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 1970176}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1970176}, None),
        MemoryDep('buf42', c0, {c0: 1970176}, None),
        MemoryDep('buf43', c0, {c0: 7696}, None),
        MemoryDep('buf44', c0, {c0: 7696}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg28_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg29_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg30_1', c1, {c0: 7696, c1: 256}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (1970176, 1)
op46.sizes = ([7696, 256], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op46_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf43', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf44', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg29_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg30_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf46', get_index_7, add_3, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg31_1', mode=None), StarDep(name='arg32_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[7696, 768], stride=[768, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.node.kernel = extern_kernels.addmm


op48: ExternKernelSchedulerNode(FallbackKernel)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: FallbackKernel
    buf48.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf48.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op48.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op49: ExternKernelSchedulerNode(MultiOutput)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: MultiOutput
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 962, 64], stride=[246272, 64, 256, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op49.node.kernel = None


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op53.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.mm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 1970176}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf35', c0, {c0: 1970176}, None),
        MemoryDep('buf42', c0, {c0: 1970176}, None),
        MemoryDep('buf53', c0, {c0: 1970176}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg28_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg34_1', c1, {c0: 7696, c1: 256}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf54.users = [
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (1970176, 1)
op54.sizes = ([7696, 256], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op54_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf42', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf53', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg34_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf54', get_index_5, add_3, None)
        return store


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 7696}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 1970176}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7696])
    buf55.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (7696, 256)
op55.sizes = ([7696], [256])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7696])
class op55_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf55', get_index_1, getitem)
        return store_reduction


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 7696}, None)]
op56.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 1970176}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
    buf56.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (7696, 256)
op56.sizes = ([7696], [256])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
class op56_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf56', get_index_1, getitem_1)
        return store_reduction


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 1970176}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 1970176}, None),
        MemoryDep('buf55', c0, {c0: 7696}, None),
        MemoryDep('buf56', c0, {c0: 7696}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 7696, c1: 256}, None),
        MemoryDep('arg36_1', c1, {c0: 7696, c1: 256}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (1970176, 1)
op58.sizes = ([7696, 256], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7696])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1], stride=[962, 1, 7712])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op58_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf55', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf56', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg35_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg36_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf58', get_index_5, add_1, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[7696, 1024], stride=[1024, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.mm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 7880704}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 7880704}, None)]
op60.met_dependencies = [MemoryDep('arg38_1', c1, {c0: 7696, c1: 1024}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1024], stride=[985088, 1024, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (7880704, 1)
op60.sizes = ([7696, 1024], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[7696, 1024], stride=[1024, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 1024], stride=[985088, 1024, 1])
class op60_loop_body:
    var_ranges = {z0: 7696, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf59', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg38_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf60', get_index_4, mul_2, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.mm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1970176}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 1970176}, None),
        MemoryDep('buf61', c0, {c0: 1970176}, None)]
op62.met_dependencies = [MemoryDep('arg40_1', c1, {c0: 7696, c1: 256}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
    buf62.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op62.group.device = cuda:0
op62.group.iteration = (1970176, 1)
op62.sizes = ([7696, 256], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[7696, 256], stride=[256, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 962, 256], stride=[246272, 256, 1])
class op62_loop_body:
    var_ranges = {z0: 7696, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf61', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg40_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf62', get_index_3, add_1, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelOut)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelOut
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
]
op63.node.kernel = extern_kernels.mm


op64: ExternKernelSchedulerNode(ExternKernelAlloc)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op64.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelAlloc
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
    ]
]
op64.node.kernel = extern_kernels.convolution


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 2056}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf63', 512*c0 + c2, {c0: 8, c1: 257, c2: 512}, None),
        MemoryDep('buf64', 131072*c0 + c2 + 512*ModularIndexing(I, 1, 256), {c0: 8, c1: 257, c2: 512}, None)]
op65.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg44_1', c1, {c0: 2056, c1: 512}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (2056, 512)
op65.sizes = ([8, 257], [512])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op65_loop_body:
    var_ranges = {z0: 8, z1: 257, z2: 512}
    index0 = z1
    index1 = 512*z0 + z2
    index2 = z2
    index3 = 131072*z0 + z2 + 512*ModularIndexing(I, 1, 256)
    index4 = 257*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(257, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf65', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 2056}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf63', 512*c0 + c2, {c0: 8, c1: 257, c2: 512}, None),
        MemoryDep('buf64', 131072*c0 + c2 + 512*ModularIndexing(I, 1, 256), {c0: 8, c1: 257, c2: 512}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg44_1', c1, {c0: 2056, c1: 512}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (2056, 512)
op66.sizes = ([8, 257], [512])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op66_loop_body:
    var_ranges = {z0: 8, z1: 257, z2: 512}
    index0 = z1
    index1 = 512*z0 + z2
    index2 = z2
    index3 = 131072*z0 + z2 + 512*ModularIndexing(I, 1, 256)
    index4 = 257*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(257, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf66', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 1052672}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf63', 512*c0 + c2, {c0: 8, c1: 257, c2: 512}, None),
        MemoryDep('buf64', 131072*c0 + c2 + 512*ModularIndexing(I, 1, 256), {c0: 8, c1: 257, c2: 512}, None),
        MemoryDep('buf65', c0, {c0: 2056}, None),
        MemoryDep('buf66', c0, {c0: 2056}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg44_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg45_1', c1, {c0: 2056, c1: 512}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (1052672, 1)
op68.sizes = ([8, 257, 512], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op68_loop_body:
    var_ranges = {z0: 8, z1: 257, z2: 512}
    index0 = z1
    index1 = 512*z0 + z2
    index2 = z2
    index3 = 131072*z0 + z2 + 512*ModularIndexing(I, 1, 256)
    index4 = 257*z0 + z1
    index5 = 131584*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(257, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf65', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf66', get_index_5)
        constant_4 = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_2 = ops.load('arg45_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf68', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 1052672}, None)]
op69.unmet_dependencies = [MemoryDep('buf68', c0, {c0: 1052672}, None)]
op69.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 2056, c1: 512}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (1052672, 1)
op69.sizes = ([2056, 512], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op69_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf69', get_index_2, add, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='arg47_1', mode=None), StarDep(name='arg48_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda', torch.float32, size=[2056, 1536], stride=[1536, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.node.kernel = extern_kernels.addmm


op71: ExternKernelSchedulerNode(FallbackKernel)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: FallbackKernel
    buf71.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf71.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
    ]
]
op71.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op72: ExternKernelSchedulerNode(MultiOutput)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: MultiOutput
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 257, 64], stride=[131584, 64, 512, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op72.node.kernel = None


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op76.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.node.kernel = extern_kernels.mm


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 1052672}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf63', 512*c0 + c2, {c0: 8, c1: 257, c2: 512}, None),
        MemoryDep('buf64', 131072*c0 + c2 + 512*ModularIndexing(I, 1, 256), {c0: 8, c1: 257, c2: 512}, None),
        MemoryDep('buf76', c0, {c0: 1052672}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg44_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg50_1', c1, {c0: 2056, c1: 512}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (1052672, 1)
op77.sizes = ([8, 257, 512], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 257, z2: 512}
    index0 = z1
    index1 = 512*z0 + z2
    index2 = z2
    index3 = 131072*z0 + z2 + 512*ModularIndexing(I, 1, 256)
    index4 = 131584*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(257, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf76', get_index_4)
        get_index_5 = self.get_index('index2')
        load_1 = ops.load('arg50_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf77', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 2056}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 1052672}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
    buf78.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (2056, 512)
op78.sizes = ([2056], [512])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
class op78_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf78', get_index_1, getitem)
        return store_reduction


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 2056}, None)]
op79.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 1052672}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf79.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (2056, 512)
op79.sizes = ([2056], [512])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op79_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_1, getitem_1)
        return store_reduction


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 1052672}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1052672}, None),
        MemoryDep('buf78', c0, {c0: 2056}, None),
        MemoryDep('buf79', c0, {c0: 2056}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg52_1', c1, {c0: 2056, c1: 512}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (1052672, 1)
op81.sizes = ([2056, 512], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op81_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf78', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf79', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg51_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg52_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, add_1, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False)]
]
op82.node.kernel = extern_kernels.mm


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 4210688}, None)]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 4210688}, None)]
op83.met_dependencies = [MemoryDep('arg54_1', c1, {c0: 2056, c1: 2048}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (4210688, 1)
op83.sizes = ([2056, 2048], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
class op83_loop_body:
    var_ranges = {z0: 2056, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf83', get_index_4, mul_2, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelOut)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelOut
    buf84.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf84.users = [
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
    ]
]
op84.node.kernel = extern_kernels.mm


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 2056}, None)]
op85.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1052672}, None),
        MemoryDep('buf84', c0, {c0: 1052672}, None)]
op85.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 2056, c1: 512}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf85.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (2056, 512)
op85.sizes = ([2056], [512])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op85_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf85', get_index_3, getitem)
        return store_reduction


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 2056}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1052672}, None),
        MemoryDep('buf84', c0, {c0: 1052672}, None)]
op86.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 2056, c1: 512}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf86.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (2056, 512)
op86.sizes = ([2056], [512])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op86_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf86', get_index_3, getitem_1)
        return store_reduction


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 1052672}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1052672}, None),
        MemoryDep('buf84', c0, {c0: 1052672}, None),
        MemoryDep('buf85', c0, {c0: 2056}, None),
        MemoryDep('buf86', c0, {c0: 2056}, None)]
op88.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg57_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg58_1', c1, {c0: 2056, c1: 512}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (1052672, 1)
op88.sizes = ([2056, 512], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op88_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf85', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf86', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg57_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg58_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf88', get_index_7, add_3, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg59_1', mode=None), StarDep(name='arg60_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[2056, 1536], stride=[1536, 1])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = extern_kernels.addmm


op90: ExternKernelSchedulerNode(FallbackKernel)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: FallbackKernel
    buf90.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False),
    ]
]
op90.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op91: ExternKernelSchedulerNode(MultiOutput)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: MultiOutput
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 257, 64], stride=[131584, 64, 512, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op91.node.kernel = None


op95: ExternKernelSchedulerNode(ExternKernelOut)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op95.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op95.outputs = [
    buf95: ExternKernelOut
    buf95.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.node.kernel = extern_kernels.mm


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1052672}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1052672}, None),
        MemoryDep('buf84', c0, {c0: 1052672}, None),
        MemoryDep('buf95', c0, {c0: 1052672}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg62_1', c1, {c0: 2056, c1: 512}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (1052672, 1)
op96.sizes = ([2056, 512], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op96_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg56_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf95', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg62_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_3, None)
        return store


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 2056}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 1052672}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
    buf97.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (2056, 512)
op97.sizes = ([2056], [512])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
class op97_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf97', get_index_1, getitem)
        return store_reduction


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 2056}, None)]
op98.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 1052672}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf98.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (2056, 512)
op98.sizes = ([2056], [512])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op98_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf98', get_index_1, getitem_1)
        return store_reduction


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 1052672}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf96', c0, {c0: 1052672}, None),
        MemoryDep('buf97', c0, {c0: 2056}, None),
        MemoryDep('buf98', c0, {c0: 2056}, None)]
op100.met_dependencies = 
    [   MemoryDep('arg63_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg64_1', c1, {c0: 2056, c1: 512}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (1052672, 1)
op100.sizes = ([2056, 512], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op100_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf97', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf98', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg63_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg64_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf100', get_index_5, add_1, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.node.kernel = extern_kernels.mm


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 4210688}, None)]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 4210688}, None)]
op102.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 2056, c1: 2048}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (4210688, 1)
op102.sizes = ([2056, 2048], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
class op102_loop_body:
    var_ranges = {z0: 2056, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf101', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg66_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf102', get_index_4, mul_2, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf103.users = [
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op103.node.kernel = extern_kernels.mm


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 2056}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 1052672}, None),
        MemoryDep('buf96', c0, {c0: 1052672}, None)]
op104.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 2056, c1: 512}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf104.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (2056, 512)
op104.sizes = ([2056], [512])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op104_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf103', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf104', get_index_3, getitem)
        return store_reduction


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 2056}, None)]
op105.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 1052672}, None),
        MemoryDep('buf96', c0, {c0: 1052672}, None)]
op105.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 2056, c1: 512}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf105.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (2056, 512)
op105.sizes = ([2056], [512])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op105_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf103', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf105', get_index_3, getitem_1)
        return store_reduction


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 1052672}, None)]
op107.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 1052672}, None),
        MemoryDep('buf104', c0, {c0: 2056}, None),
        MemoryDep('buf105', c0, {c0: 2056}, None),
        MemoryDep('buf96', c0, {c0: 1052672}, None)]
op107.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg69_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg70_1', c1, {c0: 2056, c1: 512}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (1052672, 1)
op107.sizes = ([2056, 512], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op107_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf103', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf104', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf105', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg69_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg70_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf107', get_index_7, add_3, None)
        return store


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='arg71_1', mode=None), StarDep(name='arg72_1', mode=None)]
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda', torch.float32, size=[2056, 1536], stride=[1536, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.node.kernel = extern_kernels.addmm


op109: ExternKernelSchedulerNode(FallbackKernel)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: FallbackKernel
    buf109.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf109.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
    ]
]
op109.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op110: ExternKernelSchedulerNode(MultiOutput)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: MultiOutput
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 257, 64], stride=[131584, 64, 512, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op110.node.kernel = None


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op114.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op114.node.kernel = extern_kernels.mm


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 1052672}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf103', c0, {c0: 1052672}, None),
        MemoryDep('buf114', c0, {c0: 1052672}, None),
        MemoryDep('buf96', c0, {c0: 1052672}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg74_1', c1, {c0: 2056, c1: 512}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
    ]
]
op115.group.device = cuda:0
op115.group.iteration = (1052672, 1)
op115.sizes = ([2056, 512], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op115_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf103', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf114', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg74_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf115', get_index_5, add_3, None)
        return store


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 2056}, None)]
op116.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 1052672}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
    buf116.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (2056, 512)
op116.sizes = ([2056], [512])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
class op116_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf116', get_index_1, getitem)
        return store_reduction


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 2056}, None)]
op117.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 1052672}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf117.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (2056, 512)
op117.sizes = ([2056], [512])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op117_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf117', get_index_1, getitem_1)
        return store_reduction


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 1052672}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1052672}, None),
        MemoryDep('buf116', c0, {c0: 2056}, None),
        MemoryDep('buf117', c0, {c0: 2056}, None)]
op119.met_dependencies = 
    [   MemoryDep('arg75_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg76_1', c1, {c0: 2056, c1: 512}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (1052672, 1)
op119.sizes = ([2056, 512], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op119_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf117', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg75_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg76_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf119', get_index_5, add_1, None)
        return store


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op120.node.kernel = extern_kernels.mm


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 4210688}, None)]
op121.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 4210688}, None)]
op121.met_dependencies = [MemoryDep('arg78_1', c1, {c0: 2056, c1: 2048}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (4210688, 1)
op121.sizes = ([2056, 2048], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
class op121_loop_body:
    var_ranges = {z0: 2056, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf120', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg78_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf121', get_index_4, mul_2, None)
        return store


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf122.users = [
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
    ]
]
op122.node.kernel = extern_kernels.mm


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 2056}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1052672}, None),
        MemoryDep('buf122', c0, {c0: 1052672}, None)]
op123.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 2056, c1: 512}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf123.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (2056, 512)
op123.sizes = ([2056], [512])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op123_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf123', get_index_3, getitem)
        return store_reduction


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 2056}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1052672}, None),
        MemoryDep('buf122', c0, {c0: 1052672}, None)]
op124.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 2056, c1: 512}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf124.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (2056, 512)
op124.sizes = ([2056], [512])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op124_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf124', get_index_3, getitem_1)
        return store_reduction


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 1052672}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1052672}, None),
        MemoryDep('buf122', c0, {c0: 1052672}, None),
        MemoryDep('buf123', c0, {c0: 2056}, None),
        MemoryDep('buf124', c0, {c0: 2056}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg81_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg82_1', c1, {c0: 2056, c1: 512}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (1052672, 1)
op126.sizes = ([2056, 512], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op126_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf123', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf124', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg81_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg82_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf126', get_index_7, add_3, None)
        return store


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg83_1', mode=None), StarDep(name='arg84_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda', torch.float32, size=[2056, 1536], stride=[1536, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.node.kernel = extern_kernels.addmm


op128: ExternKernelSchedulerNode(FallbackKernel)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: FallbackKernel
    buf128.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op128.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op129: ExternKernelSchedulerNode(MultiOutput)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: MultiOutput
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 257, 64], stride=[131584, 64, 512, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = None


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op133.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False)]
]
op133.node.kernel = extern_kernels.mm


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 1052672}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1052672}, None),
        MemoryDep('buf122', c0, {c0: 1052672}, None),
        MemoryDep('buf133', c0, {c0: 1052672}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg86_1', c1, {c0: 2056, c1: 512}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (1052672, 1)
op134.sizes = ([2056, 512], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op134_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf122', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg80_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf133', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg86_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf134', get_index_5, add_3, None)
        return store


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 2056}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 1052672}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
    buf135.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (2056, 512)
op135.sizes = ([2056], [512])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
class op135_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf135', get_index_1, getitem)
        return store_reduction


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 2056}, None)]
op136.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 1052672}, None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf136.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (2056, 512)
op136.sizes = ([2056], [512])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op136_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf136', get_index_1, getitem_1)
        return store_reduction


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 1052672}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1052672}, None),
        MemoryDep('buf135', c0, {c0: 2056}, None),
        MemoryDep('buf136', c0, {c0: 2056}, None)]
op138.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg88_1', c1, {c0: 2056, c1: 512}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (1052672, 1)
op138.sizes = ([2056, 512], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op138_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf135', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf136', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg87_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg88_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf138', get_index_5, add_1, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False)]
]
op139.node.kernel = extern_kernels.mm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 4210688}, None)]
op140.unmet_dependencies = [MemoryDep('buf139', c0, {c0: 4210688}, None)]
op140.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 2056, c1: 2048}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (4210688, 1)
op140.sizes = ([2056, 2048], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
class op140_loop_body:
    var_ranges = {z0: 2056, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg90_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf140', get_index_4, mul_2, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
    ]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 2056}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1052672}, None),
        MemoryDep('buf141', c0, {c0: 1052672}, None)]
op142.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 2056, c1: 512}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf142.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (2056, 512)
op142.sizes = ([2056], [512])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op142_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf141', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf142', get_index_3, getitem)
        return store_reduction


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 2056}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1052672}, None),
        MemoryDep('buf141', c0, {c0: 1052672}, None)]
op143.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 2056, c1: 512}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf143.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (2056, 512)
op143.sizes = ([2056], [512])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op143_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf141', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf143', get_index_3, getitem_1)
        return store_reduction


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 1052672}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1052672}, None),
        MemoryDep('buf141', c0, {c0: 1052672}, None),
        MemoryDep('buf142', c0, {c0: 2056}, None),
        MemoryDep('buf143', c0, {c0: 2056}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg93_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg94_1', c1, {c0: 2056, c1: 512}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (1052672, 1)
op145.sizes = ([2056, 512], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op145_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf141', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf142', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf143', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg93_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg94_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf145', get_index_7, add_3, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg95_1', mode=None), StarDep(name='arg96_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[2056, 1536], stride=[1536, 1])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.node.kernel = extern_kernels.addmm


op147: ExternKernelSchedulerNode(FallbackKernel)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: FallbackKernel
    buf147.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf147.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
    ]
]
op147.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op148: ExternKernelSchedulerNode(MultiOutput)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: MultiOutput
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 257, 64], stride=[131584, 64, 512, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op148.node.kernel = None


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op152.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op152.node.kernel = extern_kernels.mm


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 1052672}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1052672}, None),
        MemoryDep('buf141', c0, {c0: 1052672}, None),
        MemoryDep('buf152', c0, {c0: 1052672}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg98_1', c1, {c0: 2056, c1: 512}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (1052672, 1)
op153.sizes = ([2056, 512], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op153_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf141', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf152', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg98_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf153', get_index_5, add_3, None)
        return store


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 2056}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 1052672}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (2056, 512)
op154.sizes = ([2056], [512])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
class op154_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf154', get_index_1, getitem)
        return store_reduction


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 2056}, None)]
op155.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 1052672}, None)]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf155.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (2056, 512)
op155.sizes = ([2056], [512])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op155_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf155', get_index_1, getitem_1)
        return store_reduction


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 1052672}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1052672}, None),
        MemoryDep('buf154', c0, {c0: 2056}, None),
        MemoryDep('buf155', c0, {c0: 2056}, None)]
op157.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg99_1', c1, {c0: 2056, c1: 512}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (1052672, 1)
op157.sizes = ([2056, 512], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op157_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf154', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf155', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf157', get_index_5, add_1, None)
        return store


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
]
op158.node.kernel = extern_kernels.mm


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 4210688}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 4210688}, None)]
op159.met_dependencies = [MemoryDep('arg102_1', c1, {c0: 2056, c1: 2048}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (4210688, 1)
op159.sizes = ([2056, 2048], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
class op159_loop_body:
    var_ranges = {z0: 2056, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf158', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg102_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf159', get_index_4, mul_2, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
    ]
]
op160.node.kernel = extern_kernels.mm


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 2056}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1052672}, None),
        MemoryDep('buf160', c0, {c0: 1052672}, None)]
op161.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 2056, c1: 512}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf161.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (2056, 512)
op161.sizes = ([2056], [512])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op161_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf160', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf161', get_index_3, getitem)
        return store_reduction


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 2056}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1052672}, None),
        MemoryDep('buf160', c0, {c0: 1052672}, None)]
op162.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 2056, c1: 512}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf162.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (2056, 512)
op162.sizes = ([2056], [512])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op162_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf160', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf162', get_index_3, getitem_1)
        return store_reduction


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 1052672}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1052672}, None),
        MemoryDep('buf160', c0, {c0: 1052672}, None),
        MemoryDep('buf161', c0, {c0: 2056}, None),
        MemoryDep('buf162', c0, {c0: 2056}, None)]
op164.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg105_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg106_1', c1, {c0: 2056, c1: 512}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (1052672, 1)
op164.sizes = ([2056, 512], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op164_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf160', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf161', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf162', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg105_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg106_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf164', get_index_7, add_3, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg107_1', mode=None), StarDep(name='arg108_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda', torch.float32, size=[2056, 1536], stride=[1536, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.node.kernel = extern_kernels.addmm


op166: ExternKernelSchedulerNode(FallbackKernel)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: FallbackKernel
    buf166.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf166.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
    ]
]
op166.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op167: ExternKernelSchedulerNode(MultiOutput)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: MultiOutput
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 257, 64], stride=[131584, 64, 512, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = None


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op171.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False)]
]
op171.node.kernel = extern_kernels.mm


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 1052672}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1052672}, None),
        MemoryDep('buf160', c0, {c0: 1052672}, None),
        MemoryDep('buf171', c0, {c0: 1052672}, None)]
op172.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg110_1', c1, {c0: 2056, c1: 512}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (1052672, 1)
op172.sizes = ([2056, 512], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op172_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf160', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg104_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf171', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf172', get_index_5, add_3, None)
        return store


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 2056}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 1052672}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
    buf173.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (2056, 512)
op173.sizes = ([2056], [512])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
class op173_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_1, getitem)
        return store_reduction


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 2056}, None)]
op174.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 1052672}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (2056, 512)
op174.sizes = ([2056], [512])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
class op174_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf174', get_index_1, getitem_1)
        return store_reduction


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 1052672}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 1052672}, None),
        MemoryDep('buf173', c0, {c0: 2056}, None),
        MemoryDep('buf174', c0, {c0: 2056}, None)]
op176.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 2056, c1: 512}, None),
        MemoryDep('arg112_1', c1, {c0: 2056, c1: 512}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (1052672, 1)
op176.sizes = ([2056, 512], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2056])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 1], stride=[257, 1, 2080])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op176_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf173', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf174', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg111_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg112_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf176', get_index_5, add_1, None)
        return store


op177: ExternKernelSchedulerNode(ExternKernelOut)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op177.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op177.outputs = [
    buf177: ExternKernelOut
    buf177.layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False)]
]
op177.node.kernel = extern_kernels.mm


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 4210688}, None)]
op178.unmet_dependencies = [MemoryDep('buf177', c0, {c0: 4210688}, None)]
op178.met_dependencies = [MemoryDep('arg114_1', c1, {c0: 2056, c1: 2048}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (4210688, 1)
op178.sizes = ([2056, 2048], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[2056, 2048], stride=[2048, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 2048], stride=[526336, 2048, 1])
class op178_loop_body:
    var_ranges = {z0: 2056, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg114_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf177', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf178', get_index_4, mul_2, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 1052672}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 1052672}, None),
        MemoryDep('buf179', c0, {c0: 1052672}, None)]
op180.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 2056, c1: 512}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
    buf180.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op180.group.device = cuda:0
op180.group.iteration = (1052672, 1)
op180.sizes = ([2056, 512], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[2056, 512], stride=[512, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 257, 512], stride=[131584, 512, 1])
class op180_loop_body:
    var_ranges = {z0: 2056, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf179', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg116_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf180', get_index_3, add_1, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 1024], stride=[1024, 1])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
    ]
]
op181.node.kernel = extern_kernels.mm


op182: ExternKernelSchedulerNode(ExternKernelAlloc)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op182.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op182.outputs = [
    buf182: ExternKernelAlloc
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 1, 8192, 1024])
    buf182.users = [
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
    ]
]
op182.node.kernel = extern_kernels.convolution


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 520}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf181', 1024*c0 + c2, {c0: 8, c1: 65, c2: 1024}, None),
        MemoryDep('buf182', 65536*c0 + c2 + 1024*ModularIndexing(I, 1, 64), {c0: 8, c1: 65, c2: 1024}, None)]
op183.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg120_1', c1, {c0: 520, c1: 1024}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf183.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (520, 1024)
op183.sizes = ([8, 65], [1024])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 1024], stride=[1024, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 1, 8192, 1024])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op183_loop_body:
    var_ranges = {z0: 8, z1: 65, z2: 1024}
    index0 = z1
    index1 = 1024*z0 + z2
    index2 = z2
    index3 = 65536*z0 + z2 + 1024*ModularIndexing(I, 1, 64)
    index4 = 65*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(65, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf183', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 520}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf181', 1024*c0 + c2, {c0: 8, c1: 65, c2: 1024}, None),
        MemoryDep('buf182', 65536*c0 + c2 + 1024*ModularIndexing(I, 1, 64), {c0: 8, c1: 65, c2: 1024}, None)]
op184.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg120_1', c1, {c0: 520, c1: 1024}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf184.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (520, 1024)
op184.sizes = ([8, 65], [1024])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 1024], stride=[1024, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 1, 8192, 1024])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op184_loop_body:
    var_ranges = {z0: 8, z1: 65, z2: 1024}
    index0 = z1
    index1 = 1024*z0 + z2
    index2 = z2
    index3 = 65536*z0 + z2 + 1024*ModularIndexing(I, 1, 64)
    index4 = 65*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(65, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf184', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 532480}, None)]
op186.unmet_dependencies = 
    [   MemoryDep('buf181', 1024*c0 + c2, {c0: 8, c1: 65, c2: 1024}, None),
        MemoryDep('buf182', 65536*c0 + c2 + 1024*ModularIndexing(I, 1, 64), {c0: 8, c1: 65, c2: 1024}, None),
        MemoryDep('buf183', c0, {c0: 520}, None),
        MemoryDep('buf184', c0, {c0: 520}, None)]
op186.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg120_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg121_1', c1, {c0: 520, c1: 1024}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (532480, 1)
op186.sizes = ([8, 65, 1024], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 1024], stride=[1024, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 1, 8192, 1024])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op186_loop_body:
    var_ranges = {z0: 8, z1: 65, z2: 1024}
    index0 = z1
    index1 = 1024*z0 + z2
    index2 = z2
    index3 = 65536*z0 + z2 + 1024*ModularIndexing(I, 1, 64)
    index4 = 65*z0 + z1
    index5 = 66560*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(65, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf183', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('buf184', get_index_5)
        constant_4 = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index2')
        load_2 = ops.load('arg121_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index5')
        store = ops.store('buf186', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 532480}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', c0, {c0: 532480}, None)]
op187.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 520, c1: 1024}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (532480, 1)
op187.sizes = ([520, 1024], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op187_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf187', get_index_2, add, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg123_1', mode=None), StarDep(name='arg124_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda', torch.float32, size=[520, 3072], stride=[3072, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.node.kernel = extern_kernels.addmm


op189: ExternKernelSchedulerNode(FallbackKernel)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: FallbackKernel
    buf189.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False),
    ]
]
op189.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op190: ExternKernelSchedulerNode(MultiOutput)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: MultiOutput
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 65, 64], stride=[66560, 64, 1024, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op190.node.kernel = None


op194: ExternKernelSchedulerNode(ExternKernelOut)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op194.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelOut
    buf194.layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
    buf194.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False)]
]
op194.node.kernel = extern_kernels.mm


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 532480}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf181', 1024*c0 + c2, {c0: 8, c1: 65, c2: 1024}, None),
        MemoryDep('buf182', 65536*c0 + c2 + 1024*ModularIndexing(I, 1, 64), {c0: 8, c1: 65, c2: 1024}, None),
        MemoryDep('buf194', c0, {c0: 532480}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg120_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg126_1', c1, {c0: 520, c1: 1024}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
    ]
]
op195.group.device = cuda:0
op195.group.iteration = (532480, 1)
op195.sizes = ([8, 65, 1024], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 1024], stride=[1024, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 8, 8], stride=[65536, 1, 8192, 1024])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op195_loop_body:
    var_ranges = {z0: 8, z1: 65, z2: 1024}
    index0 = z1
    index1 = 1024*z0 + z2
    index2 = z2
    index3 = 65536*z0 + z2 + 1024*ModularIndexing(I, 1, 64)
    index4 = 66560*z0 + 1024*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(65, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('buf194', get_index_4)
        get_index_5 = self.get_index('index2')
        load_1 = ops.load('arg126_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf195', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        return add
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        return add


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 520}, None)]
op196.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 532480}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf196.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (520, 1024)
op196.sizes = ([520], [1024])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op196_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf196', get_index_1, getitem)
        return store_reduction


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 520}, None)]
op197.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 532480}, None)]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf197.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (520, 1024)
op197.sizes = ([520], [1024])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op197_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf197', get_index_1, getitem_1)
        return store_reduction


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 532480}, None)]
op199.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 532480}, None),
        MemoryDep('buf196', c0, {c0: 520}, None),
        MemoryDep('buf197', c0, {c0: 520}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg128_1', c1, {c0: 520, c1: 1024}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (532480, 1)
op199.sizes = ([520, 1024], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op199_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf196', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf197', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg127_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg128_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf199', get_index_5, add_1, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[520, 4096], stride=[4096, 1])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.node.kernel = extern_kernels.mm


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 2129920}, None)]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 2129920}, None)]
op201.met_dependencies = [MemoryDep('arg130_1', c1, {c0: 520, c1: 4096}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 4096], stride=[266240, 4096, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (2129920, 1)
op201.sizes = ([520, 4096], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[520, 4096], stride=[4096, 1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 4096], stride=[266240, 4096, 1])
class op201_loop_body:
    var_ranges = {z0: 520, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg130_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf200', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg130_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf201', get_index_4, mul_2, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op202.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
    ]
]
op202.node.kernel = extern_kernels.mm


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 520}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 532480}, None),
        MemoryDep('buf202', c0, {c0: 532480}, None)]
op203.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 520, c1: 1024}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (520, 1024)
op203.sizes = ([520], [1024])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op203_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg132_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf203', get_index_3, getitem)
        return store_reduction


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 520}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 532480}, None),
        MemoryDep('buf202', c0, {c0: 532480}, None)]
op204.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 520, c1: 1024}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (520, 1024)
op204.sizes = ([520], [1024])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op204_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg132_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf204', get_index_3, getitem_1)
        return store_reduction


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 532480}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 532480}, None),
        MemoryDep('buf202', c0, {c0: 532480}, None),
        MemoryDep('buf203', c0, {c0: 520}, None),
        MemoryDep('buf204', c0, {c0: 520}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg133_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg134_1', c1, {c0: 520, c1: 1024}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (532480, 1)
op206.sizes = ([520, 1024], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op206_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg132_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf203', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf204', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg133_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg134_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf206', get_index_7, add_3, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg135_1', mode=None), StarDep(name='arg136_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda', torch.float32, size=[520, 3072], stride=[3072, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = extern_kernels.addmm


op208: ExternKernelSchedulerNode(FallbackKernel)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: FallbackKernel
    buf208.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False),
    ]
]
op208.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op209: ExternKernelSchedulerNode(MultiOutput)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: MultiOutput
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 65, 64], stride=[66560, 64, 1024, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = None


op213: ExternKernelSchedulerNode(ExternKernelOut)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf209', mode=None)]
op213.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op213.outputs = [
    buf213: ExternKernelOut
    buf213.layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False)]
]
op213.node.kernel = extern_kernels.mm


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 532480}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 532480}, None),
        MemoryDep('buf202', c0, {c0: 532480}, None),
        MemoryDep('buf213', c0, {c0: 532480}, None)]
op214.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg138_1', c1, {c0: 520, c1: 1024}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf214.users = [
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False),
    ]
]
op214.group.device = cuda:0
op214.group.iteration = (532480, 1)
op214.sizes = ([520, 1024], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op214_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg132_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf213', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg138_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf214', get_index_5, add_3, None)
        return store


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 520}, None)]
op215.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 532480}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf215.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (520, 1024)
op215.sizes = ([520], [1024])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op215_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf215', get_index_1, getitem)
        return store_reduction


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 520}, None)]
op216.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 532480}, None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf216.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (520, 1024)
op216.sizes = ([520], [1024])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op216_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf216', get_index_1, getitem_1)
        return store_reduction


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 532480}, None)]
op218.unmet_dependencies = 
    [   MemoryDep('buf214', c0, {c0: 532480}, None),
        MemoryDep('buf215', c0, {c0: 520}, None),
        MemoryDep('buf216', c0, {c0: 520}, None)]
op218.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg140_1', c1, {c0: 520, c1: 1024}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (532480, 1)
op218.sizes = ([520, 1024], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op218_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf215', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf216', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg139_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg140_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf218', get_index_5, add_1, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelOut)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelOut
    buf219.layout = FixedLayout('cuda', torch.float32, size=[520, 4096], stride=[4096, 1])
    buf219.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False)]
]
op219.node.kernel = extern_kernels.mm


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 2129920}, None)]
op220.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 2129920}, None)]
op220.met_dependencies = [MemoryDep('arg142_1', c1, {c0: 520, c1: 4096}, None)]
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 4096], stride=[266240, 4096, 1])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (2129920, 1)
op220.sizes = ([520, 4096], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[520, 4096], stride=[4096, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 4096], stride=[266240, 4096, 1])
class op220_loop_body:
    var_ranges = {z0: 520, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg142_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf220', get_index_4, mul_2, None)
        return store


op221: ExternKernelSchedulerNode(ExternKernelOut)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op221.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op221.outputs = [
    buf221: ExternKernelOut
    buf221.layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
    buf221.users = [
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False),
    ]
]
op221.node.kernel = extern_kernels.mm


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 520}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf214', c0, {c0: 532480}, None),
        MemoryDep('buf221', c0, {c0: 532480}, None)]
op222.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 520, c1: 1024}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf222.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (520, 1024)
op222.sizes = ([520], [1024])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op222_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg144_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf222', get_index_3, getitem)
        return store_reduction


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 520}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf214', c0, {c0: 532480}, None),
        MemoryDep('buf221', c0, {c0: 532480}, None)]
op223.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 520, c1: 1024}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf223.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (520, 1024)
op223.sizes = ([520], [1024])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op223_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg144_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf223', get_index_3, getitem_1)
        return store_reduction


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 532480}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf214', c0, {c0: 532480}, None),
        MemoryDep('buf221', c0, {c0: 532480}, None),
        MemoryDep('buf222', c0, {c0: 520}, None),
        MemoryDep('buf223', c0, {c0: 520}, None)]
op225.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg145_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg146_1', c1, {c0: 520, c1: 1024}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (532480, 1)
op225.sizes = ([520, 1024], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op225_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg144_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf222', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf223', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg145_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg146_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf225', get_index_7, add_3, None)
        return store


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf225', mode=None)]
op226.met_dependencies = [StarDep(name='arg147_1', mode=None), StarDep(name='arg148_1', mode=None)]
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda', torch.float32, size=[520, 3072], stride=[3072, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.node.kernel = extern_kernels.addmm


op227: ExternKernelSchedulerNode(FallbackKernel)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op227.met_dependencies = []
op227.outputs = [
    buf227: FallbackKernel
    buf227.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf227.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op227.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op228: ExternKernelSchedulerNode(MultiOutput)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: MultiOutput
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 65, 64], stride=[66560, 64, 1024, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op228.node.kernel = None


op232: ExternKernelSchedulerNode(ExternKernelOut)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op232.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op232.outputs = [
    buf232: ExternKernelOut
    buf232.layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
    buf232.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False)]
]
op232.node.kernel = extern_kernels.mm


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 532480}, None)]
op233.unmet_dependencies = 
    [   MemoryDep('buf214', c0, {c0: 532480}, None),
        MemoryDep('buf221', c0, {c0: 532480}, None),
        MemoryDep('buf232', c0, {c0: 532480}, None)]
op233.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg150_1', c1, {c0: 520, c1: 1024}, None)]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf233.users = [
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op233.group.device = cuda:0
op233.group.iteration = (532480, 1)
op233.sizes = ([520, 1024], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op233_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg144_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf232', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg150_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf233', get_index_5, add_3, None)
        return store


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 520}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 532480}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf234.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (520, 1024)
op234.sizes = ([520], [1024])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op234_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf234', get_index_1, getitem)
        return store_reduction


op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 520}, None)]
op235.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 532480}, None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf235.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (520, 1024)
op235.sizes = ([520], [1024])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op235_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf235', get_index_1, getitem_1)
        return store_reduction


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 532480}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 532480}, None),
        MemoryDep('buf234', c0, {c0: 520}, None),
        MemoryDep('buf235', c0, {c0: 520}, None)]
op237.met_dependencies = 
    [   MemoryDep('arg151_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg152_1', c1, {c0: 520, c1: 1024}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (532480, 1)
op237.sizes = ([520, 1024], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op237_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf234', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf235', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg151_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg152_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf237', get_index_5, add_1, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda', torch.float32, size=[520, 4096], stride=[4096, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.mm


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 2129920}, None)]
op239.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 2129920}, None)]
op239.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 520, c1: 4096}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 4096], stride=[266240, 4096, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (2129920, 1)
op239.sizes = ([520, 4096], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[520, 4096], stride=[4096, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 4096], stride=[266240, 4096, 1])
class op239_loop_body:
    var_ranges = {z0: 520, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf238', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf239', get_index_4, mul_2, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
    buf240.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op240.node.kernel = extern_kernels.mm


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 520}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 532480}, None),
        MemoryDep('buf240', c0, {c0: 532480}, None)]
op241.met_dependencies = [MemoryDep('arg156_1', c1, {c0: 520, c1: 1024}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf241.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (520, 1024)
op241.sizes = ([520], [1024])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op241_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf240', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf241', get_index_3, getitem)
        return store_reduction


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 520}, None)]
op242.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 532480}, None),
        MemoryDep('buf240', c0, {c0: 532480}, None)]
op242.met_dependencies = [MemoryDep('arg156_1', c1, {c0: 520, c1: 1024}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf242.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (520, 1024)
op242.sizes = ([520], [1024])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op242_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf240', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf242', get_index_3, getitem_1)
        return store_reduction


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 532480}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 532480}, None),
        MemoryDep('buf240', c0, {c0: 532480}, None),
        MemoryDep('buf241', c0, {c0: 520}, None),
        MemoryDep('buf242', c0, {c0: 520}, None)]
op244.met_dependencies = 
    [   MemoryDep('arg156_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg157_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg158_1', c1, {c0: 520, c1: 1024}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (532480, 1)
op244.sizes = ([520, 1024], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op244_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf240', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf241', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf242', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg157_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg158_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf244', get_index_7, add_3, None)
        return store


op245: ExternKernelSchedulerNode(ExternKernelOut)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = [StarDep(name='arg159_1', mode=None), StarDep(name='arg160_1', mode=None)]
op245.outputs = [
    buf245: ExternKernelOut
    buf245.layout = FixedLayout('cuda', torch.float32, size=[520, 3072], stride=[3072, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op245.node.kernel = extern_kernels.addmm


op246: ExternKernelSchedulerNode(FallbackKernel)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: FallbackKernel
    buf246.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf246.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
    ]
]
op246.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op247: ExternKernelSchedulerNode(MultiOutput)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: MultiOutput
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 65, 64], stride=[66560, 64, 1024, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op247.node.kernel = None


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op251.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 532480}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf233', c0, {c0: 532480}, None),
        MemoryDep('buf240', c0, {c0: 532480}, None),
        MemoryDep('buf251', c0, {c0: 532480}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg156_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg162_1', c1, {c0: 520, c1: 1024}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf252.users = [
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (532480, 1)
op252.sizes = ([520, 1024], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op252_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf240', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf251', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg162_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf252', get_index_5, add_3, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 520}, None)]
op253.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 532480}, None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf253.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (520, 1024)
op253.sizes = ([520], [1024])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op253_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_1, getitem)
        return store_reduction


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 520}, None)]
op254.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 532480}, None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
    buf254.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (520, 1024)
op254.sizes = ([520], [1024])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
class op254_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf254', get_index_1, getitem_1)
        return store_reduction


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 532480}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 532480}, None),
        MemoryDep('buf253', c0, {c0: 520}, None),
        MemoryDep('buf254', c0, {c0: 520}, None)]
op256.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 520, c1: 1024}, None),
        MemoryDep('arg164_1', c1, {c0: 520, c1: 1024}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (532480, 1)
op256.sizes = ([520, 1024], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1], stride=[65, 1, 520])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
class op256_loop_body:
    var_ranges = {z0: 520, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf253', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf254', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg163_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg164_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf256', get_index_5, add_1, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda', torch.float32, size=[520, 4096], stride=[4096, 1])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False)]
]
op257.node.kernel = extern_kernels.mm


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 2129920}, None)]
op258.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 2129920}, None)]
op258.met_dependencies = [MemoryDep('arg166_1', c1, {c0: 520, c1: 4096}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 65, 4096], stride=[266240, 4096, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (2129920, 1)
op258.sizes = ([520, 4096], [])
buf257_layout = FixedLayout('cuda', torch.float32, size=[520, 4096], stride=[4096, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 4096], stride=[266240, 4096, 1])
class op258_loop_body:
    var_ranges = {z0: 520, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf257', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg166_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf258', get_index_4, mul_2, None)
        return store


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op259.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
    ]
]
op259.node.kernel = extern_kernels.mm


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 8}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf252', 66560*c0 + c1, {c0: 8, c1: 1024}, None),
        MemoryDep('buf259', 66560*c0 + c1, {c0: 8, c1: 1024}, None)]
op260.met_dependencies = [MemoryDep('arg168_1', c1, {c0: 8, c1: 1024}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (8, 1024)
op260.sizes = ([8], [1024])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op260_loop_body:
    var_ranges = {z0: 8, z1: 1024}
    index0 = 66560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg168_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf260', get_index_3, getitem)
        return store_reduction


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 8}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf252', 66560*c0 + c1, {c0: 8, c1: 1024}, None),
        MemoryDep('buf259', 66560*c0 + c1, {c0: 8, c1: 1024}, None)]
op261.met_dependencies = [MemoryDep('arg168_1', c1, {c0: 8, c1: 1024}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (8, 1024)
op261.sizes = ([8], [1024])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
class op261_loop_body:
    var_ranges = {z0: 8, z1: 1024}
    index0 = 66560*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg168_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf261', get_index_3, getitem_1)
        return store_reduction


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 8192}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf252', 66560*c0 + c1, {c0: 8, c1: 1024}, None),
        MemoryDep('buf259', 66560*c0 + c1, {c0: 8, c1: 1024}, None),
        MemoryDep('buf260', c0, {c0: 8}, None),
        MemoryDep('buf261', c0, {c0: 8}, None)]
op263.met_dependencies = 
    [   MemoryDep('arg168_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg169_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg170_1', c1, {c0: 8, c1: 1024}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1024], stride=[1024, 1024, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (8192, 1)
op263.sizes = ([8, 1024], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 65, 1024], stride=[66560, 1024, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[520, 1024], stride=[1024, 1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1], stride=[1, 8, 8])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1024], stride=[1024, 1024, 1])
class op263_loop_body:
    var_ranges = {z0: 8, z1: 1024}
    index0 = 66560*z0 + z1
    index1 = z1
    index2 = z0
    index3 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg168_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf260', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf261', get_index_4)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg169_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg170_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index3')
        store = ops.store('buf263', get_index_7, add_3, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='arg171_1', mode=None), StarDep(name='arg172_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf264.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op264.node.kernel = extern_kernels.addmm



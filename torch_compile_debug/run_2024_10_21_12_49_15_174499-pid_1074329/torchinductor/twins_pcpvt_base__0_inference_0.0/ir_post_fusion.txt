op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 48*c0 + c1 + 3*c2, {c0: 64, c1: 3, c2: 16}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 3072}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[64, 3, 4, 4], stride=[48, 1, 12, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (3072, 1)
op1.sizes = ([64, 3, 16], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[64, 3, 4, 4], stride=[48, 16, 4, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[64, 3, 4, 4], stride=[48, 1, 12, 3])
class op1_loop_body:
    var_ranges = {z0: 64, z1: 3, z2: 16}
    index0 = 48*z0 + 16*z1 + z2
    index1 = 48*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False),
    ]
]
op2.node.kernel = extern_kernels.convolution


op3_op4_op6_op7_op8_op10: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op3_op4_op6_op7_op8_op10.writes = 
    [   MemoryDep('buf10', c0, {c0: 1605632}, None),
        MemoryDep('buf3', c0, {c0: 25088}, None),
        MemoryDep('buf4', c0, {c0: 25088}, None),
        MemoryDep('buf6', c0, {c0: 1605632}, None),
        MemoryDep('buf7', c0, {c0: 25088}, None),
        MemoryDep('buf8', c0, {c0: 25088}, None)]
op3_op4_op6_op7_op8_op10.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 1605632}, None)]
op3_op4_op6_op7_op8_op10.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg3_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg4_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg5_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg6_1', c1, {c0: 25088, c1: 64}, None)]
op3_op4_op6_op7_op8_op10.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf3.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
    ]
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf7.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf8.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf10.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False),
    ]
]
op3_op4_op6_op7_op8_op10.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 25088}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 1605632}, None)]
op3.met_dependencies = [MemoryDep('arg2_1', c1, {c0: 25088, c1: 64}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf3.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (25088, 64)
op3.sizes = ([25088], [64])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op3_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf3', get_index_2, getitem)
        return store_reduction
op3_op4_op6_op7_op8_op10.snodes[1] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 25088}, None)]
op4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 1605632}, None)]
op4.met_dependencies = [MemoryDep('arg2_1', c1, {c0: 25088, c1: 64}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (25088, 64)
op4.sizes = ([25088], [64])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op4_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf4', get_index_2, getitem_1)
        return store_reduction
op3_op4_op6_op7_op8_op10.snodes[2] =
op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 1605632}, None)]
op6.unmet_dependencies = 
    [   MemoryDep('buf2', c0, {c0: 1605632}, None),
        MemoryDep('buf3', c0, {c0: 25088}, None),
        MemoryDep('buf4', c0, {c0: 25088}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg3_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg4_1', c1, {c0: 25088, c1: 64}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf6.users = [
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (1605632, 1)
op6.sizes = ([25088, 64], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
class op6_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf3', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf4', get_index_3)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg3_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg4_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf6', get_index_6, add_2, None)
        return store
op3_op4_op6_op7_op8_op10.snodes[3] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 25088}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 1605632}, None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf7.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (25088, 64)
op7.sizes = ([25088], [64])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op7_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf7', get_index_1, getitem)
        return store_reduction
op3_op4_op6_op7_op8_op10.snodes[4] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 25088}, None)]
op8.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 1605632}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf8.users = [NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (25088, 64)
op8.sizes = ([25088], [64])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op8_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf8', get_index_1, getitem_1)
        return store_reduction
op3_op4_op6_op7_op8_op10.snodes[5] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 1605632}, None)]
op10.unmet_dependencies = 
    [   MemoryDep('buf6', c0, {c0: 1605632}, None),
        MemoryDep('buf7', c0, {c0: 25088}, None),
        MemoryDep('buf8', c0, {c0: 25088}, None)]
op10.met_dependencies = 
    [   MemoryDep('arg5_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg6_1', c1, {c0: 25088, c1: 64}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf10.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cuda:0
op10.group.iteration = (1605632, 1)
op10.sizes = ([25088, 64], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
class op10_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf7', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf8', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg5_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg6_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf10', get_index_5, add_1, None)
        return store


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', 4096*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 64}, None)]
op11.unmet_dependencies = []
op11.met_dependencies = [MemoryDep('arg9_1', c0, {c0: 262144}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 8, 8], stride=[4096, 1, 512, 64])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (262144, 1)
op11.sizes = ([64, 64, 64], [])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 8, 8], stride=[4096, 64, 8, 1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 8, 8], stride=[4096, 1, 512, 64])
class op11_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = 4096*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg9_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf11', get_index_1, load, None)
        return store


op12: ExternKernelSchedulerNode(ExternKernelAlloc)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf10', mode=None), StarDep(name='buf11', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ExternKernelAlloc
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
    ]
]
op12.node.kernel = extern_kernels.convolution


op13_op14_op16: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op13_op14_op16.writes = 
    [   MemoryDep('buf13', c0, {c0: 392}, None),
        MemoryDep('buf14', c0, {c0: 392}, None),
        MemoryDep('buf16', c0, {c0: 25088}, None)]
op13_op14_op16.unmet_dependencies = [MemoryDep('buf12', c0, {c0: 25088}, None)]
op13_op14_op16.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg11_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg12_1', c1, {c0: 392, c1: 64}, None)]
op13_op14_op16.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf13.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf14.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 64], stride=[3136, 64, 1])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op13_op14_op16.snodes[0] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 392}, None)]
op13.unmet_dependencies = [MemoryDep('buf12', c0, {c0: 25088}, None)]
op13.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 392, c1: 64}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf13.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (392, 64)
op13.sizes = ([392], [64])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op13_loop_body:
    var_ranges = {z0: 392, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf13', get_index_2, getitem)
        return store_reduction
op13_op14_op16.snodes[1] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 392}, None)]
op14.unmet_dependencies = [MemoryDep('buf12', c0, {c0: 25088}, None)]
op14.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 392, c1: 64}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf14.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (392, 64)
op14.sizes = ([392], [64])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op14_loop_body:
    var_ranges = {z0: 392, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf14', get_index_2, getitem_1)
        return store_reduction
op13_op14_op16.snodes[2] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 25088}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf12', c0, {c0: 25088}, None),
        MemoryDep('buf13', c0, {c0: 392}, None),
        MemoryDep('buf14', c0, {c0: 392}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg11_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg12_1', c1, {c0: 392, c1: 64}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 64], stride=[3136, 64, 1])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (25088, 1)
op16.sizes = ([392, 64], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 64], stride=[3136, 64, 1])
class op16_loop_body:
    var_ranges = {z0: 392, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf13', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf14', get_index_3)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg11_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg12_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf16', get_index_6, add_2, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op17.met_dependencies = [StarDep(name='arg13_1', mode=None), StarDep(name='arg14_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cuda', torch.float32, size=[392, 128], stride=[128, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17.node.kernel = extern_kernels.addmm


op18: ExternKernelSchedulerNode(ExternKernelOut)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf10', mode=None)]
op18.met_dependencies = [StarDep(name='arg7_1', mode=None), StarDep(name='arg8_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelOut
    buf18.layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.node.kernel = extern_kernels.addmm


op19: ExternKernelSchedulerNode(FallbackKernel)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf17', mode=None), StarDep(name='buf18', mode=None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: FallbackKernel
    buf19.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
    ]
]
op19.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op20: ExternKernelSchedulerNode(MultiOutput)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: MultiOutput
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 3136, 64], stride=[200704, 64, 64, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op20.node.kernel = None


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op24.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.mm


op25_op26_op28: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op25_op26_op28.writes = 
    [   MemoryDep('buf25', c0, {c0: 25088}, None),
        MemoryDep('buf26', c0, {c0: 25088}, None),
        MemoryDep('buf28', c0, {c0: 1605632}, None)]
op25_op26_op28.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 1605632}, None),
        MemoryDep('buf6', c0, {c0: 1605632}, None)]
op25_op26_op28.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg17_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg18_1', c1, {c0: 25088, c1: 64}, None)]
op25_op26_op28.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op25_op26_op28.snodes[0] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 25088}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 1605632}, None),
        MemoryDep('buf6', c0, {c0: 1605632}, None)]
op25.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 25088, c1: 64}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (25088, 64)
op25.sizes = ([25088], [64])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op25_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem)
        return store_reduction
op25_op26_op28.snodes[1] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 25088}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 1605632}, None),
        MemoryDep('buf6', c0, {c0: 1605632}, None)]
op26.met_dependencies = [MemoryDep('arg16_1', c1, {c0: 25088, c1: 64}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (25088, 64)
op26.sizes = ([25088], [64])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op26_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem_1)
        return store_reduction
op25_op26_op28.snodes[2] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1605632}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 1605632}, None),
        MemoryDep('buf25', c0, {c0: 25088}, None),
        MemoryDep('buf26', c0, {c0: 25088}, None),
        MemoryDep('buf6', c0, {c0: 1605632}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg17_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg18_1', c1, {c0: 25088, c1: 64}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (1605632, 1)
op28.sizes = ([25088, 64], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
class op28_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf25', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf26', get_index_4)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg17_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg18_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf28', get_index_7, add_3, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[25088, 512], stride=[512, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 12845056}, None)]
op30.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 12845056}, None)]
op30.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 25088, c1: 512}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 512], stride=[1605632, 512, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (12845056, 1)
op30.sizes = ([25088, 512], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[25088, 512], stride=[512, 1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 512], stride=[1605632, 512, 1])
class op30_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg20_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg20_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf30', get_index_4, mul_2, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False)]
]
op31.node.kernel = extern_kernels.mm


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 1605632}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 1605632}, None),
        MemoryDep('buf31', c0, {c0: 1605632}, None),
        MemoryDep('buf6', c0, {c0: 1605632}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg16_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg22_1', c1, {c0: 25088, c1: 64}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf32.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
    ]
]
op32.group.device = cuda:0
op32.group.iteration = (1605632, 1)
op32.sizes = ([25088, 64], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
class op32_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg16_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf31', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg22_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf32', get_index_5, add_3, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelAlloc)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelAlloc
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
    ]
]
op33.node.kernel = extern_kernels.convolution


op34_op35_op37: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op34_op35_op37.writes = 
    [   MemoryDep('buf34', c0, {c0: 25088}, None),
        MemoryDep('buf35', c0, {c0: 25088}, None),
        MemoryDep('buf37', c0, {c0: 1605632}, None)]
op34_op35_op37.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 1605632}, None),
        MemoryDep('buf33', c0, {c0: 1605632}, None)]
op34_op35_op37.met_dependencies = 
    [   MemoryDep('arg24_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg25_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg26_1', c1, {c0: 25088, c1: 64}, None)]
op34_op35_op37.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf34.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
    ]
]
op34_op35_op37.snodes[0] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 25088}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 1605632}, None),
        MemoryDep('buf33', c0, {c0: 1605632}, None)]
op34.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 25088, c1: 64}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf34.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (25088, 64)
op34.sizes = ([25088], [64])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op34_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf32', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf34', get_index_3, getitem)
        return store_reduction
op34_op35_op37.snodes[1] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 25088}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 1605632}, None),
        MemoryDep('buf33', c0, {c0: 1605632}, None)]
op35.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 25088, c1: 64}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf35.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (25088, 64)
op35.sizes = ([25088], [64])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op35_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf32', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf35', get_index_3, getitem_1)
        return store_reduction
op34_op35_op37.snodes[2] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 1605632}, None)]
op37.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 1605632}, None),
        MemoryDep('buf33', c0, {c0: 1605632}, None),
        MemoryDep('buf34', c0, {c0: 25088}, None),
        MemoryDep('buf35', c0, {c0: 25088}, None)]
op37.met_dependencies = 
    [   MemoryDep('arg24_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg25_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg26_1', c1, {c0: 25088, c1: 64}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
    ]
]
op37.group.device = cuda:0
op37.group.iteration = (1605632, 1)
op37.sizes = ([25088, 64], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
class op37_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf32', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf34', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf35', get_index_4)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg25_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg26_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf37', get_index_7, add_3, None)
        return store


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', 4096*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 64}, None)]
op38.unmet_dependencies = []
op38.met_dependencies = [MemoryDep('arg29_1', c0, {c0: 262144}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 8, 8], stride=[4096, 1, 512, 64])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (262144, 1)
op38.sizes = ([64, 64, 64], [])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 8, 8], stride=[4096, 64, 8, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 8, 8], stride=[4096, 1, 512, 64])
class op38_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = 4096*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg29_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf38', get_index_1, load, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelAlloc)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf37', mode=None), StarDep(name='buf38', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ExternKernelAlloc
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
    ]
]
op39.node.kernel = extern_kernels.convolution


op40_op41_op43: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op40_op41_op43.writes = 
    [   MemoryDep('buf40', c0, {c0: 392}, None),
        MemoryDep('buf41', c0, {c0: 392}, None),
        MemoryDep('buf43', c0, {c0: 25088}, None)]
op40_op41_op43.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 25088}, None)]
op40_op41_op43.met_dependencies = 
    [   MemoryDep('arg30_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg31_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg32_1', c1, {c0: 392, c1: 64}, None)]
op40_op41_op43.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 64], stride=[3136, 64, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op40_op41_op43.snodes[0] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 392}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 25088}, None)]
op40.met_dependencies = [MemoryDep('arg30_1', c1, {c0: 392, c1: 64}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (392, 64)
op40.sizes = ([392], [64])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op40_loop_body:
    var_ranges = {z0: 392, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf40', get_index_2, getitem)
        return store_reduction
op40_op41_op43.snodes[1] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 392}, None)]
op41.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 25088}, None)]
op41.met_dependencies = [MemoryDep('arg30_1', c1, {c0: 392, c1: 64}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (392, 64)
op41.sizes = ([392], [64])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op41_loop_body:
    var_ranges = {z0: 392, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_2, getitem_1)
        return store_reduction
op40_op41_op43.snodes[2] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 25088}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 25088}, None),
        MemoryDep('buf40', c0, {c0: 392}, None),
        MemoryDep('buf41', c0, {c0: 392}, None)]
op43.met_dependencies = 
    [   MemoryDep('arg30_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg31_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg32_1', c1, {c0: 392, c1: 64}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 64], stride=[3136, 64, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (25088, 1)
op43.sizes = ([392, 64], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 64], stride=[3136, 64, 1])
class op43_loop_body:
    var_ranges = {z0: 392, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf40', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf41', get_index_3)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg31_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg32_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf43', get_index_6, add_2, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg33_1', mode=None), StarDep(name='arg34_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda', torch.float32, size=[392, 128], stride=[128, 1])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.node.kernel = extern_kernels.addmm


op45: ExternKernelSchedulerNode(ExternKernelOut)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op45.met_dependencies = [StarDep(name='arg27_1', mode=None), StarDep(name='arg28_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelOut
    buf45.layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.node.kernel = extern_kernels.addmm


op46: ExternKernelSchedulerNode(FallbackKernel)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: FallbackKernel
    buf46.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
    ]
]
op46.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op47: ExternKernelSchedulerNode(MultiOutput)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: MultiOutput
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 3136, 64], stride=[200704, 64, 64, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op47.node.kernel = None


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op51.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False)]
]
op51.node.kernel = extern_kernels.mm


op52_op53_op54_op56: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op52_op53_op54_op56.writes = 
    [   MemoryDep('buf52', c0, {c0: 1605632}, None),
        MemoryDep('buf53', c0, {c0: 25088}, None),
        MemoryDep('buf54', c0, {c0: 25088}, None),
        MemoryDep('buf56', c0, {c0: 1605632}, None)]
op52_op53_op54_op56.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 1605632}, None),
        MemoryDep('buf33', c0, {c0: 1605632}, None),
        MemoryDep('buf51', c0, {c0: 1605632}, None)]
op52_op53_op54_op56.met_dependencies = 
    [   MemoryDep('arg24_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg36_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg37_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 64}, None)]
op52_op53_op54_op56.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
    ]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf53.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op52_op53_op54_op56.snodes[0] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 1605632}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 1605632}, None),
        MemoryDep('buf33', c0, {c0: 1605632}, None),
        MemoryDep('buf51', c0, {c0: 1605632}, None)]
op52.met_dependencies = 
    [   MemoryDep('arg24_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg36_1', c1, {c0: 25088, c1: 64}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf52.users = [
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
    ]
]
op52.group.device = cuda:0
op52.group.iteration = (1605632, 1)
op52.sizes = ([25088, 64], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
class op52_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf32', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf51', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg36_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf52', get_index_5, add_3, None)
        return store
op52_op53_op54_op56.snodes[1] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 25088}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 1605632}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf53.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (25088, 64)
op53.sizes = ([25088], [64])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op53_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf53', get_index_1, getitem)
        return store_reduction
op52_op53_op54_op56.snodes[2] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 25088}, None)]
op54.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 1605632}, None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf54.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (25088, 64)
op54.sizes = ([25088], [64])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op54_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf54', get_index_1, getitem_1)
        return store_reduction
op52_op53_op54_op56.snodes[3] =
op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 1605632}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 1605632}, None),
        MemoryDep('buf53', c0, {c0: 25088}, None),
        MemoryDep('buf54', c0, {c0: 25088}, None)]
op56.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 64}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (1605632, 1)
op56.sizes = ([25088, 64], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
class op56_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf53', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf54', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg37_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg38_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf56', get_index_5, add_1, None)
        return store


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda', torch.float32, size=[25088, 512], stride=[512, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.node.kernel = extern_kernels.mm


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 12845056}, None)]
op58.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 12845056}, None)]
op58.met_dependencies = [MemoryDep('arg40_1', c1, {c0: 25088, c1: 512}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 512], stride=[1605632, 512, 1])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (12845056, 1)
op58.sizes = ([25088, 512], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[25088, 512], stride=[512, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 512], stride=[1605632, 512, 1])
class op58_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg40_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf58', get_index_4, mul_2, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False),
    ]
]
op59.node.kernel = extern_kernels.mm


op60_op61_op63: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op60_op61_op63.writes = 
    [   MemoryDep('buf60', c0, {c0: 25088}, None),
        MemoryDep('buf61', c0, {c0: 25088}, None),
        MemoryDep('buf63', c0, {c0: 1605632}, None)]
op60_op61_op63.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 1605632}, None),
        MemoryDep('buf59', c0, {c0: 1605632}, None)]
op60_op61_op63.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg44_1', c1, {c0: 25088, c1: 64}, None)]
op60_op61_op63.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf61.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf63.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
    ]
]
op60_op61_op63.snodes[0] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 25088}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 1605632}, None),
        MemoryDep('buf59', c0, {c0: 1605632}, None)]
op60.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 25088, c1: 64}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (25088, 64)
op60.sizes = ([25088], [64])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op60_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf59', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg42_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf60', get_index_3, getitem)
        return store_reduction
op60_op61_op63.snodes[1] =
op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 25088}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 1605632}, None),
        MemoryDep('buf59', c0, {c0: 1605632}, None)]
op61.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 25088, c1: 64}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf61.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (25088, 64)
op61.sizes = ([25088], [64])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op61_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf59', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg42_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf61', get_index_3, getitem_1)
        return store_reduction
op60_op61_op63.snodes[2] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 1605632}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 1605632}, None),
        MemoryDep('buf59', c0, {c0: 1605632}, None),
        MemoryDep('buf60', c0, {c0: 25088}, None),
        MemoryDep('buf61', c0, {c0: 25088}, None)]
op63.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg44_1', c1, {c0: 25088, c1: 64}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf63.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cuda:0
op63.group.iteration = (1605632, 1)
op63.sizes = ([25088, 64], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
class op63_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf59', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg42_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf60', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf61', get_index_4)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg43_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg44_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf63', get_index_7, add_3, None)
        return store


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', 4096*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 64}, None)]
op64.unmet_dependencies = []
op64.met_dependencies = [MemoryDep('arg47_1', c0, {c0: 262144}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 8, 8], stride=[4096, 1, 512, 64])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (262144, 1)
op64.sizes = ([64, 64, 64], [])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 8, 8], stride=[4096, 64, 8, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 8, 8], stride=[4096, 1, 512, 64])
class op64_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = 4096*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg47_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf64', get_index_1, load, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelAlloc)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf63', mode=None), StarDep(name='buf64', mode=None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ExternKernelAlloc
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op65.node.kernel = extern_kernels.convolution


op66_op67_op69: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op66_op67_op69.writes = 
    [   MemoryDep('buf66', c0, {c0: 392}, None),
        MemoryDep('buf67', c0, {c0: 392}, None),
        MemoryDep('buf69', c0, {c0: 25088}, None)]
op66_op67_op69.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 25088}, None)]
op66_op67_op69.met_dependencies = 
    [   MemoryDep('arg48_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg49_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg50_1', c1, {c0: 392, c1: 64}, None)]
op66_op67_op69.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf66.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf67.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 64], stride=[3136, 64, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op66_op67_op69.snodes[0] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 392}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 25088}, None)]
op66.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 392, c1: 64}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf66.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (392, 64)
op66.sizes = ([392], [64])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op66_loop_body:
    var_ranges = {z0: 392, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf66', get_index_2, getitem)
        return store_reduction
op66_op67_op69.snodes[1] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 392}, None)]
op67.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 25088}, None)]
op67.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 392, c1: 64}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf67.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (392, 64)
op67.sizes = ([392], [64])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op67_loop_body:
    var_ranges = {z0: 392, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf67', get_index_2, getitem_1)
        return store_reduction
op66_op67_op69.snodes[2] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 25088}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf65', c0, {c0: 25088}, None),
        MemoryDep('buf66', c0, {c0: 392}, None),
        MemoryDep('buf67', c0, {c0: 392}, None)]
op69.met_dependencies = 
    [   MemoryDep('arg48_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg49_1', c1, {c0: 392, c1: 64}, None),
        MemoryDep('arg50_1', c1, {c0: 392, c1: 64}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 64], stride=[3136, 64, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (25088, 1)
op69.sizes = ([392, 64], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 7, 7], stride=[3136, 1, 448, 64])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 64], stride=[3136, 64, 1])
class op69_loop_body:
    var_ranges = {z0: 392, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf66', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf67', get_index_3)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg49_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg50_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf69', get_index_6, add_2, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf69', mode=None)]
op70.met_dependencies = [StarDep(name='arg51_1', mode=None), StarDep(name='arg52_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda', torch.float32, size=[392, 128], stride=[128, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op70.node.kernel = extern_kernels.addmm


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op71.met_dependencies = [StarDep(name='arg45_1', mode=None), StarDep(name='arg46_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.node.kernel = extern_kernels.addmm


op72: ExternKernelSchedulerNode(FallbackKernel)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf70', mode=None), StarDep(name='buf71', mode=None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: FallbackKernel
    buf72.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf72.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op72.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op73: ExternKernelSchedulerNode(MultiOutput)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: MultiOutput
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 3136, 64], stride=[200704, 64, 64, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op73.node.kernel = None


op77: ExternKernelSchedulerNode(ExternKernelOut)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op77.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op77.outputs = [
    buf77: ExternKernelOut
    buf77.layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.node.kernel = extern_kernels.mm


op78_op79_op80_op82: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op78_op79_op80_op82.writes = 
    [   MemoryDep('buf78', c0, {c0: 1605632}, None),
        MemoryDep('buf79', c0, {c0: 25088}, None),
        MemoryDep('buf80', c0, {c0: 25088}, None),
        MemoryDep('buf82', c0, {c0: 1605632}, None)]
op78_op79_op80_op82.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 1605632}, None),
        MemoryDep('buf59', c0, {c0: 1605632}, None),
        MemoryDep('buf77', c0, {c0: 1605632}, None)]
op78_op79_op80_op82.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg54_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg55_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg56_1', c1, {c0: 25088, c1: 64}, None)]
op78_op79_op80_op82.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf80.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op78_op79_op80_op82.snodes[0] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 1605632}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf52', c0, {c0: 1605632}, None),
        MemoryDep('buf59', c0, {c0: 1605632}, None),
        MemoryDep('buf77', c0, {c0: 1605632}, None)]
op78.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg54_1', c1, {c0: 25088, c1: 64}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (1605632, 1)
op78.sizes = ([25088, 64], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
class op78_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf59', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg42_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf77', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg54_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf78', get_index_5, add_3, None)
        return store
op78_op79_op80_op82.snodes[1] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 25088}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 1605632}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (25088, 64)
op79.sizes = ([25088], [64])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op79_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_1, getitem)
        return store_reduction
op78_op79_op80_op82.snodes[2] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 25088}, None)]
op80.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 1605632}, None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
    buf80.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (25088, 64)
op80.sizes = ([25088], [64])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
class op80_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf80', get_index_1, getitem_1)
        return store_reduction
op78_op79_op80_op82.snodes[3] =
op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 1605632}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 1605632}, None),
        MemoryDep('buf79', c0, {c0: 25088}, None),
        MemoryDep('buf80', c0, {c0: 25088}, None)]
op82.met_dependencies = 
    [   MemoryDep('arg55_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg56_1', c1, {c0: 25088, c1: 64}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (1605632, 1)
op82.sizes = ([25088, 64], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 1], stride=[3136, 1, 25088])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
class op82_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf79', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf80', get_index_2)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg55_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg56_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf82', get_index_5, add_1, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[25088, 512], stride=[512, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 12845056}, None)]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 12845056}, None)]
op84.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 25088, c1: 512}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 512], stride=[1605632, 512, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (12845056, 1)
op84.sizes = ([25088, 512], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[25088, 512], stride=[512, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 512], stride=[1605632, 512, 1])
class op84_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf83', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg58_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf84', get_index_4, mul_2, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False)]
]
op85.node.kernel = extern_kernels.mm


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 1605632}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 1605632}, None),
        MemoryDep('buf85', c0, {c0: 1605632}, None)]
op86.met_dependencies = [MemoryDep('arg60_1', c1, {c0: 25088, c1: 64}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (1605632, 1)
op86.sizes = ([25088, 64], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 3136, 64], stride=[200704, 64, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[25088, 64], stride=[64, 1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op86_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf85', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg60_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf86', get_index_3, add_1, None)
        return store


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', 256*c0 + c1 + 64*c2, {c0: 128, c1: 64, c2: 4}, None)]
op87.unmet_dependencies = []
op87.met_dependencies = [MemoryDep('arg61_1', c0, {c0: 32768}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[128, 64, 2, 2], stride=[256, 1, 128, 64])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (32768, 1)
op87.sizes = ([128, 64, 4], [])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[128, 64, 2, 2], stride=[256, 4, 2, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[128, 64, 2, 2], stride=[256, 1, 128, 64])
class op87_loop_body:
    var_ranges = {z0: 128, z1: 64, z2: 4}
    index0 = 256*z0 + 4*z1 + z2
    index1 = 256*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg61_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf87', get_index_1, load, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelAlloc)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None), StarDep(name='buf87', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ExternKernelAlloc
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
    ]
]
op88.node.kernel = extern_kernels.convolution


op89_op90_op92_op93_op94_op96: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op89_op90_op92_op93_op94_op96.writes = 
    [   MemoryDep('buf89', c0, {c0: 6272}, None),
        MemoryDep('buf90', c0, {c0: 6272}, None),
        MemoryDep('buf92', c0, {c0: 802816}, None),
        MemoryDep('buf93', c0, {c0: 6272}, None),
        MemoryDep('buf94', c0, {c0: 6272}, None),
        MemoryDep('buf96', c0, {c0: 802816}, None)]
op89_op90_op92_op93_op94_op96.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 802816}, None)]
op89_op90_op92_op93_op94_op96.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg63_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg64_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg65_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg66_1', c1, {c0: 6272, c1: 128}, None)]
op89_op90_op92_op93_op94_op96.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf89.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf90.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf96.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
    ]
]
op89_op90_op92_op93_op94_op96.snodes[0] =
op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 6272}, None)]
op89.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 802816}, None)]
op89.met_dependencies = [MemoryDep('arg62_1', c1, {c0: 6272, c1: 128}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf89.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (6272, 128)
op89.sizes = ([6272], [128])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op89_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf89', get_index_2, getitem)
        return store_reduction
op89_op90_op92_op93_op94_op96.snodes[1] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 6272}, None)]
op90.unmet_dependencies = [MemoryDep('buf88', c0, {c0: 802816}, None)]
op90.met_dependencies = [MemoryDep('arg62_1', c1, {c0: 6272, c1: 128}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf90.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (6272, 128)
op90.sizes = ([6272], [128])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op90_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf90', get_index_2, getitem_1)
        return store_reduction
op89_op90_op92_op93_op94_op96.snodes[2] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 802816}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf88', c0, {c0: 802816}, None),
        MemoryDep('buf89', c0, {c0: 6272}, None),
        MemoryDep('buf90', c0, {c0: 6272}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg63_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg64_1', c1, {c0: 6272, c1: 128}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op92.group.device = cuda:0
op92.group.iteration = (802816, 1)
op92.sizes = ([6272, 128], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op92_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf89', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf90', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg63_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg64_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf92', get_index_6, add_2, None)
        return store
op89_op90_op92_op93_op94_op96.snodes[3] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 6272}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 802816}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (6272, 128)
op93.sizes = ([6272], [128])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op93_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
        return store_reduction
op89_op90_op92_op93_op94_op96.snodes[4] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 6272}, None)]
op94.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 802816}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf94.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (6272, 128)
op94.sizes = ([6272], [128])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op94_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
        return store_reduction
op89_op90_op92_op93_op94_op96.snodes[5] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 802816}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 802816}, None),
        MemoryDep('buf93', c0, {c0: 6272}, None),
        MemoryDep('buf94', c0, {c0: 6272}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg65_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg66_1', c1, {c0: 6272, c1: 128}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf96.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (802816, 1)
op96.sizes = ([6272, 128], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op96_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg65_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg66_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_1, None)
        return store


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', 2048*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 16}, None)]
op97.unmet_dependencies = []
op97.met_dependencies = [MemoryDep('arg69_1', c0, {c0: 262144}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 1, 512, 128])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (262144, 1)
op97.sizes = ([128, 128, 16], [])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 16, 4, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 1, 512, 128])
class op97_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = 2048*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg69_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf97', get_index_1, load, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelAlloc)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf96', mode=None), StarDep(name='buf97', mode=None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ExternKernelAlloc
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op98.node.kernel = extern_kernels.convolution


op99_op100_op102: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op99_op100_op102.writes = 
    [   MemoryDep('buf100', c0, {c0: 392}, None),
        MemoryDep('buf102', c0, {c0: 50176}, None),
        MemoryDep('buf99', c0, {c0: 392}, None)]
op99_op100_op102.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 50176}, None)]
op99_op100_op102.met_dependencies = 
    [   MemoryDep('arg70_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg71_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg72_1', c1, {c0: 392, c1: 128}, None)]
op99_op100_op102.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf99.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op99_op100_op102.snodes[0] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 392}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 50176}, None)]
op99.met_dependencies = [MemoryDep('arg70_1', c1, {c0: 392, c1: 128}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf99.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (392, 128)
op99.sizes = ([392], [128])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op99_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf99', get_index_2, getitem)
        return store_reduction
op99_op100_op102.snodes[1] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 392}, None)]
op100.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 50176}, None)]
op100.met_dependencies = [MemoryDep('arg70_1', c1, {c0: 392, c1: 128}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf100.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (392, 128)
op100.sizes = ([392], [128])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op100_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf100', get_index_2, getitem_1)
        return store_reduction
op99_op100_op102.snodes[2] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 50176}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 392}, None),
        MemoryDep('buf98', c0, {c0: 50176}, None),
        MemoryDep('buf99', c0, {c0: 392}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg70_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg71_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg72_1', c1, {c0: 392, c1: 128}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (50176, 1)
op102.sizes = ([392, 128], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
class op102_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg70_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf99', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf100', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg71_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg72_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf102', get_index_6, add_2, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg73_1', mode=None), StarDep(name='arg74_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op103.node.kernel = extern_kernels.addmm


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op104.met_dependencies = [StarDep(name='arg67_1', mode=None), StarDep(name='arg68_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.node.kernel = extern_kernels.addmm


op105: ExternKernelSchedulerNode(FallbackKernel)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf103', mode=None), StarDep(name='buf104', mode=None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: FallbackKernel
    buf105.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf105.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
    ]
]
op105.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op106: ExternKernelSchedulerNode(MultiOutput)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: MultiOutput
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 784, 64], stride=[100352, 64, 128, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = None


op110: ExternKernelSchedulerNode(ExternKernelOut)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op110.met_dependencies = [StarDep(name='arg75_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelOut
    buf110.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op110.node.kernel = extern_kernels.mm


op111_op112_op114: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op111_op112_op114.writes = 
    [   MemoryDep('buf111', c0, {c0: 6272}, None),
        MemoryDep('buf112', c0, {c0: 6272}, None),
        MemoryDep('buf114', c0, {c0: 802816}, None)]
op111_op112_op114.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 802816}, None),
        MemoryDep('buf92', c0, {c0: 802816}, None)]
op111_op112_op114.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg77_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg78_1', c1, {c0: 6272, c1: 128}, None)]
op111_op112_op114.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf111.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf112.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op111_op112_op114.snodes[0] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 6272}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 802816}, None),
        MemoryDep('buf92', c0, {c0: 802816}, None)]
op111.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 6272, c1: 128}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf111.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (6272, 128)
op111.sizes = ([6272], [128])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op111_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf111', get_index_3, getitem)
        return store_reduction
op111_op112_op114.snodes[1] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 6272}, None)]
op112.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 802816}, None),
        MemoryDep('buf92', c0, {c0: 802816}, None)]
op112.met_dependencies = [MemoryDep('arg76_1', c1, {c0: 6272, c1: 128}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf112.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (6272, 128)
op112.sizes = ([6272], [128])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op112_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf112', get_index_3, getitem_1)
        return store_reduction
op111_op112_op114.snodes[2] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 802816}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 802816}, None),
        MemoryDep('buf111', c0, {c0: 6272}, None),
        MemoryDep('buf112', c0, {c0: 6272}, None),
        MemoryDep('buf92', c0, {c0: 802816}, None)]
op114.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg77_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg78_1', c1, {c0: 6272, c1: 128}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (802816, 1)
op114.sizes = ([6272, 128], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op114_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf111', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf112', get_index_4)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg77_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg78_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf114', get_index_7, add_3, None)
        return store


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False)]
]
op115.node.kernel = extern_kernels.mm


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 6422528}, None)]
op116.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 6422528}, None)]
op116.met_dependencies = [MemoryDep('arg80_1', c1, {c0: 6272, c1: 1024}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1024], stride=[802816, 1024, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (6422528, 1)
op116.sizes = ([6272, 1024], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1024], stride=[802816, 1024, 1])
class op116_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf115', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg80_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf116', get_index_4, mul_2, None)
        return store


op117: ExternKernelSchedulerNode(ExternKernelOut)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelOut
    buf117.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.mm


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 802816}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf110', c0, {c0: 802816}, None),
        MemoryDep('buf117', c0, {c0: 802816}, None),
        MemoryDep('buf92', c0, {c0: 802816}, None)]
op118.met_dependencies = 
    [   MemoryDep('arg76_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg82_1', c1, {c0: 6272, c1: 128}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf118.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (802816, 1)
op118.sizes = ([6272, 128], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op118_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf110', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf117', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg82_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf118', get_index_5, add_3, None)
        return store


op119: ExternKernelSchedulerNode(ExternKernelAlloc)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelAlloc
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
    ]
]
op119.node.kernel = extern_kernels.convolution


op120_op121_op123: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op120_op121_op123.writes = 
    [   MemoryDep('buf120', c0, {c0: 6272}, None),
        MemoryDep('buf121', c0, {c0: 6272}, None),
        MemoryDep('buf123', c0, {c0: 802816}, None)]
op120_op121_op123.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 802816}, None),
        MemoryDep('buf119', c0, {c0: 802816}, None)]
op120_op121_op123.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg85_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg86_1', c1, {c0: 6272, c1: 128}, None)]
op120_op121_op123.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf120.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf121.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf123.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
]
op120_op121_op123.snodes[0] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 6272}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 802816}, None),
        MemoryDep('buf119', c0, {c0: 802816}, None)]
op120.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 6272, c1: 128}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf120.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (6272, 128)
op120.sizes = ([6272], [128])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op120_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_3, getitem)
        return store_reduction
op120_op121_op123.snodes[1] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 6272}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 802816}, None),
        MemoryDep('buf119', c0, {c0: 802816}, None)]
op121.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 6272, c1: 128}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf121.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (6272, 128)
op121.sizes = ([6272], [128])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op121_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf121', get_index_3, getitem_1)
        return store_reduction
op120_op121_op123.snodes[2] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 802816}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 802816}, None),
        MemoryDep('buf119', c0, {c0: 802816}, None),
        MemoryDep('buf120', c0, {c0: 6272}, None),
        MemoryDep('buf121', c0, {c0: 6272}, None)]
op123.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg85_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg86_1', c1, {c0: 6272, c1: 128}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf123.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (802816, 1)
op123.sizes = ([6272, 128], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op123_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf120', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf121', get_index_4)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg85_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg86_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf123', get_index_7, add_3, None)
        return store


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', 2048*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 16}, None)]
op124.unmet_dependencies = []
op124.met_dependencies = [MemoryDep('arg89_1', c0, {c0: 262144}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 1, 512, 128])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (262144, 1)
op124.sizes = ([128, 128, 16], [])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 16, 4, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 1, 512, 128])
class op124_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = 2048*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg89_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf124', get_index_1, load, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelAlloc)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf123', mode=None), StarDep(name='buf124', mode=None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ExternKernelAlloc
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
    buf125.users = [
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False),
    ]
]
op125.node.kernel = extern_kernels.convolution


op126_op127_op129: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op126_op127_op129.writes = 
    [   MemoryDep('buf126', c0, {c0: 392}, None),
        MemoryDep('buf127', c0, {c0: 392}, None),
        MemoryDep('buf129', c0, {c0: 50176}, None)]
op126_op127_op129.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 50176}, None)]
op126_op127_op129.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg91_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg92_1', c1, {c0: 392, c1: 128}, None)]
op126_op127_op129.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf126.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf127.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op126_op127_op129.snodes[0] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 392}, None)]
op126.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 50176}, None)]
op126.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 392, c1: 128}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf126.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (392, 128)
op126.sizes = ([392], [128])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op126_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf126', get_index_2, getitem)
        return store_reduction
op126_op127_op129.snodes[1] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 392}, None)]
op127.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 50176}, None)]
op127.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 392, c1: 128}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf127.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (392, 128)
op127.sizes = ([392], [128])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op127_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf127', get_index_2, getitem_1)
        return store_reduction
op126_op127_op129.snodes[2] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 50176}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 50176}, None),
        MemoryDep('buf126', c0, {c0: 392}, None),
        MemoryDep('buf127', c0, {c0: 392}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg91_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg92_1', c1, {c0: 392, c1: 128}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (50176, 1)
op129.sizes = ([392, 128], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
class op129_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf126', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf127', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg91_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg92_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf129', get_index_6, add_2, None)
        return store


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg93_1', mode=None), StarDep(name='arg94_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op130.node.kernel = extern_kernels.addmm


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op131.met_dependencies = [StarDep(name='arg87_1', mode=None), StarDep(name='arg88_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.node.kernel = extern_kernels.addmm


op132: ExternKernelSchedulerNode(FallbackKernel)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf130', mode=None), StarDep(name='buf131', mode=None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: FallbackKernel
    buf132.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op132.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op133: ExternKernelSchedulerNode(MultiOutput)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: MultiOutput
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 784, 64], stride=[100352, 64, 128, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = None


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op137.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
]
op137.node.kernel = extern_kernels.mm


op138_op139_op140_op142: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op138_op139_op140_op142.writes = 
    [   MemoryDep('buf138', c0, {c0: 802816}, None),
        MemoryDep('buf139', c0, {c0: 6272}, None),
        MemoryDep('buf140', c0, {c0: 6272}, None),
        MemoryDep('buf142', c0, {c0: 802816}, None)]
op138_op139_op140_op142.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 802816}, None),
        MemoryDep('buf119', c0, {c0: 802816}, None),
        MemoryDep('buf137', c0, {c0: 802816}, None)]
op138_op139_op140_op142.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg96_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg97_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg98_1', c1, {c0: 6272, c1: 128}, None)]
op138_op139_op140_op142.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf139.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf140.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op138_op139_op140_op142.snodes[0] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 802816}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 802816}, None),
        MemoryDep('buf119', c0, {c0: 802816}, None),
        MemoryDep('buf137', c0, {c0: 802816}, None)]
op138.met_dependencies = 
    [   MemoryDep('arg84_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg96_1', c1, {c0: 6272, c1: 128}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op138.group.device = cuda:0
op138.group.iteration = (802816, 1)
op138.sizes = ([6272, 128], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op138_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf118', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf137', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg96_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf138', get_index_5, add_3, None)
        return store
op138_op139_op140_op142.snodes[1] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 6272}, None)]
op139.unmet_dependencies = [MemoryDep('buf138', c0, {c0: 802816}, None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf139.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (6272, 128)
op139.sizes = ([6272], [128])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op139_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf139', get_index_1, getitem)
        return store_reduction
op138_op139_op140_op142.snodes[2] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 6272}, None)]
op140.unmet_dependencies = [MemoryDep('buf138', c0, {c0: 802816}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf140.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (6272, 128)
op140.sizes = ([6272], [128])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op140_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf140', get_index_1, getitem_1)
        return store_reduction
op138_op139_op140_op142.snodes[3] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 802816}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 802816}, None),
        MemoryDep('buf139', c0, {c0: 6272}, None),
        MemoryDep('buf140', c0, {c0: 6272}, None)]
op142.met_dependencies = 
    [   MemoryDep('arg97_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg98_1', c1, {c0: 6272, c1: 128}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (802816, 1)
op142.sizes = ([6272, 128], [])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op142_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf139', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf140', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg97_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg98_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf142', get_index_5, add_1, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op143.node.kernel = extern_kernels.mm


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 6422528}, None)]
op144.unmet_dependencies = [MemoryDep('buf143', c0, {c0: 6422528}, None)]
op144.met_dependencies = [MemoryDep('arg100_1', c1, {c0: 6272, c1: 1024}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1024], stride=[802816, 1024, 1])
    buf144.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (6422528, 1)
op144.sizes = ([6272, 1024], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1024], stride=[802816, 1024, 1])
class op144_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg100_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf143', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg100_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf144', get_index_4, mul_2, None)
        return store


op145: ExternKernelSchedulerNode(ExternKernelOut)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelOut
    buf145.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op145.node.kernel = extern_kernels.mm


op146_op147_op149: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op146_op147_op149.writes = 
    [   MemoryDep('buf146', c0, {c0: 6272}, None),
        MemoryDep('buf147', c0, {c0: 6272}, None),
        MemoryDep('buf149', c0, {c0: 802816}, None)]
op146_op147_op149.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 802816}, None),
        MemoryDep('buf145', c0, {c0: 802816}, None)]
op146_op147_op149.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg103_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg104_1', c1, {c0: 6272, c1: 128}, None)]
op146_op147_op149.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
]
op146_op147_op149.snodes[0] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 6272}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 802816}, None),
        MemoryDep('buf145', c0, {c0: 802816}, None)]
op146.met_dependencies = [MemoryDep('arg102_1', c1, {c0: 6272, c1: 128}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (6272, 128)
op146.sizes = ([6272], [128])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op146_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg102_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf146', get_index_3, getitem)
        return store_reduction
op146_op147_op149.snodes[1] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 6272}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 802816}, None),
        MemoryDep('buf145', c0, {c0: 802816}, None)]
op147.met_dependencies = [MemoryDep('arg102_1', c1, {c0: 6272, c1: 128}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (6272, 128)
op147.sizes = ([6272], [128])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op147_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg102_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf147', get_index_3, getitem_1)
        return store_reduction
op146_op147_op149.snodes[2] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 802816}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 802816}, None),
        MemoryDep('buf145', c0, {c0: 802816}, None),
        MemoryDep('buf146', c0, {c0: 6272}, None),
        MemoryDep('buf147', c0, {c0: 6272}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg103_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg104_1', c1, {c0: 6272, c1: 128}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (802816, 1)
op149.sizes = ([6272, 128], [])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op149_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg102_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf146', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf147', get_index_4)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg103_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg104_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf149', get_index_7, add_3, None)
        return store


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', 2048*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 16}, None)]
op150.unmet_dependencies = []
op150.met_dependencies = [MemoryDep('arg107_1', c0, {c0: 262144}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 1, 512, 128])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (262144, 1)
op150.sizes = ([128, 128, 16], [])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 16, 4, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 1, 512, 128])
class op150_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = 2048*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg107_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf150', get_index_1, load, None)
        return store


op151: ExternKernelSchedulerNode(ExternKernelAlloc)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None), StarDep(name='buf150', mode=None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ExternKernelAlloc
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
    buf151.users = [
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
    ]
]
op151.node.kernel = extern_kernels.convolution


op152_op153_op155: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op152_op153_op155.writes = 
    [   MemoryDep('buf152', c0, {c0: 392}, None),
        MemoryDep('buf153', c0, {c0: 392}, None),
        MemoryDep('buf155', c0, {c0: 50176}, None)]
op152_op153_op155.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 50176}, None)]
op152_op153_op155.met_dependencies = 
    [   MemoryDep('arg108_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg109_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg110_1', c1, {c0: 392, c1: 128}, None)]
op152_op153_op155.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf152.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf153.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op152_op153_op155.snodes[0] =
op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 392}, None)]
op152.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 50176}, None)]
op152.met_dependencies = [MemoryDep('arg108_1', c1, {c0: 392, c1: 128}, None)]
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf152.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (392, 128)
op152.sizes = ([392], [128])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op152_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg108_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf152', get_index_2, getitem)
        return store_reduction
op152_op153_op155.snodes[1] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 392}, None)]
op153.unmet_dependencies = [MemoryDep('buf151', c0, {c0: 50176}, None)]
op153.met_dependencies = [MemoryDep('arg108_1', c1, {c0: 392, c1: 128}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf153.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (392, 128)
op153.sizes = ([392], [128])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op153_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg108_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf153', get_index_2, getitem_1)
        return store_reduction
op152_op153_op155.snodes[2] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 50176}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf151', c0, {c0: 50176}, None),
        MemoryDep('buf152', c0, {c0: 392}, None),
        MemoryDep('buf153', c0, {c0: 392}, None)]
op155.met_dependencies = 
    [   MemoryDep('arg108_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg109_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg110_1', c1, {c0: 392, c1: 128}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (50176, 1)
op155.sizes = ([392, 128], [])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
class op155_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf151', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg108_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf152', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf153', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg109_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg110_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf155', get_index_6, add_2, None)
        return store


op156: ExternKernelSchedulerNode(ExternKernelOut)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg111_1', mode=None), StarDep(name='arg112_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelOut
    buf156.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.node.kernel = extern_kernels.addmm


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op157.met_dependencies = [StarDep(name='arg105_1', mode=None), StarDep(name='arg106_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = extern_kernels.addmm


op158: ExternKernelSchedulerNode(FallbackKernel)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf156', mode=None), StarDep(name='buf157', mode=None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: FallbackKernel
    buf158.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf158.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False),
    ]
]
op158.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op159: ExternKernelSchedulerNode(MultiOutput)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: MultiOutput
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 784, 64], stride=[100352, 64, 128, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op159.node.kernel = None


op163: ExternKernelSchedulerNode(ExternKernelOut)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op163.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelOut
    buf163.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf163.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False)]
]
op163.node.kernel = extern_kernels.mm


op164_op165_op166_op168: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op164_op165_op166_op168.writes = 
    [   MemoryDep('buf164', c0, {c0: 802816}, None),
        MemoryDep('buf165', c0, {c0: 6272}, None),
        MemoryDep('buf166', c0, {c0: 6272}, None),
        MemoryDep('buf168', c0, {c0: 802816}, None)]
op164_op165_op166_op168.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 802816}, None),
        MemoryDep('buf145', c0, {c0: 802816}, None),
        MemoryDep('buf163', c0, {c0: 802816}, None)]
op164_op165_op166_op168.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg114_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg115_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg116_1', c1, {c0: 6272, c1: 128}, None)]
op164_op165_op166_op168.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf164.users = [
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
    ]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf165.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf166.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op164_op165_op166_op168.snodes[0] =
op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 802816}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 802816}, None),
        MemoryDep('buf145', c0, {c0: 802816}, None),
        MemoryDep('buf163', c0, {c0: 802816}, None)]
op164.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg114_1', c1, {c0: 6272, c1: 128}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf164.users = [
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
    ]
]
op164.group.device = cuda:0
op164.group.iteration = (802816, 1)
op164.sizes = ([6272, 128], [])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op164_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg102_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf163', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg114_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf164', get_index_5, add_3, None)
        return store
op164_op165_op166_op168.snodes[1] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 6272}, None)]
op165.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 802816}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf165.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (6272, 128)
op165.sizes = ([6272], [128])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op165_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf165', get_index_1, getitem)
        return store_reduction
op164_op165_op166_op168.snodes[2] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 6272}, None)]
op166.unmet_dependencies = [MemoryDep('buf164', c0, {c0: 802816}, None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf166.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (6272, 128)
op166.sizes = ([6272], [128])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op166_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf166', get_index_1, getitem_1)
        return store_reduction
op164_op165_op166_op168.snodes[3] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 802816}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 802816}, None),
        MemoryDep('buf165', c0, {c0: 6272}, None),
        MemoryDep('buf166', c0, {c0: 6272}, None)]
op168.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg116_1', c1, {c0: 6272, c1: 128}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (802816, 1)
op168.sizes = ([6272, 128], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op168_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf165', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf166', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg115_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg116_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf168', get_index_5, add_1, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelOut)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelOut
    buf169.layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
]
op169.node.kernel = extern_kernels.mm


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 6422528}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 6422528}, None)]
op170.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 6272, c1: 1024}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1024], stride=[802816, 1024, 1])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (6422528, 1)
op170.sizes = ([6272, 1024], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1024], stride=[802816, 1024, 1])
class op170_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf169', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg118_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf170', get_index_4, mul_2, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False),
    ]
]
op171.node.kernel = extern_kernels.mm


op172_op173_op175: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op172_op173_op175.writes = 
    [   MemoryDep('buf172', c0, {c0: 6272}, None),
        MemoryDep('buf173', c0, {c0: 6272}, None),
        MemoryDep('buf175', c0, {c0: 802816}, None)]
op172_op173_op175.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 802816}, None),
        MemoryDep('buf171', c0, {c0: 802816}, None)]
op172_op173_op175.met_dependencies = 
    [   MemoryDep('arg120_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg121_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg122_1', c1, {c0: 6272, c1: 128}, None)]
op172_op173_op175.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf175.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
    ]
]
op172_op173_op175.snodes[0] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 6272}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 802816}, None),
        MemoryDep('buf171', c0, {c0: 802816}, None)]
op172.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 6272, c1: 128}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (6272, 128)
op172.sizes = ([6272], [128])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op172_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg120_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf172', get_index_3, getitem)
        return store_reduction
op172_op173_op175.snodes[1] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 6272}, None)]
op173.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 802816}, None),
        MemoryDep('buf171', c0, {c0: 802816}, None)]
op173.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 6272, c1: 128}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (6272, 128)
op173.sizes = ([6272], [128])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op173_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg120_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf173', get_index_3, getitem_1)
        return store_reduction
op172_op173_op175.snodes[2] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 802816}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 802816}, None),
        MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf172', c0, {c0: 6272}, None),
        MemoryDep('buf173', c0, {c0: 6272}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg120_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg121_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg122_1', c1, {c0: 6272, c1: 128}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf175.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (802816, 1)
op175.sizes = ([6272, 128], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op175_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg120_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf172', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf173', get_index_4)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg121_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg122_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf175', get_index_7, add_3, None)
        return store


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', 2048*c0 + c1 + 128*c2, {c0: 128, c1: 128, c2: 16}, None)]
op176.unmet_dependencies = []
op176.met_dependencies = [MemoryDep('arg125_1', c0, {c0: 262144}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 1, 512, 128])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (262144, 1)
op176.sizes = ([128, 128, 16], [])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 16, 4, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 4, 4], stride=[2048, 1, 512, 128])
class op176_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 16}
    index0 = 2048*z0 + 16*z1 + z2
    index1 = 2048*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg125_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf176', get_index_1, load, None)
        return store


op177: ExternKernelSchedulerNode(ExternKernelAlloc)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf175', mode=None), StarDep(name='buf176', mode=None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ExternKernelAlloc
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
    buf177.users = [
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=True, is_weak=False),
    ]
]
op177.node.kernel = extern_kernels.convolution


op178_op179_op181: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op178_op179_op181.writes = 
    [   MemoryDep('buf178', c0, {c0: 392}, None),
        MemoryDep('buf179', c0, {c0: 392}, None),
        MemoryDep('buf181', c0, {c0: 50176}, None)]
op178_op179_op181.unmet_dependencies = [MemoryDep('buf177', c0, {c0: 50176}, None)]
op178_op179_op181.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg127_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg128_1', c1, {c0: 392, c1: 128}, None)]
op178_op179_op181.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf178.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf179.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op178_op179_op181.snodes[0] =
op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 392}, None)]
op178.unmet_dependencies = [MemoryDep('buf177', c0, {c0: 50176}, None)]
op178.met_dependencies = [MemoryDep('arg126_1', c1, {c0: 392, c1: 128}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf178.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (392, 128)
op178.sizes = ([392], [128])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op178_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf178', get_index_2, getitem)
        return store_reduction
op178_op179_op181.snodes[1] =
op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 392}, None)]
op179.unmet_dependencies = [MemoryDep('buf177', c0, {c0: 50176}, None)]
op179.met_dependencies = [MemoryDep('arg126_1', c1, {c0: 392, c1: 128}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf179.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op179.group.device = cuda:0
op179.group.iteration = (392, 128)
op179.sizes = ([392], [128])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op179_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf179', get_index_2, getitem_1)
        return store_reduction
op178_op179_op181.snodes[2] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 50176}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf177', c0, {c0: 50176}, None),
        MemoryDep('buf178', c0, {c0: 392}, None),
        MemoryDep('buf179', c0, {c0: 392}, None)]
op181.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg127_1', c1, {c0: 392, c1: 128}, None),
        MemoryDep('arg128_1', c1, {c0: 392, c1: 128}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (50176, 1)
op181.sizes = ([392, 128], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 7, 7], stride=[6272, 1, 896, 128])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 128], stride=[6272, 128, 1])
class op181_loop_body:
    var_ranges = {z0: 392, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf178', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf179', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg127_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg128_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf181', get_index_6, add_2, None)
        return store


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf181', mode=None)]
op182.met_dependencies = [StarDep(name='arg129_1', mode=None), StarDep(name='arg130_1', mode=None)]
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda', torch.float32, size=[392, 256], stride=[256, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op182.node.kernel = extern_kernels.addmm


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op183.met_dependencies = [StarDep(name='arg123_1', mode=None), StarDep(name='arg124_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.node.kernel = extern_kernels.addmm


op184: ExternKernelSchedulerNode(FallbackKernel)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf182', mode=None), StarDep(name='buf183', mode=None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: FallbackKernel
    buf184.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf184.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False),
    ]
]
op184.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op185: ExternKernelSchedulerNode(MultiOutput)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: MultiOutput
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 2, 784, 64], stride=[100352, 64, 128, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op185.node.kernel = None


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op189.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False)]
]
op189.node.kernel = extern_kernels.mm


op190_op191_op192_op194: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op190_op191_op192_op194.writes = 
    [   MemoryDep('buf190', c0, {c0: 802816}, None),
        MemoryDep('buf191', c0, {c0: 6272}, None),
        MemoryDep('buf192', c0, {c0: 6272}, None),
        MemoryDep('buf194', c0, {c0: 802816}, None)]
op190_op191_op192_op194.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 802816}, None),
        MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf189', c0, {c0: 802816}, None)]
op190_op191_op192_op194.met_dependencies = 
    [   MemoryDep('arg120_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg132_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg133_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg134_1', c1, {c0: 6272, c1: 128}, None)]
op190_op191_op192_op194.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf191.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op190_op191_op192_op194.snodes[0] =
op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 802816}, None)]
op190.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 802816}, None),
        MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf189', c0, {c0: 802816}, None)]
op190.met_dependencies = 
    [   MemoryDep('arg120_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg132_1', c1, {c0: 6272, c1: 128}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
]
op190.group.device = cuda:0
op190.group.iteration = (802816, 1)
op190.sizes = ([6272, 128], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op190_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf171', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg120_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf189', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg132_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf190', get_index_5, add_3, None)
        return store
op190_op191_op192_op194.snodes[1] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 6272}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 802816}, None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf191.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (6272, 128)
op191.sizes = ([6272], [128])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op191_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf191', get_index_1, getitem)
        return store_reduction
op190_op191_op192_op194.snodes[2] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 6272}, None)]
op192.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 802816}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (6272, 128)
op192.sizes = ([6272], [128])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
class op192_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf192', get_index_1, getitem_1)
        return store_reduction
op190_op191_op192_op194.snodes[3] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 802816}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf190', c0, {c0: 802816}, None),
        MemoryDep('buf191', c0, {c0: 6272}, None),
        MemoryDep('buf192', c0, {c0: 6272}, None)]
op194.met_dependencies = 
    [   MemoryDep('arg133_1', c1, {c0: 6272, c1: 128}, None),
        MemoryDep('arg134_1', c1, {c0: 6272, c1: 128}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (802816, 1)
op194.sizes = ([6272, 128], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1], stride=[784, 1, 6272])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
class op194_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf191', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf192', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg133_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg134_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf194', get_index_5, add_1, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
]
op195.node.kernel = extern_kernels.mm


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 6422528}, None)]
op196.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 6422528}, None)]
op196.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 6272, c1: 1024}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1024], stride=[802816, 1024, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (6422528, 1)
op196.sizes = ([6272, 1024], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 1024], stride=[802816, 1024, 1])
class op196_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf195', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg136_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf196', get_index_4, mul_2, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 802816}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf190', c0, {c0: 802816}, None),
        MemoryDep('buf197', c0, {c0: 802816}, None)]
op198.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 6272, c1: 128}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (802816, 1)
op198.sizes = ([6272, 128], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 784, 128], stride=[100352, 128, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[6272, 128], stride=[128, 1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 28, 28], stride=[100352, 1, 3584, 128])
class op198_loop_body:
    var_ranges = {z0: 6272, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf197', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf198', get_index_3, add_1, None)
        return store


op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', 512*c0 + c1 + 128*c2, {c0: 320, c1: 128, c2: 4}, None)]
op199.unmet_dependencies = []
op199.met_dependencies = [MemoryDep('arg139_1', c0, {c0: 163840}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[320, 128, 2, 2], stride=[512, 1, 256, 128])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (163840, 1)
op199.sizes = ([320, 128, 4], [])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[320, 128, 2, 2], stride=[512, 4, 2, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[320, 128, 2, 2], stride=[512, 1, 256, 128])
class op199_loop_body:
    var_ranges = {z0: 320, z1: 128, z2: 4}
    index0 = 512*z0 + 4*z1 + z2
    index1 = 512*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg139_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf199', get_index_1, load, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelAlloc)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf198', mode=None), StarDep(name='buf199', mode=None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: ExternKernelAlloc
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=True, is_weak=False),
    ]
]
op200.node.kernel = extern_kernels.convolution


op201_op202_op204_op205_op206_op208: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op201_op202_op204_op205_op206_op208.writes = 
    [   MemoryDep('buf201', c0, {c0: 1568}, None),
        MemoryDep('buf202', c0, {c0: 1568}, None),
        MemoryDep('buf204', c0, {c0: 501760}, None),
        MemoryDep('buf205', c0, {c0: 1568}, None),
        MemoryDep('buf206', c0, {c0: 1568}, None),
        MemoryDep('buf208', c0, {c0: 501760}, None)]
op201_op202_op204_op205_op206_op208.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 501760}, None)]
op201_op202_op204_op205_op206_op208.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg141_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg142_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg143_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg144_1', c1, {c0: 1568, c1: 320}, None)]
op201_op202_op204_op205_op206_op208.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf201.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf202.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
    ]
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf205.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op201_op202_op204_op205_op206_op208.snodes[0] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 1568}, None)]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 501760}, None)]
op201.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 1568, c1: 320}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf201.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (1568, 320)
op201.sizes = ([1568], [320])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op201_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_2, getitem)
        return store_reduction
op201_op202_op204_op205_op206_op208.snodes[1] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 1568}, None)]
op202.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 501760}, None)]
op202.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 1568, c1: 320}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf202.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (1568, 320)
op202.sizes = ([1568], [320])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op202_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf202', get_index_2, getitem_1)
        return store_reduction
op201_op202_op204_op205_op206_op208.snodes[2] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 501760}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf200', c0, {c0: 501760}, None),
        MemoryDep('buf201', c0, {c0: 1568}, None),
        MemoryDep('buf202', c0, {c0: 1568}, None)]
op204.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg141_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg142_1', c1, {c0: 1568, c1: 320}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
    ]
]
op204.group.device = cuda:0
op204.group.iteration = (501760, 1)
op204.sizes = ([1568, 320], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op204_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf201', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf202', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg141_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg142_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf204', get_index_6, add_2, None)
        return store
op201_op202_op204_op205_op206_op208.snodes[3] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 1568}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 501760}, None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf205.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (1568, 320)
op205.sizes = ([1568], [320])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op205_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf205', get_index_1, getitem)
        return store_reduction
op201_op202_op204_op205_op206_op208.snodes[4] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 1568}, None)]
op206.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 501760}, None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (1568, 320)
op206.sizes = ([1568], [320])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op206_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf206', get_index_1, getitem_1)
        return store_reduction
op201_op202_op204_op205_op206_op208.snodes[5] =
op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 501760}, None)]
op208.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 501760}, None),
        MemoryDep('buf205', c0, {c0: 1568}, None),
        MemoryDep('buf206', c0, {c0: 1568}, None)]
op208.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg144_1', c1, {c0: 1568, c1: 320}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (501760, 1)
op208.sizes = ([1568, 320], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op208_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf205', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf206', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg143_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg144_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf208', get_index_5, add_1, None)
        return store


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op209.unmet_dependencies = []
op209.met_dependencies = [MemoryDep('arg147_1', c0, {c0: 409600}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (409600, 1)
op209.sizes = ([320, 320, 4], [])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op209_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg147_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf209', get_index_1, load, None)
        return store


op210: ExternKernelSchedulerNode(ExternKernelAlloc)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf208', mode=None), StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ExternKernelAlloc
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
    ]
]
op210.node.kernel = extern_kernels.convolution


op211_op212_op214: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op211_op212_op214.writes = 
    [   MemoryDep('buf211', c0, {c0: 392}, None),
        MemoryDep('buf212', c0, {c0: 392}, None),
        MemoryDep('buf214', c0, {c0: 125440}, None)]
op211_op212_op214.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 125440}, None)]
op211_op212_op214.met_dependencies = 
    [   MemoryDep('arg148_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg149_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg150_1', c1, {c0: 392, c1: 320}, None)]
op211_op212_op214.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf211.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf212.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op211_op212_op214.snodes[0] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 392}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 125440}, None)]
op211.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 392, c1: 320}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf211.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (392, 320)
op211.sizes = ([392], [320])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op211_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg148_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf211', get_index_2, getitem)
        return store_reduction
op211_op212_op214.snodes[1] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 392}, None)]
op212.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 125440}, None)]
op212.met_dependencies = [MemoryDep('arg148_1', c1, {c0: 392, c1: 320}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf212.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (392, 320)
op212.sizes = ([392], [320])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op212_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg148_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf212', get_index_2, getitem_1)
        return store_reduction
op211_op212_op214.snodes[2] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 125440}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 125440}, None),
        MemoryDep('buf211', c0, {c0: 392}, None),
        MemoryDep('buf212', c0, {c0: 392}, None)]
op214.met_dependencies = 
    [   MemoryDep('arg148_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg149_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg150_1', c1, {c0: 392, c1: 320}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (125440, 1)
op214.sizes = ([392, 320], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op214_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg148_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf211', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf212', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg149_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg150_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf214', get_index_6, add_2, None)
        return store


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg151_1', mode=None), StarDep(name='arg152_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.node.kernel = extern_kernels.addmm


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op216.met_dependencies = [StarDep(name='arg145_1', mode=None), StarDep(name='arg146_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.node.kernel = extern_kernels.addmm


op217: ExternKernelSchedulerNode(FallbackKernel)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf215', mode=None), StarDep(name='buf216', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: FallbackKernel
    buf217.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf217.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False),
    ]
]
op217.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op218: ExternKernelSchedulerNode(MultiOutput)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: MultiOutput
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = None


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op222.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf222.users = [
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
    ]
]
op222.node.kernel = extern_kernels.mm


op223_op224_op226: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op223_op224_op226.writes = 
    [   MemoryDep('buf223', c0, {c0: 1568}, None),
        MemoryDep('buf224', c0, {c0: 1568}, None),
        MemoryDep('buf226', c0, {c0: 501760}, None)]
op223_op224_op226.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 501760}, None),
        MemoryDep('buf222', c0, {c0: 501760}, None)]
op223_op224_op226.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg155_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg156_1', c1, {c0: 1568, c1: 320}, None)]
op223_op224_op226.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf223.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf224.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op223_op224_op226.snodes[0] =
op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 1568}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 501760}, None),
        MemoryDep('buf222', c0, {c0: 501760}, None)]
op223.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 1568, c1: 320}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf223.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (1568, 320)
op223.sizes = ([1568], [320])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op223_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg154_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf223', get_index_3, getitem)
        return store_reduction
op223_op224_op226.snodes[1] =
op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 1568}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 501760}, None),
        MemoryDep('buf222', c0, {c0: 501760}, None)]
op224.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 1568, c1: 320}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf224.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (1568, 320)
op224.sizes = ([1568], [320])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op224_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg154_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf224', get_index_3, getitem_1)
        return store_reduction
op223_op224_op226.snodes[2] =
op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 501760}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 501760}, None),
        MemoryDep('buf222', c0, {c0: 501760}, None),
        MemoryDep('buf223', c0, {c0: 1568}, None),
        MemoryDep('buf224', c0, {c0: 1568}, None)]
op226.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg155_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg156_1', c1, {c0: 1568, c1: 320}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (501760, 1)
op226.sizes = ([1568, 320], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op226_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg154_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf223', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf224', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg155_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg156_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf226', get_index_7, add_3, None)
        return store


op227: ExternKernelSchedulerNode(ExternKernelOut)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op227.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op227.outputs = [
    buf227: ExternKernelOut
    buf227.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf227.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False)]
]
op227.node.kernel = extern_kernels.mm


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 2007040}, None)]
op228.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 2007040}, None)]
op228.met_dependencies = [MemoryDep('arg158_1', c1, {c0: 1568, c1: 1280}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (2007040, 1)
op228.sizes = ([1568, 1280], [])
buf227_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op228_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf227', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg158_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf228', get_index_4, mul_2, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False)]
]
op229.node.kernel = extern_kernels.mm


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 501760}, None)]
op230.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 501760}, None),
        MemoryDep('buf222', c0, {c0: 501760}, None),
        MemoryDep('buf229', c0, {c0: 501760}, None)]
op230.met_dependencies = 
    [   MemoryDep('arg154_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg160_1', c1, {c0: 1568, c1: 320}, None)]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf230.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
    ]
]
op230.group.device = cuda:0
op230.group.iteration = (501760, 1)
op230.sizes = ([1568, 320], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op230_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf222', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg154_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf229', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg160_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf230', get_index_5, add_3, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelAlloc)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf230', mode=None)]
op231.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op231.outputs = [
    buf231: ExternKernelAlloc
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
    ]
]
op231.node.kernel = extern_kernels.convolution


op232_op233_op235: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op232_op233_op235.writes = 
    [   MemoryDep('buf232', c0, {c0: 1568}, None),
        MemoryDep('buf233', c0, {c0: 1568}, None),
        MemoryDep('buf235', c0, {c0: 501760}, None)]
op232_op233_op235.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 501760}, None),
        MemoryDep('buf231', c0, {c0: 501760}, None)]
op232_op233_op235.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg163_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg164_1', c1, {c0: 1568, c1: 320}, None)]
op232_op233_op235.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf232.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf235.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
]
op232_op233_op235.snodes[0] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 1568}, None)]
op232.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 501760}, None),
        MemoryDep('buf231', c0, {c0: 501760}, None)]
op232.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 1568, c1: 320}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf232.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (1568, 320)
op232.sizes = ([1568], [320])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op232_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf230', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf232', get_index_3, getitem)
        return store_reduction
op232_op233_op235.snodes[1] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 1568}, None)]
op233.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 501760}, None),
        MemoryDep('buf231', c0, {c0: 501760}, None)]
op233.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 1568, c1: 320}, None)]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (1568, 320)
op233.sizes = ([1568], [320])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op233_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf230', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf233', get_index_3, getitem_1)
        return store_reduction
op232_op233_op235.snodes[2] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 501760}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 501760}, None),
        MemoryDep('buf231', c0, {c0: 501760}, None),
        MemoryDep('buf232', c0, {c0: 1568}, None),
        MemoryDep('buf233', c0, {c0: 1568}, None)]
op235.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg163_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg164_1', c1, {c0: 1568, c1: 320}, None)]
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf235.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False),
    ]
]
op235.group.device = cuda:0
op235.group.iteration = (501760, 1)
op235.sizes = ([1568, 320], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op235_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf230', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf232', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf233', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg163_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg164_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf235', get_index_7, add_3, None)
        return store


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op236.unmet_dependencies = []
op236.met_dependencies = [MemoryDep('arg167_1', c0, {c0: 409600}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (409600, 1)
op236.sizes = ([320, 320, 4], [])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op236_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg167_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf236', get_index_1, load, None)
        return store


op237: ExternKernelSchedulerNode(ExternKernelAlloc)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf235', mode=None), StarDep(name='buf236', mode=None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: ExternKernelAlloc
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf237.users = [
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
    ]
]
op237.node.kernel = extern_kernels.convolution


op238_op239_op241: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op238_op239_op241.writes = 
    [   MemoryDep('buf238', c0, {c0: 392}, None),
        MemoryDep('buf239', c0, {c0: 392}, None),
        MemoryDep('buf241', c0, {c0: 125440}, None)]
op238_op239_op241.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 125440}, None)]
op238_op239_op241.met_dependencies = 
    [   MemoryDep('arg168_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg169_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg170_1', c1, {c0: 392, c1: 320}, None)]
op238_op239_op241.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf238.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf239.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op238_op239_op241.snodes[0] =
op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 392}, None)]
op238.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 125440}, None)]
op238.met_dependencies = [MemoryDep('arg168_1', c1, {c0: 392, c1: 320}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf238.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (392, 320)
op238.sizes = ([392], [320])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op238_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf238', get_index_2, getitem)
        return store_reduction
op238_op239_op241.snodes[1] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 392}, None)]
op239.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 125440}, None)]
op239.met_dependencies = [MemoryDep('arg168_1', c1, {c0: 392, c1: 320}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf239.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (392, 320)
op239.sizes = ([392], [320])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op239_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf239', get_index_2, getitem_1)
        return store_reduction
op238_op239_op241.snodes[2] =
op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 125440}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf237', c0, {c0: 125440}, None),
        MemoryDep('buf238', c0, {c0: 392}, None),
        MemoryDep('buf239', c0, {c0: 392}, None)]
op241.met_dependencies = 
    [   MemoryDep('arg168_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg169_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg170_1', c1, {c0: 392, c1: 320}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (125440, 1)
op241.sizes = ([392, 320], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op241_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf238', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf239', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg169_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg170_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf241', get_index_6, add_2, None)
        return store


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='arg171_1', mode=None), StarDep(name='arg172_1', mode=None)]
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op242.node.kernel = extern_kernels.addmm


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf235', mode=None)]
op243.met_dependencies = [StarDep(name='arg165_1', mode=None), StarDep(name='arg166_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.node.kernel = extern_kernels.addmm


op244: ExternKernelSchedulerNode(FallbackKernel)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf242', mode=None), StarDep(name='buf243', mode=None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: FallbackKernel
    buf244.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf244.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False),
    ]
]
op244.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op245: ExternKernelSchedulerNode(MultiOutput)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: MultiOutput
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op245.node.kernel = None


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf245', mode=None)]
op249.met_dependencies = [StarDep(name='arg173_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False)]
]
op249.node.kernel = extern_kernels.mm


op250_op251_op252_op254: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op250_op251_op252_op254.writes = 
    [   MemoryDep('buf250', c0, {c0: 501760}, None),
        MemoryDep('buf251', c0, {c0: 1568}, None),
        MemoryDep('buf252', c0, {c0: 1568}, None),
        MemoryDep('buf254', c0, {c0: 501760}, None)]
op250_op251_op252_op254.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 501760}, None),
        MemoryDep('buf231', c0, {c0: 501760}, None),
        MemoryDep('buf249', c0, {c0: 501760}, None)]
op250_op251_op252_op254.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg174_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg175_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg176_1', c1, {c0: 1568, c1: 320}, None)]
op250_op251_op252_op254.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
    ]
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf251.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf252.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op250_op251_op252_op254.snodes[0] =
op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 501760}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 501760}, None),
        MemoryDep('buf231', c0, {c0: 501760}, None),
        MemoryDep('buf249', c0, {c0: 501760}, None)]
op250.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg174_1', c1, {c0: 1568, c1: 320}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
    ]
]
op250.group.device = cuda:0
op250.group.iteration = (501760, 1)
op250.sizes = ([1568, 320], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op250_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf230', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf249', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg174_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf250', get_index_5, add_3, None)
        return store
op250_op251_op252_op254.snodes[1] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 1568}, None)]
op251.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 501760}, None)]
op251.met_dependencies = []
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf251.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (1568, 320)
op251.sizes = ([1568], [320])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op251_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf251', get_index_1, getitem)
        return store_reduction
op250_op251_op252_op254.snodes[2] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 1568}, None)]
op252.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 501760}, None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf252.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (1568, 320)
op252.sizes = ([1568], [320])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op252_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf252', get_index_1, getitem_1)
        return store_reduction
op250_op251_op252_op254.snodes[3] =
op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 501760}, None)]
op254.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 501760}, None),
        MemoryDep('buf251', c0, {c0: 1568}, None),
        MemoryDep('buf252', c0, {c0: 1568}, None)]
op254.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg176_1', c1, {c0: 1568, c1: 320}, None)]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (501760, 1)
op254.sizes = ([1568, 320], [])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op254_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf251', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf252', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg175_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg176_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf254', get_index_5, add_1, None)
        return store


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf254', mode=None)]
op255.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False)]
]
op255.node.kernel = extern_kernels.mm


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 2007040}, None)]
op256.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 2007040}, None)]
op256.met_dependencies = [MemoryDep('arg178_1', c1, {c0: 1568, c1: 1280}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (2007040, 1)
op256.sizes = ([1568, 1280], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op256_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg178_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf255', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg178_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf256', get_index_4, mul_2, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
    ]
]
op257.node.kernel = extern_kernels.mm


op258_op259_op261: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op258_op259_op261.writes = 
    [   MemoryDep('buf258', c0, {c0: 1568}, None),
        MemoryDep('buf259', c0, {c0: 1568}, None),
        MemoryDep('buf261', c0, {c0: 501760}, None)]
op258_op259_op261.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 501760}, None),
        MemoryDep('buf257', c0, {c0: 501760}, None)]
op258_op259_op261.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg181_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg182_1', c1, {c0: 1568, c1: 320}, None)]
op258_op259_op261.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf259.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf261.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
    ]
]
op258_op259_op261.snodes[0] =
op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 1568}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 501760}, None),
        MemoryDep('buf257', c0, {c0: 501760}, None)]
op258.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 1568, c1: 320}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (1568, 320)
op258.sizes = ([1568], [320])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op258_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg180_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf258', get_index_3, getitem)
        return store_reduction
op258_op259_op261.snodes[1] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 1568}, None)]
op259.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 501760}, None),
        MemoryDep('buf257', c0, {c0: 501760}, None)]
op259.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 1568, c1: 320}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf259.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (1568, 320)
op259.sizes = ([1568], [320])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op259_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg180_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf259', get_index_3, getitem_1)
        return store_reduction
op258_op259_op261.snodes[2] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 501760}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 501760}, None),
        MemoryDep('buf257', c0, {c0: 501760}, None),
        MemoryDep('buf258', c0, {c0: 1568}, None),
        MemoryDep('buf259', c0, {c0: 1568}, None)]
op261.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg181_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg182_1', c1, {c0: 1568, c1: 320}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf261.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
    ]
]
op261.group.device = cuda:0
op261.group.iteration = (501760, 1)
op261.sizes = ([1568, 320], [])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op261_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg180_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf258', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf259', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg181_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg182_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf261', get_index_7, add_3, None)
        return store


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op262.unmet_dependencies = []
op262.met_dependencies = [MemoryDep('arg185_1', c0, {c0: 409600}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (409600, 1)
op262.sizes = ([320, 320, 4], [])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op262_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg185_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf262', get_index_1, load, None)
        return store


op263: ExternKernelSchedulerNode(ExternKernelAlloc)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf261', mode=None), StarDep(name='buf262', mode=None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ExternKernelAlloc
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf263.users = [
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op263.node.kernel = extern_kernels.convolution


op264_op265_op267: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op264_op265_op267.writes = 
    [   MemoryDep('buf264', c0, {c0: 392}, None),
        MemoryDep('buf265', c0, {c0: 392}, None),
        MemoryDep('buf267', c0, {c0: 125440}, None)]
op264_op265_op267.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 125440}, None)]
op264_op265_op267.met_dependencies = 
    [   MemoryDep('arg186_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg187_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg188_1', c1, {c0: 392, c1: 320}, None)]
op264_op265_op267.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf264.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf265.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op264_op265_op267.snodes[0] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 392}, None)]
op264.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 125440}, None)]
op264.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 392, c1: 320}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf264.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (392, 320)
op264.sizes = ([392], [320])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op264_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf264', get_index_2, getitem)
        return store_reduction
op264_op265_op267.snodes[1] =
op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 392}, None)]
op265.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 125440}, None)]
op265.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 392, c1: 320}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf265.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (392, 320)
op265.sizes = ([392], [320])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op265_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf265', get_index_2, getitem_1)
        return store_reduction
op264_op265_op267.snodes[2] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 125440}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf263', c0, {c0: 125440}, None),
        MemoryDep('buf264', c0, {c0: 392}, None),
        MemoryDep('buf265', c0, {c0: 392}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg186_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg187_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg188_1', c1, {c0: 392, c1: 320}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (125440, 1)
op267.sizes = ([392, 320], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op267_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf264', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf265', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg187_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg188_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf267', get_index_6, add_2, None)
        return store


op268: ExternKernelSchedulerNode(ExternKernelOut)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op268.met_dependencies = [StarDep(name='arg189_1', mode=None), StarDep(name='arg190_1', mode=None)]
op268.outputs = [
    buf268: ExternKernelOut
    buf268.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op268.node.kernel = extern_kernels.addmm


op269: ExternKernelSchedulerNode(ExternKernelOut)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op269.met_dependencies = [StarDep(name='arg183_1', mode=None), StarDep(name='arg184_1', mode=None)]
op269.outputs = [
    buf269: ExternKernelOut
    buf269.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op269.node.kernel = extern_kernels.addmm


op270: ExternKernelSchedulerNode(FallbackKernel)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf268', mode=None), StarDep(name='buf269', mode=None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: FallbackKernel
    buf270.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf270.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False),
    ]
]
op270.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op271: ExternKernelSchedulerNode(MultiOutput)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: MultiOutput
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op271.node.kernel = None


op275: ExternKernelSchedulerNode(ExternKernelOut)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op275.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op275.outputs = [
    buf275: ExternKernelOut
    buf275.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf275.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False)]
]
op275.node.kernel = extern_kernels.mm


op276_op277_op278_op280: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op276_op277_op278_op280.writes = 
    [   MemoryDep('buf276', c0, {c0: 501760}, None),
        MemoryDep('buf277', c0, {c0: 1568}, None),
        MemoryDep('buf278', c0, {c0: 1568}, None),
        MemoryDep('buf280', c0, {c0: 501760}, None)]
op276_op277_op278_op280.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 501760}, None),
        MemoryDep('buf257', c0, {c0: 501760}, None),
        MemoryDep('buf275', c0, {c0: 501760}, None)]
op276_op277_op278_op280.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg192_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg193_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg194_1', c1, {c0: 1568, c1: 320}, None)]
op276_op277_op278_op280.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf276.users = [
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
    ]
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf277.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf278.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op276_op277_op278_op280.snodes[0] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 501760}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 501760}, None),
        MemoryDep('buf257', c0, {c0: 501760}, None),
        MemoryDep('buf275', c0, {c0: 501760}, None)]
op276.met_dependencies = 
    [   MemoryDep('arg180_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg192_1', c1, {c0: 1568, c1: 320}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf276.users = [
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
    ]
]
op276.group.device = cuda:0
op276.group.iteration = (501760, 1)
op276.sizes = ([1568, 320], [])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op276_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg180_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf275', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg192_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf276', get_index_5, add_3, None)
        return store
op276_op277_op278_op280.snodes[1] =
op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 1568}, None)]
op277.unmet_dependencies = [MemoryDep('buf276', c0, {c0: 501760}, None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf277.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (1568, 320)
op277.sizes = ([1568], [320])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op277_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf277', get_index_1, getitem)
        return store_reduction
op276_op277_op278_op280.snodes[2] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 1568}, None)]
op278.unmet_dependencies = [MemoryDep('buf276', c0, {c0: 501760}, None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf278.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (1568, 320)
op278.sizes = ([1568], [320])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op278_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf278', get_index_1, getitem_1)
        return store_reduction
op276_op277_op278_op280.snodes[3] =
op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 501760}, None)]
op280.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 501760}, None),
        MemoryDep('buf277', c0, {c0: 1568}, None),
        MemoryDep('buf278', c0, {c0: 1568}, None)]
op280.met_dependencies = 
    [   MemoryDep('arg193_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg194_1', c1, {c0: 1568, c1: 320}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (501760, 1)
op280.sizes = ([1568, 320], [])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op280_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf277', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf278', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg193_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg194_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf280', get_index_5, add_1, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op281.met_dependencies = [StarDep(name='arg195_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
]
op281.node.kernel = extern_kernels.mm


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 2007040}, None)]
op282.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 2007040}, None)]
op282.met_dependencies = [MemoryDep('arg196_1', c1, {c0: 1568, c1: 1280}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (2007040, 1)
op282.sizes = ([1568, 1280], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op282_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg196_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf281', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg196_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf282', get_index_4, mul_2, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg197_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.mm


op284_op285_op287: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op284_op285_op287.writes = 
    [   MemoryDep('buf284', c0, {c0: 1568}, None),
        MemoryDep('buf285', c0, {c0: 1568}, None),
        MemoryDep('buf287', c0, {c0: 501760}, None)]
op284_op285_op287.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 501760}, None),
        MemoryDep('buf283', c0, {c0: 501760}, None)]
op284_op285_op287.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg199_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg200_1', c1, {c0: 1568, c1: 320}, None)]
op284_op285_op287.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf284.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf285.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf287.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
    ]
]
op284_op285_op287.snodes[0] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 1568}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 501760}, None),
        MemoryDep('buf283', c0, {c0: 501760}, None)]
op284.met_dependencies = [MemoryDep('arg198_1', c1, {c0: 1568, c1: 320}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf284.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (1568, 320)
op284.sizes = ([1568], [320])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op284_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf284', get_index_3, getitem)
        return store_reduction
op284_op285_op287.snodes[1] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 1568}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 501760}, None),
        MemoryDep('buf283', c0, {c0: 501760}, None)]
op285.met_dependencies = [MemoryDep('arg198_1', c1, {c0: 1568, c1: 320}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf285.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (1568, 320)
op285.sizes = ([1568], [320])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op285_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf285', get_index_3, getitem_1)
        return store_reduction
op284_op285_op287.snodes[2] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 501760}, None)]
op287.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 501760}, None),
        MemoryDep('buf283', c0, {c0: 501760}, None),
        MemoryDep('buf284', c0, {c0: 1568}, None),
        MemoryDep('buf285', c0, {c0: 1568}, None)]
op287.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg199_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg200_1', c1, {c0: 1568, c1: 320}, None)]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf287.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
    ]
]
op287.group.device = cuda:0
op287.group.iteration = (501760, 1)
op287.sizes = ([1568, 320], [])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op287_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf284', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf285', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg199_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg200_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf287', get_index_7, add_3, None)
        return store


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op288.unmet_dependencies = []
op288.met_dependencies = [MemoryDep('arg203_1', c0, {c0: 409600}, None)]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (409600, 1)
op288.sizes = ([320, 320, 4], [])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op288_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg203_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf288', get_index_1, load, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelAlloc)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf287', mode=None), StarDep(name='buf288', mode=None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ExternKernelAlloc
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf289.users = [
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op289.node.kernel = extern_kernels.convolution


op290_op291_op293: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op290_op291_op293.writes = 
    [   MemoryDep('buf290', c0, {c0: 392}, None),
        MemoryDep('buf291', c0, {c0: 392}, None),
        MemoryDep('buf293', c0, {c0: 125440}, None)]
op290_op291_op293.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 125440}, None)]
op290_op291_op293.met_dependencies = 
    [   MemoryDep('arg204_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg205_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg206_1', c1, {c0: 392, c1: 320}, None)]
op290_op291_op293.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf290.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf291.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf293.users = [NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op290_op291_op293.snodes[0] =
op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 392}, None)]
op290.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 125440}, None)]
op290.met_dependencies = [MemoryDep('arg204_1', c1, {c0: 392, c1: 320}, None)]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf290.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (392, 320)
op290.sizes = ([392], [320])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op290_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg204_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf290', get_index_2, getitem)
        return store_reduction
op290_op291_op293.snodes[1] =
op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 392}, None)]
op291.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 125440}, None)]
op291.met_dependencies = [MemoryDep('arg204_1', c1, {c0: 392, c1: 320}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf291.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (392, 320)
op291.sizes = ([392], [320])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op291_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg204_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf291', get_index_2, getitem_1)
        return store_reduction
op290_op291_op293.snodes[2] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 125440}, None)]
op293.unmet_dependencies = 
    [   MemoryDep('buf289', c0, {c0: 125440}, None),
        MemoryDep('buf290', c0, {c0: 392}, None),
        MemoryDep('buf291', c0, {c0: 392}, None)]
op293.met_dependencies = 
    [   MemoryDep('arg204_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg205_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg206_1', c1, {c0: 392, c1: 320}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf293.users = [NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (125440, 1)
op293.sizes = ([392, 320], [])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op293_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg204_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf290', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf291', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg205_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg206_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf293', get_index_6, add_2, None)
        return store


op294: ExternKernelSchedulerNode(ExternKernelOut)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf293', mode=None)]
op294.met_dependencies = [StarDep(name='arg207_1', mode=None), StarDep(name='arg208_1', mode=None)]
op294.outputs = [
    buf294: ExternKernelOut
    buf294.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf294.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294.node.kernel = extern_kernels.addmm


op295: ExternKernelSchedulerNode(ExternKernelOut)
op295.writes = [StarDep(name='buf295', mode=None)]
op295.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op295.met_dependencies = [StarDep(name='arg201_1', mode=None), StarDep(name='arg202_1', mode=None)]
op295.outputs = [
    buf295: ExternKernelOut
    buf295.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.node.kernel = extern_kernels.addmm


op296: ExternKernelSchedulerNode(FallbackKernel)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf294', mode=None), StarDep(name='buf295', mode=None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: FallbackKernel
    buf296.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf296.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op296.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op297: ExternKernelSchedulerNode(MultiOutput)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: MultiOutput
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op297.node.kernel = None


op301: ExternKernelSchedulerNode(ExternKernelOut)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf297', mode=None)]
op301.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op301.outputs = [
    buf301: ExternKernelOut
    buf301.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf301.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False)]
]
op301.node.kernel = extern_kernels.mm


op302_op303_op304_op306: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op302_op303_op304_op306.writes = 
    [   MemoryDep('buf302', c0, {c0: 501760}, None),
        MemoryDep('buf303', c0, {c0: 1568}, None),
        MemoryDep('buf304', c0, {c0: 1568}, None),
        MemoryDep('buf306', c0, {c0: 501760}, None)]
op302_op303_op304_op306.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 501760}, None),
        MemoryDep('buf283', c0, {c0: 501760}, None),
        MemoryDep('buf301', c0, {c0: 501760}, None)]
op302_op303_op304_op306.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg210_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg211_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg212_1', c1, {c0: 1568, c1: 320}, None)]
op302_op303_op304_op306.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf302.users = [
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
    ]
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf303.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf304.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op302_op303_op304_op306.snodes[0] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 501760}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf276', c0, {c0: 501760}, None),
        MemoryDep('buf283', c0, {c0: 501760}, None),
        MemoryDep('buf301', c0, {c0: 501760}, None)]
op302.met_dependencies = 
    [   MemoryDep('arg198_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg210_1', c1, {c0: 1568, c1: 320}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf302.users = [
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
    ]
]
op302.group.device = cuda:0
op302.group.iteration = (501760, 1)
op302.sizes = ([1568, 320], [])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op302_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf301', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg210_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf302', get_index_5, add_3, None)
        return store
op302_op303_op304_op306.snodes[1] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 1568}, None)]
op303.unmet_dependencies = [MemoryDep('buf302', c0, {c0: 501760}, None)]
op303.met_dependencies = []
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf303.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (1568, 320)
op303.sizes = ([1568], [320])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op303_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf303', get_index_1, getitem)
        return store_reduction
op302_op303_op304_op306.snodes[2] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 1568}, None)]
op304.unmet_dependencies = [MemoryDep('buf302', c0, {c0: 501760}, None)]
op304.met_dependencies = []
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf304.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (1568, 320)
op304.sizes = ([1568], [320])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op304_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf304', get_index_1, getitem_1)
        return store_reduction
op302_op303_op304_op306.snodes[3] =
op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 501760}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 501760}, None),
        MemoryDep('buf303', c0, {c0: 1568}, None),
        MemoryDep('buf304', c0, {c0: 1568}, None)]
op306.met_dependencies = 
    [   MemoryDep('arg211_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg212_1', c1, {c0: 1568, c1: 320}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (501760, 1)
op306.sizes = ([1568, 320], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op306_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf303', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf304', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg211_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg212_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf306', get_index_5, add_1, None)
        return store


op307: ExternKernelSchedulerNode(ExternKernelOut)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = [StarDep(name='arg213_1', mode=None)]
op307.outputs = [
    buf307: ExternKernelOut
    buf307.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False)]
]
op307.node.kernel = extern_kernels.mm


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 2007040}, None)]
op308.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 2007040}, None)]
op308.met_dependencies = [MemoryDep('arg214_1', c1, {c0: 1568, c1: 1280}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf308.users = [NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (2007040, 1)
op308.sizes = ([1568, 1280], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op308_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg214_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf307', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg214_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf308', get_index_4, mul_2, None)
        return store


op309: ExternKernelSchedulerNode(ExternKernelOut)
op309.writes = [StarDep(name='buf309', mode=None)]
op309.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op309.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op309.outputs = [
    buf309: ExternKernelOut
    buf309.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf309.users = [
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
    ]
]
op309.node.kernel = extern_kernels.mm


op310_op311_op313: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op310_op311_op313.writes = 
    [   MemoryDep('buf310', c0, {c0: 1568}, None),
        MemoryDep('buf311', c0, {c0: 1568}, None),
        MemoryDep('buf313', c0, {c0: 501760}, None)]
op310_op311_op313.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 501760}, None),
        MemoryDep('buf309', c0, {c0: 501760}, None)]
op310_op311_op313.met_dependencies = 
    [   MemoryDep('arg216_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg217_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg218_1', c1, {c0: 1568, c1: 320}, None)]
op310_op311_op313.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf310.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf311.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf313.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
    ]
]
op310_op311_op313.snodes[0] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 1568}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 501760}, None),
        MemoryDep('buf309', c0, {c0: 501760}, None)]
op310.met_dependencies = [MemoryDep('arg216_1', c1, {c0: 1568, c1: 320}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf310.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (1568, 320)
op310.sizes = ([1568], [320])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op310_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf309', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg216_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf310', get_index_3, getitem)
        return store_reduction
op310_op311_op313.snodes[1] =
op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 1568}, None)]
op311.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 501760}, None),
        MemoryDep('buf309', c0, {c0: 501760}, None)]
op311.met_dependencies = [MemoryDep('arg216_1', c1, {c0: 1568, c1: 320}, None)]
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf311.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (1568, 320)
op311.sizes = ([1568], [320])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op311_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf309', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg216_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf311', get_index_3, getitem_1)
        return store_reduction
op310_op311_op313.snodes[2] =
op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 501760}, None)]
op313.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 501760}, None),
        MemoryDep('buf309', c0, {c0: 501760}, None),
        MemoryDep('buf310', c0, {c0: 1568}, None),
        MemoryDep('buf311', c0, {c0: 1568}, None)]
op313.met_dependencies = 
    [   MemoryDep('arg216_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg217_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg218_1', c1, {c0: 1568, c1: 320}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf313.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
    ]
]
op313.group.device = cuda:0
op313.group.iteration = (501760, 1)
op313.sizes = ([1568, 320], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op313_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf309', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg216_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf310', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf311', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg217_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg218_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf313', get_index_7, add_3, None)
        return store


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op314.unmet_dependencies = []
op314.met_dependencies = [MemoryDep('arg221_1', c0, {c0: 409600}, None)]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (409600, 1)
op314.sizes = ([320, 320, 4], [])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op314_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg221_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf314', get_index_1, load, None)
        return store


op315: ExternKernelSchedulerNode(ExternKernelAlloc)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf313', mode=None), StarDep(name='buf314', mode=None)]
op315.met_dependencies = []
op315.outputs = [
    buf315: ExternKernelAlloc
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf315.users = [
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False),
    ]
]
op315.node.kernel = extern_kernels.convolution


op316_op317_op319: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op316_op317_op319.writes = 
    [   MemoryDep('buf316', c0, {c0: 392}, None),
        MemoryDep('buf317', c0, {c0: 392}, None),
        MemoryDep('buf319', c0, {c0: 125440}, None)]
op316_op317_op319.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 125440}, None)]
op316_op317_op319.met_dependencies = 
    [   MemoryDep('arg222_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg223_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg224_1', c1, {c0: 392, c1: 320}, None)]
op316_op317_op319.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf316.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf317.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op316_op317_op319.snodes[0] =
op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 392}, None)]
op316.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 125440}, None)]
op316.met_dependencies = [MemoryDep('arg222_1', c1, {c0: 392, c1: 320}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf316.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (392, 320)
op316.sizes = ([392], [320])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op316_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf316', get_index_2, getitem)
        return store_reduction
op316_op317_op319.snodes[1] =
op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 392}, None)]
op317.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 125440}, None)]
op317.met_dependencies = [MemoryDep('arg222_1', c1, {c0: 392, c1: 320}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf317.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (392, 320)
op317.sizes = ([392], [320])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op317_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf317', get_index_2, getitem_1)
        return store_reduction
op316_op317_op319.snodes[2] =
op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 125440}, None)]
op319.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 125440}, None),
        MemoryDep('buf316', c0, {c0: 392}, None),
        MemoryDep('buf317', c0, {c0: 392}, None)]
op319.met_dependencies = 
    [   MemoryDep('arg222_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg223_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg224_1', c1, {c0: 392, c1: 320}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (125440, 1)
op319.sizes = ([392, 320], [])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op319_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf316', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf317', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg223_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg224_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf319', get_index_6, add_2, None)
        return store


op320: ExternKernelSchedulerNode(ExternKernelOut)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf319', mode=None)]
op320.met_dependencies = [StarDep(name='arg225_1', mode=None), StarDep(name='arg226_1', mode=None)]
op320.outputs = [
    buf320: ExternKernelOut
    buf320.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf320.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op320.node.kernel = extern_kernels.addmm


op321: ExternKernelSchedulerNode(ExternKernelOut)
op321.writes = [StarDep(name='buf321', mode=None)]
op321.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op321.met_dependencies = [StarDep(name='arg219_1', mode=None), StarDep(name='arg220_1', mode=None)]
op321.outputs = [
    buf321: ExternKernelOut
    buf321.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op321.node.kernel = extern_kernels.addmm


op322: ExternKernelSchedulerNode(FallbackKernel)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf320', mode=None), StarDep(name='buf321', mode=None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: FallbackKernel
    buf322.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf322.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False),
    ]
]
op322.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op323: ExternKernelSchedulerNode(MultiOutput)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf322', mode=None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: MultiOutput
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op323.node.kernel = None


op327: ExternKernelSchedulerNode(ExternKernelOut)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf323', mode=None)]
op327.met_dependencies = [StarDep(name='arg227_1', mode=None)]
op327.outputs = [
    buf327: ExternKernelOut
    buf327.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf327.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False)]
]
op327.node.kernel = extern_kernels.mm


op328_op329_op330_op332: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op328_op329_op330_op332.writes = 
    [   MemoryDep('buf328', c0, {c0: 501760}, None),
        MemoryDep('buf329', c0, {c0: 1568}, None),
        MemoryDep('buf330', c0, {c0: 1568}, None),
        MemoryDep('buf332', c0, {c0: 501760}, None)]
op328_op329_op330_op332.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 501760}, None),
        MemoryDep('buf309', c0, {c0: 501760}, None),
        MemoryDep('buf327', c0, {c0: 501760}, None)]
op328_op329_op330_op332.met_dependencies = 
    [   MemoryDep('arg216_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg228_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg229_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg230_1', c1, {c0: 1568, c1: 320}, None)]
op328_op329_op330_op332.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
    ]
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf329.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf330.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf332.users = [NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op328_op329_op330_op332.snodes[0] =
op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 501760}, None)]
op328.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 501760}, None),
        MemoryDep('buf309', c0, {c0: 501760}, None),
        MemoryDep('buf327', c0, {c0: 501760}, None)]
op328.met_dependencies = 
    [   MemoryDep('arg216_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg228_1', c1, {c0: 1568, c1: 320}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
    ]
]
op328.group.device = cuda:0
op328.group.iteration = (501760, 1)
op328.sizes = ([1568, 320], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op328_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf309', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg216_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf327', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg228_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf328', get_index_5, add_3, None)
        return store
op328_op329_op330_op332.snodes[1] =
op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 1568}, None)]
op329.unmet_dependencies = [MemoryDep('buf328', c0, {c0: 501760}, None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf329.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (1568, 320)
op329.sizes = ([1568], [320])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op329_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf329', get_index_1, getitem)
        return store_reduction
op328_op329_op330_op332.snodes[2] =
op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 1568}, None)]
op330.unmet_dependencies = [MemoryDep('buf328', c0, {c0: 501760}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf330.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (1568, 320)
op330.sizes = ([1568], [320])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op330_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf330', get_index_1, getitem_1)
        return store_reduction
op328_op329_op330_op332.snodes[3] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 501760}, None)]
op332.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 501760}, None),
        MemoryDep('buf329', c0, {c0: 1568}, None),
        MemoryDep('buf330', c0, {c0: 1568}, None)]
op332.met_dependencies = 
    [   MemoryDep('arg229_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg230_1', c1, {c0: 1568, c1: 320}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf332.users = [NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (501760, 1)
op332.sizes = ([1568, 320], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op332_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf329', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf330', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg229_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg230_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf332', get_index_5, add_1, None)
        return store


op333: ExternKernelSchedulerNode(ExternKernelOut)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf332', mode=None)]
op333.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op333.outputs = [
    buf333: ExternKernelOut
    buf333.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False)]
]
op333.node.kernel = extern_kernels.mm


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 2007040}, None)]
op334.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 2007040}, None)]
op334.met_dependencies = [MemoryDep('arg232_1', c1, {c0: 1568, c1: 1280}, None)]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf334.users = [NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (2007040, 1)
op334.sizes = ([1568, 1280], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op334_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf333', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg232_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf334', get_index_4, mul_2, None)
        return store


op335: ExternKernelSchedulerNode(ExternKernelOut)
op335.writes = [StarDep(name='buf335', mode=None)]
op335.unmet_dependencies = [StarDep(name='buf334', mode=None)]
op335.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op335.outputs = [
    buf335: ExternKernelOut
    buf335.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf335.users = [
        NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False),
    ]
]
op335.node.kernel = extern_kernels.mm


op336_op337_op339: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op336_op337_op339.writes = 
    [   MemoryDep('buf336', c0, {c0: 1568}, None),
        MemoryDep('buf337', c0, {c0: 1568}, None),
        MemoryDep('buf339', c0, {c0: 501760}, None)]
op336_op337_op339.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 501760}, None),
        MemoryDep('buf335', c0, {c0: 501760}, None)]
op336_op337_op339.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg235_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg236_1', c1, {c0: 1568, c1: 320}, None)]
op336_op337_op339.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf336.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf337.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf339.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
    ]
]
op336_op337_op339.snodes[0] =
op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 1568}, None)]
op336.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 501760}, None),
        MemoryDep('buf335', c0, {c0: 501760}, None)]
op336.met_dependencies = [MemoryDep('arg234_1', c1, {c0: 1568, c1: 320}, None)]
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf336.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (1568, 320)
op336.sizes = ([1568], [320])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op336_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf335', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg234_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf336', get_index_3, getitem)
        return store_reduction
op336_op337_op339.snodes[1] =
op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 1568}, None)]
op337.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 501760}, None),
        MemoryDep('buf335', c0, {c0: 501760}, None)]
op337.met_dependencies = [MemoryDep('arg234_1', c1, {c0: 1568, c1: 320}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf337.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (1568, 320)
op337.sizes = ([1568], [320])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op337_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf335', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg234_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf337', get_index_3, getitem_1)
        return store_reduction
op336_op337_op339.snodes[2] =
op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 501760}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 501760}, None),
        MemoryDep('buf335', c0, {c0: 501760}, None),
        MemoryDep('buf336', c0, {c0: 1568}, None),
        MemoryDep('buf337', c0, {c0: 1568}, None)]
op339.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg235_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg236_1', c1, {c0: 1568, c1: 320}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf339.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (501760, 1)
op339.sizes = ([1568, 320], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op339_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf335', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg234_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf336', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf337', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg235_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg236_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf339', get_index_7, add_3, None)
        return store


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op340.unmet_dependencies = []
op340.met_dependencies = [MemoryDep('arg239_1', c0, {c0: 409600}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf340.users = [NodeUser(node=ExternKernelSchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (409600, 1)
op340.sizes = ([320, 320, 4], [])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op340_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg239_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf340', get_index_1, load, None)
        return store


op341: ExternKernelSchedulerNode(ExternKernelAlloc)
op341.writes = [StarDep(name='buf341', mode=None)]
op341.unmet_dependencies = [StarDep(name='buf339', mode=None), StarDep(name='buf340', mode=None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: ExternKernelAlloc
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf341.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=True, is_weak=False),
    ]
]
op341.node.kernel = extern_kernels.convolution


op342_op343_op345: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op342_op343_op345.writes = 
    [   MemoryDep('buf342', c0, {c0: 392}, None),
        MemoryDep('buf343', c0, {c0: 392}, None),
        MemoryDep('buf345', c0, {c0: 125440}, None)]
op342_op343_op345.unmet_dependencies = [MemoryDep('buf341', c0, {c0: 125440}, None)]
op342_op343_op345.met_dependencies = 
    [   MemoryDep('arg240_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg241_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg242_1', c1, {c0: 392, c1: 320}, None)]
op342_op343_op345.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf342.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf343.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op342_op343_op345.snodes[0] =
op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 392}, None)]
op342.unmet_dependencies = [MemoryDep('buf341', c0, {c0: 125440}, None)]
op342.met_dependencies = [MemoryDep('arg240_1', c1, {c0: 392, c1: 320}, None)]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf342.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (392, 320)
op342.sizes = ([392], [320])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op342_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf342', get_index_2, getitem)
        return store_reduction
op342_op343_op345.snodes[1] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 392}, None)]
op343.unmet_dependencies = [MemoryDep('buf341', c0, {c0: 125440}, None)]
op343.met_dependencies = [MemoryDep('arg240_1', c1, {c0: 392, c1: 320}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf343.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (392, 320)
op343.sizes = ([392], [320])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op343_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf343', get_index_2, getitem_1)
        return store_reduction
op342_op343_op345.snodes[2] =
op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 125440}, None)]
op345.unmet_dependencies = 
    [   MemoryDep('buf341', c0, {c0: 125440}, None),
        MemoryDep('buf342', c0, {c0: 392}, None),
        MemoryDep('buf343', c0, {c0: 392}, None)]
op345.met_dependencies = 
    [   MemoryDep('arg240_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg241_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg242_1', c1, {c0: 392, c1: 320}, None)]
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (125440, 1)
op345.sizes = ([392, 320], [])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op345_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg240_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf342', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf343', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg241_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg242_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf345', get_index_6, add_2, None)
        return store


op346: ExternKernelSchedulerNode(ExternKernelOut)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op346.met_dependencies = [StarDep(name='arg243_1', mode=None), StarDep(name='arg244_1', mode=None)]
op346.outputs = [
    buf346: ExternKernelOut
    buf346.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op346.node.kernel = extern_kernels.addmm


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op347.met_dependencies = [StarDep(name='arg237_1', mode=None), StarDep(name='arg238_1', mode=None)]
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.node.kernel = extern_kernels.addmm


op348: ExternKernelSchedulerNode(FallbackKernel)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf346', mode=None), StarDep(name='buf347', mode=None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: FallbackKernel
    buf348.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf348.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False),
    ]
]
op348.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op349: ExternKernelSchedulerNode(MultiOutput)
op349.writes = [StarDep(name='buf349', mode=None)]
op349.unmet_dependencies = [StarDep(name='buf348', mode=None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: MultiOutput
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf349.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op349.node.kernel = None


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf349', mode=None)]
op353.met_dependencies = [StarDep(name='arg245_1', mode=None)]
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf353.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False)]
]
op353.node.kernel = extern_kernels.mm


op354_op355_op356_op358: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op354_op355_op356_op358.writes = 
    [   MemoryDep('buf354', c0, {c0: 501760}, None),
        MemoryDep('buf355', c0, {c0: 1568}, None),
        MemoryDep('buf356', c0, {c0: 1568}, None),
        MemoryDep('buf358', c0, {c0: 501760}, None)]
op354_op355_op356_op358.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 501760}, None),
        MemoryDep('buf335', c0, {c0: 501760}, None),
        MemoryDep('buf353', c0, {c0: 501760}, None)]
op354_op355_op356_op358.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg246_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg247_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg248_1', c1, {c0: 1568, c1: 320}, None)]
op354_op355_op356_op358.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
    ]
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf355.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf356.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op354_op355_op356_op358.snodes[0] =
op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 501760}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf328', c0, {c0: 501760}, None),
        MemoryDep('buf335', c0, {c0: 501760}, None),
        MemoryDep('buf353', c0, {c0: 501760}, None)]
op354.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg246_1', c1, {c0: 1568, c1: 320}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf354.users = [
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
    ]
]
op354.group.device = cuda:0
op354.group.iteration = (501760, 1)
op354.sizes = ([1568, 320], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op354_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf335', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg234_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf353', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg246_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf354', get_index_5, add_3, None)
        return store
op354_op355_op356_op358.snodes[1] =
op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', c0, {c0: 1568}, None)]
op355.unmet_dependencies = [MemoryDep('buf354', c0, {c0: 501760}, None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf355.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (1568, 320)
op355.sizes = ([1568], [320])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op355_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf355', get_index_1, getitem)
        return store_reduction
op354_op355_op356_op358.snodes[2] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 1568}, None)]
op356.unmet_dependencies = [MemoryDep('buf354', c0, {c0: 501760}, None)]
op356.met_dependencies = []
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf356.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (1568, 320)
op356.sizes = ([1568], [320])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op356_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf356', get_index_1, getitem_1)
        return store_reduction
op354_op355_op356_op358.snodes[3] =
op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 501760}, None)]
op358.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 501760}, None),
        MemoryDep('buf355', c0, {c0: 1568}, None),
        MemoryDep('buf356', c0, {c0: 1568}, None)]
op358.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg248_1', c1, {c0: 1568, c1: 320}, None)]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (501760, 1)
op358.sizes = ([1568, 320], [])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op358_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf355', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf356', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg247_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg248_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf358', get_index_5, add_1, None)
        return store


op359: ExternKernelSchedulerNode(ExternKernelOut)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf358', mode=None)]
op359.met_dependencies = [StarDep(name='arg249_1', mode=None)]
op359.outputs = [
    buf359: ExternKernelOut
    buf359.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf359.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False)]
]
op359.node.kernel = extern_kernels.mm


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 2007040}, None)]
op360.unmet_dependencies = [MemoryDep('buf359', c0, {c0: 2007040}, None)]
op360.met_dependencies = [MemoryDep('arg250_1', c1, {c0: 1568, c1: 1280}, None)]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (2007040, 1)
op360.sizes = ([1568, 1280], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op360_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg250_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf359', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg250_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf360', get_index_4, mul_2, None)
        return store


op361: ExternKernelSchedulerNode(ExternKernelOut)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf360', mode=None)]
op361.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op361.outputs = [
    buf361: ExternKernelOut
    buf361.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf361.users = [
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
    ]
]
op361.node.kernel = extern_kernels.mm


op362_op363_op365: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op362_op363_op365.writes = 
    [   MemoryDep('buf362', c0, {c0: 1568}, None),
        MemoryDep('buf363', c0, {c0: 1568}, None),
        MemoryDep('buf365', c0, {c0: 501760}, None)]
op362_op363_op365.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 501760}, None),
        MemoryDep('buf361', c0, {c0: 501760}, None)]
op362_op363_op365.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg253_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg254_1', c1, {c0: 1568, c1: 320}, None)]
op362_op363_op365.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf362.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf363.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf365.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False),
    ]
]
op362_op363_op365.snodes[0] =
op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 1568}, None)]
op362.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 501760}, None),
        MemoryDep('buf361', c0, {c0: 501760}, None)]
op362.met_dependencies = [MemoryDep('arg252_1', c1, {c0: 1568, c1: 320}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf362.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (1568, 320)
op362.sizes = ([1568], [320])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op362_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf361', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg252_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf362', get_index_3, getitem)
        return store_reduction
op362_op363_op365.snodes[1] =
op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 1568}, None)]
op363.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 501760}, None),
        MemoryDep('buf361', c0, {c0: 501760}, None)]
op363.met_dependencies = [MemoryDep('arg252_1', c1, {c0: 1568, c1: 320}, None)]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf363.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op363.group.device = cuda:0
op363.group.iteration = (1568, 320)
op363.sizes = ([1568], [320])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op363_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf361', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg252_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf363', get_index_3, getitem_1)
        return store_reduction
op362_op363_op365.snodes[2] =
op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 501760}, None)]
op365.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 501760}, None),
        MemoryDep('buf361', c0, {c0: 501760}, None),
        MemoryDep('buf362', c0, {c0: 1568}, None),
        MemoryDep('buf363', c0, {c0: 1568}, None)]
op365.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg253_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg254_1', c1, {c0: 1568, c1: 320}, None)]
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf365.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False),
    ]
]
op365.group.device = cuda:0
op365.group.iteration = (501760, 1)
op365.sizes = ([1568, 320], [])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op365_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf361', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg252_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf362', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf363', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg253_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg254_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf365', get_index_7, add_3, None)
        return store


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op366.unmet_dependencies = []
op366.met_dependencies = [MemoryDep('arg257_1', c0, {c0: 409600}, None)]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (409600, 1)
op366.sizes = ([320, 320, 4], [])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op366_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg257_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf366', get_index_1, load, None)
        return store


op367: ExternKernelSchedulerNode(ExternKernelAlloc)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf365', mode=None), StarDep(name='buf366', mode=None)]
op367.met_dependencies = []
op367.outputs = [
    buf367: ExternKernelAlloc
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf367.users = [
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=True, is_weak=False),
    ]
]
op367.node.kernel = extern_kernels.convolution


op368_op369_op371: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op368_op369_op371.writes = 
    [   MemoryDep('buf368', c0, {c0: 392}, None),
        MemoryDep('buf369', c0, {c0: 392}, None),
        MemoryDep('buf371', c0, {c0: 125440}, None)]
op368_op369_op371.unmet_dependencies = [MemoryDep('buf367', c0, {c0: 125440}, None)]
op368_op369_op371.met_dependencies = 
    [   MemoryDep('arg258_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg259_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg260_1', c1, {c0: 392, c1: 320}, None)]
op368_op369_op371.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf368.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf369.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf371.users = [NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op368_op369_op371.snodes[0] =
op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 392}, None)]
op368.unmet_dependencies = [MemoryDep('buf367', c0, {c0: 125440}, None)]
op368.met_dependencies = [MemoryDep('arg258_1', c1, {c0: 392, c1: 320}, None)]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf368.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (392, 320)
op368.sizes = ([392], [320])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op368_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg258_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf368', get_index_2, getitem)
        return store_reduction
op368_op369_op371.snodes[1] =
op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 392}, None)]
op369.unmet_dependencies = [MemoryDep('buf367', c0, {c0: 125440}, None)]
op369.met_dependencies = [MemoryDep('arg258_1', c1, {c0: 392, c1: 320}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf369.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (392, 320)
op369.sizes = ([392], [320])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op369_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg258_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf369', get_index_2, getitem_1)
        return store_reduction
op368_op369_op371.snodes[2] =
op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 125440}, None)]
op371.unmet_dependencies = 
    [   MemoryDep('buf367', c0, {c0: 125440}, None),
        MemoryDep('buf368', c0, {c0: 392}, None),
        MemoryDep('buf369', c0, {c0: 392}, None)]
op371.met_dependencies = 
    [   MemoryDep('arg258_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg259_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg260_1', c1, {c0: 392, c1: 320}, None)]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf371.users = [NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (125440, 1)
op371.sizes = ([392, 320], [])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op371_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg258_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf368', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf369', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg259_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg260_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf371', get_index_6, add_2, None)
        return store


op372: ExternKernelSchedulerNode(ExternKernelOut)
op372.writes = [StarDep(name='buf372', mode=None)]
op372.unmet_dependencies = [StarDep(name='buf371', mode=None)]
op372.met_dependencies = [StarDep(name='arg261_1', mode=None), StarDep(name='arg262_1', mode=None)]
op372.outputs = [
    buf372: ExternKernelOut
    buf372.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op372.node.kernel = extern_kernels.addmm


op373: ExternKernelSchedulerNode(ExternKernelOut)
op373.writes = [StarDep(name='buf373', mode=None)]
op373.unmet_dependencies = [StarDep(name='buf365', mode=None)]
op373.met_dependencies = [StarDep(name='arg255_1', mode=None), StarDep(name='arg256_1', mode=None)]
op373.outputs = [
    buf373: ExternKernelOut
    buf373.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op373.node.kernel = extern_kernels.addmm


op374: ExternKernelSchedulerNode(FallbackKernel)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf372', mode=None), StarDep(name='buf373', mode=None)]
op374.met_dependencies = []
op374.outputs = [
    buf374: FallbackKernel
    buf374.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf374.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op374.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op375: ExternKernelSchedulerNode(MultiOutput)
op375.writes = [StarDep(name='buf375', mode=None)]
op375.unmet_dependencies = [StarDep(name='buf374', mode=None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: MultiOutput
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op375.node.kernel = None


op379: ExternKernelSchedulerNode(ExternKernelOut)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf375', mode=None)]
op379.met_dependencies = [StarDep(name='arg263_1', mode=None)]
op379.outputs = [
    buf379: ExternKernelOut
    buf379.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf379.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False)]
]
op379.node.kernel = extern_kernels.mm


op380_op381_op382_op384: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op380_op381_op382_op384.writes = 
    [   MemoryDep('buf380', c0, {c0: 501760}, None),
        MemoryDep('buf381', c0, {c0: 1568}, None),
        MemoryDep('buf382', c0, {c0: 1568}, None),
        MemoryDep('buf384', c0, {c0: 501760}, None)]
op380_op381_op382_op384.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 501760}, None),
        MemoryDep('buf361', c0, {c0: 501760}, None),
        MemoryDep('buf379', c0, {c0: 501760}, None)]
op380_op381_op382_op384.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg264_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg265_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg266_1', c1, {c0: 1568, c1: 320}, None)]
op380_op381_op382_op384.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf380.users = [
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
    ]
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf381.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf382.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf384.users = [NodeUser(node=ExternKernelSchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op380_op381_op382_op384.snodes[0] =
op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 501760}, None)]
op380.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 501760}, None),
        MemoryDep('buf361', c0, {c0: 501760}, None),
        MemoryDep('buf379', c0, {c0: 501760}, None)]
op380.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg264_1', c1, {c0: 1568, c1: 320}, None)]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf380.users = [
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
    ]
]
op380.group.device = cuda:0
op380.group.iteration = (501760, 1)
op380.sizes = ([1568, 320], [])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op380_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf361', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg252_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf379', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg264_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf380', get_index_5, add_3, None)
        return store
op380_op381_op382_op384.snodes[1] =
op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 1568}, None)]
op381.unmet_dependencies = [MemoryDep('buf380', c0, {c0: 501760}, None)]
op381.met_dependencies = []
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf381.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op381.group.device = cuda:0
op381.group.iteration = (1568, 320)
op381.sizes = ([1568], [320])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op381_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf381', get_index_1, getitem)
        return store_reduction
op380_op381_op382_op384.snodes[2] =
op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 1568}, None)]
op382.unmet_dependencies = [MemoryDep('buf380', c0, {c0: 501760}, None)]
op382.met_dependencies = []
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf382.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (1568, 320)
op382.sizes = ([1568], [320])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op382_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf382', get_index_1, getitem_1)
        return store_reduction
op380_op381_op382_op384.snodes[3] =
op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 501760}, None)]
op384.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 501760}, None),
        MemoryDep('buf381', c0, {c0: 1568}, None),
        MemoryDep('buf382', c0, {c0: 1568}, None)]
op384.met_dependencies = 
    [   MemoryDep('arg265_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg266_1', c1, {c0: 1568, c1: 320}, None)]
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf384.users = [NodeUser(node=ExternKernelSchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op384.group.device = cuda:0
op384.group.iteration = (501760, 1)
op384.sizes = ([1568, 320], [])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op384_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf381', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf382', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg265_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg266_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf384', get_index_5, add_1, None)
        return store


op385: ExternKernelSchedulerNode(ExternKernelOut)
op385.writes = [StarDep(name='buf385', mode=None)]
op385.unmet_dependencies = [StarDep(name='buf384', mode=None)]
op385.met_dependencies = [StarDep(name='arg267_1', mode=None)]
op385.outputs = [
    buf385: ExternKernelOut
    buf385.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf385.users = [NodeUser(node=SchedulerNode(name='op386'), can_inplace=True, is_weak=False)]
]
op385.node.kernel = extern_kernels.mm


op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 2007040}, None)]
op386.unmet_dependencies = [MemoryDep('buf385', c0, {c0: 2007040}, None)]
op386.met_dependencies = [MemoryDep('arg268_1', c1, {c0: 1568, c1: 1280}, None)]
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf386.users = [NodeUser(node=ExternKernelSchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op386.group.device = cuda:0
op386.group.iteration = (2007040, 1)
op386.sizes = ([1568, 1280], [])
buf385_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op386_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg268_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf385', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg268_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf386', get_index_4, mul_2, None)
        return store


op387: ExternKernelSchedulerNode(ExternKernelOut)
op387.writes = [StarDep(name='buf387', mode=None)]
op387.unmet_dependencies = [StarDep(name='buf386', mode=None)]
op387.met_dependencies = [StarDep(name='arg269_1', mode=None)]
op387.outputs = [
    buf387: ExternKernelOut
    buf387.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf387.users = [
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False),
    ]
]
op387.node.kernel = extern_kernels.mm


op388_op389_op391: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op388_op389_op391.writes = 
    [   MemoryDep('buf388', c0, {c0: 1568}, None),
        MemoryDep('buf389', c0, {c0: 1568}, None),
        MemoryDep('buf391', c0, {c0: 501760}, None)]
op388_op389_op391.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 501760}, None),
        MemoryDep('buf387', c0, {c0: 501760}, None)]
op388_op389_op391.met_dependencies = 
    [   MemoryDep('arg270_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg271_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg272_1', c1, {c0: 1568, c1: 320}, None)]
op388_op389_op391.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf388.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf389.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf391.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False),
    ]
]
op388_op389_op391.snodes[0] =
op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 1568}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 501760}, None),
        MemoryDep('buf387', c0, {c0: 501760}, None)]
op388.met_dependencies = [MemoryDep('arg270_1', c1, {c0: 1568, c1: 320}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf388.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (1568, 320)
op388.sizes = ([1568], [320])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op388_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf387', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg270_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf388', get_index_3, getitem)
        return store_reduction
op388_op389_op391.snodes[1] =
op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 1568}, None)]
op389.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 501760}, None),
        MemoryDep('buf387', c0, {c0: 501760}, None)]
op389.met_dependencies = [MemoryDep('arg270_1', c1, {c0: 1568, c1: 320}, None)]
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf389.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (1568, 320)
op389.sizes = ([1568], [320])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op389_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf387', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg270_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf389', get_index_3, getitem_1)
        return store_reduction
op388_op389_op391.snodes[2] =
op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 501760}, None)]
op391.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 501760}, None),
        MemoryDep('buf387', c0, {c0: 501760}, None),
        MemoryDep('buf388', c0, {c0: 1568}, None),
        MemoryDep('buf389', c0, {c0: 1568}, None)]
op391.met_dependencies = 
    [   MemoryDep('arg270_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg271_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg272_1', c1, {c0: 1568, c1: 320}, None)]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf391.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False),
    ]
]
op391.group.device = cuda:0
op391.group.iteration = (501760, 1)
op391.sizes = ([1568, 320], [])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op391_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf387', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg270_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf388', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf389', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg271_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg272_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf391', get_index_7, add_3, None)
        return store


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op392.unmet_dependencies = []
op392.met_dependencies = [MemoryDep('arg275_1', c0, {c0: 409600}, None)]
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf392.users = [NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (409600, 1)
op392.sizes = ([320, 320, 4], [])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op392_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg275_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf392', get_index_1, load, None)
        return store


op393: ExternKernelSchedulerNode(ExternKernelAlloc)
op393.writes = [StarDep(name='buf393', mode=None)]
op393.unmet_dependencies = [StarDep(name='buf391', mode=None), StarDep(name='buf392', mode=None)]
op393.met_dependencies = []
op393.outputs = [
    buf393: ExternKernelAlloc
    buf393.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf393.users = [
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=True, is_weak=False),
    ]
]
op393.node.kernel = extern_kernels.convolution


op394_op395_op397: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op394_op395_op397.writes = 
    [   MemoryDep('buf394', c0, {c0: 392}, None),
        MemoryDep('buf395', c0, {c0: 392}, None),
        MemoryDep('buf397', c0, {c0: 125440}, None)]
op394_op395_op397.unmet_dependencies = [MemoryDep('buf393', c0, {c0: 125440}, None)]
op394_op395_op397.met_dependencies = 
    [   MemoryDep('arg276_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg277_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg278_1', c1, {c0: 392, c1: 320}, None)]
op394_op395_op397.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf394.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf395.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op394_op395_op397.snodes[0] =
op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 392}, None)]
op394.unmet_dependencies = [MemoryDep('buf393', c0, {c0: 125440}, None)]
op394.met_dependencies = [MemoryDep('arg276_1', c1, {c0: 392, c1: 320}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf394.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (392, 320)
op394.sizes = ([392], [320])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op394_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg276_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf394', get_index_2, getitem)
        return store_reduction
op394_op395_op397.snodes[1] =
op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 392}, None)]
op395.unmet_dependencies = [MemoryDep('buf393', c0, {c0: 125440}, None)]
op395.met_dependencies = [MemoryDep('arg276_1', c1, {c0: 392, c1: 320}, None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf395.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op395.group.device = cuda:0
op395.group.iteration = (392, 320)
op395.sizes = ([392], [320])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op395_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg276_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf395', get_index_2, getitem_1)
        return store_reduction
op394_op395_op397.snodes[2] =
op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 125440}, None)]
op397.unmet_dependencies = 
    [   MemoryDep('buf393', c0, {c0: 125440}, None),
        MemoryDep('buf394', c0, {c0: 392}, None),
        MemoryDep('buf395', c0, {c0: 392}, None)]
op397.met_dependencies = 
    [   MemoryDep('arg276_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg277_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg278_1', c1, {c0: 392, c1: 320}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (125440, 1)
op397.sizes = ([392, 320], [])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf395_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op397_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg276_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf394', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf395', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg277_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg278_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf397', get_index_6, add_2, None)
        return store


op398: ExternKernelSchedulerNode(ExternKernelOut)
op398.writes = [StarDep(name='buf398', mode=None)]
op398.unmet_dependencies = [StarDep(name='buf397', mode=None)]
op398.met_dependencies = [StarDep(name='arg279_1', mode=None), StarDep(name='arg280_1', mode=None)]
op398.outputs = [
    buf398: ExternKernelOut
    buf398.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op398.node.kernel = extern_kernels.addmm


op399: ExternKernelSchedulerNode(ExternKernelOut)
op399.writes = [StarDep(name='buf399', mode=None)]
op399.unmet_dependencies = [StarDep(name='buf391', mode=None)]
op399.met_dependencies = [StarDep(name='arg273_1', mode=None), StarDep(name='arg274_1', mode=None)]
op399.outputs = [
    buf399: ExternKernelOut
    buf399.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op399.node.kernel = extern_kernels.addmm


op400: ExternKernelSchedulerNode(FallbackKernel)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf398', mode=None), StarDep(name='buf399', mode=None)]
op400.met_dependencies = []
op400.outputs = [
    buf400: FallbackKernel
    buf400.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf400.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False),
    ]
]
op400.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op401: ExternKernelSchedulerNode(MultiOutput)
op401.writes = [StarDep(name='buf401', mode=None)]
op401.unmet_dependencies = [StarDep(name='buf400', mode=None)]
op401.met_dependencies = []
op401.outputs = [
    buf401: MultiOutput
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf401.users = [NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op401.node.kernel = None


op405: ExternKernelSchedulerNode(ExternKernelOut)
op405.writes = [StarDep(name='buf405', mode=None)]
op405.unmet_dependencies = [StarDep(name='buf401', mode=None)]
op405.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op405.outputs = [
    buf405: ExternKernelOut
    buf405.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf405.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False)]
]
op405.node.kernel = extern_kernels.mm


op406_op407_op408_op410: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op406_op407_op408_op410.writes = 
    [   MemoryDep('buf406', c0, {c0: 501760}, None),
        MemoryDep('buf407', c0, {c0: 1568}, None),
        MemoryDep('buf408', c0, {c0: 1568}, None),
        MemoryDep('buf410', c0, {c0: 501760}, None)]
op406_op407_op408_op410.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 501760}, None),
        MemoryDep('buf387', c0, {c0: 501760}, None),
        MemoryDep('buf405', c0, {c0: 501760}, None)]
op406_op407_op408_op410.met_dependencies = 
    [   MemoryDep('arg270_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg282_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg283_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg284_1', c1, {c0: 1568, c1: 320}, None)]
op406_op407_op408_op410.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
    ]
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf407.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf408.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf410.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op406_op407_op408_op410.snodes[0] =
op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 501760}, None)]
op406.unmet_dependencies = 
    [   MemoryDep('buf380', c0, {c0: 501760}, None),
        MemoryDep('buf387', c0, {c0: 501760}, None),
        MemoryDep('buf405', c0, {c0: 501760}, None)]
op406.met_dependencies = 
    [   MemoryDep('arg270_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg282_1', c1, {c0: 1568, c1: 320}, None)]
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf406.users = [
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
    ]
]
op406.group.device = cuda:0
op406.group.iteration = (501760, 1)
op406.sizes = ([1568, 320], [])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op406_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf387', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg270_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf405', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg282_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf406', get_index_5, add_3, None)
        return store
op406_op407_op408_op410.snodes[1] =
op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 1568}, None)]
op407.unmet_dependencies = [MemoryDep('buf406', c0, {c0: 501760}, None)]
op407.met_dependencies = []
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf407.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (1568, 320)
op407.sizes = ([1568], [320])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op407_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf407', get_index_1, getitem)
        return store_reduction
op406_op407_op408_op410.snodes[2] =
op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 1568}, None)]
op408.unmet_dependencies = [MemoryDep('buf406', c0, {c0: 501760}, None)]
op408.met_dependencies = []
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf408.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op408.group.device = cuda:0
op408.group.iteration = (1568, 320)
op408.sizes = ([1568], [320])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op408_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf408', get_index_1, getitem_1)
        return store_reduction
op406_op407_op408_op410.snodes[3] =
op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 501760}, None)]
op410.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 501760}, None),
        MemoryDep('buf407', c0, {c0: 1568}, None),
        MemoryDep('buf408', c0, {c0: 1568}, None)]
op410.met_dependencies = 
    [   MemoryDep('arg283_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg284_1', c1, {c0: 1568, c1: 320}, None)]
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf410.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (501760, 1)
op410.sizes = ([1568, 320], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op410_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf407', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf408', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg283_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg284_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf410', get_index_5, add_1, None)
        return store


op411: ExternKernelSchedulerNode(ExternKernelOut)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = [StarDep(name='buf410', mode=None)]
op411.met_dependencies = [StarDep(name='arg285_1', mode=None)]
op411.outputs = [
    buf411: ExternKernelOut
    buf411.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf411.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=True, is_weak=False)]
]
op411.node.kernel = extern_kernels.mm


op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 2007040}, None)]
op412.unmet_dependencies = [MemoryDep('buf411', c0, {c0: 2007040}, None)]
op412.met_dependencies = [MemoryDep('arg286_1', c1, {c0: 1568, c1: 1280}, None)]
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf412.users = [NodeUser(node=ExternKernelSchedulerNode(name='op413'), can_inplace=False, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (2007040, 1)
op412.sizes = ([1568, 1280], [])
buf411_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op412_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf411', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg286_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf412', get_index_4, mul_2, None)
        return store


op413: ExternKernelSchedulerNode(ExternKernelOut)
op413.writes = [StarDep(name='buf413', mode=None)]
op413.unmet_dependencies = [StarDep(name='buf412', mode=None)]
op413.met_dependencies = [StarDep(name='arg287_1', mode=None)]
op413.outputs = [
    buf413: ExternKernelOut
    buf413.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf413.users = [
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False),
    ]
]
op413.node.kernel = extern_kernels.mm


op414_op415_op417: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op414_op415_op417.writes = 
    [   MemoryDep('buf414', c0, {c0: 1568}, None),
        MemoryDep('buf415', c0, {c0: 1568}, None),
        MemoryDep('buf417', c0, {c0: 501760}, None)]
op414_op415_op417.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 501760}, None),
        MemoryDep('buf413', c0, {c0: 501760}, None)]
op414_op415_op417.met_dependencies = 
    [   MemoryDep('arg288_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg289_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg290_1', c1, {c0: 1568, c1: 320}, None)]
op414_op415_op417.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf414.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf415.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf417.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False),
    ]
]
op414_op415_op417.snodes[0] =
op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 1568}, None)]
op414.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 501760}, None),
        MemoryDep('buf413', c0, {c0: 501760}, None)]
op414.met_dependencies = [MemoryDep('arg288_1', c1, {c0: 1568, c1: 320}, None)]
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf414.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (1568, 320)
op414.sizes = ([1568], [320])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op414_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf413', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg288_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf414', get_index_3, getitem)
        return store_reduction
op414_op415_op417.snodes[1] =
op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 1568}, None)]
op415.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 501760}, None),
        MemoryDep('buf413', c0, {c0: 501760}, None)]
op415.met_dependencies = [MemoryDep('arg288_1', c1, {c0: 1568, c1: 320}, None)]
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf415.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (1568, 320)
op415.sizes = ([1568], [320])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op415_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf413', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg288_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf415', get_index_3, getitem_1)
        return store_reduction
op414_op415_op417.snodes[2] =
op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 501760}, None)]
op417.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 501760}, None),
        MemoryDep('buf413', c0, {c0: 501760}, None),
        MemoryDep('buf414', c0, {c0: 1568}, None),
        MemoryDep('buf415', c0, {c0: 1568}, None)]
op417.met_dependencies = 
    [   MemoryDep('arg288_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg289_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg290_1', c1, {c0: 1568, c1: 320}, None)]
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf417.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False),
    ]
]
op417.group.device = cuda:0
op417.group.iteration = (501760, 1)
op417.sizes = ([1568, 320], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op417_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf413', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg288_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf414', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf415', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg289_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg290_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf417', get_index_7, add_3, None)
        return store


op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op418.unmet_dependencies = []
op418.met_dependencies = [MemoryDep('arg293_1', c0, {c0: 409600}, None)]
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf418.users = [NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (409600, 1)
op418.sizes = ([320, 320, 4], [])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op418_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg293_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf418', get_index_1, load, None)
        return store


op419: ExternKernelSchedulerNode(ExternKernelAlloc)
op419.writes = [StarDep(name='buf419', mode=None)]
op419.unmet_dependencies = [StarDep(name='buf417', mode=None), StarDep(name='buf418', mode=None)]
op419.met_dependencies = []
op419.outputs = [
    buf419: ExternKernelAlloc
    buf419.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf419.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=True, is_weak=False),
    ]
]
op419.node.kernel = extern_kernels.convolution


op420_op421_op423: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op420_op421_op423.writes = 
    [   MemoryDep('buf420', c0, {c0: 392}, None),
        MemoryDep('buf421', c0, {c0: 392}, None),
        MemoryDep('buf423', c0, {c0: 125440}, None)]
op420_op421_op423.unmet_dependencies = [MemoryDep('buf419', c0, {c0: 125440}, None)]
op420_op421_op423.met_dependencies = 
    [   MemoryDep('arg294_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg295_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg296_1', c1, {c0: 392, c1: 320}, None)]
op420_op421_op423.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf420.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf421.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op420_op421_op423.snodes[0] =
op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 392}, None)]
op420.unmet_dependencies = [MemoryDep('buf419', c0, {c0: 125440}, None)]
op420.met_dependencies = [MemoryDep('arg294_1', c1, {c0: 392, c1: 320}, None)]
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf420.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (392, 320)
op420.sizes = ([392], [320])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op420_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg294_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf420', get_index_2, getitem)
        return store_reduction
op420_op421_op423.snodes[1] =
op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 392}, None)]
op421.unmet_dependencies = [MemoryDep('buf419', c0, {c0: 125440}, None)]
op421.met_dependencies = [MemoryDep('arg294_1', c1, {c0: 392, c1: 320}, None)]
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf421.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op421.group.device = cuda:0
op421.group.iteration = (392, 320)
op421.sizes = ([392], [320])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op421_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg294_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf421', get_index_2, getitem_1)
        return store_reduction
op420_op421_op423.snodes[2] =
op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', c0, {c0: 125440}, None)]
op423.unmet_dependencies = 
    [   MemoryDep('buf419', c0, {c0: 125440}, None),
        MemoryDep('buf420', c0, {c0: 392}, None),
        MemoryDep('buf421', c0, {c0: 392}, None)]
op423.met_dependencies = 
    [   MemoryDep('arg294_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg295_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg296_1', c1, {c0: 392, c1: 320}, None)]
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (125440, 1)
op423.sizes = ([392, 320], [])
buf419_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op423_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg294_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf420', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf421', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg295_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg296_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf423', get_index_6, add_2, None)
        return store


op424: ExternKernelSchedulerNode(ExternKernelOut)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf423', mode=None)]
op424.met_dependencies = [StarDep(name='arg297_1', mode=None), StarDep(name='arg298_1', mode=None)]
op424.outputs = [
    buf424: ExternKernelOut
    buf424.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf424.users = [NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op424.node.kernel = extern_kernels.addmm


op425: ExternKernelSchedulerNode(ExternKernelOut)
op425.writes = [StarDep(name='buf425', mode=None)]
op425.unmet_dependencies = [StarDep(name='buf417', mode=None)]
op425.met_dependencies = [StarDep(name='arg291_1', mode=None), StarDep(name='arg292_1', mode=None)]
op425.outputs = [
    buf425: ExternKernelOut
    buf425.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf425.users = [NodeUser(node=ExternKernelSchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op425.node.kernel = extern_kernels.addmm


op426: ExternKernelSchedulerNode(FallbackKernel)
op426.writes = [StarDep(name='buf426', mode=None)]
op426.unmet_dependencies = [StarDep(name='buf424', mode=None), StarDep(name='buf425', mode=None)]
op426.met_dependencies = []
op426.outputs = [
    buf426: FallbackKernel
    buf426.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf426.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op430'), can_inplace=False, is_weak=False),
    ]
]
op426.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op427: ExternKernelSchedulerNode(MultiOutput)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf426', mode=None)]
op427.met_dependencies = []
op427.outputs = [
    buf427: MultiOutput
    buf427.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf427.users = [NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op427.node.kernel = None


op431: ExternKernelSchedulerNode(ExternKernelOut)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = [StarDep(name='buf427', mode=None)]
op431.met_dependencies = [StarDep(name='arg299_1', mode=None)]
op431.outputs = [
    buf431: ExternKernelOut
    buf431.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf431.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False)]
]
op431.node.kernel = extern_kernels.mm


op432_op433_op434_op436: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op432_op433_op434_op436.writes = 
    [   MemoryDep('buf432', c0, {c0: 501760}, None),
        MemoryDep('buf433', c0, {c0: 1568}, None),
        MemoryDep('buf434', c0, {c0: 1568}, None),
        MemoryDep('buf436', c0, {c0: 501760}, None)]
op432_op433_op434_op436.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 501760}, None),
        MemoryDep('buf413', c0, {c0: 501760}, None),
        MemoryDep('buf431', c0, {c0: 501760}, None)]
op432_op433_op434_op436.met_dependencies = 
    [   MemoryDep('arg288_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg300_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg301_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg302_1', c1, {c0: 1568, c1: 320}, None)]
op432_op433_op434_op436.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf432.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=True, is_weak=False),
    ]
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf433.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf434.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf436.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op432_op433_op434_op436.snodes[0] =
op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 501760}, None)]
op432.unmet_dependencies = 
    [   MemoryDep('buf406', c0, {c0: 501760}, None),
        MemoryDep('buf413', c0, {c0: 501760}, None),
        MemoryDep('buf431', c0, {c0: 501760}, None)]
op432.met_dependencies = 
    [   MemoryDep('arg288_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg300_1', c1, {c0: 1568, c1: 320}, None)]
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf432.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=True, is_weak=False),
    ]
]
op432.group.device = cuda:0
op432.group.iteration = (501760, 1)
op432.sizes = ([1568, 320], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op432_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf413', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg288_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf431', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg300_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf432', get_index_5, add_3, None)
        return store
op432_op433_op434_op436.snodes[1] =
op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 1568}, None)]
op433.unmet_dependencies = [MemoryDep('buf432', c0, {c0: 501760}, None)]
op433.met_dependencies = []
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf433.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (1568, 320)
op433.sizes = ([1568], [320])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op433_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf433', get_index_1, getitem)
        return store_reduction
op432_op433_op434_op436.snodes[2] =
op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 1568}, None)]
op434.unmet_dependencies = [MemoryDep('buf432', c0, {c0: 501760}, None)]
op434.met_dependencies = []
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf434.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (1568, 320)
op434.sizes = ([1568], [320])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op434_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf434', get_index_1, getitem_1)
        return store_reduction
op432_op433_op434_op436.snodes[3] =
op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 501760}, None)]
op436.unmet_dependencies = 
    [   MemoryDep('buf432', c0, {c0: 501760}, None),
        MemoryDep('buf433', c0, {c0: 1568}, None),
        MemoryDep('buf434', c0, {c0: 1568}, None)]
op436.met_dependencies = 
    [   MemoryDep('arg301_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg302_1', c1, {c0: 1568, c1: 320}, None)]
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf436.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op436.group.device = cuda:0
op436.group.iteration = (501760, 1)
op436.sizes = ([1568, 320], [])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op436_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf433', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf434', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg301_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg302_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf436', get_index_5, add_1, None)
        return store


op437: ExternKernelSchedulerNode(ExternKernelOut)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = [StarDep(name='buf436', mode=None)]
op437.met_dependencies = [StarDep(name='arg303_1', mode=None)]
op437.outputs = [
    buf437: ExternKernelOut
    buf437.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False)]
]
op437.node.kernel = extern_kernels.mm


op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 2007040}, None)]
op438.unmet_dependencies = [MemoryDep('buf437', c0, {c0: 2007040}, None)]
op438.met_dependencies = [MemoryDep('arg304_1', c1, {c0: 1568, c1: 1280}, None)]
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (2007040, 1)
op438.sizes = ([1568, 1280], [])
buf437_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op438_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg304_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf437', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg304_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf438', get_index_4, mul_2, None)
        return store


op439: ExternKernelSchedulerNode(ExternKernelOut)
op439.writes = [StarDep(name='buf439', mode=None)]
op439.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op439.met_dependencies = [StarDep(name='arg305_1', mode=None)]
op439.outputs = [
    buf439: ExternKernelOut
    buf439.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf439.users = [
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=True, is_weak=False),
    ]
]
op439.node.kernel = extern_kernels.mm


op440_op441_op443: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op440_op441_op443.writes = 
    [   MemoryDep('buf440', c0, {c0: 1568}, None),
        MemoryDep('buf441', c0, {c0: 1568}, None),
        MemoryDep('buf443', c0, {c0: 501760}, None)]
op440_op441_op443.unmet_dependencies = 
    [   MemoryDep('buf432', c0, {c0: 501760}, None),
        MemoryDep('buf439', c0, {c0: 501760}, None)]
op440_op441_op443.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg307_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg308_1', c1, {c0: 1568, c1: 320}, None)]
op440_op441_op443.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf440.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf441.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf443.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False),
    ]
]
op440_op441_op443.snodes[0] =
op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 1568}, None)]
op440.unmet_dependencies = 
    [   MemoryDep('buf432', c0, {c0: 501760}, None),
        MemoryDep('buf439', c0, {c0: 501760}, None)]
op440.met_dependencies = [MemoryDep('arg306_1', c1, {c0: 1568, c1: 320}, None)]
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf440.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op440.group.device = cuda:0
op440.group.iteration = (1568, 320)
op440.sizes = ([1568], [320])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op440_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf439', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg306_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf440', get_index_3, getitem)
        return store_reduction
op440_op441_op443.snodes[1] =
op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 1568}, None)]
op441.unmet_dependencies = 
    [   MemoryDep('buf432', c0, {c0: 501760}, None),
        MemoryDep('buf439', c0, {c0: 501760}, None)]
op441.met_dependencies = [MemoryDep('arg306_1', c1, {c0: 1568, c1: 320}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf441.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (1568, 320)
op441.sizes = ([1568], [320])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op441_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf439', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg306_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf441', get_index_3, getitem_1)
        return store_reduction
op440_op441_op443.snodes[2] =
op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 501760}, None)]
op443.unmet_dependencies = 
    [   MemoryDep('buf432', c0, {c0: 501760}, None),
        MemoryDep('buf439', c0, {c0: 501760}, None),
        MemoryDep('buf440', c0, {c0: 1568}, None),
        MemoryDep('buf441', c0, {c0: 1568}, None)]
op443.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg307_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg308_1', c1, {c0: 1568, c1: 320}, None)]
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf443.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False),
    ]
]
op443.group.device = cuda:0
op443.group.iteration = (501760, 1)
op443.sizes = ([1568, 320], [])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op443_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf439', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg306_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf440', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf441', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg307_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg308_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf443', get_index_7, add_3, None)
        return store


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op444.unmet_dependencies = []
op444.met_dependencies = [MemoryDep('arg311_1', c0, {c0: 409600}, None)]
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf444.users = [NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (409600, 1)
op444.sizes = ([320, 320, 4], [])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op444_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg311_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf444', get_index_1, load, None)
        return store


op445: ExternKernelSchedulerNode(ExternKernelAlloc)
op445.writes = [StarDep(name='buf445', mode=None)]
op445.unmet_dependencies = [StarDep(name='buf443', mode=None), StarDep(name='buf444', mode=None)]
op445.met_dependencies = []
op445.outputs = [
    buf445: ExternKernelAlloc
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf445.users = [
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=True, is_weak=False),
    ]
]
op445.node.kernel = extern_kernels.convolution


op446_op447_op449: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op446_op447_op449.writes = 
    [   MemoryDep('buf446', c0, {c0: 392}, None),
        MemoryDep('buf447', c0, {c0: 392}, None),
        MemoryDep('buf449', c0, {c0: 125440}, None)]
op446_op447_op449.unmet_dependencies = [MemoryDep('buf445', c0, {c0: 125440}, None)]
op446_op447_op449.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg313_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg314_1', c1, {c0: 392, c1: 320}, None)]
op446_op447_op449.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf446.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf447.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf449.users = [NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False)]
]
op446_op447_op449.snodes[0] =
op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 392}, None)]
op446.unmet_dependencies = [MemoryDep('buf445', c0, {c0: 125440}, None)]
op446.met_dependencies = [MemoryDep('arg312_1', c1, {c0: 392, c1: 320}, None)]
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf446.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (392, 320)
op446.sizes = ([392], [320])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op446_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf446', get_index_2, getitem)
        return store_reduction
op446_op447_op449.snodes[1] =
op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 392}, None)]
op447.unmet_dependencies = [MemoryDep('buf445', c0, {c0: 125440}, None)]
op447.met_dependencies = [MemoryDep('arg312_1', c1, {c0: 392, c1: 320}, None)]
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf447.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (392, 320)
op447.sizes = ([392], [320])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op447_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf447', get_index_2, getitem_1)
        return store_reduction
op446_op447_op449.snodes[2] =
op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 125440}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf445', c0, {c0: 125440}, None),
        MemoryDep('buf446', c0, {c0: 392}, None),
        MemoryDep('buf447', c0, {c0: 392}, None)]
op449.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg313_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg314_1', c1, {c0: 392, c1: 320}, None)]
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf449.users = [NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False)]
]
op449.group.device = cuda:0
op449.group.iteration = (125440, 1)
op449.sizes = ([392, 320], [])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op449_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf445', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf446', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf447', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg313_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg314_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf449', get_index_6, add_2, None)
        return store


op450: ExternKernelSchedulerNode(ExternKernelOut)
op450.writes = [StarDep(name='buf450', mode=None)]
op450.unmet_dependencies = [StarDep(name='buf449', mode=None)]
op450.met_dependencies = [StarDep(name='arg315_1', mode=None), StarDep(name='arg316_1', mode=None)]
op450.outputs = [
    buf450: ExternKernelOut
    buf450.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op450.node.kernel = extern_kernels.addmm


op451: ExternKernelSchedulerNode(ExternKernelOut)
op451.writes = [StarDep(name='buf451', mode=None)]
op451.unmet_dependencies = [StarDep(name='buf443', mode=None)]
op451.met_dependencies = [StarDep(name='arg309_1', mode=None), StarDep(name='arg310_1', mode=None)]
op451.outputs = [
    buf451: ExternKernelOut
    buf451.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf451.users = [NodeUser(node=ExternKernelSchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op451.node.kernel = extern_kernels.addmm


op452: ExternKernelSchedulerNode(FallbackKernel)
op452.writes = [StarDep(name='buf452', mode=None)]
op452.unmet_dependencies = [StarDep(name='buf450', mode=None), StarDep(name='buf451', mode=None)]
op452.met_dependencies = []
op452.outputs = [
    buf452: FallbackKernel
    buf452.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf452.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False),
    ]
]
op452.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op453: ExternKernelSchedulerNode(MultiOutput)
op453.writes = [StarDep(name='buf453', mode=None)]
op453.unmet_dependencies = [StarDep(name='buf452', mode=None)]
op453.met_dependencies = []
op453.outputs = [
    buf453: MultiOutput
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf453.users = [NodeUser(node=ExternKernelSchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op453.node.kernel = None


op457: ExternKernelSchedulerNode(ExternKernelOut)
op457.writes = [StarDep(name='buf457', mode=None)]
op457.unmet_dependencies = [StarDep(name='buf453', mode=None)]
op457.met_dependencies = [StarDep(name='arg317_1', mode=None)]
op457.outputs = [
    buf457: ExternKernelOut
    buf457.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf457.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=True, is_weak=False)]
]
op457.node.kernel = extern_kernels.mm


op458_op459_op460_op462: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op458_op459_op460_op462.writes = 
    [   MemoryDep('buf458', c0, {c0: 501760}, None),
        MemoryDep('buf459', c0, {c0: 1568}, None),
        MemoryDep('buf460', c0, {c0: 1568}, None),
        MemoryDep('buf462', c0, {c0: 501760}, None)]
op458_op459_op460_op462.unmet_dependencies = 
    [   MemoryDep('buf432', c0, {c0: 501760}, None),
        MemoryDep('buf439', c0, {c0: 501760}, None),
        MemoryDep('buf457', c0, {c0: 501760}, None)]
op458_op459_op460_op462.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg318_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg319_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg320_1', c1, {c0: 1568, c1: 320}, None)]
op458_op459_op460_op462.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf458.users = [
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False),
    ]
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf459.users = [NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf460.users = [NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf462.users = [NodeUser(node=ExternKernelSchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op458_op459_op460_op462.snodes[0] =
op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', c0, {c0: 501760}, None)]
op458.unmet_dependencies = 
    [   MemoryDep('buf432', c0, {c0: 501760}, None),
        MemoryDep('buf439', c0, {c0: 501760}, None),
        MemoryDep('buf457', c0, {c0: 501760}, None)]
op458.met_dependencies = 
    [   MemoryDep('arg306_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg318_1', c1, {c0: 1568, c1: 320}, None)]
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf458.users = [
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False),
    ]
]
op458.group.device = cuda:0
op458.group.iteration = (501760, 1)
op458.sizes = ([1568, 320], [])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op458_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf439', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg306_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf457', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg318_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf458', get_index_5, add_3, None)
        return store
op458_op459_op460_op462.snodes[1] =
op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 1568}, None)]
op459.unmet_dependencies = [MemoryDep('buf458', c0, {c0: 501760}, None)]
op459.met_dependencies = []
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf459.users = [NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
]
op459.group.device = cuda:0
op459.group.iteration = (1568, 320)
op459.sizes = ([1568], [320])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op459_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf459', get_index_1, getitem)
        return store_reduction
op458_op459_op460_op462.snodes[2] =
op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 1568}, None)]
op460.unmet_dependencies = [MemoryDep('buf458', c0, {c0: 501760}, None)]
op460.met_dependencies = []
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf460.users = [NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (1568, 320)
op460.sizes = ([1568], [320])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op460_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf460', get_index_1, getitem_1)
        return store_reduction
op458_op459_op460_op462.snodes[3] =
op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', c0, {c0: 501760}, None)]
op462.unmet_dependencies = 
    [   MemoryDep('buf458', c0, {c0: 501760}, None),
        MemoryDep('buf459', c0, {c0: 1568}, None),
        MemoryDep('buf460', c0, {c0: 1568}, None)]
op462.met_dependencies = 
    [   MemoryDep('arg319_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg320_1', c1, {c0: 1568, c1: 320}, None)]
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf462.users = [NodeUser(node=ExternKernelSchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op462.group.device = cuda:0
op462.group.iteration = (501760, 1)
op462.sizes = ([1568, 320], [])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op462_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf459', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf460', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg319_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg320_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf462', get_index_5, add_1, None)
        return store


op463: ExternKernelSchedulerNode(ExternKernelOut)
op463.writes = [StarDep(name='buf463', mode=None)]
op463.unmet_dependencies = [StarDep(name='buf462', mode=None)]
op463.met_dependencies = [StarDep(name='arg321_1', mode=None)]
op463.outputs = [
    buf463: ExternKernelOut
    buf463.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf463.users = [NodeUser(node=SchedulerNode(name='op464'), can_inplace=True, is_weak=False)]
]
op463.node.kernel = extern_kernels.mm


op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 2007040}, None)]
op464.unmet_dependencies = [MemoryDep('buf463', c0, {c0: 2007040}, None)]
op464.met_dependencies = [MemoryDep('arg322_1', c1, {c0: 1568, c1: 1280}, None)]
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf464.users = [NodeUser(node=ExternKernelSchedulerNode(name='op465'), can_inplace=False, is_weak=False)]
]
op464.group.device = cuda:0
op464.group.iteration = (2007040, 1)
op464.sizes = ([1568, 1280], [])
buf463_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op464_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg322_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf463', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg322_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf464', get_index_4, mul_2, None)
        return store


op465: ExternKernelSchedulerNode(ExternKernelOut)
op465.writes = [StarDep(name='buf465', mode=None)]
op465.unmet_dependencies = [StarDep(name='buf464', mode=None)]
op465.met_dependencies = [StarDep(name='arg323_1', mode=None)]
op465.outputs = [
    buf465: ExternKernelOut
    buf465.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf465.users = [
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False),
    ]
]
op465.node.kernel = extern_kernels.mm


op466_op467_op469: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op466_op467_op469.writes = 
    [   MemoryDep('buf466', c0, {c0: 1568}, None),
        MemoryDep('buf467', c0, {c0: 1568}, None),
        MemoryDep('buf469', c0, {c0: 501760}, None)]
op466_op467_op469.unmet_dependencies = 
    [   MemoryDep('buf458', c0, {c0: 501760}, None),
        MemoryDep('buf465', c0, {c0: 501760}, None)]
op466_op467_op469.met_dependencies = 
    [   MemoryDep('arg324_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg325_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg326_1', c1, {c0: 1568, c1: 320}, None)]
op466_op467_op469.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf466.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False)]
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf467.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False)]
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf469.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op477'), can_inplace=False, is_weak=False),
    ]
]
op466_op467_op469.snodes[0] =
op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 1568}, None)]
op466.unmet_dependencies = 
    [   MemoryDep('buf458', c0, {c0: 501760}, None),
        MemoryDep('buf465', c0, {c0: 501760}, None)]
op466.met_dependencies = [MemoryDep('arg324_1', c1, {c0: 1568, c1: 320}, None)]
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf466.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False)]
]
op466.group.device = cuda:0
op466.group.iteration = (1568, 320)
op466.sizes = ([1568], [320])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op466_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf465', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg324_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf466', get_index_3, getitem)
        return store_reduction
op466_op467_op469.snodes[1] =
op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 1568}, None)]
op467.unmet_dependencies = 
    [   MemoryDep('buf458', c0, {c0: 501760}, None),
        MemoryDep('buf465', c0, {c0: 501760}, None)]
op467.met_dependencies = [MemoryDep('arg324_1', c1, {c0: 1568, c1: 320}, None)]
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf467.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False)]
]
op467.group.device = cuda:0
op467.group.iteration = (1568, 320)
op467.sizes = ([1568], [320])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op467_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf465', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg324_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf467', get_index_3, getitem_1)
        return store_reduction
op466_op467_op469.snodes[2] =
op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 501760}, None)]
op469.unmet_dependencies = 
    [   MemoryDep('buf458', c0, {c0: 501760}, None),
        MemoryDep('buf465', c0, {c0: 501760}, None),
        MemoryDep('buf466', c0, {c0: 1568}, None),
        MemoryDep('buf467', c0, {c0: 1568}, None)]
op469.met_dependencies = 
    [   MemoryDep('arg324_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg325_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg326_1', c1, {c0: 1568, c1: 320}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf469.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op477'), can_inplace=False, is_weak=False),
    ]
]
op469.group.device = cuda:0
op469.group.iteration = (501760, 1)
op469.sizes = ([1568, 320], [])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf467_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op469_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf465', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg324_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf466', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf467', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg325_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg326_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf469', get_index_7, add_3, None)
        return store


op470: SchedulerNode(ComputedBuffer)
op470.writes = [MemoryDep('buf470', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op470.unmet_dependencies = []
op470.met_dependencies = [MemoryDep('arg329_1', c0, {c0: 409600}, None)]
op470.outputs = [
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf470.users = [NodeUser(node=ExternKernelSchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op470.group.device = cuda:0
op470.group.iteration = (409600, 1)
op470.sizes = ([320, 320, 4], [])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op470_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg329_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf470', get_index_1, load, None)
        return store


op471: ExternKernelSchedulerNode(ExternKernelAlloc)
op471.writes = [StarDep(name='buf471', mode=None)]
op471.unmet_dependencies = [StarDep(name='buf469', mode=None), StarDep(name='buf470', mode=None)]
op471.met_dependencies = []
op471.outputs = [
    buf471: ExternKernelAlloc
    buf471.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf471.users = [
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=True, is_weak=False),
    ]
]
op471.node.kernel = extern_kernels.convolution


op472_op473_op475: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op472_op473_op475.writes = 
    [   MemoryDep('buf472', c0, {c0: 392}, None),
        MemoryDep('buf473', c0, {c0: 392}, None),
        MemoryDep('buf475', c0, {c0: 125440}, None)]
op472_op473_op475.unmet_dependencies = [MemoryDep('buf471', c0, {c0: 125440}, None)]
op472_op473_op475.met_dependencies = 
    [   MemoryDep('arg330_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg331_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg332_1', c1, {c0: 392, c1: 320}, None)]
op472_op473_op475.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf472.users = [NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False)]
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf473.users = [NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False)]
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf475.users = [NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op472_op473_op475.snodes[0] =
op472: SchedulerNode(ComputedBuffer)
op472.writes = [MemoryDep('buf472', c0, {c0: 392}, None)]
op472.unmet_dependencies = [MemoryDep('buf471', c0, {c0: 125440}, None)]
op472.met_dependencies = [MemoryDep('arg330_1', c1, {c0: 392, c1: 320}, None)]
op472.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf472.users = [NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False)]
]
op472.group.device = cuda:0
op472.group.iteration = (392, 320)
op472.sizes = ([392], [320])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op472_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg330_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf472', get_index_2, getitem)
        return store_reduction
op472_op473_op475.snodes[1] =
op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', c0, {c0: 392}, None)]
op473.unmet_dependencies = [MemoryDep('buf471', c0, {c0: 125440}, None)]
op473.met_dependencies = [MemoryDep('arg330_1', c1, {c0: 392, c1: 320}, None)]
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf473.users = [NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False)]
]
op473.group.device = cuda:0
op473.group.iteration = (392, 320)
op473.sizes = ([392], [320])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op473_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg330_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf473', get_index_2, getitem_1)
        return store_reduction
op472_op473_op475.snodes[2] =
op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 125440}, None)]
op475.unmet_dependencies = 
    [   MemoryDep('buf471', c0, {c0: 125440}, None),
        MemoryDep('buf472', c0, {c0: 392}, None),
        MemoryDep('buf473', c0, {c0: 392}, None)]
op475.met_dependencies = 
    [   MemoryDep('arg330_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg331_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg332_1', c1, {c0: 392, c1: 320}, None)]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf475.users = [NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op475.group.device = cuda:0
op475.group.iteration = (125440, 1)
op475.sizes = ([392, 320], [])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf473_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op475_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg330_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf472', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf473', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg331_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg332_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf475', get_index_6, add_2, None)
        return store


op476: ExternKernelSchedulerNode(ExternKernelOut)
op476.writes = [StarDep(name='buf476', mode=None)]
op476.unmet_dependencies = [StarDep(name='buf475', mode=None)]
op476.met_dependencies = [StarDep(name='arg333_1', mode=None), StarDep(name='arg334_1', mode=None)]
op476.outputs = [
    buf476: ExternKernelOut
    buf476.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf476.users = [NodeUser(node=ExternKernelSchedulerNode(name='op478'), can_inplace=False, is_weak=False)]
]
op476.node.kernel = extern_kernels.addmm


op477: ExternKernelSchedulerNode(ExternKernelOut)
op477.writes = [StarDep(name='buf477', mode=None)]
op477.unmet_dependencies = [StarDep(name='buf469', mode=None)]
op477.met_dependencies = [StarDep(name='arg327_1', mode=None), StarDep(name='arg328_1', mode=None)]
op477.outputs = [
    buf477: ExternKernelOut
    buf477.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf477.users = [NodeUser(node=ExternKernelSchedulerNode(name='op478'), can_inplace=False, is_weak=False)]
]
op477.node.kernel = extern_kernels.addmm


op478: ExternKernelSchedulerNode(FallbackKernel)
op478.writes = [StarDep(name='buf478', mode=None)]
op478.unmet_dependencies = [StarDep(name='buf476', mode=None), StarDep(name='buf477', mode=None)]
op478.met_dependencies = []
op478.outputs = [
    buf478: FallbackKernel
    buf478.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf478.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False),
    ]
]
op478.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op479: ExternKernelSchedulerNode(MultiOutput)
op479.writes = [StarDep(name='buf479', mode=None)]
op479.unmet_dependencies = [StarDep(name='buf478', mode=None)]
op479.met_dependencies = []
op479.outputs = [
    buf479: MultiOutput
    buf479.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf479.users = [NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op479.node.kernel = None


op483: ExternKernelSchedulerNode(ExternKernelOut)
op483.writes = [StarDep(name='buf483', mode=None)]
op483.unmet_dependencies = [StarDep(name='buf479', mode=None)]
op483.met_dependencies = [StarDep(name='arg335_1', mode=None)]
op483.outputs = [
    buf483: ExternKernelOut
    buf483.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf483.users = [NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False)]
]
op483.node.kernel = extern_kernels.mm


op484_op485_op486_op488: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op484_op485_op486_op488.writes = 
    [   MemoryDep('buf484', c0, {c0: 501760}, None),
        MemoryDep('buf485', c0, {c0: 1568}, None),
        MemoryDep('buf486', c0, {c0: 1568}, None),
        MemoryDep('buf488', c0, {c0: 501760}, None)]
op484_op485_op486_op488.unmet_dependencies = 
    [   MemoryDep('buf458', c0, {c0: 501760}, None),
        MemoryDep('buf465', c0, {c0: 501760}, None),
        MemoryDep('buf483', c0, {c0: 501760}, None)]
op484_op485_op486_op488.met_dependencies = 
    [   MemoryDep('arg324_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg336_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg337_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg338_1', c1, {c0: 1568, c1: 320}, None)]
op484_op485_op486_op488.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf484.users = [
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=True, is_weak=False),
    ]
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf485.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf486.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op484_op485_op486_op488.snodes[0] =
op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 501760}, None)]
op484.unmet_dependencies = 
    [   MemoryDep('buf458', c0, {c0: 501760}, None),
        MemoryDep('buf465', c0, {c0: 501760}, None),
        MemoryDep('buf483', c0, {c0: 501760}, None)]
op484.met_dependencies = 
    [   MemoryDep('arg324_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg336_1', c1, {c0: 1568, c1: 320}, None)]
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf484.users = [
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=True, is_weak=False),
    ]
]
op484.group.device = cuda:0
op484.group.iteration = (501760, 1)
op484.sizes = ([1568, 320], [])
buf458_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op484_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf465', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg324_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf483', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg336_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf484', get_index_5, add_3, None)
        return store
op484_op485_op486_op488.snodes[1] =
op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 1568}, None)]
op485.unmet_dependencies = [MemoryDep('buf484', c0, {c0: 501760}, None)]
op485.met_dependencies = []
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf485.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op485.group.device = cuda:0
op485.group.iteration = (1568, 320)
op485.sizes = ([1568], [320])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op485_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf485', get_index_1, getitem)
        return store_reduction
op484_op485_op486_op488.snodes[2] =
op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 1568}, None)]
op486.unmet_dependencies = [MemoryDep('buf484', c0, {c0: 501760}, None)]
op486.met_dependencies = []
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf486.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (1568, 320)
op486.sizes = ([1568], [320])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op486_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf486', get_index_1, getitem_1)
        return store_reduction
op484_op485_op486_op488.snodes[3] =
op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 501760}, None)]
op488.unmet_dependencies = 
    [   MemoryDep('buf484', c0, {c0: 501760}, None),
        MemoryDep('buf485', c0, {c0: 1568}, None),
        MemoryDep('buf486', c0, {c0: 1568}, None)]
op488.met_dependencies = 
    [   MemoryDep('arg337_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg338_1', c1, {c0: 1568, c1: 320}, None)]
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf488.users = [NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (501760, 1)
op488.sizes = ([1568, 320], [])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf488_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op488_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf485', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf486', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg337_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg338_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf488', get_index_5, add_1, None)
        return store


op489: ExternKernelSchedulerNode(ExternKernelOut)
op489.writes = [StarDep(name='buf489', mode=None)]
op489.unmet_dependencies = [StarDep(name='buf488', mode=None)]
op489.met_dependencies = [StarDep(name='arg339_1', mode=None)]
op489.outputs = [
    buf489: ExternKernelOut
    buf489.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf489.users = [NodeUser(node=SchedulerNode(name='op490'), can_inplace=True, is_weak=False)]
]
op489.node.kernel = extern_kernels.mm


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 2007040}, None)]
op490.unmet_dependencies = [MemoryDep('buf489', c0, {c0: 2007040}, None)]
op490.met_dependencies = [MemoryDep('arg340_1', c1, {c0: 1568, c1: 1280}, None)]
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf490.users = [NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op490.group.device = cuda:0
op490.group.iteration = (2007040, 1)
op490.sizes = ([1568, 1280], [])
buf489_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op490_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf489', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg340_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf489', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg340_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf490', get_index_4, mul_2, None)
        return store


op491: ExternKernelSchedulerNode(ExternKernelOut)
op491.writes = [StarDep(name='buf491', mode=None)]
op491.unmet_dependencies = [StarDep(name='buf490', mode=None)]
op491.met_dependencies = [StarDep(name='arg341_1', mode=None)]
op491.outputs = [
    buf491: ExternKernelOut
    buf491.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf491.users = [
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=True, is_weak=False),
    ]
]
op491.node.kernel = extern_kernels.mm


op492_op493_op495: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op492_op493_op495.writes = 
    [   MemoryDep('buf492', c0, {c0: 1568}, None),
        MemoryDep('buf493', c0, {c0: 1568}, None),
        MemoryDep('buf495', c0, {c0: 501760}, None)]
op492_op493_op495.unmet_dependencies = 
    [   MemoryDep('buf484', c0, {c0: 501760}, None),
        MemoryDep('buf491', c0, {c0: 501760}, None)]
op492_op493_op495.met_dependencies = 
    [   MemoryDep('arg342_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg343_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg344_1', c1, {c0: 1568, c1: 320}, None)]
op492_op493_op495.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf492.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf493.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf495.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False),
    ]
]
op492_op493_op495.snodes[0] =
op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', c0, {c0: 1568}, None)]
op492.unmet_dependencies = 
    [   MemoryDep('buf484', c0, {c0: 501760}, None),
        MemoryDep('buf491', c0, {c0: 501760}, None)]
op492.met_dependencies = [MemoryDep('arg342_1', c1, {c0: 1568, c1: 320}, None)]
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf492.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op492.group.device = cuda:0
op492.group.iteration = (1568, 320)
op492.sizes = ([1568], [320])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op492_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf491', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg342_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf492', get_index_3, getitem)
        return store_reduction
op492_op493_op495.snodes[1] =
op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', c0, {c0: 1568}, None)]
op493.unmet_dependencies = 
    [   MemoryDep('buf484', c0, {c0: 501760}, None),
        MemoryDep('buf491', c0, {c0: 501760}, None)]
op493.met_dependencies = [MemoryDep('arg342_1', c1, {c0: 1568, c1: 320}, None)]
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf493.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op493.group.device = cuda:0
op493.group.iteration = (1568, 320)
op493.sizes = ([1568], [320])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op493_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf491', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg342_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf493', get_index_3, getitem_1)
        return store_reduction
op492_op493_op495.snodes[2] =
op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 501760}, None)]
op495.unmet_dependencies = 
    [   MemoryDep('buf484', c0, {c0: 501760}, None),
        MemoryDep('buf491', c0, {c0: 501760}, None),
        MemoryDep('buf492', c0, {c0: 1568}, None),
        MemoryDep('buf493', c0, {c0: 1568}, None)]
op495.met_dependencies = 
    [   MemoryDep('arg342_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg343_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg344_1', c1, {c0: 1568, c1: 320}, None)]
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf495.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False),
    ]
]
op495.group.device = cuda:0
op495.group.iteration = (501760, 1)
op495.sizes = ([1568, 320], [])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op495_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf491', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg342_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf492', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf493', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg343_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg344_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf495', get_index_7, add_3, None)
        return store


op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op496.unmet_dependencies = []
op496.met_dependencies = [MemoryDep('arg347_1', c0, {c0: 409600}, None)]
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf496.users = [NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (409600, 1)
op496.sizes = ([320, 320, 4], [])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op496_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg347_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf496', get_index_1, load, None)
        return store


op497: ExternKernelSchedulerNode(ExternKernelAlloc)
op497.writes = [StarDep(name='buf497', mode=None)]
op497.unmet_dependencies = [StarDep(name='buf495', mode=None), StarDep(name='buf496', mode=None)]
op497.met_dependencies = []
op497.outputs = [
    buf497: ExternKernelAlloc
    buf497.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf497.users = [
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=True, is_weak=False),
    ]
]
op497.node.kernel = extern_kernels.convolution


op498_op499_op501: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op498_op499_op501.writes = 
    [   MemoryDep('buf498', c0, {c0: 392}, None),
        MemoryDep('buf499', c0, {c0: 392}, None),
        MemoryDep('buf501', c0, {c0: 125440}, None)]
op498_op499_op501.unmet_dependencies = [MemoryDep('buf497', c0, {c0: 125440}, None)]
op498_op499_op501.met_dependencies = 
    [   MemoryDep('arg348_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg349_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg350_1', c1, {c0: 392, c1: 320}, None)]
op498_op499_op501.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf498.users = [NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False)]
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf499.users = [NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False)]
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf501.users = [NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op498_op499_op501.snodes[0] =
op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 392}, None)]
op498.unmet_dependencies = [MemoryDep('buf497', c0, {c0: 125440}, None)]
op498.met_dependencies = [MemoryDep('arg348_1', c1, {c0: 392, c1: 320}, None)]
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf498.users = [NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False)]
]
op498.group.device = cuda:0
op498.group.iteration = (392, 320)
op498.sizes = ([392], [320])
buf497_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op498_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg348_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf498', get_index_2, getitem)
        return store_reduction
op498_op499_op501.snodes[1] =
op499: SchedulerNode(ComputedBuffer)
op499.writes = [MemoryDep('buf499', c0, {c0: 392}, None)]
op499.unmet_dependencies = [MemoryDep('buf497', c0, {c0: 125440}, None)]
op499.met_dependencies = [MemoryDep('arg348_1', c1, {c0: 392, c1: 320}, None)]
op499.outputs = [
    buf499: ComputedBuffer
    buf499.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf499.users = [NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False)]
]
op499.group.device = cuda:0
op499.group.iteration = (392, 320)
op499.sizes = ([392], [320])
buf497_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op499_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg348_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf499', get_index_2, getitem_1)
        return store_reduction
op498_op499_op501.snodes[2] =
op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 125440}, None)]
op501.unmet_dependencies = 
    [   MemoryDep('buf497', c0, {c0: 125440}, None),
        MemoryDep('buf498', c0, {c0: 392}, None),
        MemoryDep('buf499', c0, {c0: 392}, None)]
op501.met_dependencies = 
    [   MemoryDep('arg348_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg349_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg350_1', c1, {c0: 392, c1: 320}, None)]
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf501.users = [NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op501.group.device = cuda:0
op501.group.iteration = (125440, 1)
op501.sizes = ([392, 320], [])
buf497_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf499_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op501_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg348_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf498', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf499', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg349_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg350_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf501', get_index_6, add_2, None)
        return store


op502: ExternKernelSchedulerNode(ExternKernelOut)
op502.writes = [StarDep(name='buf502', mode=None)]
op502.unmet_dependencies = [StarDep(name='buf501', mode=None)]
op502.met_dependencies = [StarDep(name='arg351_1', mode=None), StarDep(name='arg352_1', mode=None)]
op502.outputs = [
    buf502: ExternKernelOut
    buf502.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf502.users = [NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op502.node.kernel = extern_kernels.addmm


op503: ExternKernelSchedulerNode(ExternKernelOut)
op503.writes = [StarDep(name='buf503', mode=None)]
op503.unmet_dependencies = [StarDep(name='buf495', mode=None)]
op503.met_dependencies = [StarDep(name='arg345_1', mode=None), StarDep(name='arg346_1', mode=None)]
op503.outputs = [
    buf503: ExternKernelOut
    buf503.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf503.users = [NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op503.node.kernel = extern_kernels.addmm


op504: ExternKernelSchedulerNode(FallbackKernel)
op504.writes = [StarDep(name='buf504', mode=None)]
op504.unmet_dependencies = [StarDep(name='buf502', mode=None), StarDep(name='buf503', mode=None)]
op504.met_dependencies = []
op504.outputs = [
    buf504: FallbackKernel
    buf504.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf504.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False),
    ]
]
op504.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op505: ExternKernelSchedulerNode(MultiOutput)
op505.writes = [StarDep(name='buf505', mode=None)]
op505.unmet_dependencies = [StarDep(name='buf504', mode=None)]
op505.met_dependencies = []
op505.outputs = [
    buf505: MultiOutput
    buf505.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf505.users = [NodeUser(node=ExternKernelSchedulerNode(name='op509'), can_inplace=False, is_weak=False)]
]
op505.node.kernel = None


op509: ExternKernelSchedulerNode(ExternKernelOut)
op509.writes = [StarDep(name='buf509', mode=None)]
op509.unmet_dependencies = [StarDep(name='buf505', mode=None)]
op509.met_dependencies = [StarDep(name='arg353_1', mode=None)]
op509.outputs = [
    buf509: ExternKernelOut
    buf509.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf509.users = [NodeUser(node=SchedulerNode(name='op510'), can_inplace=True, is_weak=False)]
]
op509.node.kernel = extern_kernels.mm


op510_op511_op512_op514: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op510_op511_op512_op514.writes = 
    [   MemoryDep('buf510', c0, {c0: 501760}, None),
        MemoryDep('buf511', c0, {c0: 1568}, None),
        MemoryDep('buf512', c0, {c0: 1568}, None),
        MemoryDep('buf514', c0, {c0: 501760}, None)]
op510_op511_op512_op514.unmet_dependencies = 
    [   MemoryDep('buf484', c0, {c0: 501760}, None),
        MemoryDep('buf491', c0, {c0: 501760}, None),
        MemoryDep('buf509', c0, {c0: 501760}, None)]
op510_op511_op512_op514.met_dependencies = 
    [   MemoryDep('arg342_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg354_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg355_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg356_1', c1, {c0: 1568, c1: 320}, None)]
op510_op511_op512_op514.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf510.users = [
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op514'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=True, is_weak=False),
    ]
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf511.users = [NodeUser(node=SchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf512.users = [NodeUser(node=SchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
    buf514: ComputedBuffer
    buf514.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf514.users = [NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op510_op511_op512_op514.snodes[0] =
op510: SchedulerNode(ComputedBuffer)
op510.writes = [MemoryDep('buf510', c0, {c0: 501760}, None)]
op510.unmet_dependencies = 
    [   MemoryDep('buf484', c0, {c0: 501760}, None),
        MemoryDep('buf491', c0, {c0: 501760}, None),
        MemoryDep('buf509', c0, {c0: 501760}, None)]
op510.met_dependencies = 
    [   MemoryDep('arg342_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg354_1', c1, {c0: 1568, c1: 320}, None)]
op510.outputs = [
    buf510: ComputedBuffer
    buf510.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf510.users = [
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op514'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=True, is_weak=False),
    ]
]
op510.group.device = cuda:0
op510.group.iteration = (501760, 1)
op510.sizes = ([1568, 320], [])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op510_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf491', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg342_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf509', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg354_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf510', get_index_5, add_3, None)
        return store
op510_op511_op512_op514.snodes[1] =
op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', c0, {c0: 1568}, None)]
op511.unmet_dependencies = [MemoryDep('buf510', c0, {c0: 501760}, None)]
op511.met_dependencies = []
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf511.users = [NodeUser(node=SchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op511.group.device = cuda:0
op511.group.iteration = (1568, 320)
op511.sizes = ([1568], [320])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op511_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf511', get_index_1, getitem)
        return store_reduction
op510_op511_op512_op514.snodes[2] =
op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 1568}, None)]
op512.unmet_dependencies = [MemoryDep('buf510', c0, {c0: 501760}, None)]
op512.met_dependencies = []
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf512.users = [NodeUser(node=SchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op512.group.device = cuda:0
op512.group.iteration = (1568, 320)
op512.sizes = ([1568], [320])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op512_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf512', get_index_1, getitem_1)
        return store_reduction
op510_op511_op512_op514.snodes[3] =
op514: SchedulerNode(ComputedBuffer)
op514.writes = [MemoryDep('buf514', c0, {c0: 501760}, None)]
op514.unmet_dependencies = 
    [   MemoryDep('buf510', c0, {c0: 501760}, None),
        MemoryDep('buf511', c0, {c0: 1568}, None),
        MemoryDep('buf512', c0, {c0: 1568}, None)]
op514.met_dependencies = 
    [   MemoryDep('arg355_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg356_1', c1, {c0: 1568, c1: 320}, None)]
op514.outputs = [
    buf514: ComputedBuffer
    buf514.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf514.users = [NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op514.group.device = cuda:0
op514.group.iteration = (501760, 1)
op514.sizes = ([1568, 320], [])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf512_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf514_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op514_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf511', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf512', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg355_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg356_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf514', get_index_5, add_1, None)
        return store


op515: ExternKernelSchedulerNode(ExternKernelOut)
op515.writes = [StarDep(name='buf515', mode=None)]
op515.unmet_dependencies = [StarDep(name='buf514', mode=None)]
op515.met_dependencies = [StarDep(name='arg357_1', mode=None)]
op515.outputs = [
    buf515: ExternKernelOut
    buf515.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf515.users = [NodeUser(node=SchedulerNode(name='op516'), can_inplace=True, is_weak=False)]
]
op515.node.kernel = extern_kernels.mm


op516: SchedulerNode(ComputedBuffer)
op516.writes = [MemoryDep('buf516', c0, {c0: 2007040}, None)]
op516.unmet_dependencies = [MemoryDep('buf515', c0, {c0: 2007040}, None)]
op516.met_dependencies = [MemoryDep('arg358_1', c1, {c0: 1568, c1: 1280}, None)]
op516.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf516.users = [NodeUser(node=ExternKernelSchedulerNode(name='op517'), can_inplace=False, is_weak=False)]
]
op516.group.device = cuda:0
op516.group.iteration = (2007040, 1)
op516.sizes = ([1568, 1280], [])
buf515_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf516_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op516_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg358_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf515', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg358_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf516', get_index_4, mul_2, None)
        return store


op517: ExternKernelSchedulerNode(ExternKernelOut)
op517.writes = [StarDep(name='buf517', mode=None)]
op517.unmet_dependencies = [StarDep(name='buf516', mode=None)]
op517.met_dependencies = [StarDep(name='arg359_1', mode=None)]
op517.outputs = [
    buf517: ExternKernelOut
    buf517.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf517.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op536'), can_inplace=True, is_weak=False),
    ]
]
op517.node.kernel = extern_kernels.mm


op518_op519_op521: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op518_op519_op521.writes = 
    [   MemoryDep('buf518', c0, {c0: 1568}, None),
        MemoryDep('buf519', c0, {c0: 1568}, None),
        MemoryDep('buf521', c0, {c0: 501760}, None)]
op518_op519_op521.unmet_dependencies = 
    [   MemoryDep('buf510', c0, {c0: 501760}, None),
        MemoryDep('buf517', c0, {c0: 501760}, None)]
op518_op519_op521.met_dependencies = 
    [   MemoryDep('arg360_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg361_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg362_1', c1, {c0: 1568, c1: 320}, None)]
op518_op519_op521.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf518.users = [NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf519.users = [NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf521.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
    ]
]
op518_op519_op521.snodes[0] =
op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 1568}, None)]
op518.unmet_dependencies = 
    [   MemoryDep('buf510', c0, {c0: 501760}, None),
        MemoryDep('buf517', c0, {c0: 501760}, None)]
op518.met_dependencies = [MemoryDep('arg360_1', c1, {c0: 1568, c1: 320}, None)]
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf518.users = [NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
]
op518.group.device = cuda:0
op518.group.iteration = (1568, 320)
op518.sizes = ([1568], [320])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op518_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf517', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg360_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf518', get_index_3, getitem)
        return store_reduction
op518_op519_op521.snodes[1] =
op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', c0, {c0: 1568}, None)]
op519.unmet_dependencies = 
    [   MemoryDep('buf510', c0, {c0: 501760}, None),
        MemoryDep('buf517', c0, {c0: 501760}, None)]
op519.met_dependencies = [MemoryDep('arg360_1', c1, {c0: 1568, c1: 320}, None)]
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf519.users = [NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
]
op519.group.device = cuda:0
op519.group.iteration = (1568, 320)
op519.sizes = ([1568], [320])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op519_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf517', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg360_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf519', get_index_3, getitem_1)
        return store_reduction
op518_op519_op521.snodes[2] =
op521: SchedulerNode(ComputedBuffer)
op521.writes = [MemoryDep('buf521', c0, {c0: 501760}, None)]
op521.unmet_dependencies = 
    [   MemoryDep('buf510', c0, {c0: 501760}, None),
        MemoryDep('buf517', c0, {c0: 501760}, None),
        MemoryDep('buf518', c0, {c0: 1568}, None),
        MemoryDep('buf519', c0, {c0: 1568}, None)]
op521.met_dependencies = 
    [   MemoryDep('arg360_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg361_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg362_1', c1, {c0: 1568, c1: 320}, None)]
op521.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf521.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op523'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
    ]
]
op521.group.device = cuda:0
op521.group.iteration = (501760, 1)
op521.sizes = ([1568, 320], [])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf519_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf521_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op521_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf517', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg360_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf518', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf519', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg361_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg362_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf521', get_index_7, add_3, None)
        return store


op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op522.unmet_dependencies = []
op522.met_dependencies = [MemoryDep('arg365_1', c0, {c0: 409600}, None)]
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf522.users = [NodeUser(node=ExternKernelSchedulerNode(name='op523'), can_inplace=False, is_weak=False)]
]
op522.group.device = cuda:0
op522.group.iteration = (409600, 1)
op522.sizes = ([320, 320, 4], [])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf522_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op522_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg365_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf522', get_index_1, load, None)
        return store


op523: ExternKernelSchedulerNode(ExternKernelAlloc)
op523.writes = [StarDep(name='buf523', mode=None)]
op523.unmet_dependencies = [StarDep(name='buf521', mode=None), StarDep(name='buf522', mode=None)]
op523.met_dependencies = []
op523.outputs = [
    buf523: ExternKernelAlloc
    buf523.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf523.users = [
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=True, is_weak=False),
    ]
]
op523.node.kernel = extern_kernels.convolution


op524_op525_op527: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op524_op525_op527.writes = 
    [   MemoryDep('buf524', c0, {c0: 392}, None),
        MemoryDep('buf525', c0, {c0: 392}, None),
        MemoryDep('buf527', c0, {c0: 125440}, None)]
op524_op525_op527.unmet_dependencies = [MemoryDep('buf523', c0, {c0: 125440}, None)]
op524_op525_op527.met_dependencies = 
    [   MemoryDep('arg366_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg367_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg368_1', c1, {c0: 392, c1: 320}, None)]
op524_op525_op527.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf524.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf525.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf527.users = [NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
]
op524_op525_op527.snodes[0] =
op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 392}, None)]
op524.unmet_dependencies = [MemoryDep('buf523', c0, {c0: 125440}, None)]
op524.met_dependencies = [MemoryDep('arg366_1', c1, {c0: 392, c1: 320}, None)]
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf524.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
]
op524.group.device = cuda:0
op524.group.iteration = (392, 320)
op524.sizes = ([392], [320])
buf523_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op524_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf523', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg366_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf524', get_index_2, getitem)
        return store_reduction
op524_op525_op527.snodes[1] =
op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 392}, None)]
op525.unmet_dependencies = [MemoryDep('buf523', c0, {c0: 125440}, None)]
op525.met_dependencies = [MemoryDep('arg366_1', c1, {c0: 392, c1: 320}, None)]
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf525.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
]
op525.group.device = cuda:0
op525.group.iteration = (392, 320)
op525.sizes = ([392], [320])
buf523_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op525_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf523', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg366_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf525', get_index_2, getitem_1)
        return store_reduction
op524_op525_op527.snodes[2] =
op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', c0, {c0: 125440}, None)]
op527.unmet_dependencies = 
    [   MemoryDep('buf523', c0, {c0: 125440}, None),
        MemoryDep('buf524', c0, {c0: 392}, None),
        MemoryDep('buf525', c0, {c0: 392}, None)]
op527.met_dependencies = 
    [   MemoryDep('arg366_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg367_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg368_1', c1, {c0: 392, c1: 320}, None)]
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf527.users = [NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
]
op527.group.device = cuda:0
op527.group.iteration = (125440, 1)
op527.sizes = ([392, 320], [])
buf523_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf525_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op527_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf523', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg366_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf524', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf525', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg367_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg368_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf527', get_index_6, add_2, None)
        return store


op528: ExternKernelSchedulerNode(ExternKernelOut)
op528.writes = [StarDep(name='buf528', mode=None)]
op528.unmet_dependencies = [StarDep(name='buf527', mode=None)]
op528.met_dependencies = [StarDep(name='arg369_1', mode=None), StarDep(name='arg370_1', mode=None)]
op528.outputs = [
    buf528: ExternKernelOut
    buf528.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf528.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op528.node.kernel = extern_kernels.addmm


op529: ExternKernelSchedulerNode(ExternKernelOut)
op529.writes = [StarDep(name='buf529', mode=None)]
op529.unmet_dependencies = [StarDep(name='buf521', mode=None)]
op529.met_dependencies = [StarDep(name='arg363_1', mode=None), StarDep(name='arg364_1', mode=None)]
op529.outputs = [
    buf529: ExternKernelOut
    buf529.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf529.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op529.node.kernel = extern_kernels.addmm


op530: ExternKernelSchedulerNode(FallbackKernel)
op530.writes = [StarDep(name='buf530', mode=None)]
op530.unmet_dependencies = [StarDep(name='buf528', mode=None), StarDep(name='buf529', mode=None)]
op530.met_dependencies = []
op530.outputs = [
    buf530: FallbackKernel
    buf530.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf530.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op534'), can_inplace=False, is_weak=False),
    ]
]
op530.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op531: ExternKernelSchedulerNode(MultiOutput)
op531.writes = [StarDep(name='buf531', mode=None)]
op531.unmet_dependencies = [StarDep(name='buf530', mode=None)]
op531.met_dependencies = []
op531.outputs = [
    buf531: MultiOutput
    buf531.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf531.users = [NodeUser(node=ExternKernelSchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
]
op531.node.kernel = None


op535: ExternKernelSchedulerNode(ExternKernelOut)
op535.writes = [StarDep(name='buf535', mode=None)]
op535.unmet_dependencies = [StarDep(name='buf531', mode=None)]
op535.met_dependencies = [StarDep(name='arg371_1', mode=None)]
op535.outputs = [
    buf535: ExternKernelOut
    buf535.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf535.users = [NodeUser(node=SchedulerNode(name='op536'), can_inplace=True, is_weak=False)]
]
op535.node.kernel = extern_kernels.mm


op536_op537_op538_op540: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op536_op537_op538_op540.writes = 
    [   MemoryDep('buf536', c0, {c0: 501760}, None),
        MemoryDep('buf537', c0, {c0: 1568}, None),
        MemoryDep('buf538', c0, {c0: 1568}, None),
        MemoryDep('buf540', c0, {c0: 501760}, None)]
op536_op537_op538_op540.unmet_dependencies = 
    [   MemoryDep('buf510', c0, {c0: 501760}, None),
        MemoryDep('buf517', c0, {c0: 501760}, None),
        MemoryDep('buf535', c0, {c0: 501760}, None)]
op536_op537_op538_op540.met_dependencies = 
    [   MemoryDep('arg360_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg372_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg373_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg374_1', c1, {c0: 1568, c1: 320}, None)]
op536_op537_op538_op540.outputs = [
    buf536: ComputedBuffer
    buf536.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf536.users = [
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=True, is_weak=False),
    ]
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf537.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf538.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op536_op537_op538_op540.snodes[0] =
op536: SchedulerNode(ComputedBuffer)
op536.writes = [MemoryDep('buf536', c0, {c0: 501760}, None)]
op536.unmet_dependencies = 
    [   MemoryDep('buf510', c0, {c0: 501760}, None),
        MemoryDep('buf517', c0, {c0: 501760}, None),
        MemoryDep('buf535', c0, {c0: 501760}, None)]
op536.met_dependencies = 
    [   MemoryDep('arg360_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg372_1', c1, {c0: 1568, c1: 320}, None)]
op536.outputs = [
    buf536: ComputedBuffer
    buf536.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf536.users = [
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op539'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=True, is_weak=False),
    ]
]
op536.group.device = cuda:0
op536.group.iteration = (501760, 1)
op536.sizes = ([1568, 320], [])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf535_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op536_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf517', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg360_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf535', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg372_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf536', get_index_5, add_3, None)
        return store
op536_op537_op538_op540.snodes[1] =
op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 1568}, None)]
op537.unmet_dependencies = [MemoryDep('buf536', c0, {c0: 501760}, None)]
op537.met_dependencies = []
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf537.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op537.group.device = cuda:0
op537.group.iteration = (1568, 320)
op537.sizes = ([1568], [320])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op537_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf537', get_index_1, getitem)
        return store_reduction
op536_op537_op538_op540.snodes[2] =
op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 1568}, None)]
op538.unmet_dependencies = [MemoryDep('buf536', c0, {c0: 501760}, None)]
op538.met_dependencies = []
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf538.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op538.group.device = cuda:0
op538.group.iteration = (1568, 320)
op538.sizes = ([1568], [320])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op538_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf538', get_index_1, getitem_1)
        return store_reduction
op536_op537_op538_op540.snodes[3] =
op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', c0, {c0: 501760}, None)]
op540.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 501760}, None),
        MemoryDep('buf537', c0, {c0: 1568}, None),
        MemoryDep('buf538', c0, {c0: 1568}, None)]
op540.met_dependencies = 
    [   MemoryDep('arg373_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg374_1', c1, {c0: 1568, c1: 320}, None)]
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op540.group.device = cuda:0
op540.group.iteration = (501760, 1)
op540.sizes = ([1568, 320], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf540_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op540_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf537', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf538', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg373_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg374_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf540', get_index_5, add_1, None)
        return store


op541: ExternKernelSchedulerNode(ExternKernelOut)
op541.writes = [StarDep(name='buf541', mode=None)]
op541.unmet_dependencies = [StarDep(name='buf540', mode=None)]
op541.met_dependencies = [StarDep(name='arg375_1', mode=None)]
op541.outputs = [
    buf541: ExternKernelOut
    buf541.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf541.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False)]
]
op541.node.kernel = extern_kernels.mm


op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 2007040}, None)]
op542.unmet_dependencies = [MemoryDep('buf541', c0, {c0: 2007040}, None)]
op542.met_dependencies = [MemoryDep('arg376_1', c1, {c0: 1568, c1: 1280}, None)]
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf542.users = [NodeUser(node=ExternKernelSchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op542.group.device = cuda:0
op542.group.iteration = (2007040, 1)
op542.sizes = ([1568, 1280], [])
buf541_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg376_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op542_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf541', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg376_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf541', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg376_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf542', get_index_4, mul_2, None)
        return store


op543: ExternKernelSchedulerNode(ExternKernelOut)
op543.writes = [StarDep(name='buf543', mode=None)]
op543.unmet_dependencies = [StarDep(name='buf542', mode=None)]
op543.met_dependencies = [StarDep(name='arg377_1', mode=None)]
op543.outputs = [
    buf543: ExternKernelOut
    buf543.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf543.users = [
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=True, is_weak=False),
    ]
]
op543.node.kernel = extern_kernels.mm


op544_op545_op547: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op544_op545_op547.writes = 
    [   MemoryDep('buf544', c0, {c0: 1568}, None),
        MemoryDep('buf545', c0, {c0: 1568}, None),
        MemoryDep('buf547', c0, {c0: 501760}, None)]
op544_op545_op547.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 501760}, None),
        MemoryDep('buf543', c0, {c0: 501760}, None)]
op544_op545_op547.met_dependencies = 
    [   MemoryDep('arg378_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg379_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg380_1', c1, {c0: 1568, c1: 320}, None)]
op544_op545_op547.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf544.users = [NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf545.users = [NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
    buf547: ComputedBuffer
    buf547.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf547.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False),
    ]
]
op544_op545_op547.snodes[0] =
op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 1568}, None)]
op544.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 501760}, None),
        MemoryDep('buf543', c0, {c0: 501760}, None)]
op544.met_dependencies = [MemoryDep('arg378_1', c1, {c0: 1568, c1: 320}, None)]
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf544.users = [NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op544.group.device = cuda:0
op544.group.iteration = (1568, 320)
op544.sizes = ([1568], [320])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op544_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf543', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg378_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf544', get_index_3, getitem)
        return store_reduction
op544_op545_op547.snodes[1] =
op545: SchedulerNode(ComputedBuffer)
op545.writes = [MemoryDep('buf545', c0, {c0: 1568}, None)]
op545.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 501760}, None),
        MemoryDep('buf543', c0, {c0: 501760}, None)]
op545.met_dependencies = [MemoryDep('arg378_1', c1, {c0: 1568, c1: 320}, None)]
op545.outputs = [
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf545.users = [NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op545.group.device = cuda:0
op545.group.iteration = (1568, 320)
op545.sizes = ([1568], [320])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf545_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op545_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf543', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg378_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf545', get_index_3, getitem_1)
        return store_reduction
op544_op545_op547.snodes[2] =
op547: SchedulerNode(ComputedBuffer)
op547.writes = [MemoryDep('buf547', c0, {c0: 501760}, None)]
op547.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 501760}, None),
        MemoryDep('buf543', c0, {c0: 501760}, None),
        MemoryDep('buf544', c0, {c0: 1568}, None),
        MemoryDep('buf545', c0, {c0: 1568}, None)]
op547.met_dependencies = 
    [   MemoryDep('arg378_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg379_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg380_1', c1, {c0: 1568, c1: 320}, None)]
op547.outputs = [
    buf547: ComputedBuffer
    buf547.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf547.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False),
    ]
]
op547.group.device = cuda:0
op547.group.iteration = (501760, 1)
op547.sizes = ([1568, 320], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf545_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf547_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op547_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf543', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg378_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf544', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf545', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg379_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg380_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf547', get_index_7, add_3, None)
        return store


op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op548.unmet_dependencies = []
op548.met_dependencies = [MemoryDep('arg383_1', c0, {c0: 409600}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf548.users = [NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False)]
]
op548.group.device = cuda:0
op548.group.iteration = (409600, 1)
op548.sizes = ([320, 320, 4], [])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op548_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg383_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf548', get_index_1, load, None)
        return store


op549: ExternKernelSchedulerNode(ExternKernelAlloc)
op549.writes = [StarDep(name='buf549', mode=None)]
op549.unmet_dependencies = [StarDep(name='buf547', mode=None), StarDep(name='buf548', mode=None)]
op549.met_dependencies = []
op549.outputs = [
    buf549: ExternKernelAlloc
    buf549.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf549.users = [
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=True, is_weak=False),
    ]
]
op549.node.kernel = extern_kernels.convolution


op550_op551_op553: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op550_op551_op553.writes = 
    [   MemoryDep('buf550', c0, {c0: 392}, None),
        MemoryDep('buf551', c0, {c0: 392}, None),
        MemoryDep('buf553', c0, {c0: 125440}, None)]
op550_op551_op553.unmet_dependencies = [MemoryDep('buf549', c0, {c0: 125440}, None)]
op550_op551_op553.met_dependencies = 
    [   MemoryDep('arg384_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg385_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg386_1', c1, {c0: 392, c1: 320}, None)]
op550_op551_op553.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf550.users = [NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf551.users = [NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf553.users = [NodeUser(node=ExternKernelSchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
]
op550_op551_op553.snodes[0] =
op550: SchedulerNode(ComputedBuffer)
op550.writes = [MemoryDep('buf550', c0, {c0: 392}, None)]
op550.unmet_dependencies = [MemoryDep('buf549', c0, {c0: 125440}, None)]
op550.met_dependencies = [MemoryDep('arg384_1', c1, {c0: 392, c1: 320}, None)]
op550.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf550.users = [NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
]
op550.group.device = cuda:0
op550.group.iteration = (392, 320)
op550.sizes = ([392], [320])
buf549_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op550_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf549', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg384_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf550', get_index_2, getitem)
        return store_reduction
op550_op551_op553.snodes[1] =
op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 392}, None)]
op551.unmet_dependencies = [MemoryDep('buf549', c0, {c0: 125440}, None)]
op551.met_dependencies = [MemoryDep('arg384_1', c1, {c0: 392, c1: 320}, None)]
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf551.users = [NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
]
op551.group.device = cuda:0
op551.group.iteration = (392, 320)
op551.sizes = ([392], [320])
buf549_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op551_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf549', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg384_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf551', get_index_2, getitem_1)
        return store_reduction
op550_op551_op553.snodes[2] =
op553: SchedulerNode(ComputedBuffer)
op553.writes = [MemoryDep('buf553', c0, {c0: 125440}, None)]
op553.unmet_dependencies = 
    [   MemoryDep('buf549', c0, {c0: 125440}, None),
        MemoryDep('buf550', c0, {c0: 392}, None),
        MemoryDep('buf551', c0, {c0: 392}, None)]
op553.met_dependencies = 
    [   MemoryDep('arg384_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg385_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg386_1', c1, {c0: 392, c1: 320}, None)]
op553.outputs = [
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf553.users = [NodeUser(node=ExternKernelSchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
]
op553.group.device = cuda:0
op553.group.iteration = (125440, 1)
op553.sizes = ([392, 320], [])
buf549_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf553_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op553_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf549', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg384_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf550', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf551', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg385_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg386_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf553', get_index_6, add_2, None)
        return store


op554: ExternKernelSchedulerNode(ExternKernelOut)
op554.writes = [StarDep(name='buf554', mode=None)]
op554.unmet_dependencies = [StarDep(name='buf553', mode=None)]
op554.met_dependencies = [StarDep(name='arg387_1', mode=None), StarDep(name='arg388_1', mode=None)]
op554.outputs = [
    buf554: ExternKernelOut
    buf554.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf554.users = [NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
]
op554.node.kernel = extern_kernels.addmm


op555: ExternKernelSchedulerNode(ExternKernelOut)
op555.writes = [StarDep(name='buf555', mode=None)]
op555.unmet_dependencies = [StarDep(name='buf547', mode=None)]
op555.met_dependencies = [StarDep(name='arg381_1', mode=None), StarDep(name='arg382_1', mode=None)]
op555.outputs = [
    buf555: ExternKernelOut
    buf555.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf555.users = [NodeUser(node=ExternKernelSchedulerNode(name='op556'), can_inplace=False, is_weak=False)]
]
op555.node.kernel = extern_kernels.addmm


op556: ExternKernelSchedulerNode(FallbackKernel)
op556.writes = [StarDep(name='buf556', mode=None)]
op556.unmet_dependencies = [StarDep(name='buf554', mode=None), StarDep(name='buf555', mode=None)]
op556.met_dependencies = []
op556.outputs = [
    buf556: FallbackKernel
    buf556.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf556.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op559'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False),
    ]
]
op556.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op557: ExternKernelSchedulerNode(MultiOutput)
op557.writes = [StarDep(name='buf557', mode=None)]
op557.unmet_dependencies = [StarDep(name='buf556', mode=None)]
op557.met_dependencies = []
op557.outputs = [
    buf557: MultiOutput
    buf557.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf557.users = [NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False)]
]
op557.node.kernel = None


op561: ExternKernelSchedulerNode(ExternKernelOut)
op561.writes = [StarDep(name='buf561', mode=None)]
op561.unmet_dependencies = [StarDep(name='buf557', mode=None)]
op561.met_dependencies = [StarDep(name='arg389_1', mode=None)]
op561.outputs = [
    buf561: ExternKernelOut
    buf561.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf561.users = [NodeUser(node=SchedulerNode(name='op562'), can_inplace=True, is_weak=False)]
]
op561.node.kernel = extern_kernels.mm


op562_op563_op564_op566: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op562_op563_op564_op566.writes = 
    [   MemoryDep('buf562', c0, {c0: 501760}, None),
        MemoryDep('buf563', c0, {c0: 1568}, None),
        MemoryDep('buf564', c0, {c0: 1568}, None),
        MemoryDep('buf566', c0, {c0: 501760}, None)]
op562_op563_op564_op566.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 501760}, None),
        MemoryDep('buf543', c0, {c0: 501760}, None),
        MemoryDep('buf561', c0, {c0: 501760}, None)]
op562_op563_op564_op566.met_dependencies = 
    [   MemoryDep('arg378_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg390_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg391_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg392_1', c1, {c0: 1568, c1: 320}, None)]
op562_op563_op564_op566.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf562.users = [
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
    ]
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf563.users = [NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf564.users = [NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf566.users = [NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op562_op563_op564_op566.snodes[0] =
op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 501760}, None)]
op562.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 501760}, None),
        MemoryDep('buf543', c0, {c0: 501760}, None),
        MemoryDep('buf561', c0, {c0: 501760}, None)]
op562.met_dependencies = 
    [   MemoryDep('arg378_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg390_1', c1, {c0: 1568, c1: 320}, None)]
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf562.users = [
        NodeUser(node=SchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
    ]
]
op562.group.device = cuda:0
op562.group.iteration = (501760, 1)
op562.sizes = ([1568, 320], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op562_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf543', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg378_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf561', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg390_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf562', get_index_5, add_3, None)
        return store
op562_op563_op564_op566.snodes[1] =
op563: SchedulerNode(ComputedBuffer)
op563.writes = [MemoryDep('buf563', c0, {c0: 1568}, None)]
op563.unmet_dependencies = [MemoryDep('buf562', c0, {c0: 501760}, None)]
op563.met_dependencies = []
op563.outputs = [
    buf563: ComputedBuffer
    buf563.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf563.users = [NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op563.group.device = cuda:0
op563.group.iteration = (1568, 320)
op563.sizes = ([1568], [320])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op563_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf563', get_index_1, getitem)
        return store_reduction
op562_op563_op564_op566.snodes[2] =
op564: SchedulerNode(ComputedBuffer)
op564.writes = [MemoryDep('buf564', c0, {c0: 1568}, None)]
op564.unmet_dependencies = [MemoryDep('buf562', c0, {c0: 501760}, None)]
op564.met_dependencies = []
op564.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf564.users = [NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op564.group.device = cuda:0
op564.group.iteration = (1568, 320)
op564.sizes = ([1568], [320])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf564_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op564_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf564', get_index_1, getitem_1)
        return store_reduction
op562_op563_op564_op566.snodes[3] =
op566: SchedulerNode(ComputedBuffer)
op566.writes = [MemoryDep('buf566', c0, {c0: 501760}, None)]
op566.unmet_dependencies = 
    [   MemoryDep('buf562', c0, {c0: 501760}, None),
        MemoryDep('buf563', c0, {c0: 1568}, None),
        MemoryDep('buf564', c0, {c0: 1568}, None)]
op566.met_dependencies = 
    [   MemoryDep('arg391_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg392_1', c1, {c0: 1568, c1: 320}, None)]
op566.outputs = [
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf566.users = [NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op566.group.device = cuda:0
op566.group.iteration = (501760, 1)
op566.sizes = ([1568, 320], [])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf563_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf564_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf566_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op566_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf563', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf564', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg391_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg392_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf566', get_index_5, add_1, None)
        return store


op567: ExternKernelSchedulerNode(ExternKernelOut)
op567.writes = [StarDep(name='buf567', mode=None)]
op567.unmet_dependencies = [StarDep(name='buf566', mode=None)]
op567.met_dependencies = [StarDep(name='arg393_1', mode=None)]
op567.outputs = [
    buf567: ExternKernelOut
    buf567.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf567.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=True, is_weak=False)]
]
op567.node.kernel = extern_kernels.mm


op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 2007040}, None)]
op568.unmet_dependencies = [MemoryDep('buf567', c0, {c0: 2007040}, None)]
op568.met_dependencies = [MemoryDep('arg394_1', c1, {c0: 1568, c1: 1280}, None)]
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf568.users = [NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False)]
]
op568.group.device = cuda:0
op568.group.iteration = (2007040, 1)
op568.sizes = ([1568, 1280], [])
buf567_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op568_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf567', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg394_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf567', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg394_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf568', get_index_4, mul_2, None)
        return store


op569: ExternKernelSchedulerNode(ExternKernelOut)
op569.writes = [StarDep(name='buf569', mode=None)]
op569.unmet_dependencies = [StarDep(name='buf568', mode=None)]
op569.met_dependencies = [StarDep(name='arg395_1', mode=None)]
op569.outputs = [
    buf569: ExternKernelOut
    buf569.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf569.users = [
        NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op571'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False),
    ]
]
op569.node.kernel = extern_kernels.mm


op570_op571_op573: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op570_op571_op573.writes = 
    [   MemoryDep('buf570', c0, {c0: 1568}, None),
        MemoryDep('buf571', c0, {c0: 1568}, None),
        MemoryDep('buf573', c0, {c0: 501760}, None)]
op570_op571_op573.unmet_dependencies = 
    [   MemoryDep('buf562', c0, {c0: 501760}, None),
        MemoryDep('buf569', c0, {c0: 501760}, None)]
op570_op571_op573.met_dependencies = 
    [   MemoryDep('arg396_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg397_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg398_1', c1, {c0: 1568, c1: 320}, None)]
op570_op571_op573.outputs = [
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf570.users = [NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False)]
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf571.users = [NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False)]
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf573.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False),
    ]
]
op570_op571_op573.snodes[0] =
op570: SchedulerNode(ComputedBuffer)
op570.writes = [MemoryDep('buf570', c0, {c0: 1568}, None)]
op570.unmet_dependencies = 
    [   MemoryDep('buf562', c0, {c0: 501760}, None),
        MemoryDep('buf569', c0, {c0: 501760}, None)]
op570.met_dependencies = [MemoryDep('arg396_1', c1, {c0: 1568, c1: 320}, None)]
op570.outputs = [
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf570.users = [NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False)]
]
op570.group.device = cuda:0
op570.group.iteration = (1568, 320)
op570.sizes = ([1568], [320])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op570_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf569', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg396_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf570', get_index_3, getitem)
        return store_reduction
op570_op571_op573.snodes[1] =
op571: SchedulerNode(ComputedBuffer)
op571.writes = [MemoryDep('buf571', c0, {c0: 1568}, None)]
op571.unmet_dependencies = 
    [   MemoryDep('buf562', c0, {c0: 501760}, None),
        MemoryDep('buf569', c0, {c0: 501760}, None)]
op571.met_dependencies = [MemoryDep('arg396_1', c1, {c0: 1568, c1: 320}, None)]
op571.outputs = [
    buf571: ComputedBuffer
    buf571.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf571.users = [NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False)]
]
op571.group.device = cuda:0
op571.group.iteration = (1568, 320)
op571.sizes = ([1568], [320])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op571_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf569', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg396_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf571', get_index_3, getitem_1)
        return store_reduction
op570_op571_op573.snodes[2] =
op573: SchedulerNode(ComputedBuffer)
op573.writes = [MemoryDep('buf573', c0, {c0: 501760}, None)]
op573.unmet_dependencies = 
    [   MemoryDep('buf562', c0, {c0: 501760}, None),
        MemoryDep('buf569', c0, {c0: 501760}, None),
        MemoryDep('buf570', c0, {c0: 1568}, None),
        MemoryDep('buf571', c0, {c0: 1568}, None)]
op573.met_dependencies = 
    [   MemoryDep('arg396_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg397_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg398_1', c1, {c0: 1568, c1: 320}, None)]
op573.outputs = [
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf573.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False),
    ]
]
op573.group.device = cuda:0
op573.group.iteration = (501760, 1)
op573.sizes = ([1568, 320], [])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf571_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf573_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op573_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf569', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg396_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf570', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf571', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg397_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg398_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf573', get_index_7, add_3, None)
        return store


op574: SchedulerNode(ComputedBuffer)
op574.writes = [MemoryDep('buf574', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op574.unmet_dependencies = []
op574.met_dependencies = [MemoryDep('arg401_1', c0, {c0: 409600}, None)]
op574.outputs = [
    buf574: ComputedBuffer
    buf574.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf574.users = [NodeUser(node=ExternKernelSchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op574.group.device = cuda:0
op574.group.iteration = (409600, 1)
op574.sizes = ([320, 320, 4], [])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf574_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op574_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg401_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf574', get_index_1, load, None)
        return store


op575: ExternKernelSchedulerNode(ExternKernelAlloc)
op575.writes = [StarDep(name='buf575', mode=None)]
op575.unmet_dependencies = [StarDep(name='buf573', mode=None), StarDep(name='buf574', mode=None)]
op575.met_dependencies = []
op575.outputs = [
    buf575: ExternKernelAlloc
    buf575.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf575.users = [
        NodeUser(node=SchedulerNode(name='op576'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False),
    ]
]
op575.node.kernel = extern_kernels.convolution


op576_op577_op579: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op576_op577_op579.writes = 
    [   MemoryDep('buf576', c0, {c0: 392}, None),
        MemoryDep('buf577', c0, {c0: 392}, None),
        MemoryDep('buf579', c0, {c0: 125440}, None)]
op576_op577_op579.unmet_dependencies = [MemoryDep('buf575', c0, {c0: 125440}, None)]
op576_op577_op579.met_dependencies = 
    [   MemoryDep('arg402_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg403_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg404_1', c1, {c0: 392, c1: 320}, None)]
op576_op577_op579.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf576.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False)]
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf577.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False)]
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op576_op577_op579.snodes[0] =
op576: SchedulerNode(ComputedBuffer)
op576.writes = [MemoryDep('buf576', c0, {c0: 392}, None)]
op576.unmet_dependencies = [MemoryDep('buf575', c0, {c0: 125440}, None)]
op576.met_dependencies = [MemoryDep('arg402_1', c1, {c0: 392, c1: 320}, None)]
op576.outputs = [
    buf576: ComputedBuffer
    buf576.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf576.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False)]
]
op576.group.device = cuda:0
op576.group.iteration = (392, 320)
op576.sizes = ([392], [320])
buf575_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op576_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg402_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf576', get_index_2, getitem)
        return store_reduction
op576_op577_op579.snodes[1] =
op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 392}, None)]
op577.unmet_dependencies = [MemoryDep('buf575', c0, {c0: 125440}, None)]
op577.met_dependencies = [MemoryDep('arg402_1', c1, {c0: 392, c1: 320}, None)]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf577.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=False, is_weak=False)]
]
op577.group.device = cuda:0
op577.group.iteration = (392, 320)
op577.sizes = ([392], [320])
buf575_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op577_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg402_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf577', get_index_2, getitem_1)
        return store_reduction
op576_op577_op579.snodes[2] =
op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', c0, {c0: 125440}, None)]
op579.unmet_dependencies = 
    [   MemoryDep('buf575', c0, {c0: 125440}, None),
        MemoryDep('buf576', c0, {c0: 392}, None),
        MemoryDep('buf577', c0, {c0: 392}, None)]
op579.met_dependencies = 
    [   MemoryDep('arg402_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg403_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg404_1', c1, {c0: 392, c1: 320}, None)]
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op579.group.device = cuda:0
op579.group.iteration = (125440, 1)
op579.sizes = ([392, 320], [])
buf575_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf576_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf577_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op579_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf575', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg402_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf576', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf577', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg403_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg404_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf579', get_index_6, add_2, None)
        return store


op580: ExternKernelSchedulerNode(ExternKernelOut)
op580.writes = [StarDep(name='buf580', mode=None)]
op580.unmet_dependencies = [StarDep(name='buf579', mode=None)]
op580.met_dependencies = [StarDep(name='arg405_1', mode=None), StarDep(name='arg406_1', mode=None)]
op580.outputs = [
    buf580: ExternKernelOut
    buf580.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf580.users = [NodeUser(node=ExternKernelSchedulerNode(name='op582'), can_inplace=False, is_weak=False)]
]
op580.node.kernel = extern_kernels.addmm


op581: ExternKernelSchedulerNode(ExternKernelOut)
op581.writes = [StarDep(name='buf581', mode=None)]
op581.unmet_dependencies = [StarDep(name='buf573', mode=None)]
op581.met_dependencies = [StarDep(name='arg399_1', mode=None), StarDep(name='arg400_1', mode=None)]
op581.outputs = [
    buf581: ExternKernelOut
    buf581.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf581.users = [NodeUser(node=ExternKernelSchedulerNode(name='op582'), can_inplace=False, is_weak=False)]
]
op581.node.kernel = extern_kernels.addmm


op582: ExternKernelSchedulerNode(FallbackKernel)
op582.writes = [StarDep(name='buf582', mode=None)]
op582.unmet_dependencies = [StarDep(name='buf580', mode=None), StarDep(name='buf581', mode=None)]
op582.met_dependencies = []
op582.outputs = [
    buf582: FallbackKernel
    buf582.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf582.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op586'), can_inplace=False, is_weak=False),
    ]
]
op582.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op583: ExternKernelSchedulerNode(MultiOutput)
op583.writes = [StarDep(name='buf583', mode=None)]
op583.unmet_dependencies = [StarDep(name='buf582', mode=None)]
op583.met_dependencies = []
op583.outputs = [
    buf583: MultiOutput
    buf583.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf583.users = [NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op583.node.kernel = None


op587: ExternKernelSchedulerNode(ExternKernelOut)
op587.writes = [StarDep(name='buf587', mode=None)]
op587.unmet_dependencies = [StarDep(name='buf583', mode=None)]
op587.met_dependencies = [StarDep(name='arg407_1', mode=None)]
op587.outputs = [
    buf587: ExternKernelOut
    buf587.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf587.users = [NodeUser(node=SchedulerNode(name='op588'), can_inplace=True, is_weak=False)]
]
op587.node.kernel = extern_kernels.mm


op588_op589_op590_op592: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op588_op589_op590_op592.writes = 
    [   MemoryDep('buf588', c0, {c0: 501760}, None),
        MemoryDep('buf589', c0, {c0: 1568}, None),
        MemoryDep('buf590', c0, {c0: 1568}, None),
        MemoryDep('buf592', c0, {c0: 501760}, None)]
op588_op589_op590_op592.unmet_dependencies = 
    [   MemoryDep('buf562', c0, {c0: 501760}, None),
        MemoryDep('buf569', c0, {c0: 501760}, None),
        MemoryDep('buf587', c0, {c0: 501760}, None)]
op588_op589_op590_op592.met_dependencies = 
    [   MemoryDep('arg396_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg408_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg409_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg410_1', c1, {c0: 1568, c1: 320}, None)]
op588_op589_op590_op592.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf588.users = [
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False),
    ]
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf589.users = [NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf590.users = [NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf592.users = [NodeUser(node=ExternKernelSchedulerNode(name='op593'), can_inplace=False, is_weak=False)]
]
op588_op589_op590_op592.snodes[0] =
op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', c0, {c0: 501760}, None)]
op588.unmet_dependencies = 
    [   MemoryDep('buf562', c0, {c0: 501760}, None),
        MemoryDep('buf569', c0, {c0: 501760}, None),
        MemoryDep('buf587', c0, {c0: 501760}, None)]
op588.met_dependencies = 
    [   MemoryDep('arg396_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg408_1', c1, {c0: 1568, c1: 320}, None)]
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf588.users = [
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False),
    ]
]
op588.group.device = cuda:0
op588.group.iteration = (501760, 1)
op588.sizes = ([1568, 320], [])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf569_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op588_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf562', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf569', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg396_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf587', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg408_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf588', get_index_5, add_3, None)
        return store
op588_op589_op590_op592.snodes[1] =
op589: SchedulerNode(ComputedBuffer)
op589.writes = [MemoryDep('buf589', c0, {c0: 1568}, None)]
op589.unmet_dependencies = [MemoryDep('buf588', c0, {c0: 501760}, None)]
op589.met_dependencies = []
op589.outputs = [
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf589.users = [NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
]
op589.group.device = cuda:0
op589.group.iteration = (1568, 320)
op589.sizes = ([1568], [320])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf589_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op589_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf589', get_index_1, getitem)
        return store_reduction
op588_op589_op590_op592.snodes[2] =
op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 1568}, None)]
op590.unmet_dependencies = [MemoryDep('buf588', c0, {c0: 501760}, None)]
op590.met_dependencies = []
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf590.users = [NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False)]
]
op590.group.device = cuda:0
op590.group.iteration = (1568, 320)
op590.sizes = ([1568], [320])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op590_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf590', get_index_1, getitem_1)
        return store_reduction
op588_op589_op590_op592.snodes[3] =
op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 501760}, None)]
op592.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 501760}, None),
        MemoryDep('buf589', c0, {c0: 1568}, None),
        MemoryDep('buf590', c0, {c0: 1568}, None)]
op592.met_dependencies = 
    [   MemoryDep('arg409_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg410_1', c1, {c0: 1568, c1: 320}, None)]
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf592.users = [NodeUser(node=ExternKernelSchedulerNode(name='op593'), can_inplace=False, is_weak=False)]
]
op592.group.device = cuda:0
op592.group.iteration = (501760, 1)
op592.sizes = ([1568, 320], [])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf589_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg409_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op592_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf589', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf590', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg409_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg410_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf592', get_index_5, add_1, None)
        return store


op593: ExternKernelSchedulerNode(ExternKernelOut)
op593.writes = [StarDep(name='buf593', mode=None)]
op593.unmet_dependencies = [StarDep(name='buf592', mode=None)]
op593.met_dependencies = [StarDep(name='arg411_1', mode=None)]
op593.outputs = [
    buf593: ExternKernelOut
    buf593.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf593.users = [NodeUser(node=SchedulerNode(name='op594'), can_inplace=True, is_weak=False)]
]
op593.node.kernel = extern_kernels.mm


op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', c0, {c0: 2007040}, None)]
op594.unmet_dependencies = [MemoryDep('buf593', c0, {c0: 2007040}, None)]
op594.met_dependencies = [MemoryDep('arg412_1', c1, {c0: 1568, c1: 1280}, None)]
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf594.users = [NodeUser(node=ExternKernelSchedulerNode(name='op595'), can_inplace=False, is_weak=False)]
]
op594.group.device = cuda:0
op594.group.iteration = (2007040, 1)
op594.sizes = ([1568, 1280], [])
buf593_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op594_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg412_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf593', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg412_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf594', get_index_4, mul_2, None)
        return store


op595: ExternKernelSchedulerNode(ExternKernelOut)
op595.writes = [StarDep(name='buf595', mode=None)]
op595.unmet_dependencies = [StarDep(name='buf594', mode=None)]
op595.met_dependencies = [StarDep(name='arg413_1', mode=None)]
op595.outputs = [
    buf595: ExternKernelOut
    buf595.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf595.users = [
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False),
    ]
]
op595.node.kernel = extern_kernels.mm


op596_op597_op599: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op596_op597_op599.writes = 
    [   MemoryDep('buf596', c0, {c0: 1568}, None),
        MemoryDep('buf597', c0, {c0: 1568}, None),
        MemoryDep('buf599', c0, {c0: 501760}, None)]
op596_op597_op599.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 501760}, None),
        MemoryDep('buf595', c0, {c0: 501760}, None)]
op596_op597_op599.met_dependencies = 
    [   MemoryDep('arg414_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg415_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg416_1', c1, {c0: 1568, c1: 320}, None)]
op596_op597_op599.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf596.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
    buf597: ComputedBuffer
    buf597.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf597.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf599.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op601'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False),
    ]
]
op596_op597_op599.snodes[0] =
op596: SchedulerNode(ComputedBuffer)
op596.writes = [MemoryDep('buf596', c0, {c0: 1568}, None)]
op596.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 501760}, None),
        MemoryDep('buf595', c0, {c0: 501760}, None)]
op596.met_dependencies = [MemoryDep('arg414_1', c1, {c0: 1568, c1: 320}, None)]
op596.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf596.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op596.group.device = cuda:0
op596.group.iteration = (1568, 320)
op596.sizes = ([1568], [320])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op596_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf595', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg414_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf596', get_index_3, getitem)
        return store_reduction
op596_op597_op599.snodes[1] =
op597: SchedulerNode(ComputedBuffer)
op597.writes = [MemoryDep('buf597', c0, {c0: 1568}, None)]
op597.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 501760}, None),
        MemoryDep('buf595', c0, {c0: 501760}, None)]
op597.met_dependencies = [MemoryDep('arg414_1', c1, {c0: 1568, c1: 320}, None)]
op597.outputs = [
    buf597: ComputedBuffer
    buf597.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf597.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op597.group.device = cuda:0
op597.group.iteration = (1568, 320)
op597.sizes = ([1568], [320])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf597_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op597_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf595', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg414_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf597', get_index_3, getitem_1)
        return store_reduction
op596_op597_op599.snodes[2] =
op599: SchedulerNode(ComputedBuffer)
op599.writes = [MemoryDep('buf599', c0, {c0: 501760}, None)]
op599.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 501760}, None),
        MemoryDep('buf595', c0, {c0: 501760}, None),
        MemoryDep('buf596', c0, {c0: 1568}, None),
        MemoryDep('buf597', c0, {c0: 1568}, None)]
op599.met_dependencies = 
    [   MemoryDep('arg414_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg415_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg416_1', c1, {c0: 1568, c1: 320}, None)]
op599.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf599.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op601'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False),
    ]
]
op599.group.device = cuda:0
op599.group.iteration = (501760, 1)
op599.sizes = ([1568, 320], [])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf597_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg415_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op599_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf595', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg414_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf596', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf597', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg415_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg416_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf599', get_index_7, add_3, None)
        return store


op600: SchedulerNode(ComputedBuffer)
op600.writes = [MemoryDep('buf600', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op600.unmet_dependencies = []
op600.met_dependencies = [MemoryDep('arg419_1', c0, {c0: 409600}, None)]
op600.outputs = [
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf600.users = [NodeUser(node=ExternKernelSchedulerNode(name='op601'), can_inplace=False, is_weak=False)]
]
op600.group.device = cuda:0
op600.group.iteration = (409600, 1)
op600.sizes = ([320, 320, 4], [])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op600_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg419_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf600', get_index_1, load, None)
        return store


op601: ExternKernelSchedulerNode(ExternKernelAlloc)
op601.writes = [StarDep(name='buf601', mode=None)]
op601.unmet_dependencies = [StarDep(name='buf599', mode=None), StarDep(name='buf600', mode=None)]
op601.met_dependencies = []
op601.outputs = [
    buf601: ExternKernelAlloc
    buf601.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf601.users = [
        NodeUser(node=SchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=True, is_weak=False),
    ]
]
op601.node.kernel = extern_kernels.convolution


op602_op603_op605: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op602_op603_op605.writes = 
    [   MemoryDep('buf602', c0, {c0: 392}, None),
        MemoryDep('buf603', c0, {c0: 392}, None),
        MemoryDep('buf605', c0, {c0: 125440}, None)]
op602_op603_op605.unmet_dependencies = [MemoryDep('buf601', c0, {c0: 125440}, None)]
op602_op603_op605.met_dependencies = 
    [   MemoryDep('arg420_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg421_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg422_1', c1, {c0: 392, c1: 320}, None)]
op602_op603_op605.outputs = [
    buf602: ComputedBuffer
    buf602.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf602.users = [NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf603.users = [NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf605.users = [NodeUser(node=ExternKernelSchedulerNode(name='op606'), can_inplace=False, is_weak=False)]
]
op602_op603_op605.snodes[0] =
op602: SchedulerNode(ComputedBuffer)
op602.writes = [MemoryDep('buf602', c0, {c0: 392}, None)]
op602.unmet_dependencies = [MemoryDep('buf601', c0, {c0: 125440}, None)]
op602.met_dependencies = [MemoryDep('arg420_1', c1, {c0: 392, c1: 320}, None)]
op602.outputs = [
    buf602: ComputedBuffer
    buf602.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf602.users = [NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
]
op602.group.device = cuda:0
op602.group.iteration = (392, 320)
op602.sizes = ([392], [320])
buf601_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op602_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg420_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf602', get_index_2, getitem)
        return store_reduction
op602_op603_op605.snodes[1] =
op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 392}, None)]
op603.unmet_dependencies = [MemoryDep('buf601', c0, {c0: 125440}, None)]
op603.met_dependencies = [MemoryDep('arg420_1', c1, {c0: 392, c1: 320}, None)]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf603.users = [NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False)]
]
op603.group.device = cuda:0
op603.group.iteration = (392, 320)
op603.sizes = ([392], [320])
buf601_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op603_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg420_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf603', get_index_2, getitem_1)
        return store_reduction
op602_op603_op605.snodes[2] =
op605: SchedulerNode(ComputedBuffer)
op605.writes = [MemoryDep('buf605', c0, {c0: 125440}, None)]
op605.unmet_dependencies = 
    [   MemoryDep('buf601', c0, {c0: 125440}, None),
        MemoryDep('buf602', c0, {c0: 392}, None),
        MemoryDep('buf603', c0, {c0: 392}, None)]
op605.met_dependencies = 
    [   MemoryDep('arg420_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg421_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg422_1', c1, {c0: 392, c1: 320}, None)]
op605.outputs = [
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf605.users = [NodeUser(node=ExternKernelSchedulerNode(name='op606'), can_inplace=False, is_weak=False)]
]
op605.group.device = cuda:0
op605.group.iteration = (125440, 1)
op605.sizes = ([392, 320], [])
buf601_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg421_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op605_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf601', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg420_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf602', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf603', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg421_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg422_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf605', get_index_6, add_2, None)
        return store


op606: ExternKernelSchedulerNode(ExternKernelOut)
op606.writes = [StarDep(name='buf606', mode=None)]
op606.unmet_dependencies = [StarDep(name='buf605', mode=None)]
op606.met_dependencies = [StarDep(name='arg423_1', mode=None), StarDep(name='arg424_1', mode=None)]
op606.outputs = [
    buf606: ExternKernelOut
    buf606.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf606.users = [NodeUser(node=ExternKernelSchedulerNode(name='op608'), can_inplace=False, is_weak=False)]
]
op606.node.kernel = extern_kernels.addmm


op607: ExternKernelSchedulerNode(ExternKernelOut)
op607.writes = [StarDep(name='buf607', mode=None)]
op607.unmet_dependencies = [StarDep(name='buf599', mode=None)]
op607.met_dependencies = [StarDep(name='arg417_1', mode=None), StarDep(name='arg418_1', mode=None)]
op607.outputs = [
    buf607: ExternKernelOut
    buf607.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf607.users = [NodeUser(node=ExternKernelSchedulerNode(name='op608'), can_inplace=False, is_weak=False)]
]
op607.node.kernel = extern_kernels.addmm


op608: ExternKernelSchedulerNode(FallbackKernel)
op608.writes = [StarDep(name='buf608', mode=None)]
op608.unmet_dependencies = [StarDep(name='buf606', mode=None), StarDep(name='buf607', mode=None)]
op608.met_dependencies = []
op608.outputs = [
    buf608: FallbackKernel
    buf608.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf608.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op610'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op612'), can_inplace=False, is_weak=False),
    ]
]
op608.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op609: ExternKernelSchedulerNode(MultiOutput)
op609.writes = [StarDep(name='buf609', mode=None)]
op609.unmet_dependencies = [StarDep(name='buf608', mode=None)]
op609.met_dependencies = []
op609.outputs = [
    buf609: MultiOutput
    buf609.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf609.users = [NodeUser(node=ExternKernelSchedulerNode(name='op613'), can_inplace=False, is_weak=False)]
]
op609.node.kernel = None


op613: ExternKernelSchedulerNode(ExternKernelOut)
op613.writes = [StarDep(name='buf613', mode=None)]
op613.unmet_dependencies = [StarDep(name='buf609', mode=None)]
op613.met_dependencies = [StarDep(name='arg425_1', mode=None)]
op613.outputs = [
    buf613: ExternKernelOut
    buf613.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf613.users = [NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False)]
]
op613.node.kernel = extern_kernels.mm


op614_op615_op616_op618: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op614_op615_op616_op618.writes = 
    [   MemoryDep('buf614', c0, {c0: 501760}, None),
        MemoryDep('buf615', c0, {c0: 1568}, None),
        MemoryDep('buf616', c0, {c0: 1568}, None),
        MemoryDep('buf618', c0, {c0: 501760}, None)]
op614_op615_op616_op618.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 501760}, None),
        MemoryDep('buf595', c0, {c0: 501760}, None),
        MemoryDep('buf613', c0, {c0: 501760}, None)]
op614_op615_op616_op618.met_dependencies = 
    [   MemoryDep('arg414_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg426_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg427_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg428_1', c1, {c0: 1568, c1: 320}, None)]
op614_op615_op616_op618.outputs = [
    buf614: ComputedBuffer
    buf614.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf614.users = [
        NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op616'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op617'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op624'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op625'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=True, is_weak=False),
    ]
    buf615: ComputedBuffer
    buf615.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf615.users = [NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False)]
    buf616: ComputedBuffer
    buf616.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf616.users = [NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False)]
    buf618: ComputedBuffer
    buf618.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf618.users = [NodeUser(node=ExternKernelSchedulerNode(name='op619'), can_inplace=False, is_weak=False)]
]
op614_op615_op616_op618.snodes[0] =
op614: SchedulerNode(ComputedBuffer)
op614.writes = [MemoryDep('buf614', c0, {c0: 501760}, None)]
op614.unmet_dependencies = 
    [   MemoryDep('buf588', c0, {c0: 501760}, None),
        MemoryDep('buf595', c0, {c0: 501760}, None),
        MemoryDep('buf613', c0, {c0: 501760}, None)]
op614.met_dependencies = 
    [   MemoryDep('arg414_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg426_1', c1, {c0: 1568, c1: 320}, None)]
op614.outputs = [
    buf614: ComputedBuffer
    buf614.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf614.users = [
        NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op616'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op617'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op618'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op624'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op625'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=True, is_weak=False),
    ]
]
op614.group.device = cuda:0
op614.group.iteration = (501760, 1)
op614.sizes = ([1568, 320], [])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf613_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op614_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf595', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg414_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf613', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg426_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf614', get_index_5, add_3, None)
        return store
op614_op615_op616_op618.snodes[1] =
op615: SchedulerNode(ComputedBuffer)
op615.writes = [MemoryDep('buf615', c0, {c0: 1568}, None)]
op615.unmet_dependencies = [MemoryDep('buf614', c0, {c0: 501760}, None)]
op615.met_dependencies = []
op615.outputs = [
    buf615: ComputedBuffer
    buf615.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf615.users = [NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False)]
]
op615.group.device = cuda:0
op615.group.iteration = (1568, 320)
op615.sizes = ([1568], [320])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf615_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op615_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf615', get_index_1, getitem)
        return store_reduction
op614_op615_op616_op618.snodes[2] =
op616: SchedulerNode(ComputedBuffer)
op616.writes = [MemoryDep('buf616', c0, {c0: 1568}, None)]
op616.unmet_dependencies = [MemoryDep('buf614', c0, {c0: 501760}, None)]
op616.met_dependencies = []
op616.outputs = [
    buf616: ComputedBuffer
    buf616.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf616.users = [NodeUser(node=SchedulerNode(name='op618'), can_inplace=False, is_weak=False)]
]
op616.group.device = cuda:0
op616.group.iteration = (1568, 320)
op616.sizes = ([1568], [320])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf616_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op616_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf616', get_index_1, getitem_1)
        return store_reduction
op614_op615_op616_op618.snodes[3] =
op618: SchedulerNode(ComputedBuffer)
op618.writes = [MemoryDep('buf618', c0, {c0: 501760}, None)]
op618.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 501760}, None),
        MemoryDep('buf615', c0, {c0: 1568}, None),
        MemoryDep('buf616', c0, {c0: 1568}, None)]
op618.met_dependencies = 
    [   MemoryDep('arg427_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg428_1', c1, {c0: 1568, c1: 320}, None)]
op618.outputs = [
    buf618: ComputedBuffer
    buf618.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf618.users = [NodeUser(node=ExternKernelSchedulerNode(name='op619'), can_inplace=False, is_weak=False)]
]
op618.group.device = cuda:0
op618.group.iteration = (501760, 1)
op618.sizes = ([1568, 320], [])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf615_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf616_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg427_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op618_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf615', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf616', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg427_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg428_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf618', get_index_5, add_1, None)
        return store


op619: ExternKernelSchedulerNode(ExternKernelOut)
op619.writes = [StarDep(name='buf619', mode=None)]
op619.unmet_dependencies = [StarDep(name='buf618', mode=None)]
op619.met_dependencies = [StarDep(name='arg429_1', mode=None)]
op619.outputs = [
    buf619: ExternKernelOut
    buf619.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf619.users = [NodeUser(node=SchedulerNode(name='op620'), can_inplace=True, is_weak=False)]
]
op619.node.kernel = extern_kernels.mm


op620: SchedulerNode(ComputedBuffer)
op620.writes = [MemoryDep('buf620', c0, {c0: 2007040}, None)]
op620.unmet_dependencies = [MemoryDep('buf619', c0, {c0: 2007040}, None)]
op620.met_dependencies = [MemoryDep('arg430_1', c1, {c0: 1568, c1: 1280}, None)]
op620.outputs = [
    buf620: ComputedBuffer
    buf620.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf620.users = [NodeUser(node=ExternKernelSchedulerNode(name='op621'), can_inplace=False, is_weak=False)]
]
op620.group.device = cuda:0
op620.group.iteration = (2007040, 1)
op620.sizes = ([1568, 1280], [])
buf619_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf620_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op620_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf619', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg430_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf619', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg430_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf620', get_index_4, mul_2, None)
        return store


op621: ExternKernelSchedulerNode(ExternKernelOut)
op621.writes = [StarDep(name='buf621', mode=None)]
op621.unmet_dependencies = [StarDep(name='buf620', mode=None)]
op621.met_dependencies = [StarDep(name='arg431_1', mode=None)]
op621.outputs = [
    buf621: ExternKernelOut
    buf621.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf621.users = [
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op624'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op625'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=True, is_weak=False),
    ]
]
op621.node.kernel = extern_kernels.mm


op622_op623_op625: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op622_op623_op625.writes = 
    [   MemoryDep('buf622', c0, {c0: 1568}, None),
        MemoryDep('buf623', c0, {c0: 1568}, None),
        MemoryDep('buf625', c0, {c0: 501760}, None)]
op622_op623_op625.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 501760}, None),
        MemoryDep('buf621', c0, {c0: 501760}, None)]
op622_op623_op625.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg433_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg434_1', c1, {c0: 1568, c1: 320}, None)]
op622_op623_op625.outputs = [
    buf622: ComputedBuffer
    buf622.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf622.users = [NodeUser(node=SchedulerNode(name='op625'), can_inplace=False, is_weak=False)]
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf623.users = [NodeUser(node=SchedulerNode(name='op625'), can_inplace=False, is_weak=False)]
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf625.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
]
op622_op623_op625.snodes[0] =
op622: SchedulerNode(ComputedBuffer)
op622.writes = [MemoryDep('buf622', c0, {c0: 1568}, None)]
op622.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 501760}, None),
        MemoryDep('buf621', c0, {c0: 501760}, None)]
op622.met_dependencies = [MemoryDep('arg432_1', c1, {c0: 1568, c1: 320}, None)]
op622.outputs = [
    buf622: ComputedBuffer
    buf622.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf622.users = [NodeUser(node=SchedulerNode(name='op625'), can_inplace=False, is_weak=False)]
]
op622.group.device = cuda:0
op622.group.iteration = (1568, 320)
op622.sizes = ([1568], [320])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf622_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op622_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf621', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg432_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf622', get_index_3, getitem)
        return store_reduction
op622_op623_op625.snodes[1] =
op623: SchedulerNode(ComputedBuffer)
op623.writes = [MemoryDep('buf623', c0, {c0: 1568}, None)]
op623.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 501760}, None),
        MemoryDep('buf621', c0, {c0: 501760}, None)]
op623.met_dependencies = [MemoryDep('arg432_1', c1, {c0: 1568, c1: 320}, None)]
op623.outputs = [
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf623.users = [NodeUser(node=SchedulerNode(name='op625'), can_inplace=False, is_weak=False)]
]
op623.group.device = cuda:0
op623.group.iteration = (1568, 320)
op623.sizes = ([1568], [320])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf623_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op623_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf621', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg432_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf623', get_index_3, getitem_1)
        return store_reduction
op622_op623_op625.snodes[2] =
op625: SchedulerNode(ComputedBuffer)
op625.writes = [MemoryDep('buf625', c0, {c0: 501760}, None)]
op625.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 501760}, None),
        MemoryDep('buf621', c0, {c0: 501760}, None),
        MemoryDep('buf622', c0, {c0: 1568}, None),
        MemoryDep('buf623', c0, {c0: 1568}, None)]
op625.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg433_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg434_1', c1, {c0: 1568, c1: 320}, None)]
op625.outputs = [
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf625.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False),
    ]
]
op625.group.device = cuda:0
op625.group.iteration = (501760, 1)
op625.sizes = ([1568, 320], [])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf622_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf623_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf625_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op625_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf621', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg432_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf622', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf623', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg433_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg434_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf625', get_index_7, add_3, None)
        return store


op626: SchedulerNode(ComputedBuffer)
op626.writes = [MemoryDep('buf626', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op626.unmet_dependencies = []
op626.met_dependencies = [MemoryDep('arg437_1', c0, {c0: 409600}, None)]
op626.outputs = [
    buf626: ComputedBuffer
    buf626.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf626.users = [NodeUser(node=ExternKernelSchedulerNode(name='op627'), can_inplace=False, is_weak=False)]
]
op626.group.device = cuda:0
op626.group.iteration = (409600, 1)
op626.sizes = ([320, 320, 4], [])
arg437_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op626_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg437_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf626', get_index_1, load, None)
        return store


op627: ExternKernelSchedulerNode(ExternKernelAlloc)
op627.writes = [StarDep(name='buf627', mode=None)]
op627.unmet_dependencies = [StarDep(name='buf625', mode=None), StarDep(name='buf626', mode=None)]
op627.met_dependencies = []
op627.outputs = [
    buf627: ExternKernelAlloc
    buf627.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf627.users = [
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op631'), can_inplace=True, is_weak=False),
    ]
]
op627.node.kernel = extern_kernels.convolution


op628_op629_op631: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op628_op629_op631.writes = 
    [   MemoryDep('buf628', c0, {c0: 392}, None),
        MemoryDep('buf629', c0, {c0: 392}, None),
        MemoryDep('buf631', c0, {c0: 125440}, None)]
op628_op629_op631.unmet_dependencies = [MemoryDep('buf627', c0, {c0: 125440}, None)]
op628_op629_op631.met_dependencies = 
    [   MemoryDep('arg438_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg439_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg440_1', c1, {c0: 392, c1: 320}, None)]
op628_op629_op631.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf628.users = [NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf629.users = [NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf631.users = [NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False)]
]
op628_op629_op631.snodes[0] =
op628: SchedulerNode(ComputedBuffer)
op628.writes = [MemoryDep('buf628', c0, {c0: 392}, None)]
op628.unmet_dependencies = [MemoryDep('buf627', c0, {c0: 125440}, None)]
op628.met_dependencies = [MemoryDep('arg438_1', c1, {c0: 392, c1: 320}, None)]
op628.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf628.users = [NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
]
op628.group.device = cuda:0
op628.group.iteration = (392, 320)
op628.sizes = ([392], [320])
buf627_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op628_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg438_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf628', get_index_2, getitem)
        return store_reduction
op628_op629_op631.snodes[1] =
op629: SchedulerNode(ComputedBuffer)
op629.writes = [MemoryDep('buf629', c0, {c0: 392}, None)]
op629.unmet_dependencies = [MemoryDep('buf627', c0, {c0: 125440}, None)]
op629.met_dependencies = [MemoryDep('arg438_1', c1, {c0: 392, c1: 320}, None)]
op629.outputs = [
    buf629: ComputedBuffer
    buf629.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf629.users = [NodeUser(node=SchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
]
op629.group.device = cuda:0
op629.group.iteration = (392, 320)
op629.sizes = ([392], [320])
buf627_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf629_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op629_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg438_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf629', get_index_2, getitem_1)
        return store_reduction
op628_op629_op631.snodes[2] =
op631: SchedulerNode(ComputedBuffer)
op631.writes = [MemoryDep('buf631', c0, {c0: 125440}, None)]
op631.unmet_dependencies = 
    [   MemoryDep('buf627', c0, {c0: 125440}, None),
        MemoryDep('buf628', c0, {c0: 392}, None),
        MemoryDep('buf629', c0, {c0: 392}, None)]
op631.met_dependencies = 
    [   MemoryDep('arg438_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg439_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg440_1', c1, {c0: 392, c1: 320}, None)]
op631.outputs = [
    buf631: ComputedBuffer
    buf631.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf631.users = [NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False)]
]
op631.group.device = cuda:0
op631.group.iteration = (125440, 1)
op631.sizes = ([392, 320], [])
buf627_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf629_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg439_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf631_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op631_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf627', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg438_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf628', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf629', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg439_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg440_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf631', get_index_6, add_2, None)
        return store


op632: ExternKernelSchedulerNode(ExternKernelOut)
op632.writes = [StarDep(name='buf632', mode=None)]
op632.unmet_dependencies = [StarDep(name='buf631', mode=None)]
op632.met_dependencies = [StarDep(name='arg441_1', mode=None), StarDep(name='arg442_1', mode=None)]
op632.outputs = [
    buf632: ExternKernelOut
    buf632.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf632.users = [NodeUser(node=ExternKernelSchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op632.node.kernel = extern_kernels.addmm


op633: ExternKernelSchedulerNode(ExternKernelOut)
op633.writes = [StarDep(name='buf633', mode=None)]
op633.unmet_dependencies = [StarDep(name='buf625', mode=None)]
op633.met_dependencies = [StarDep(name='arg435_1', mode=None), StarDep(name='arg436_1', mode=None)]
op633.outputs = [
    buf633: ExternKernelOut
    buf633.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf633.users = [NodeUser(node=ExternKernelSchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op633.node.kernel = extern_kernels.addmm


op634: ExternKernelSchedulerNode(FallbackKernel)
op634.writes = [StarDep(name='buf634', mode=None)]
op634.unmet_dependencies = [StarDep(name='buf632', mode=None), StarDep(name='buf633', mode=None)]
op634.met_dependencies = []
op634.outputs = [
    buf634: FallbackKernel
    buf634.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf634.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op636'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op637'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op638'), can_inplace=False, is_weak=False),
    ]
]
op634.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op635: ExternKernelSchedulerNode(MultiOutput)
op635.writes = [StarDep(name='buf635', mode=None)]
op635.unmet_dependencies = [StarDep(name='buf634', mode=None)]
op635.met_dependencies = []
op635.outputs = [
    buf635: MultiOutput
    buf635.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf635.users = [NodeUser(node=ExternKernelSchedulerNode(name='op639'), can_inplace=False, is_weak=False)]
]
op635.node.kernel = None


op639: ExternKernelSchedulerNode(ExternKernelOut)
op639.writes = [StarDep(name='buf639', mode=None)]
op639.unmet_dependencies = [StarDep(name='buf635', mode=None)]
op639.met_dependencies = [StarDep(name='arg443_1', mode=None)]
op639.outputs = [
    buf639: ExternKernelOut
    buf639.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf639.users = [NodeUser(node=SchedulerNode(name='op640'), can_inplace=True, is_weak=False)]
]
op639.node.kernel = extern_kernels.mm


op640_op641_op642_op644: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op640_op641_op642_op644.writes = 
    [   MemoryDep('buf640', c0, {c0: 501760}, None),
        MemoryDep('buf641', c0, {c0: 1568}, None),
        MemoryDep('buf642', c0, {c0: 1568}, None),
        MemoryDep('buf644', c0, {c0: 501760}, None)]
op640_op641_op642_op644.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 501760}, None),
        MemoryDep('buf621', c0, {c0: 501760}, None),
        MemoryDep('buf639', c0, {c0: 501760}, None)]
op640_op641_op642_op644.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg444_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg445_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg446_1', c1, {c0: 1568, c1: 320}, None)]
op640_op641_op642_op644.outputs = [
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf640.users = [
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op644'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op649'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op666'), can_inplace=True, is_weak=False),
    ]
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf641.users = [NodeUser(node=SchedulerNode(name='op644'), can_inplace=False, is_weak=False)]
    buf642: ComputedBuffer
    buf642.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf642.users = [NodeUser(node=SchedulerNode(name='op644'), can_inplace=False, is_weak=False)]
    buf644: ComputedBuffer
    buf644.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf644.users = [NodeUser(node=ExternKernelSchedulerNode(name='op645'), can_inplace=False, is_weak=False)]
]
op640_op641_op642_op644.snodes[0] =
op640: SchedulerNode(ComputedBuffer)
op640.writes = [MemoryDep('buf640', c0, {c0: 501760}, None)]
op640.unmet_dependencies = 
    [   MemoryDep('buf614', c0, {c0: 501760}, None),
        MemoryDep('buf621', c0, {c0: 501760}, None),
        MemoryDep('buf639', c0, {c0: 501760}, None)]
op640.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg444_1', c1, {c0: 1568, c1: 320}, None)]
op640.outputs = [
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf640.users = [
        NodeUser(node=SchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op644'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op649'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op666'), can_inplace=True, is_weak=False),
    ]
]
op640.group.device = cuda:0
op640.group.iteration = (501760, 1)
op640.sizes = ([1568, 320], [])
buf614_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf639_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op640_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf614', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf621', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg432_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf639', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg444_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf640', get_index_5, add_3, None)
        return store
op640_op641_op642_op644.snodes[1] =
op641: SchedulerNode(ComputedBuffer)
op641.writes = [MemoryDep('buf641', c0, {c0: 1568}, None)]
op641.unmet_dependencies = [MemoryDep('buf640', c0, {c0: 501760}, None)]
op641.met_dependencies = []
op641.outputs = [
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf641.users = [NodeUser(node=SchedulerNode(name='op644'), can_inplace=False, is_weak=False)]
]
op641.group.device = cuda:0
op641.group.iteration = (1568, 320)
op641.sizes = ([1568], [320])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf641_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op641_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf641', get_index_1, getitem)
        return store_reduction
op640_op641_op642_op644.snodes[2] =
op642: SchedulerNode(ComputedBuffer)
op642.writes = [MemoryDep('buf642', c0, {c0: 1568}, None)]
op642.unmet_dependencies = [MemoryDep('buf640', c0, {c0: 501760}, None)]
op642.met_dependencies = []
op642.outputs = [
    buf642: ComputedBuffer
    buf642.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf642.users = [NodeUser(node=SchedulerNode(name='op644'), can_inplace=False, is_weak=False)]
]
op642.group.device = cuda:0
op642.group.iteration = (1568, 320)
op642.sizes = ([1568], [320])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf642_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op642_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf642', get_index_1, getitem_1)
        return store_reduction
op640_op641_op642_op644.snodes[3] =
op644: SchedulerNode(ComputedBuffer)
op644.writes = [MemoryDep('buf644', c0, {c0: 501760}, None)]
op644.unmet_dependencies = 
    [   MemoryDep('buf640', c0, {c0: 501760}, None),
        MemoryDep('buf641', c0, {c0: 1568}, None),
        MemoryDep('buf642', c0, {c0: 1568}, None)]
op644.met_dependencies = 
    [   MemoryDep('arg445_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg446_1', c1, {c0: 1568, c1: 320}, None)]
op644.outputs = [
    buf644: ComputedBuffer
    buf644.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf644.users = [NodeUser(node=ExternKernelSchedulerNode(name='op645'), can_inplace=False, is_weak=False)]
]
op644.group.device = cuda:0
op644.group.iteration = (501760, 1)
op644.sizes = ([1568, 320], [])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf641_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf642_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg445_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg446_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf644_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op644_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf641', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf642', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg445_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg446_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf644', get_index_5, add_1, None)
        return store


op645: ExternKernelSchedulerNode(ExternKernelOut)
op645.writes = [StarDep(name='buf645', mode=None)]
op645.unmet_dependencies = [StarDep(name='buf644', mode=None)]
op645.met_dependencies = [StarDep(name='arg447_1', mode=None)]
op645.outputs = [
    buf645: ExternKernelOut
    buf645.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf645.users = [NodeUser(node=SchedulerNode(name='op646'), can_inplace=True, is_weak=False)]
]
op645.node.kernel = extern_kernels.mm


op646: SchedulerNode(ComputedBuffer)
op646.writes = [MemoryDep('buf646', c0, {c0: 2007040}, None)]
op646.unmet_dependencies = [MemoryDep('buf645', c0, {c0: 2007040}, None)]
op646.met_dependencies = [MemoryDep('arg448_1', c1, {c0: 1568, c1: 1280}, None)]
op646.outputs = [
    buf646: ComputedBuffer
    buf646.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf646.users = [NodeUser(node=ExternKernelSchedulerNode(name='op647'), can_inplace=False, is_weak=False)]
]
op646.group.device = cuda:0
op646.group.iteration = (2007040, 1)
op646.sizes = ([1568, 1280], [])
buf645_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op646_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf645', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg448_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf645', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg448_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf646', get_index_4, mul_2, None)
        return store


op647: ExternKernelSchedulerNode(ExternKernelOut)
op647.writes = [StarDep(name='buf647', mode=None)]
op647.unmet_dependencies = [StarDep(name='buf646', mode=None)]
op647.met_dependencies = [StarDep(name='arg449_1', mode=None)]
op647.outputs = [
    buf647: ExternKernelOut
    buf647.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf647.users = [
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op649'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op650'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op666'), can_inplace=True, is_weak=False),
    ]
]
op647.node.kernel = extern_kernels.mm


op648_op649_op651: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op648_op649_op651.writes = 
    [   MemoryDep('buf648', c0, {c0: 1568}, None),
        MemoryDep('buf649', c0, {c0: 1568}, None),
        MemoryDep('buf651', c0, {c0: 501760}, None)]
op648_op649_op651.unmet_dependencies = 
    [   MemoryDep('buf640', c0, {c0: 501760}, None),
        MemoryDep('buf647', c0, {c0: 501760}, None)]
op648_op649_op651.met_dependencies = 
    [   MemoryDep('arg450_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg451_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg452_1', c1, {c0: 1568, c1: 320}, None)]
op648_op649_op651.outputs = [
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf648.users = [NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False)]
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf649.users = [NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False)]
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf651.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op659'), can_inplace=False, is_weak=False),
    ]
]
op648_op649_op651.snodes[0] =
op648: SchedulerNode(ComputedBuffer)
op648.writes = [MemoryDep('buf648', c0, {c0: 1568}, None)]
op648.unmet_dependencies = 
    [   MemoryDep('buf640', c0, {c0: 501760}, None),
        MemoryDep('buf647', c0, {c0: 501760}, None)]
op648.met_dependencies = [MemoryDep('arg450_1', c1, {c0: 1568, c1: 320}, None)]
op648.outputs = [
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf648.users = [NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False)]
]
op648.group.device = cuda:0
op648.group.iteration = (1568, 320)
op648.sizes = ([1568], [320])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf647_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf648_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op648_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf647', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg450_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf648', get_index_3, getitem)
        return store_reduction
op648_op649_op651.snodes[1] =
op649: SchedulerNode(ComputedBuffer)
op649.writes = [MemoryDep('buf649', c0, {c0: 1568}, None)]
op649.unmet_dependencies = 
    [   MemoryDep('buf640', c0, {c0: 501760}, None),
        MemoryDep('buf647', c0, {c0: 501760}, None)]
op649.met_dependencies = [MemoryDep('arg450_1', c1, {c0: 1568, c1: 320}, None)]
op649.outputs = [
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf649.users = [NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False)]
]
op649.group.device = cuda:0
op649.group.iteration = (1568, 320)
op649.sizes = ([1568], [320])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf647_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf649_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op649_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf647', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg450_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf649', get_index_3, getitem_1)
        return store_reduction
op648_op649_op651.snodes[2] =
op651: SchedulerNode(ComputedBuffer)
op651.writes = [MemoryDep('buf651', c0, {c0: 501760}, None)]
op651.unmet_dependencies = 
    [   MemoryDep('buf640', c0, {c0: 501760}, None),
        MemoryDep('buf647', c0, {c0: 501760}, None),
        MemoryDep('buf648', c0, {c0: 1568}, None),
        MemoryDep('buf649', c0, {c0: 1568}, None)]
op651.met_dependencies = 
    [   MemoryDep('arg450_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg451_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg452_1', c1, {c0: 1568, c1: 320}, None)]
op651.outputs = [
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf651.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op659'), can_inplace=False, is_weak=False),
    ]
]
op651.group.device = cuda:0
op651.group.iteration = (501760, 1)
op651.sizes = ([1568, 320], [])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf647_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf648_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf649_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg451_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op651_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf647', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg450_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf648', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf649', get_index_4)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg451_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg452_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf651', get_index_7, add_3, None)
        return store


op652: SchedulerNode(ComputedBuffer)
op652.writes = [MemoryDep('buf652', 1280*c0 + c1 + 320*c2, {c0: 320, c1: 320, c2: 4}, None)]
op652.unmet_dependencies = []
op652.met_dependencies = [MemoryDep('arg455_1', c0, {c0: 409600}, None)]
op652.outputs = [
    buf652: ComputedBuffer
    buf652.layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf652.users = [NodeUser(node=ExternKernelSchedulerNode(name='op653'), can_inplace=False, is_weak=False)]
]
op652.group.device = cuda:0
op652.group.iteration = (409600, 1)
op652.sizes = ([320, 320, 4], [])
arg455_1_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 4, 2, 1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[320, 320, 2, 2], stride=[1280, 1, 640, 320])
class op652_loop_body:
    var_ranges = {z0: 320, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg455_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf652', get_index_1, load, None)
        return store


op653: ExternKernelSchedulerNode(ExternKernelAlloc)
op653.writes = [StarDep(name='buf653', mode=None)]
op653.unmet_dependencies = [StarDep(name='buf651', mode=None), StarDep(name='buf652', mode=None)]
op653.met_dependencies = []
op653.outputs = [
    buf653: ExternKernelAlloc
    buf653.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
    buf653.users = [
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op657'), can_inplace=True, is_weak=False),
    ]
]
op653.node.kernel = extern_kernels.convolution


op654_op655_op657: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op654_op655_op657.writes = 
    [   MemoryDep('buf654', c0, {c0: 392}, None),
        MemoryDep('buf655', c0, {c0: 392}, None),
        MemoryDep('buf657', c0, {c0: 125440}, None)]
op654_op655_op657.unmet_dependencies = [MemoryDep('buf653', c0, {c0: 125440}, None)]
op654_op655_op657.met_dependencies = 
    [   MemoryDep('arg456_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg457_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg458_1', c1, {c0: 392, c1: 320}, None)]
op654_op655_op657.outputs = [
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf654.users = [NodeUser(node=SchedulerNode(name='op657'), can_inplace=False, is_weak=False)]
    buf655: ComputedBuffer
    buf655.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf655.users = [NodeUser(node=SchedulerNode(name='op657'), can_inplace=False, is_weak=False)]
    buf657: ComputedBuffer
    buf657.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf657.users = [NodeUser(node=ExternKernelSchedulerNode(name='op658'), can_inplace=False, is_weak=False)]
]
op654_op655_op657.snodes[0] =
op654: SchedulerNode(ComputedBuffer)
op654.writes = [MemoryDep('buf654', c0, {c0: 392}, None)]
op654.unmet_dependencies = [MemoryDep('buf653', c0, {c0: 125440}, None)]
op654.met_dependencies = [MemoryDep('arg456_1', c1, {c0: 392, c1: 320}, None)]
op654.outputs = [
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf654.users = [NodeUser(node=SchedulerNode(name='op657'), can_inplace=False, is_weak=False)]
]
op654.group.device = cuda:0
op654.group.iteration = (392, 320)
op654.sizes = ([392], [320])
buf653_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf654_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op654_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf653', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg456_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf654', get_index_2, getitem)
        return store_reduction
op654_op655_op657.snodes[1] =
op655: SchedulerNode(ComputedBuffer)
op655.writes = [MemoryDep('buf655', c0, {c0: 392}, None)]
op655.unmet_dependencies = [MemoryDep('buf653', c0, {c0: 125440}, None)]
op655.met_dependencies = [MemoryDep('arg456_1', c1, {c0: 392, c1: 320}, None)]
op655.outputs = [
    buf655: ComputedBuffer
    buf655.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf655.users = [NodeUser(node=SchedulerNode(name='op657'), can_inplace=False, is_weak=False)]
]
op655.group.device = cuda:0
op655.group.iteration = (392, 320)
op655.sizes = ([392], [320])
buf653_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf655_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op655_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf653', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg456_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf655', get_index_2, getitem_1)
        return store_reduction
op654_op655_op657.snodes[2] =
op657: SchedulerNode(ComputedBuffer)
op657.writes = [MemoryDep('buf657', c0, {c0: 125440}, None)]
op657.unmet_dependencies = 
    [   MemoryDep('buf653', c0, {c0: 125440}, None),
        MemoryDep('buf654', c0, {c0: 392}, None),
        MemoryDep('buf655', c0, {c0: 392}, None)]
op657.met_dependencies = 
    [   MemoryDep('arg456_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg457_1', c1, {c0: 392, c1: 320}, None),
        MemoryDep('arg458_1', c1, {c0: 392, c1: 320}, None)]
op657.outputs = [
    buf657: ComputedBuffer
    buf657.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
    buf657.users = [NodeUser(node=ExternKernelSchedulerNode(name='op658'), can_inplace=False, is_weak=False)]
]
op657.group.device = cuda:0
op657.group.iteration = (125440, 1)
op657.sizes = ([392, 320], [])
buf653_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 7, 7], stride=[15680, 1, 2240, 320])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf654_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf655_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg457_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf657_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 320], stride=[15680, 320, 1])
class op657_loop_body:
    var_ranges = {z0: 392, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf653', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg456_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf654', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf655', get_index_3)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg457_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg458_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf657', get_index_6, add_2, None)
        return store


op658: ExternKernelSchedulerNode(ExternKernelOut)
op658.writes = [StarDep(name='buf658', mode=None)]
op658.unmet_dependencies = [StarDep(name='buf657', mode=None)]
op658.met_dependencies = [StarDep(name='arg459_1', mode=None), StarDep(name='arg460_1', mode=None)]
op658.outputs = [
    buf658: ExternKernelOut
    buf658.layout = FixedLayout('cuda', torch.float32, size=[392, 640], stride=[640, 1])
    buf658.users = [NodeUser(node=ExternKernelSchedulerNode(name='op660'), can_inplace=False, is_weak=False)]
]
op658.node.kernel = extern_kernels.addmm


op659: ExternKernelSchedulerNode(ExternKernelOut)
op659.writes = [StarDep(name='buf659', mode=None)]
op659.unmet_dependencies = [StarDep(name='buf651', mode=None)]
op659.met_dependencies = [StarDep(name='arg453_1', mode=None), StarDep(name='arg454_1', mode=None)]
op659.outputs = [
    buf659: ExternKernelOut
    buf659.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf659.users = [NodeUser(node=ExternKernelSchedulerNode(name='op660'), can_inplace=False, is_weak=False)]
]
op659.node.kernel = extern_kernels.addmm


op660: ExternKernelSchedulerNode(FallbackKernel)
op660.writes = [StarDep(name='buf660', mode=None)]
op660.unmet_dependencies = [StarDep(name='buf658', mode=None), StarDep(name='buf659', mode=None)]
op660.met_dependencies = []
op660.outputs = [
    buf660: FallbackKernel
    buf660.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf660.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op661'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op664'), can_inplace=False, is_weak=False),
    ]
]
op660.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op661: ExternKernelSchedulerNode(MultiOutput)
op661.writes = [StarDep(name='buf661', mode=None)]
op661.unmet_dependencies = [StarDep(name='buf660', mode=None)]
op661.met_dependencies = []
op661.outputs = [
    buf661: MultiOutput
    buf661.layout = FixedLayout('cuda', torch.float32, size=[8, 5, 196, 64], stride=[62720, 64, 320, 1])
    buf661.users = [NodeUser(node=ExternKernelSchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op661.node.kernel = None


op665: ExternKernelSchedulerNode(ExternKernelOut)
op665.writes = [StarDep(name='buf665', mode=None)]
op665.unmet_dependencies = [StarDep(name='buf661', mode=None)]
op665.met_dependencies = [StarDep(name='arg461_1', mode=None)]
op665.outputs = [
    buf665: ExternKernelOut
    buf665.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf665.users = [NodeUser(node=SchedulerNode(name='op666'), can_inplace=True, is_weak=False)]
]
op665.node.kernel = extern_kernels.mm


op666_op667_op668_op670: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op666_op667_op668_op670.writes = 
    [   MemoryDep('buf666', c0, {c0: 501760}, None),
        MemoryDep('buf667', c0, {c0: 1568}, None),
        MemoryDep('buf668', c0, {c0: 1568}, None),
        MemoryDep('buf670', c0, {c0: 501760}, None)]
op666_op667_op668_op670.unmet_dependencies = 
    [   MemoryDep('buf640', c0, {c0: 501760}, None),
        MemoryDep('buf647', c0, {c0: 501760}, None),
        MemoryDep('buf665', c0, {c0: 501760}, None)]
op666_op667_op668_op670.met_dependencies = 
    [   MemoryDep('arg450_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg462_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg463_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg464_1', c1, {c0: 1568, c1: 320}, None)]
op666_op667_op668_op670.outputs = [
    buf666: ComputedBuffer
    buf666.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf666.users = [
        NodeUser(node=SchedulerNode(name='op667'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op674'), can_inplace=True, is_weak=False),
    ]
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf667.users = [NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False)]
    buf668: ComputedBuffer
    buf668.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf668.users = [NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False)]
    buf670: ComputedBuffer
    buf670.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf670.users = [NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
]
op666_op667_op668_op670.snodes[0] =
op666: SchedulerNode(ComputedBuffer)
op666.writes = [MemoryDep('buf666', c0, {c0: 501760}, None)]
op666.unmet_dependencies = 
    [   MemoryDep('buf640', c0, {c0: 501760}, None),
        MemoryDep('buf647', c0, {c0: 501760}, None),
        MemoryDep('buf665', c0, {c0: 501760}, None)]
op666.met_dependencies = 
    [   MemoryDep('arg450_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg462_1', c1, {c0: 1568, c1: 320}, None)]
op666.outputs = [
    buf666: ComputedBuffer
    buf666.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf666.users = [
        NodeUser(node=SchedulerNode(name='op667'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op668'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op669'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op674'), can_inplace=True, is_weak=False),
    ]
]
op666.group.device = cuda:0
op666.group.iteration = (501760, 1)
op666.sizes = ([1568, 320], [])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf647_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf665_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf666_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op666_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf647', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg450_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf665', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg462_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf666', get_index_5, add_3, None)
        return store
op666_op667_op668_op670.snodes[1] =
op667: SchedulerNode(ComputedBuffer)
op667.writes = [MemoryDep('buf667', c0, {c0: 1568}, None)]
op667.unmet_dependencies = [MemoryDep('buf666', c0, {c0: 501760}, None)]
op667.met_dependencies = []
op667.outputs = [
    buf667: ComputedBuffer
    buf667.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf667.users = [NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False)]
]
op667.group.device = cuda:0
op667.group.iteration = (1568, 320)
op667.sizes = ([1568], [320])
buf666_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf667_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op667_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf666', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf667', get_index_1, getitem)
        return store_reduction
op666_op667_op668_op670.snodes[2] =
op668: SchedulerNode(ComputedBuffer)
op668.writes = [MemoryDep('buf668', c0, {c0: 1568}, None)]
op668.unmet_dependencies = [MemoryDep('buf666', c0, {c0: 501760}, None)]
op668.met_dependencies = []
op668.outputs = [
    buf668: ComputedBuffer
    buf668.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf668.users = [NodeUser(node=SchedulerNode(name='op670'), can_inplace=False, is_weak=False)]
]
op668.group.device = cuda:0
op668.group.iteration = (1568, 320)
op668.sizes = ([1568], [320])
buf666_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op668_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf666', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf668', get_index_1, getitem_1)
        return store_reduction
op666_op667_op668_op670.snodes[3] =
op670: SchedulerNode(ComputedBuffer)
op670.writes = [MemoryDep('buf670', c0, {c0: 501760}, None)]
op670.unmet_dependencies = 
    [   MemoryDep('buf666', c0, {c0: 501760}, None),
        MemoryDep('buf667', c0, {c0: 1568}, None),
        MemoryDep('buf668', c0, {c0: 1568}, None)]
op670.met_dependencies = 
    [   MemoryDep('arg463_1', c1, {c0: 1568, c1: 320}, None),
        MemoryDep('arg464_1', c1, {c0: 1568, c1: 320}, None)]
op670.outputs = [
    buf670: ComputedBuffer
    buf670.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
    buf670.users = [NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False)]
]
op670.group.device = cuda:0
op670.group.iteration = (501760, 1)
op670.sizes = ([1568, 320], [])
buf666_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf667_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf668_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg463_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf670_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
class op670_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf666', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf667', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf668', get_index_2)
        constant = ops.constant(320.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg463_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg464_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf670', get_index_5, add_1, None)
        return store


op671: ExternKernelSchedulerNode(ExternKernelOut)
op671.writes = [StarDep(name='buf671', mode=None)]
op671.unmet_dependencies = [StarDep(name='buf670', mode=None)]
op671.met_dependencies = [StarDep(name='arg465_1', mode=None)]
op671.outputs = [
    buf671: ExternKernelOut
    buf671.layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
    buf671.users = [NodeUser(node=SchedulerNode(name='op672'), can_inplace=True, is_weak=False)]
]
op671.node.kernel = extern_kernels.mm


op672: SchedulerNode(ComputedBuffer)
op672.writes = [MemoryDep('buf672', c0, {c0: 2007040}, None)]
op672.unmet_dependencies = [MemoryDep('buf671', c0, {c0: 2007040}, None)]
op672.met_dependencies = [MemoryDep('arg466_1', c1, {c0: 1568, c1: 1280}, None)]
op672.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
    buf672.users = [NodeUser(node=ExternKernelSchedulerNode(name='op673'), can_inplace=False, is_weak=False)]
]
op672.group.device = cuda:0
op672.group.iteration = (2007040, 1)
op672.sizes = ([1568, 1280], [])
buf671_layout = FixedLayout('cuda', torch.float32, size=[1568, 1280], stride=[1280, 1])
arg466_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf672_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1280], stride=[250880, 1280, 1])
class op672_loop_body:
    var_ranges = {z0: 1568, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg466_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf671', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg466_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf672', get_index_4, mul_2, None)
        return store


op673: ExternKernelSchedulerNode(ExternKernelOut)
op673.writes = [StarDep(name='buf673', mode=None)]
op673.unmet_dependencies = [StarDep(name='buf672', mode=None)]
op673.met_dependencies = [StarDep(name='arg467_1', mode=None)]
op673.outputs = [
    buf673: ExternKernelOut
    buf673.layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
    buf673.users = [NodeUser(node=SchedulerNode(name='op674'), can_inplace=True, is_weak=False)]
]
op673.node.kernel = extern_kernels.mm


op674: SchedulerNode(ComputedBuffer)
op674.writes = [MemoryDep('buf674', c0, {c0: 501760}, None)]
op674.unmet_dependencies = 
    [   MemoryDep('buf666', c0, {c0: 501760}, None),
        MemoryDep('buf673', c0, {c0: 501760}, None)]
op674.met_dependencies = [MemoryDep('arg468_1', c1, {c0: 1568, c1: 320}, None)]
op674.outputs = [
    buf674: ComputedBuffer
    buf674.layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
    buf674.users = [NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False)]
]
op674.group.device = cuda:0
op674.group.iteration = (501760, 1)
op674.sizes = ([1568, 320], [])
buf666_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 320], stride=[62720, 320, 1])
buf673_layout = FixedLayout('cuda', torch.float32, size=[1568, 320], stride=[320, 1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[320], stride=[1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[8, 320, 14, 14], stride=[62720, 1, 4480, 320])
class op674_loop_body:
    var_ranges = {z0: 1568, z1: 320}
    index0 = 320*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf666', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf673', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg468_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf674', get_index_3, add_1, None)
        return store


op675: SchedulerNode(ComputedBuffer)
op675.writes = [MemoryDep('buf675', 1280*c0 + c1 + 320*c2, {c0: 512, c1: 320, c2: 4}, None)]
op675.unmet_dependencies = []
op675.met_dependencies = [MemoryDep('arg469_1', c0, {c0: 655360}, None)]
op675.outputs = [
    buf675: ComputedBuffer
    buf675.layout = FixedLayout('cuda', torch.float32, size=[512, 320, 2, 2], stride=[1280, 1, 640, 320])
    buf675.users = [NodeUser(node=ExternKernelSchedulerNode(name='op676'), can_inplace=False, is_weak=False)]
]
op675.group.device = cuda:0
op675.group.iteration = (655360, 1)
op675.sizes = ([512, 320, 4], [])
arg469_1_layout = FixedLayout('cuda', torch.float32, size=[512, 320, 2, 2], stride=[1280, 4, 2, 1])
buf675_layout = FixedLayout('cuda', torch.float32, size=[512, 320, 2, 2], stride=[1280, 1, 640, 320])
class op675_loop_body:
    var_ranges = {z0: 512, z1: 320, z2: 4}
    index0 = 1280*z0 + 4*z1 + z2
    index1 = 1280*z0 + z1 + 320*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg469_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf675', get_index_1, load, None)
        return store


op676: ExternKernelSchedulerNode(ExternKernelAlloc)
op676.writes = [StarDep(name='buf676', mode=None)]
op676.unmet_dependencies = [StarDep(name='buf674', mode=None), StarDep(name='buf675', mode=None)]
op676.met_dependencies = []
op676.outputs = [
    buf676: ExternKernelAlloc
    buf676.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf676.users = [
        NodeUser(node=SchedulerNode(name='op677'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op680'), can_inplace=True, is_weak=False),
    ]
]
op676.node.kernel = extern_kernels.convolution


op677_op678_op680_op681_op682_op684: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op677_op678_op680_op681_op682_op684.writes = 
    [   MemoryDep('buf677', c0, {c0: 392}, None),
        MemoryDep('buf678', c0, {c0: 392}, None),
        MemoryDep('buf680', c0, {c0: 200704}, None),
        MemoryDep('buf681', c0, {c0: 392}, None),
        MemoryDep('buf682', c0, {c0: 392}, None),
        MemoryDep('buf684', c0, {c0: 200704}, None)]
op677_op678_op680_op681_op682_op684.unmet_dependencies = [MemoryDep('buf676', c0, {c0: 200704}, None)]
op677_op678_op680_op681_op682_op684.met_dependencies = 
    [   MemoryDep('arg470_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg471_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg472_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg473_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg474_1', c1, {c0: 392, c1: 512}, None)]
op677_op678_op680_op681_op682_op684.outputs = [
    buf677: ComputedBuffer
    buf677.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf677.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
    buf678: ComputedBuffer
    buf678.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf678.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
    buf680: ComputedBuffer
    buf680.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf680.users = [
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op683'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op684'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op693'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=True, is_weak=False),
    ]
    buf681: ComputedBuffer
    buf681.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf681.users = [NodeUser(node=SchedulerNode(name='op684'), can_inplace=False, is_weak=False)]
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf682.users = [NodeUser(node=SchedulerNode(name='op684'), can_inplace=False, is_weak=False)]
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf684.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op685'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op686'), can_inplace=False, is_weak=False),
    ]
]
op677_op678_op680_op681_op682_op684.snodes[0] =
op677: SchedulerNode(ComputedBuffer)
op677.writes = [MemoryDep('buf677', c0, {c0: 392}, None)]
op677.unmet_dependencies = [MemoryDep('buf676', c0, {c0: 200704}, None)]
op677.met_dependencies = [MemoryDep('arg470_1', c1, {c0: 392, c1: 512}, None)]
op677.outputs = [
    buf677: ComputedBuffer
    buf677.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf677.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op677.group.device = cuda:0
op677.group.iteration = (392, 512)
op677.sizes = ([392], [512])
buf676_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf677_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op677_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf676', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg470_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf677', get_index_2, getitem)
        return store_reduction
op677_op678_op680_op681_op682_op684.snodes[1] =
op678: SchedulerNode(ComputedBuffer)
op678.writes = [MemoryDep('buf678', c0, {c0: 392}, None)]
op678.unmet_dependencies = [MemoryDep('buf676', c0, {c0: 200704}, None)]
op678.met_dependencies = [MemoryDep('arg470_1', c1, {c0: 392, c1: 512}, None)]
op678.outputs = [
    buf678: ComputedBuffer
    buf678.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf678.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=False, is_weak=False)]
]
op678.group.device = cuda:0
op678.group.iteration = (392, 512)
op678.sizes = ([392], [512])
buf676_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op678_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf676', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg470_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf678', get_index_2, getitem_1)
        return store_reduction
op677_op678_op680_op681_op682_op684.snodes[2] =
op680: SchedulerNode(ComputedBuffer)
op680.writes = [MemoryDep('buf680', c0, {c0: 200704}, None)]
op680.unmet_dependencies = 
    [   MemoryDep('buf676', c0, {c0: 200704}, None),
        MemoryDep('buf677', c0, {c0: 392}, None),
        MemoryDep('buf678', c0, {c0: 392}, None)]
op680.met_dependencies = 
    [   MemoryDep('arg470_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg471_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg472_1', c1, {c0: 392, c1: 512}, None)]
op680.outputs = [
    buf680: ComputedBuffer
    buf680.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf680.users = [
        NodeUser(node=SchedulerNode(name='op681'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op683'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op684'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op693'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=True, is_weak=False),
    ]
]
op680.group.device = cuda:0
op680.group.iteration = (200704, 1)
op680.sizes = ([392, 512], [])
buf676_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf677_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf678_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg471_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op680_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf676', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg470_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf677', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf678', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg471_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg472_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf680', get_index_6, add_2, None)
        return store
op677_op678_op680_op681_op682_op684.snodes[3] =
op681: SchedulerNode(ComputedBuffer)
op681.writes = [MemoryDep('buf681', c0, {c0: 392}, None)]
op681.unmet_dependencies = [MemoryDep('buf680', c0, {c0: 200704}, None)]
op681.met_dependencies = []
op681.outputs = [
    buf681: ComputedBuffer
    buf681.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf681.users = [NodeUser(node=SchedulerNode(name='op684'), can_inplace=False, is_weak=False)]
]
op681.group.device = cuda:0
op681.group.iteration = (392, 512)
op681.sizes = ([392], [512])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op681_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf681', get_index_1, getitem)
        return store_reduction
op677_op678_op680_op681_op682_op684.snodes[4] =
op682: SchedulerNode(ComputedBuffer)
op682.writes = [MemoryDep('buf682', c0, {c0: 392}, None)]
op682.unmet_dependencies = [MemoryDep('buf680', c0, {c0: 200704}, None)]
op682.met_dependencies = []
op682.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf682.users = [NodeUser(node=SchedulerNode(name='op684'), can_inplace=False, is_weak=False)]
]
op682.group.device = cuda:0
op682.group.iteration = (392, 512)
op682.sizes = ([392], [512])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf682_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op682_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf682', get_index_1, getitem_1)
        return store_reduction
op677_op678_op680_op681_op682_op684.snodes[5] =
op684: SchedulerNode(ComputedBuffer)
op684.writes = [MemoryDep('buf684', c0, {c0: 200704}, None)]
op684.unmet_dependencies = 
    [   MemoryDep('buf680', c0, {c0: 200704}, None),
        MemoryDep('buf681', c0, {c0: 392}, None),
        MemoryDep('buf682', c0, {c0: 392}, None)]
op684.met_dependencies = 
    [   MemoryDep('arg473_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg474_1', c1, {c0: 392, c1: 512}, None)]
op684.outputs = [
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf684.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op685'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op686'), can_inplace=False, is_weak=False),
    ]
]
op684.group.device = cuda:0
op684.group.iteration = (200704, 1)
op684.sizes = ([392, 512], [])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf681_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf682_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg473_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf684_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op684_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf681', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf682', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg473_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg474_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf684', get_index_5, add_1, None)
        return store


op685: ExternKernelSchedulerNode(ExternKernelOut)
op685.writes = [StarDep(name='buf685', mode=None)]
op685.unmet_dependencies = [StarDep(name='buf684', mode=None)]
op685.met_dependencies = [StarDep(name='arg477_1', mode=None), StarDep(name='arg478_1', mode=None)]
op685.outputs = [
    buf685: ExternKernelOut
    buf685.layout = FixedLayout('cuda', torch.float32, size=[392, 1024], stride=[1024, 1])
    buf685.users = [NodeUser(node=ExternKernelSchedulerNode(name='op687'), can_inplace=False, is_weak=False)]
]
op685.node.kernel = extern_kernels.addmm


op686: ExternKernelSchedulerNode(ExternKernelOut)
op686.writes = [StarDep(name='buf686', mode=None)]
op686.unmet_dependencies = [StarDep(name='buf684', mode=None)]
op686.met_dependencies = [StarDep(name='arg475_1', mode=None), StarDep(name='arg476_1', mode=None)]
op686.outputs = [
    buf686: ExternKernelOut
    buf686.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf686.users = [NodeUser(node=ExternKernelSchedulerNode(name='op687'), can_inplace=False, is_weak=False)]
]
op686.node.kernel = extern_kernels.addmm


op687: ExternKernelSchedulerNode(FallbackKernel)
op687.writes = [StarDep(name='buf687', mode=None)]
op687.unmet_dependencies = [StarDep(name='buf685', mode=None), StarDep(name='buf686', mode=None)]
op687.met_dependencies = []
op687.outputs = [
    buf687: FallbackKernel
    buf687.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf687.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op688'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op690'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False),
    ]
]
op687.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op688: ExternKernelSchedulerNode(MultiOutput)
op688.writes = [StarDep(name='buf688', mode=None)]
op688.unmet_dependencies = [StarDep(name='buf687', mode=None)]
op688.met_dependencies = []
op688.outputs = [
    buf688: MultiOutput
    buf688.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 64], stride=[25088, 64, 512, 1])
    buf688.users = [NodeUser(node=ExternKernelSchedulerNode(name='op692'), can_inplace=False, is_weak=False)]
]
op688.node.kernel = None


op692: ExternKernelSchedulerNode(ExternKernelOut)
op692.writes = [StarDep(name='buf692', mode=None)]
op692.unmet_dependencies = [StarDep(name='buf688', mode=None)]
op692.met_dependencies = [StarDep(name='arg479_1', mode=None)]
op692.outputs = [
    buf692: ExternKernelOut
    buf692.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf692.users = [
        NodeUser(node=SchedulerNode(name='op693'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op694'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op695'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op696'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op700'), can_inplace=True, is_weak=False),
    ]
]
op692.node.kernel = extern_kernels.mm


op693_op694_op696: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op693_op694_op696.writes = 
    [   MemoryDep('buf693', c0, {c0: 392}, None),
        MemoryDep('buf694', c0, {c0: 392}, None),
        MemoryDep('buf696', c0, {c0: 200704}, None)]
op693_op694_op696.unmet_dependencies = 
    [   MemoryDep('buf680', c0, {c0: 200704}, None),
        MemoryDep('buf692', c0, {c0: 200704}, None)]
op693_op694_op696.met_dependencies = 
    [   MemoryDep('arg480_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg481_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg482_1', c1, {c0: 392, c1: 512}, None)]
op693_op694_op696.outputs = [
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf693.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
    buf694: ComputedBuffer
    buf694.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf694.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf696.users = [NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False)]
]
op693_op694_op696.snodes[0] =
op693: SchedulerNode(ComputedBuffer)
op693.writes = [MemoryDep('buf693', c0, {c0: 392}, None)]
op693.unmet_dependencies = 
    [   MemoryDep('buf680', c0, {c0: 200704}, None),
        MemoryDep('buf692', c0, {c0: 200704}, None)]
op693.met_dependencies = [MemoryDep('arg480_1', c1, {c0: 392, c1: 512}, None)]
op693.outputs = [
    buf693: ComputedBuffer
    buf693.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf693.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
]
op693.group.device = cuda:0
op693.group.iteration = (392, 512)
op693.sizes = ([392], [512])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf692_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op693_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf692', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg480_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf693', get_index_3, getitem)
        return store_reduction
op693_op694_op696.snodes[1] =
op694: SchedulerNode(ComputedBuffer)
op694.writes = [MemoryDep('buf694', c0, {c0: 392}, None)]
op694.unmet_dependencies = 
    [   MemoryDep('buf680', c0, {c0: 200704}, None),
        MemoryDep('buf692', c0, {c0: 200704}, None)]
op694.met_dependencies = [MemoryDep('arg480_1', c1, {c0: 392, c1: 512}, None)]
op694.outputs = [
    buf694: ComputedBuffer
    buf694.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf694.users = [NodeUser(node=SchedulerNode(name='op696'), can_inplace=False, is_weak=False)]
]
op694.group.device = cuda:0
op694.group.iteration = (392, 512)
op694.sizes = ([392], [512])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf692_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf694_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op694_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf692', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg480_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf694', get_index_3, getitem_1)
        return store_reduction
op693_op694_op696.snodes[2] =
op696: SchedulerNode(ComputedBuffer)
op696.writes = [MemoryDep('buf696', c0, {c0: 200704}, None)]
op696.unmet_dependencies = 
    [   MemoryDep('buf680', c0, {c0: 200704}, None),
        MemoryDep('buf692', c0, {c0: 200704}, None),
        MemoryDep('buf693', c0, {c0: 392}, None),
        MemoryDep('buf694', c0, {c0: 392}, None)]
op696.met_dependencies = 
    [   MemoryDep('arg480_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg481_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg482_1', c1, {c0: 392, c1: 512}, None)]
op696.outputs = [
    buf696: ComputedBuffer
    buf696.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf696.users = [NodeUser(node=ExternKernelSchedulerNode(name='op697'), can_inplace=False, is_weak=False)]
]
op696.group.device = cuda:0
op696.group.iteration = (200704, 1)
op696.sizes = ([392, 512], [])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf692_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf693_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf694_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg481_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op696_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf692', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg480_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf693', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf694', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg481_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg482_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf696', get_index_7, add_3, None)
        return store


op697: ExternKernelSchedulerNode(ExternKernelOut)
op697.writes = [StarDep(name='buf697', mode=None)]
op697.unmet_dependencies = [StarDep(name='buf696', mode=None)]
op697.met_dependencies = [StarDep(name='arg483_1', mode=None)]
op697.outputs = [
    buf697: ExternKernelOut
    buf697.layout = FixedLayout('cuda', torch.float32, size=[392, 2048], stride=[2048, 1])
    buf697.users = [NodeUser(node=SchedulerNode(name='op698'), can_inplace=True, is_weak=False)]
]
op697.node.kernel = extern_kernels.mm


op698: SchedulerNode(ComputedBuffer)
op698.writes = [MemoryDep('buf698', c0, {c0: 802816}, None)]
op698.unmet_dependencies = [MemoryDep('buf697', c0, {c0: 802816}, None)]
op698.met_dependencies = [MemoryDep('arg484_1', c1, {c0: 392, c1: 2048}, None)]
op698.outputs = [
    buf698: ComputedBuffer
    buf698.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 2048], stride=[100352, 2048, 1])
    buf698.users = [NodeUser(node=ExternKernelSchedulerNode(name='op699'), can_inplace=False, is_weak=False)]
]
op698.group.device = cuda:0
op698.group.iteration = (802816, 1)
op698.sizes = ([392, 2048], [])
buf697_layout = FixedLayout('cuda', torch.float32, size=[392, 2048], stride=[2048, 1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf698_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 2048], stride=[100352, 2048, 1])
class op698_loop_body:
    var_ranges = {z0: 392, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf697', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg484_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf697', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg484_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf698', get_index_4, mul_2, None)
        return store


op699: ExternKernelSchedulerNode(ExternKernelOut)
op699.writes = [StarDep(name='buf699', mode=None)]
op699.unmet_dependencies = [StarDep(name='buf698', mode=None)]
op699.met_dependencies = [StarDep(name='arg485_1', mode=None)]
op699.outputs = [
    buf699: ExternKernelOut
    buf699.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf699.users = [NodeUser(node=SchedulerNode(name='op700'), can_inplace=True, is_weak=False)]
]
op699.node.kernel = extern_kernels.mm


op700: SchedulerNode(ComputedBuffer)
op700.writes = [MemoryDep('buf700', c0, {c0: 200704}, None)]
op700.unmet_dependencies = 
    [   MemoryDep('buf680', c0, {c0: 200704}, None),
        MemoryDep('buf692', c0, {c0: 200704}, None),
        MemoryDep('buf699', c0, {c0: 200704}, None)]
op700.met_dependencies = 
    [   MemoryDep('arg480_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg486_1', c1, {c0: 392, c1: 512}, None)]
op700.outputs = [
    buf700: ComputedBuffer
    buf700.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf700.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op701'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op704'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op714'), can_inplace=True, is_weak=False),
    ]
]
op700.group.device = cuda:0
op700.group.iteration = (200704, 1)
op700.sizes = ([392, 512], [])
buf680_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf692_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf699_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg486_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op700_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf680', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf692', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg480_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf699', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg486_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf700', get_index_5, add_3, None)
        return store


op701: ExternKernelSchedulerNode(ExternKernelAlloc)
op701.writes = [StarDep(name='buf701', mode=None)]
op701.unmet_dependencies = [StarDep(name='buf700', mode=None)]
op701.met_dependencies = [StarDep(name='arg487_1', mode=None)]
op701.outputs = [
    buf701: ExternKernelAlloc
    buf701.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
    buf701.users = [
        NodeUser(node=SchedulerNode(name='op702'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op703'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op704'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op714'), can_inplace=True, is_weak=False),
    ]
]
op701.node.kernel = extern_kernels.convolution


op702_op703_op705: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op702_op703_op705.writes = 
    [   MemoryDep('buf702', c0, {c0: 392}, None),
        MemoryDep('buf703', c0, {c0: 392}, None),
        MemoryDep('buf705', c0, {c0: 200704}, None)]
op702_op703_op705.unmet_dependencies = 
    [   MemoryDep('buf700', c0, {c0: 200704}, None),
        MemoryDep('buf701', c0, {c0: 200704}, None)]
op702_op703_op705.met_dependencies = 
    [   MemoryDep('arg488_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg489_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg490_1', c1, {c0: 392, c1: 512}, None)]
op702_op703_op705.outputs = [
    buf702: ComputedBuffer
    buf702.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf702.users = [NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False)]
    buf703: ComputedBuffer
    buf703.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf703.users = [NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False)]
    buf705: ComputedBuffer
    buf705.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf705.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op707'), can_inplace=False, is_weak=False),
    ]
]
op702_op703_op705.snodes[0] =
op702: SchedulerNode(ComputedBuffer)
op702.writes = [MemoryDep('buf702', c0, {c0: 392}, None)]
op702.unmet_dependencies = 
    [   MemoryDep('buf700', c0, {c0: 200704}, None),
        MemoryDep('buf701', c0, {c0: 200704}, None)]
op702.met_dependencies = [MemoryDep('arg488_1', c1, {c0: 392, c1: 512}, None)]
op702.outputs = [
    buf702: ComputedBuffer
    buf702.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf702.users = [NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False)]
]
op702.group.device = cuda:0
op702.group.iteration = (392, 512)
op702.sizes = ([392], [512])
buf701_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf702_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op702_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf701', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg488_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf700', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf702', get_index_3, getitem)
        return store_reduction
op702_op703_op705.snodes[1] =
op703: SchedulerNode(ComputedBuffer)
op703.writes = [MemoryDep('buf703', c0, {c0: 392}, None)]
op703.unmet_dependencies = 
    [   MemoryDep('buf700', c0, {c0: 200704}, None),
        MemoryDep('buf701', c0, {c0: 200704}, None)]
op703.met_dependencies = [MemoryDep('arg488_1', c1, {c0: 392, c1: 512}, None)]
op703.outputs = [
    buf703: ComputedBuffer
    buf703.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf703.users = [NodeUser(node=SchedulerNode(name='op705'), can_inplace=False, is_weak=False)]
]
op703.group.device = cuda:0
op703.group.iteration = (392, 512)
op703.sizes = ([392], [512])
buf701_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op703_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf701', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg488_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf700', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf703', get_index_3, getitem_1)
        return store_reduction
op702_op703_op705.snodes[2] =
op705: SchedulerNode(ComputedBuffer)
op705.writes = [MemoryDep('buf705', c0, {c0: 200704}, None)]
op705.unmet_dependencies = 
    [   MemoryDep('buf700', c0, {c0: 200704}, None),
        MemoryDep('buf701', c0, {c0: 200704}, None),
        MemoryDep('buf702', c0, {c0: 392}, None),
        MemoryDep('buf703', c0, {c0: 392}, None)]
op705.met_dependencies = 
    [   MemoryDep('arg488_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg489_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg490_1', c1, {c0: 392, c1: 512}, None)]
op705.outputs = [
    buf705: ComputedBuffer
    buf705.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf705.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op707'), can_inplace=False, is_weak=False),
    ]
]
op705.group.device = cuda:0
op705.group.iteration = (200704, 1)
op705.sizes = ([392, 512], [])
buf701_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf702_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf703_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op705_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf701', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg488_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf700', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf702', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf703', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg489_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg490_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf705', get_index_7, add_3, None)
        return store


op706: ExternKernelSchedulerNode(ExternKernelOut)
op706.writes = [StarDep(name='buf706', mode=None)]
op706.unmet_dependencies = [StarDep(name='buf705', mode=None)]
op706.met_dependencies = [StarDep(name='arg493_1', mode=None), StarDep(name='arg494_1', mode=None)]
op706.outputs = [
    buf706: ExternKernelOut
    buf706.layout = FixedLayout('cuda', torch.float32, size=[392, 1024], stride=[1024, 1])
    buf706.users = [NodeUser(node=ExternKernelSchedulerNode(name='op708'), can_inplace=False, is_weak=False)]
]
op706.node.kernel = extern_kernels.addmm


op707: ExternKernelSchedulerNode(ExternKernelOut)
op707.writes = [StarDep(name='buf707', mode=None)]
op707.unmet_dependencies = [StarDep(name='buf705', mode=None)]
op707.met_dependencies = [StarDep(name='arg491_1', mode=None), StarDep(name='arg492_1', mode=None)]
op707.outputs = [
    buf707: ExternKernelOut
    buf707.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf707.users = [NodeUser(node=ExternKernelSchedulerNode(name='op708'), can_inplace=False, is_weak=False)]
]
op707.node.kernel = extern_kernels.addmm


op708: ExternKernelSchedulerNode(FallbackKernel)
op708.writes = [StarDep(name='buf708', mode=None)]
op708.unmet_dependencies = [StarDep(name='buf706', mode=None), StarDep(name='buf707', mode=None)]
op708.met_dependencies = []
op708.outputs = [
    buf708: FallbackKernel
    buf708.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf708.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op709'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op711'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op712'), can_inplace=False, is_weak=False),
    ]
]
op708.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op709: ExternKernelSchedulerNode(MultiOutput)
op709.writes = [StarDep(name='buf709', mode=None)]
op709.unmet_dependencies = [StarDep(name='buf708', mode=None)]
op709.met_dependencies = []
op709.outputs = [
    buf709: MultiOutput
    buf709.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 64], stride=[25088, 64, 512, 1])
    buf709.users = [NodeUser(node=ExternKernelSchedulerNode(name='op713'), can_inplace=False, is_weak=False)]
]
op709.node.kernel = None


op713: ExternKernelSchedulerNode(ExternKernelOut)
op713.writes = [StarDep(name='buf713', mode=None)]
op713.unmet_dependencies = [StarDep(name='buf709', mode=None)]
op713.met_dependencies = [StarDep(name='arg495_1', mode=None)]
op713.outputs = [
    buf713: ExternKernelOut
    buf713.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf713.users = [NodeUser(node=SchedulerNode(name='op714'), can_inplace=True, is_weak=False)]
]
op713.node.kernel = extern_kernels.mm


op714_op715_op716_op718: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op714_op715_op716_op718.writes = 
    [   MemoryDep('buf714', c0, {c0: 200704}, None),
        MemoryDep('buf715', c0, {c0: 392}, None),
        MemoryDep('buf716', c0, {c0: 392}, None),
        MemoryDep('buf718', c0, {c0: 200704}, None)]
op714_op715_op716_op718.unmet_dependencies = 
    [   MemoryDep('buf700', c0, {c0: 200704}, None),
        MemoryDep('buf701', c0, {c0: 200704}, None),
        MemoryDep('buf713', c0, {c0: 200704}, None)]
op714_op715_op716_op718.met_dependencies = 
    [   MemoryDep('arg488_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg496_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg497_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg498_1', c1, {c0: 392, c1: 512}, None)]
op714_op715_op716_op718.outputs = [
    buf714: ComputedBuffer
    buf714.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf714.users = [
        NodeUser(node=SchedulerNode(name='op715'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op718'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op734'), can_inplace=True, is_weak=False),
    ]
    buf715: ComputedBuffer
    buf715.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf715.users = [NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False)]
    buf716: ComputedBuffer
    buf716.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf716.users = [NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False)]
    buf718: ComputedBuffer
    buf718.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf718.users = [NodeUser(node=ExternKernelSchedulerNode(name='op719'), can_inplace=False, is_weak=False)]
]
op714_op715_op716_op718.snodes[0] =
op714: SchedulerNode(ComputedBuffer)
op714.writes = [MemoryDep('buf714', c0, {c0: 200704}, None)]
op714.unmet_dependencies = 
    [   MemoryDep('buf700', c0, {c0: 200704}, None),
        MemoryDep('buf701', c0, {c0: 200704}, None),
        MemoryDep('buf713', c0, {c0: 200704}, None)]
op714.met_dependencies = 
    [   MemoryDep('arg488_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg496_1', c1, {c0: 392, c1: 512}, None)]
op714.outputs = [
    buf714: ComputedBuffer
    buf714.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf714.users = [
        NodeUser(node=SchedulerNode(name='op715'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op717'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op718'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op734'), can_inplace=True, is_weak=False),
    ]
]
op714.group.device = cuda:0
op714.group.iteration = (200704, 1)
op714.sizes = ([392, 512], [])
buf701_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 7, 7], stride=[25088, 1, 3584, 512])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf700_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf713_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf714_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op714_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf701', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg488_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf700', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf713', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg496_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf714', get_index_5, add_3, None)
        return store
op714_op715_op716_op718.snodes[1] =
op715: SchedulerNode(ComputedBuffer)
op715.writes = [MemoryDep('buf715', c0, {c0: 392}, None)]
op715.unmet_dependencies = [MemoryDep('buf714', c0, {c0: 200704}, None)]
op715.met_dependencies = []
op715.outputs = [
    buf715: ComputedBuffer
    buf715.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf715.users = [NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False)]
]
op715.group.device = cuda:0
op715.group.iteration = (392, 512)
op715.sizes = ([392], [512])
buf714_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf715_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op715_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf714', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf715', get_index_1, getitem)
        return store_reduction
op714_op715_op716_op718.snodes[2] =
op716: SchedulerNode(ComputedBuffer)
op716.writes = [MemoryDep('buf716', c0, {c0: 392}, None)]
op716.unmet_dependencies = [MemoryDep('buf714', c0, {c0: 200704}, None)]
op716.met_dependencies = []
op716.outputs = [
    buf716: ComputedBuffer
    buf716.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf716.users = [NodeUser(node=SchedulerNode(name='op718'), can_inplace=False, is_weak=False)]
]
op716.group.device = cuda:0
op716.group.iteration = (392, 512)
op716.sizes = ([392], [512])
buf714_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf716_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op716_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf714', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf716', get_index_1, getitem_1)
        return store_reduction
op714_op715_op716_op718.snodes[3] =
op718: SchedulerNode(ComputedBuffer)
op718.writes = [MemoryDep('buf718', c0, {c0: 200704}, None)]
op718.unmet_dependencies = 
    [   MemoryDep('buf714', c0, {c0: 200704}, None),
        MemoryDep('buf715', c0, {c0: 392}, None),
        MemoryDep('buf716', c0, {c0: 392}, None)]
op718.met_dependencies = 
    [   MemoryDep('arg497_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg498_1', c1, {c0: 392, c1: 512}, None)]
op718.outputs = [
    buf718: ComputedBuffer
    buf718.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf718.users = [NodeUser(node=ExternKernelSchedulerNode(name='op719'), can_inplace=False, is_weak=False)]
]
op718.group.device = cuda:0
op718.group.iteration = (200704, 1)
op718.sizes = ([392, 512], [])
buf714_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf715_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf716_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg497_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg498_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf718_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op718_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf714', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf715', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf716', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg497_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg498_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf718', get_index_5, add_1, None)
        return store


op719: ExternKernelSchedulerNode(ExternKernelOut)
op719.writes = [StarDep(name='buf719', mode=None)]
op719.unmet_dependencies = [StarDep(name='buf718', mode=None)]
op719.met_dependencies = [StarDep(name='arg499_1', mode=None)]
op719.outputs = [
    buf719: ExternKernelOut
    buf719.layout = FixedLayout('cuda', torch.float32, size=[392, 2048], stride=[2048, 1])
    buf719.users = [NodeUser(node=SchedulerNode(name='op720'), can_inplace=True, is_weak=False)]
]
op719.node.kernel = extern_kernels.mm


op720: SchedulerNode(ComputedBuffer)
op720.writes = [MemoryDep('buf720', c0, {c0: 802816}, None)]
op720.unmet_dependencies = [MemoryDep('buf719', c0, {c0: 802816}, None)]
op720.met_dependencies = [MemoryDep('arg500_1', c1, {c0: 392, c1: 2048}, None)]
op720.outputs = [
    buf720: ComputedBuffer
    buf720.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 2048], stride=[100352, 2048, 1])
    buf720.users = [NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False)]
]
op720.group.device = cuda:0
op720.group.iteration = (802816, 1)
op720.sizes = ([392, 2048], [])
buf719_layout = FixedLayout('cuda', torch.float32, size=[392, 2048], stride=[2048, 1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf720_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 2048], stride=[100352, 2048, 1])
class op720_loop_body:
    var_ranges = {z0: 392, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf719', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg500_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf719', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg500_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf720', get_index_4, mul_2, None)
        return store


op721: ExternKernelSchedulerNode(ExternKernelOut)
op721.writes = [StarDep(name='buf721', mode=None)]
op721.unmet_dependencies = [StarDep(name='buf720', mode=None)]
op721.met_dependencies = [StarDep(name='arg501_1', mode=None)]
op721.outputs = [
    buf721: ExternKernelOut
    buf721.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf721.users = [
        NodeUser(node=SchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op724'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op725'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op734'), can_inplace=True, is_weak=False),
    ]
]
op721.node.kernel = extern_kernels.mm


op722_op723_op725: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op722_op723_op725.writes = 
    [   MemoryDep('buf722', c0, {c0: 392}, None),
        MemoryDep('buf723', c0, {c0: 392}, None),
        MemoryDep('buf725', c0, {c0: 200704}, None)]
op722_op723_op725.unmet_dependencies = 
    [   MemoryDep('buf714', c0, {c0: 200704}, None),
        MemoryDep('buf721', c0, {c0: 200704}, None)]
op722_op723_op725.met_dependencies = 
    [   MemoryDep('arg502_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg503_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg504_1', c1, {c0: 392, c1: 512}, None)]
op722_op723_op725.outputs = [
    buf722: ComputedBuffer
    buf722.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf722.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
    buf723: ComputedBuffer
    buf723.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf723.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
    buf725: ComputedBuffer
    buf725.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf725.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op727'), can_inplace=False, is_weak=False),
    ]
]
op722_op723_op725.snodes[0] =
op722: SchedulerNode(ComputedBuffer)
op722.writes = [MemoryDep('buf722', c0, {c0: 392}, None)]
op722.unmet_dependencies = 
    [   MemoryDep('buf714', c0, {c0: 200704}, None),
        MemoryDep('buf721', c0, {c0: 200704}, None)]
op722.met_dependencies = [MemoryDep('arg502_1', c1, {c0: 392, c1: 512}, None)]
op722.outputs = [
    buf722: ComputedBuffer
    buf722.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf722.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
]
op722.group.device = cuda:0
op722.group.iteration = (392, 512)
op722.sizes = ([392], [512])
buf714_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf722_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op722_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf714', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf721', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg502_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf722', get_index_3, getitem)
        return store_reduction
op722_op723_op725.snodes[1] =
op723: SchedulerNode(ComputedBuffer)
op723.writes = [MemoryDep('buf723', c0, {c0: 392}, None)]
op723.unmet_dependencies = 
    [   MemoryDep('buf714', c0, {c0: 200704}, None),
        MemoryDep('buf721', c0, {c0: 200704}, None)]
op723.met_dependencies = [MemoryDep('arg502_1', c1, {c0: 392, c1: 512}, None)]
op723.outputs = [
    buf723: ComputedBuffer
    buf723.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf723.users = [NodeUser(node=SchedulerNode(name='op725'), can_inplace=False, is_weak=False)]
]
op723.group.device = cuda:0
op723.group.iteration = (392, 512)
op723.sizes = ([392], [512])
buf714_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf723_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op723_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf714', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf721', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg502_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf723', get_index_3, getitem_1)
        return store_reduction
op722_op723_op725.snodes[2] =
op725: SchedulerNode(ComputedBuffer)
op725.writes = [MemoryDep('buf725', c0, {c0: 200704}, None)]
op725.unmet_dependencies = 
    [   MemoryDep('buf714', c0, {c0: 200704}, None),
        MemoryDep('buf721', c0, {c0: 200704}, None),
        MemoryDep('buf722', c0, {c0: 392}, None),
        MemoryDep('buf723', c0, {c0: 392}, None)]
op725.met_dependencies = 
    [   MemoryDep('arg502_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg503_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg504_1', c1, {c0: 392, c1: 512}, None)]
op725.outputs = [
    buf725: ComputedBuffer
    buf725.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf725.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op727'), can_inplace=False, is_weak=False),
    ]
]
op725.group.device = cuda:0
op725.group.iteration = (200704, 1)
op725.sizes = ([392, 512], [])
buf714_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf722_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf723_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg503_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf725_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op725_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf714', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf721', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg502_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf722', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf723', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg503_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg504_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf725', get_index_7, add_3, None)
        return store


op726: ExternKernelSchedulerNode(ExternKernelOut)
op726.writes = [StarDep(name='buf726', mode=None)]
op726.unmet_dependencies = [StarDep(name='buf725', mode=None)]
op726.met_dependencies = [StarDep(name='arg507_1', mode=None), StarDep(name='arg508_1', mode=None)]
op726.outputs = [
    buf726: ExternKernelOut
    buf726.layout = FixedLayout('cuda', torch.float32, size=[392, 1024], stride=[1024, 1])
    buf726.users = [NodeUser(node=ExternKernelSchedulerNode(name='op728'), can_inplace=False, is_weak=False)]
]
op726.node.kernel = extern_kernels.addmm


op727: ExternKernelSchedulerNode(ExternKernelOut)
op727.writes = [StarDep(name='buf727', mode=None)]
op727.unmet_dependencies = [StarDep(name='buf725', mode=None)]
op727.met_dependencies = [StarDep(name='arg505_1', mode=None), StarDep(name='arg506_1', mode=None)]
op727.outputs = [
    buf727: ExternKernelOut
    buf727.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf727.users = [NodeUser(node=ExternKernelSchedulerNode(name='op728'), can_inplace=False, is_weak=False)]
]
op727.node.kernel = extern_kernels.addmm


op728: ExternKernelSchedulerNode(FallbackKernel)
op728.writes = [StarDep(name='buf728', mode=None)]
op728.unmet_dependencies = [StarDep(name='buf726', mode=None), StarDep(name='buf727', mode=None)]
op728.met_dependencies = []
op728.outputs = [
    buf728: FallbackKernel
    buf728.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf728.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op730'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op731'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op732'), can_inplace=False, is_weak=False),
    ]
]
op728.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op729: ExternKernelSchedulerNode(MultiOutput)
op729.writes = [StarDep(name='buf729', mode=None)]
op729.unmet_dependencies = [StarDep(name='buf728', mode=None)]
op729.met_dependencies = []
op729.outputs = [
    buf729: MultiOutput
    buf729.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 49, 64], stride=[25088, 64, 512, 1])
    buf729.users = [NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False)]
]
op729.node.kernel = None


op733: ExternKernelSchedulerNode(ExternKernelOut)
op733.writes = [StarDep(name='buf733', mode=None)]
op733.unmet_dependencies = [StarDep(name='buf729', mode=None)]
op733.met_dependencies = [StarDep(name='arg509_1', mode=None)]
op733.outputs = [
    buf733: ExternKernelOut
    buf733.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf733.users = [NodeUser(node=SchedulerNode(name='op734'), can_inplace=True, is_weak=False)]
]
op733.node.kernel = extern_kernels.mm


op734_op735_op736_op738: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op734_op735_op736_op738.writes = 
    [   MemoryDep('buf734', c0, {c0: 200704}, None),
        MemoryDep('buf735', c0, {c0: 392}, None),
        MemoryDep('buf736', c0, {c0: 392}, None),
        MemoryDep('buf738', c0, {c0: 200704}, None)]
op734_op735_op736_op738.unmet_dependencies = 
    [   MemoryDep('buf714', c0, {c0: 200704}, None),
        MemoryDep('buf721', c0, {c0: 200704}, None),
        MemoryDep('buf733', c0, {c0: 200704}, None)]
op734_op735_op736_op738.met_dependencies = 
    [   MemoryDep('arg502_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg510_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg511_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg512_1', c1, {c0: 392, c1: 512}, None)]
op734_op735_op736_op738.outputs = [
    buf734: ComputedBuffer
    buf734.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf734.users = [
        NodeUser(node=SchedulerNode(name='op735'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op736'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op738'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
    ]
    buf735: ComputedBuffer
    buf735.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf735.users = [NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False)]
    buf736: ComputedBuffer
    buf736.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf736.users = [NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False)]
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf738.users = [NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False)]
]
op734_op735_op736_op738.snodes[0] =
op734: SchedulerNode(ComputedBuffer)
op734.writes = [MemoryDep('buf734', c0, {c0: 200704}, None)]
op734.unmet_dependencies = 
    [   MemoryDep('buf714', c0, {c0: 200704}, None),
        MemoryDep('buf721', c0, {c0: 200704}, None),
        MemoryDep('buf733', c0, {c0: 200704}, None)]
op734.met_dependencies = 
    [   MemoryDep('arg502_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg510_1', c1, {c0: 392, c1: 512}, None)]
op734.outputs = [
    buf734: ComputedBuffer
    buf734.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf734.users = [
        NodeUser(node=SchedulerNode(name='op735'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op736'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op737'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op738'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
    ]
]
op734.group.device = cuda:0
op734.group.iteration = (200704, 1)
op734.sizes = ([392, 512], [])
buf714_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf721_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf733_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op734_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf714', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf721', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg502_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf733', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg510_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf734', get_index_5, add_3, None)
        return store
op734_op735_op736_op738.snodes[1] =
op735: SchedulerNode(ComputedBuffer)
op735.writes = [MemoryDep('buf735', c0, {c0: 392}, None)]
op735.unmet_dependencies = [MemoryDep('buf734', c0, {c0: 200704}, None)]
op735.met_dependencies = []
op735.outputs = [
    buf735: ComputedBuffer
    buf735.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf735.users = [NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False)]
]
op735.group.device = cuda:0
op735.group.iteration = (392, 512)
op735.sizes = ([392], [512])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf735_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op735_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf734', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf735', get_index_1, getitem)
        return store_reduction
op734_op735_op736_op738.snodes[2] =
op736: SchedulerNode(ComputedBuffer)
op736.writes = [MemoryDep('buf736', c0, {c0: 392}, None)]
op736.unmet_dependencies = [MemoryDep('buf734', c0, {c0: 200704}, None)]
op736.met_dependencies = []
op736.outputs = [
    buf736: ComputedBuffer
    buf736.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf736.users = [NodeUser(node=SchedulerNode(name='op738'), can_inplace=False, is_weak=False)]
]
op736.group.device = cuda:0
op736.group.iteration = (392, 512)
op736.sizes = ([392], [512])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf736_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op736_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf734', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf736', get_index_1, getitem_1)
        return store_reduction
op734_op735_op736_op738.snodes[3] =
op738: SchedulerNode(ComputedBuffer)
op738.writes = [MemoryDep('buf738', c0, {c0: 200704}, None)]
op738.unmet_dependencies = 
    [   MemoryDep('buf734', c0, {c0: 200704}, None),
        MemoryDep('buf735', c0, {c0: 392}, None),
        MemoryDep('buf736', c0, {c0: 392}, None)]
op738.met_dependencies = 
    [   MemoryDep('arg511_1', c1, {c0: 392, c1: 512}, None),
        MemoryDep('arg512_1', c1, {c0: 392, c1: 512}, None)]
op738.outputs = [
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
    buf738.users = [NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False)]
]
op738.group.device = cuda:0
op738.group.iteration = (200704, 1)
op738.sizes = ([392, 512], [])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf735_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf736_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg511_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf738_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
class op738_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf734', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf735', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf736', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg511_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg512_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf738', get_index_5, add_1, None)
        return store


op739: ExternKernelSchedulerNode(ExternKernelOut)
op739.writes = [StarDep(name='buf739', mode=None)]
op739.unmet_dependencies = [StarDep(name='buf738', mode=None)]
op739.met_dependencies = [StarDep(name='arg513_1', mode=None)]
op739.outputs = [
    buf739: ExternKernelOut
    buf739.layout = FixedLayout('cuda', torch.float32, size=[392, 2048], stride=[2048, 1])
    buf739.users = [NodeUser(node=SchedulerNode(name='op740'), can_inplace=True, is_weak=False)]
]
op739.node.kernel = extern_kernels.mm


op740: SchedulerNode(ComputedBuffer)
op740.writes = [MemoryDep('buf740', c0, {c0: 802816}, None)]
op740.unmet_dependencies = [MemoryDep('buf739', c0, {c0: 802816}, None)]
op740.met_dependencies = [MemoryDep('arg514_1', c1, {c0: 392, c1: 2048}, None)]
op740.outputs = [
    buf740: ComputedBuffer
    buf740.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 2048], stride=[100352, 2048, 1])
    buf740.users = [NodeUser(node=ExternKernelSchedulerNode(name='op741'), can_inplace=False, is_weak=False)]
]
op740.group.device = cuda:0
op740.group.iteration = (802816, 1)
op740.sizes = ([392, 2048], [])
buf739_layout = FixedLayout('cuda', torch.float32, size=[392, 2048], stride=[2048, 1])
arg514_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf740_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 2048], stride=[100352, 2048, 1])
class op740_loop_body:
    var_ranges = {z0: 392, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf739', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg514_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf739', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg514_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf740', get_index_4, mul_2, None)
        return store


op741: ExternKernelSchedulerNode(ExternKernelOut)
op741.writes = [StarDep(name='buf741', mode=None)]
op741.unmet_dependencies = [StarDep(name='buf740', mode=None)]
op741.met_dependencies = [StarDep(name='arg515_1', mode=None)]
op741.outputs = [
    buf741: ExternKernelOut
    buf741.layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
    buf741.users = [
        NodeUser(node=SchedulerNode(name='op742'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op743'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False),
    ]
]
op741.node.kernel = extern_kernels.mm


op742_op743: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op742_op743.writes = 
    [   MemoryDep('buf742', c0, {c0: 392}, None),
        MemoryDep('buf743', c0, {c0: 392}, None)]
op742_op743.unmet_dependencies = 
    [   MemoryDep('buf734', c0, {c0: 200704}, None),
        MemoryDep('buf741', c0, {c0: 200704}, None)]
op742_op743.met_dependencies = [MemoryDep('arg516_1', c1, {c0: 392, c1: 512}, None)]
op742_op743.outputs = [
    buf742: ComputedBuffer
    buf742.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf742.users = [NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False)]
    buf743: ComputedBuffer
    buf743.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf743.users = [NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False)]
]
op742_op743.snodes[0] =
op742: SchedulerNode(ComputedBuffer)
op742.writes = [MemoryDep('buf742', c0, {c0: 392}, None)]
op742.unmet_dependencies = 
    [   MemoryDep('buf734', c0, {c0: 200704}, None),
        MemoryDep('buf741', c0, {c0: 200704}, None)]
op742.met_dependencies = [MemoryDep('arg516_1', c1, {c0: 392, c1: 512}, None)]
op742.outputs = [
    buf742: ComputedBuffer
    buf742.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf742.users = [NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False)]
]
op742.group.device = cuda:0
op742.group.iteration = (392, 512)
op742.sizes = ([392], [512])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf741_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg516_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf742_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op742_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf734', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf741', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg516_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf742', get_index_3, getitem)
        return store_reduction
op742_op743.snodes[1] =
op743: SchedulerNode(ComputedBuffer)
op743.writes = [MemoryDep('buf743', c0, {c0: 392}, None)]
op743.unmet_dependencies = 
    [   MemoryDep('buf734', c0, {c0: 200704}, None),
        MemoryDep('buf741', c0, {c0: 200704}, None)]
op743.met_dependencies = [MemoryDep('arg516_1', c1, {c0: 392, c1: 512}, None)]
op743.outputs = [
    buf743: ComputedBuffer
    buf743.layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
    buf743.users = [NodeUser(node=SchedulerNode(name='op745'), can_inplace=False, is_weak=False)]
]
op743.group.device = cuda:0
op743.group.iteration = (392, 512)
op743.sizes = ([392], [512])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf741_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg516_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf743_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
class op743_loop_body:
    var_ranges = {z0: 392, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf734', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf741', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg516_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf743', get_index_3, getitem_1)
        return store_reduction


op745_op746: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op745_op746.writes = 
    [   MemoryDep('buf745', c0, {c0: 4096}, None),
        MemoryDep('buf746', c0, {c0: 4096}, None)]
op745_op746.unmet_dependencies = 
    [   MemoryDep('buf734', 25088*c0 + c1 + 512*c2, {c0: 8, c1: 512, c2: 49}, None),
        MemoryDep('buf741', 25088*c0 + c1 + 512*c2, {c0: 8, c1: 512, c2: 49}, None),
        MemoryDep('buf742', 49*c0 + c2, {c0: 8, c1: 512, c2: 49}, None),
        MemoryDep('buf743', 49*c0 + c2, {c0: 8, c1: 512, c2: 49}, None)]
op745_op746.met_dependencies = 
    [   MemoryDep('arg516_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg517_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg518_1', c1, {c0: 8, c1: 512}, None)]
op745_op746.outputs = [
    buf745: ComputedBuffer
    buf745.layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
    buf745.users = [NodeUser(node=SchedulerNode(name='op746'), can_inplace=True, is_weak=False)]
    buf746: ComputedBuffer
    buf746.layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
    buf746.users = [NodeUser(node=ExternKernelSchedulerNode(name='op747'), can_inplace=False, is_weak=False)]
]
op745_op746.snodes[0] =
op745: SchedulerNode(ComputedBuffer)
op745.writes = [MemoryDep('buf745', c0, {c0: 4096}, None)]
op745.unmet_dependencies = 
    [   MemoryDep('buf734', 25088*c0 + c1 + 512*c2, {c0: 8, c1: 512, c2: 49}, None),
        MemoryDep('buf741', 25088*c0 + c1 + 512*c2, {c0: 8, c1: 512, c2: 49}, None),
        MemoryDep('buf742', 49*c0 + c2, {c0: 8, c1: 512, c2: 49}, None),
        MemoryDep('buf743', 49*c0 + c2, {c0: 8, c1: 512, c2: 49}, None)]
op745.met_dependencies = 
    [   MemoryDep('arg516_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg517_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg518_1', c1, {c0: 8, c1: 512}, None)]
op745.outputs = [
    buf745: ComputedBuffer
    buf745.layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
    buf745.users = [NodeUser(node=SchedulerNode(name='op746'), can_inplace=True, is_weak=False)]
]
op745.group.device = cuda:0
op745.group.iteration = (4096, 49)
op745.sizes = ([8, 512], [49])
buf734_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 512], stride=[25088, 512, 1])
buf741_layout = FixedLayout('cuda', torch.float32, size=[392, 512], stride=[512, 1])
arg516_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf742_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
buf743_layout = FixedLayout('cuda', torch.float32, size=[8, 49, 1], stride=[49, 1, 392])
arg517_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg518_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf745_layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
class op745_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 49}
    index0 = 25088*z0 + z1 + 512*z2
    index1 = z1
    index2 = 49*z0 + z2
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf734', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf741', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg516_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf742', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf743', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg517_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg518_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_3)
        get_index_7 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf745', get_index_7, reduction)
        return store_reduction
op745_op746.snodes[1] =
op746: SchedulerNode(ComputedBuffer)
op746.writes = [MemoryDep('buf746', c0, {c0: 4096}, None)]
op746.unmet_dependencies = [MemoryDep('buf745', c0, {c0: 4096}, None)]
op746.met_dependencies = []
op746.outputs = [
    buf746: ComputedBuffer
    buf746.layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
    buf746.users = [NodeUser(node=ExternKernelSchedulerNode(name='op747'), can_inplace=False, is_weak=False)]
]
op746.group.device = cuda:0
op746.group.iteration = (4096, 1)
op746.sizes = ([4096], [])
buf745_layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
buf746_layout = FixedLayout('cuda', torch.float32, size=[8, 512], stride=[512, 1])
class op746_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf745', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf746', get_index_1, truediv, None)
        return store


op747: ExternKernelSchedulerNode(ExternKernelOut)
op747.writes = [StarDep(name='buf747', mode=None)]
op747.unmet_dependencies = [StarDep(name='buf746', mode=None)]
op747.met_dependencies = [StarDep(name='arg519_1', mode=None), StarDep(name='arg520_1', mode=None)]
op747.outputs = [
    buf747: ExternKernelOut
    buf747.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf747.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op747.node.kernel = extern_kernels.addmm


